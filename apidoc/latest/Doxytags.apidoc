<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>Arpack.h</name>
    <path>/Users/as12312/Software/MIRTK/Maintenance/Modules/Numerics/include/mirtk/</path>
    <filename>Arpack_8h</filename>
  </compound>
  <compound kind="file">
    <name>ArrayHeap.h</name>
    <path>/Users/as12312/Software/MIRTK/Maintenance/Modules/Common/include/mirtk/</path>
    <filename>ArrayHeap_8h</filename>
    <namespace>mirtk</namespace>
  </compound>
  <compound kind="file">
    <name>DataOp.h</name>
    <path>/Users/as12312/Software/MIRTK/Maintenance/Modules/Image/include/mirtk/</path>
    <filename>DataOp_8h</filename>
    <class kind="class">mirtk::data::Op</class>
    <class kind="class">mirtk::data::Write</class>
    <namespace>mirtk</namespace>
    <member kind="enumeration">
      <type></type>
      <name>DataFileType</name>
      <anchorfile>DataOp_8h.html</anchorfile>
      <anchor>affdefedb9181ef98d189b8f56365b686</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>DataFileType</type>
      <name>FileType</name>
      <anchorfile>DataOp_8h.html</anchorfile>
      <anchor>a21fdb5f8b256d4265f0ed8cfe4f8c601</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Read</name>
      <anchorfile>DataOp_8h.html</anchorfile>
      <anchor>a289aa15a45f088eebd726446c1837b38</anchor>
      <arglist>(const char *name, UniquePtr&lt; double[]&gt; &amp;data, int *dtype=nullptr, ImageAttributes *attr=nullptr, void *=nullptr, const char *scalars_name=nullptr, bool cell_data=false)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Eigen.h</name>
    <path>/Users/as12312/Software/MIRTK/Maintenance/Modules/Numerics/include/mirtk/</path>
    <filename>Eigen_8h</filename>
    <namespace>mirtk</namespace>
  </compound>
  <compound kind="file">
    <name>Umfpack.h</name>
    <path>/Users/as12312/Software/MIRTK/Maintenance/Modules/Numerics/include/mirtk/</path>
    <filename>Umfpack_8h</filename>
    <namespace>mirtk</namespace>
    <member kind="function">
      <type>const char *</type>
      <name>umfpack_status_message</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a285456e1bfe2f727c80d6911a245d4f2</anchor>
      <arglist>(int status)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Utils.h</name>
    <path>/Users/as12312/Software/MIRTK/Maintenance/Modules/Common/include/mirtk/</path>
    <filename>Utils_8h</filename>
    <namespace>mirtk</namespace>
    <member kind="function">
      <type>double</type>
      <name>AverageInterval</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a3889bb394a84e5b6e34b0818617204eb</anchor>
      <arglist>(const OrderedSet&lt; double &gt; &amp;values)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ForEachVoxelDomain::AboveBackgroundLevel</name>
    <filename>structmirtk_1_1ForEachVoxelDomain_1_1AboveBackgroundLevel.html</filename>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::Abs</name>
    <filename>classmirtk_1_1data_1_1op_1_1Abs.html</filename>
    <base>mirtk::data::op::ElementWiseUnaryOp</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Op</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Abs.html</anchorfile>
      <anchor>aea1b5296ea682e68a3cbec7d9653b423</anchor>
      <arglist>(double value, bool &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Abs.html</anchorfile>
      <anchor>aefe8da91a3a34ee8d8ab4aba24215cd0</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::statistic::AbsPercentile</name>
    <filename>classmirtk_1_1data_1_1statistic_1_1AbsPercentile.html</filename>
    <base>mirtk::data::Statistic</base>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1data_1_1statistic_1_1AbsPercentile.html</anchorfile>
      <anchor>a56b279441b79b0200925a10bed52d4f1</anchor>
      <arglist>(Array&lt; double &gt; &amp;values, int n, const double *data, const bool *mask=nullptr) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::AdaptiveLineSearch</name>
    <filename>classmirtk_1_1AdaptiveLineSearch.html</filename>
    <base>mirtk::InexactLineSearch</base>
    <member kind="function">
      <type></type>
      <name>AdaptiveLineSearch</name>
      <anchorfile>classmirtk_1_1AdaptiveLineSearch.html</anchorfile>
      <anchor>a05f28f6f96b6110977b3e814e531a9c2</anchor>
      <arglist>(ObjectiveFunction *=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AdaptiveLineSearch</name>
      <anchorfile>classmirtk_1_1AdaptiveLineSearch.html</anchorfile>
      <anchor>ae18f327b55712c2c05287825070a6f51</anchor>
      <arglist>(const AdaptiveLineSearch &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1AdaptiveLineSearch.html</anchorfile>
      <anchor>a6e49678e1f862e6015460d4418d80d13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AdaptiveLineSearch &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1AdaptiveLineSearch.html</anchorfile>
      <anchor>a28b241ac4d2a8356e3f7a8f35704ff2d</anchor>
      <arglist>(const AdaptiveLineSearch &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1AdaptiveLineSearch.html</anchorfile>
      <anchor>afc448eca1489d12fd382928ac97eff4d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1AdaptiveLineSearch.html</anchorfile>
      <anchor>a8828b261b8e81dbbb64bc5c2af54c9be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1AdaptiveLineSearch.html</anchorfile>
      <anchor>aa4240816bac12ec60e6f6c06a09897f8</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AdaptiveLineSearch</name>
      <anchorfile>classmirtk_1_1AdaptiveLineSearch.html</anchorfile>
      <anchor>ad6959e8ed64f30a956cacb8b286bfb0c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::BinaryVoxelFunction::Add</name>
    <filename>structmirtk_1_1BinaryVoxelFunction_1_1Add.html</filename>
    <base>mirtk::VoxelFunction</base>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::Add</name>
    <filename>classmirtk_1_1data_1_1op_1_1Add.html</filename>
    <base>mirtk::data::op::ElementWiseBinaryOp</base>
    <member kind="function">
      <type></type>
      <name>Add</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Add.html</anchorfile>
      <anchor>a17793c37b0968fade50faf3c14b9d2dc</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Add</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Add.html</anchorfile>
      <anchor>a94701d4e57e8e2b20670b5f30c0c8c64</anchor>
      <arglist>(const double *value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Add</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Add.html</anchorfile>
      <anchor>a2ad7a8194abf23610eaf7dc5c860ddb1</anchor>
      <arglist>(const char *fname)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Op</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Add.html</anchorfile>
      <anchor>ac77aa79be693e39346dfcb01ee49f522</anchor>
      <arglist>(double value, double constant, bool &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Add.html</anchorfile>
      <anchor>a745b49445565297cb8aa37b8f1a7201a</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::AddBSplineSVFFD</name>
    <filename>classmirtk_1_1AddBSplineSVFFD.html</filename>
    <base>mirtk::VoxelFunction</base>
    <member kind="variable" protection="protected">
      <type>const BSplineFreeFormTransformationSV *</type>
      <name>_Input</name>
      <anchorfile>classmirtk_1_1AddBSplineSVFFD.html</anchorfile>
      <anchor>a7c901f9a41507cf5d215bf6170514ba6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseImage *</type>
      <name>_Output</name>
      <anchorfile>classmirtk_1_1AddBSplineSVFFD.html</anchorfile>
      <anchor>a3eb127d78ac4afbb9d760f0d9b6d6949</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::AddBSplineSVFFD3D</name>
    <filename>classmirtk_1_1AddBSplineSVFFD3D.html</filename>
    <base>mirtk::VoxelFunction</base>
  </compound>
  <compound kind="class">
    <name>mirtk::AddDOFsOfBSplineSVFFD</name>
    <filename>classmirtk_1_1AddDOFsOfBSplineSVFFD.html</filename>
    <base>mirtk::VoxelFunction</base>
    <member kind="variable" protection="protected">
      <type>const BSplineFreeFormTransformationSV *</type>
      <name>_Input</name>
      <anchorfile>classmirtk_1_1AddDOFsOfBSplineSVFFD.html</anchorfile>
      <anchor>a18a107004d70ccc2f5edbf6fd5a889d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseImage *</type>
      <name>_Output</name>
      <anchorfile>classmirtk_1_1AddDOFsOfBSplineSVFFD.html</anchorfile>
      <anchor>aa1727a013ad0c6c278609ca00f022f6d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::AffineTransformation</name>
    <filename>classmirtk_1_1AffineTransformation.html</filename>
    <base>mirtk::SimilarityTransformation</base>
    <member kind="function">
      <type></type>
      <name>AffineTransformation</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>adf72969d8d5ef68df7764697e67249a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AffineTransformation</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>abbb2e2e429e87f56e54305abab1b1dc5</anchor>
      <arglist>(const RigidTransformation &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AffineTransformation</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>aa9e56ac5c16959837743e2ad437e8849</anchor>
      <arglist>(const SimilarityTransformation &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AffineTransformation</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a10c61db146ae893e264a0702b1ab0e54</anchor>
      <arglist>(const AffineTransformation &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllowRotations</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>aca3ab7f8c26521b82435e87b3cbcde64</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AllowRotations</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a80115f90c0b564639ecfc33af9765d88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllowScaling</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a2affac6f28bd729f0c29a61d57b7cf67</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AllowScaling</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a4355c38f0321d8417a0249b6fb04e031</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllowShearing</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a38b6a96e6a656ccc85d79a57825458c9</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AllowShearing</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a3e4ab0fc00d849803517ac9b5ffde196</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllowTranslations</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a1f8843d3580c10e2ff43297810b9628e</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AllowTranslations</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>afe8f87d4ffb36ee5b98fc70141f55660</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFs</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a8fb704d6eba7fb08835b34f9bdcb7a45</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CanRead</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a67ad2b870265ee7a6bc0f75e13c94057</anchor>
      <arglist>(TransformationType) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>aeb6e733e30d6d9110e7afc4428b68164</anchor>
      <arglist>(const Transformation *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DeriveJacobianWrtDOF</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>adac6842f3b24e94533823cdd10e94a15</anchor>
      <arglist>(Matrix &amp;, int, double, double, double, double=0, double=-1) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetScale</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>acc910cb3b001210eb1cc44a780b086ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetScaleX</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a482b03cc1dca339e15961448d84017ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetScaleY</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>aece4b1c0848b84a16cd873edcdcff10f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetScaleZ</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a9db881c791d33d7f321a37a073cb35e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetShearXY</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a7bb120ccbed97dbd5ce00a9572db0b8e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetShearXZ</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>ae0ccf87399aa81dc2611f46510e0128d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetShearYZ</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a2110173a8401b49b4039d90397f811f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>ab4d6260f4baf2634038ddba9ae446c83</anchor>
      <arglist>(double [3], int, double, double, double, double=0, double=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>aff393a502db61e9c12fb01fb232e4e3e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a99efe778764b6f474aae09000d0997e5</anchor>
      <arglist>(ostream &amp;, Indent=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutScale</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a51fa6e3551ba678a4b2ffe6ce30e74ff</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutScaleX</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a33c6176f3552a5c0d7f63ecdec68a7ab</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutScaleY</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a1092b2d1c449a771747fe3b7f196f471</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutScaleZ</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a3a221c008bf4d17e24ed129434a8d55a</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutShearXY</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a2802ffe56c834ebd54e77443fe55ace2</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutShearXZ</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>af8e8746b6ca3078992be1eb19d3ad6fd</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutShearYZ</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a160b024303c5e878ca81e988734b411e</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a9b38a9f1a6953d7dfa1889844db7ea36</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>UpdateDOFs</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a06c2b49f59b41c01d5e78fbe390c4645</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>UpdateMatrix</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a7b9165f5d2d47d44d27414d057b0ae84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cofstream &amp;</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>ae6fd7c603dcd71f14af2c571a2bc06c0</anchor>
      <arglist>(Cofstream &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AffineTransformation</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a75e33a0f7e43bff01361f0ec08625b11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix</type>
      <name>DOFs2Matrix</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a61078e233611bbd291ab08cc81d0ee7f</anchor>
      <arglist>(const double *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Matrix2DOFs</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a3a78dbe06aaeb3e6f5f4d3a6b71b178d</anchor>
      <arglist>(const Matrix &amp;, double *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AffineTransformation</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a5ee2ac3f174024e775058c7f87897c10</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AffineTransformation</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>ab066a3b841f8e6988e562f96a365cfa4</anchor>
      <arglist>(const RigidTransformation &amp;, int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AffineTransformation</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a64bc8db9ded2a1532bf9986695a72c48</anchor>
      <arglist>(const SimilarityTransformation &amp;, int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AffineTransformation</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>aae848122cdfdd4a0dc6944345585a1b8</anchor>
      <arglist>(const AffineTransformation &amp;, int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Cifstream &amp;</type>
      <name>ReadDOFs</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>acce2766283d447951ee1f2f57615d95a</anchor>
      <arglist>(Cifstream &amp;, TransformationType)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UpdateShearingTangent</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a13fa48c2790b90dce01587e5ef6fe826</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_tansxy</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>abcd20ab78f2dc6a971470342abf51178</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_tansxz</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a92c057aad1c014fe4c6c6d0c73a3c867</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_tansyz</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>ad757a58a3fd1697f4a468eaa083ec02a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::AsConformalAsPossibleMapper</name>
    <filename>classmirtk_1_1AsConformalAsPossibleMapper.html</filename>
    <base>mirtk::LinearTetrahedralMeshMapper</base>
    <member kind="function">
      <type></type>
      <name>AsConformalAsPossibleMapper</name>
      <anchorfile>classmirtk_1_1AsConformalAsPossibleMapper.html</anchorfile>
      <anchor>a8ca32da92fa2e7d1da2bf7faf52bcca1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AsConformalAsPossibleMapper</name>
      <anchorfile>classmirtk_1_1AsConformalAsPossibleMapper.html</anchorfile>
      <anchor>adacd5bfc3a486a1d3e19f765f700c653</anchor>
      <arglist>(const AsConformalAsPossibleMapper &amp;)</arglist>
    </member>
    <member kind="function">
      <type>AsConformalAsPossibleMapper &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1AsConformalAsPossibleMapper.html</anchorfile>
      <anchor>a705a3f5eb752f382700d9d2b0ed6334e</anchor>
      <arglist>(const AsConformalAsPossibleMapper &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AsConformalAsPossibleMapper</name>
      <anchorfile>classmirtk_1_1AsConformalAsPossibleMapper.html</anchorfile>
      <anchor>abee7e3fa501b1bc0ac5a5056963ddc14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1AsConformalAsPossibleMapper.html</anchorfile>
      <anchor>aaa55df9db0bff8f09427e832b5a7c8c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Matrix3x3</type>
      <name>GetWeight</name>
      <anchorfile>classmirtk_1_1AsConformalAsPossibleMapper.html</anchorfile>
      <anchor>a413f70ad0bf11f35d0347f5ffdc78ddb</anchor>
      <arglist>(vtkIdType cellId, const double v0[3], const double v1[3], const double v2[3], const double v3[3], double volume) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1AsConformalAsPossibleMapper.html</anchorfile>
      <anchor>ad7598d2f8b377ec27b0603de8113e79d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::AuthalicSurfaceMapper</name>
    <filename>classmirtk_1_1AuthalicSurfaceMapper.html</filename>
    <base>mirtk::NonSymmetricWeightsSurfaceMapper</base>
    <member kind="function">
      <type></type>
      <name>AuthalicSurfaceMapper</name>
      <anchorfile>classmirtk_1_1AuthalicSurfaceMapper.html</anchorfile>
      <anchor>a05b9a7e080dc812d0b7c0aa7974450e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AuthalicSurfaceMapper</name>
      <anchorfile>classmirtk_1_1AuthalicSurfaceMapper.html</anchorfile>
      <anchor>ab3000493ddda724cc6028c6da369605b</anchor>
      <arglist>(const AuthalicSurfaceMapper &amp;)</arglist>
    </member>
    <member kind="function">
      <type>AuthalicSurfaceMapper &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1AuthalicSurfaceMapper.html</anchorfile>
      <anchor>af5ceb12911006174004e05f45a6ee67b</anchor>
      <arglist>(const AuthalicSurfaceMapper &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AuthalicSurfaceMapper</name>
      <anchorfile>classmirtk_1_1AuthalicSurfaceMapper.html</anchorfile>
      <anchor>a5b6afdc786eac529373e0c43efa8dc7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Weight</name>
      <anchorfile>classmirtk_1_1AuthalicSurfaceMapper.html</anchorfile>
      <anchor>ad961ff42787a4f27fd049589bc6917c3</anchor>
      <arglist>(int i, int j) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::statistic::AverageAbsoluteDifference</name>
    <filename>classmirtk_1_1data_1_1statistic_1_1AverageAbsoluteDifference.html</filename>
    <base>mirtk::data::Statistic</base>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1data_1_1statistic_1_1AverageAbsoluteDifference.html</anchorfile>
      <anchor>a07932502e21b7e3f62bb45ce6c839cd3</anchor>
      <arglist>(Array&lt; double &gt; &amp;values, int n, const double *data, const bool *mask=nullptr) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ForEachVoxelDomain::Background</name>
    <filename>structmirtk_1_1ForEachVoxelDomain_1_1Background.html</filename>
  </compound>
  <compound kind="struct">
    <name>mirtk::ForEachVoxelDomain::BackgroundValue</name>
    <filename>structmirtk_1_1ForEachVoxelDomain_1_1BackgroundValue.html</filename>
  </compound>
  <compound kind="class">
    <name>mirtk::BalloonForce</name>
    <filename>classmirtk_1_1BalloonForce.html</filename>
    <base>mirtk::SurfaceForce</base>
    <member kind="function">
      <type></type>
      <name>BalloonForce</name>
      <anchorfile>classmirtk_1_1BalloonForce.html</anchorfile>
      <anchor>a02fbdf434031a2fb24e632397c7c13a4</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BalloonForce</name>
      <anchorfile>classmirtk_1_1BalloonForce.html</anchorfile>
      <anchor>a9c2e9d9a92f92d3a71ca019b105d6fa9</anchor>
      <arglist>(const BalloonForce &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1BalloonForce.html</anchorfile>
      <anchor>a477776ec7d1832cefa02f66ce32b1dcc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BalloonForce &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1BalloonForce.html</anchorfile>
      <anchor>a5f3af5b0b48057d0e2db9b18c9346d58</anchor>
      <arglist>(const BalloonForce &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1BalloonForce.html</anchorfile>
      <anchor>aa49393bd252f840dce3f4459195f2475</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1BalloonForce.html</anchorfile>
      <anchor>a90503cda8bfc41801ecafc6818ed8d05</anchor>
      <arglist>(bool=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BalloonForce</name>
      <anchorfile>classmirtk_1_1BalloonForce.html</anchorfile>
      <anchor>aa52c5c931ba032d3b2e88ccc7cdc44cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ComputeLocalIntensityAttributes</name>
      <anchorfile>classmirtk_1_1BalloonForce.html</anchorfile>
      <anchor>a6819a8e332e21152c33681a028fc0c82</anchor>
      <arglist>(bool, bool)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CopyAttributes</name>
      <anchorfile>classmirtk_1_1BalloonForce.html</anchorfile>
      <anchor>a325d2dadb5aac4752fb78fb318fc0ad6</anchor>
      <arglist>(const BalloonForce &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1BalloonForce.html</anchorfile>
      <anchor>abae0129732f1a3456afb80c6164cb63c</anchor>
      <arglist>(double *, double, double)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithoutPrefix</name>
      <anchorfile>classmirtk_1_1BalloonForce.html</anchorfile>
      <anchor>a435fd50d60def09adb78cea9863afe19</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::MultipleVoxelTransformation::Base</name>
    <filename>classmirtk_1_1MultipleVoxelTransformation_1_1Base.html</filename>
    <base>mirtk::VoxelFunction</base>
    <member kind="function">
      <type>T &amp;</type>
      <name>x_</name>
      <anchorfile>classmirtk_1_1MultipleVoxelTransformation_1_1Base.html</anchorfile>
      <anchor>ab1763cf42d0c7402ea1ff6e839631cf2</anchor>
      <arglist>(T *p) const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>x_</name>
      <anchorfile>classmirtk_1_1MultipleVoxelTransformation_1_1Base.html</anchorfile>
      <anchor>aca3bbaab8d7204514f03aca84c0f5ba6</anchor>
      <arglist>(const T *p) const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>y_</name>
      <anchorfile>classmirtk_1_1MultipleVoxelTransformation_1_1Base.html</anchorfile>
      <anchor>a408eb5075dd492f171cacc8109407e50</anchor>
      <arglist>(T *p) const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>y_</name>
      <anchorfile>classmirtk_1_1MultipleVoxelTransformation_1_1Base.html</anchorfile>
      <anchor>abdd18fdb32f1ce9b9a2c1ca07241bcd4</anchor>
      <arglist>(const T *p) const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>z_</name>
      <anchorfile>classmirtk_1_1MultipleVoxelTransformation_1_1Base.html</anchorfile>
      <anchor>a31ffe8158d1a74b9c55ffbd40ae80810</anchor>
      <arglist>(T *p) const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>z_</name>
      <anchorfile>classmirtk_1_1MultipleVoxelTransformation_1_1Base.html</anchorfile>
      <anchor>aa415f7fb7dcb714fc1db520635bb033f</anchor>
      <arglist>(const T *p) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Base</name>
      <anchorfile>classmirtk_1_1MultipleVoxelTransformation_1_1Base.html</anchorfile>
      <anchor>ae2d6de1f4adbf9f1d4e59c3d3d82bf32</anchor>
      <arglist>(int numvox=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Base</name>
      <anchorfile>classmirtk_1_1MultipleVoxelTransformation_1_1Base.html</anchorfile>
      <anchor>aff41b5795422e23cb147dc9f90a0ff15</anchor>
      <arglist>(const Base &amp;other)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_NumberOfVoxels</name>
      <anchorfile>classmirtk_1_1MultipleVoxelTransformation_1_1Base.html</anchorfile>
      <anchor>af6ca60a7b686ff0c8900f1b7e50388d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_TwiceNumberOfVoxels</name>
      <anchorfile>classmirtk_1_1MultipleVoxelTransformation_1_1Base.html</anchorfile>
      <anchor>a863b3d86a042ba203dcb3bfee1a7e5bf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::BaseImage</name>
    <filename>classmirtk_1_1BaseImage.html</filename>
    <base>mirtk::Object</base>
    <member kind="enumvalue">
      <name>A2P</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a299eb7f11bb568c28d3435d12e65ecf2a498790278794d01ec12f31be8e3d629e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>I2S</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a299eb7f11bb568c28d3435d12e65ecf2a81024901d63ea23eea923d2e5533c0a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>L2R</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a299eb7f11bb568c28d3435d12e65ecf2a4ce1c630fb3a7192cff6eeaed1090b96</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>OrientationCode</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a299eb7f11bb568c28d3435d12e65ecf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>L2R</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a299eb7f11bb568c28d3435d12e65ecf2a4ce1c630fb3a7192cff6eeaed1090b96</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>R2L</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a299eb7f11bb568c28d3435d12e65ecf2a495c4ba98714aeaf4d91ea3c5366958c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>P2A</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a299eb7f11bb568c28d3435d12e65ecf2a9314a50d2db7ba318b944fa7584fddfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>A2P</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a299eb7f11bb568c28d3435d12e65ecf2a498790278794d01ec12f31be8e3d629e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>I2S</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a299eb7f11bb568c28d3435d12e65ecf2a81024901d63ea23eea923d2e5533c0a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>S2I</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a299eb7f11bb568c28d3435d12e65ecf2aa7905c0e7d1a8e48c10841a607bba0e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>P2A</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a299eb7f11bb568c28d3435d12e65ecf2a9314a50d2db7ba318b944fa7584fddfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>R2L</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a299eb7f11bb568c28d3435d12e65ecf2a495c4ba98714aeaf4d91ea3c5366958c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>S2I</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a299eb7f11bb568c28d3435d12e65ecf2aa7905c0e7d1a8e48c10841a607bba0e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>VoxelType</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a8f8932e7c68d9565f01e417805c339f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const ImageAttributes &amp;</type>
      <name>Attributes</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>acc277b7e56c77e6650ea1e5b08702429</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ad5b09140f9f7197085d45d8d9e9c970b</anchor>
      <arglist>(int &amp;, int &amp;, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a3fa2a6710fbb7ed57d050493310c6fc2</anchor>
      <arglist>(int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>aa6b92a7fd5932b2f9af30e364540fe29</anchor>
      <arglist>(int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>CenterOfForeground</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>afecc0be22d2730e6877958e10ebae2d1</anchor>
      <arglist>(Point &amp;center) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>CenterOfForeground</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a5c396376390900ae2fa3c1ba87eab4b9</anchor>
      <arglist>(Point &amp;center, double padding) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>af90311a919e1d7b264995e0d44243f3b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearBackgroundValue</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ac1815323e508d8bf4577b555c47a5b93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearMask</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>acdf3e4bcd6dc95ad93908f716a43145a</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BaseImage *</type>
      <name>Copy</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ae45d6d613c59e3dae75460eb4cdea496</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>FlipXT</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a1f321660c32221db408c2ed8f65cd13e</anchor>
      <arglist>(bool modify_origin=false)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>FlipXY</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a2c13fde374ce47bf664d7ee2d6c5f402</anchor>
      <arglist>(bool modify_origin=false)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>FlipXZ</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>acd371c817160da20d75d9ad5d05061cf</anchor>
      <arglist>(bool modify_origin=false)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>FlipYT</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a646a655758aa20a540016ea636db6367</anchor>
      <arglist>(bool modify_origin=false)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>FlipYZ</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a5e400c2af664d8bd4682a071b8110a8f</anchor>
      <arglist>(bool modify_origin=false)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>FlipZT</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a80b3b51429ccf416e9d0a9cd2ff0785c</anchor>
      <arglist>(bool modify_origin=false)=0</arglist>
    </member>
    <member kind="function">
      <type>ImageAttributes</type>
      <name>ForegroundDomain</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>aa5bad197726272c2f02a49f990662254</anchor>
      <arglist>(int i1, int j1, int k1, int i2, int j2, int k2, bool orthogonal=true) const</arglist>
    </member>
    <member kind="function">
      <type>ImageAttributes</type>
      <name>ForegroundDomain</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a8f9df3baa9564af402a2f4fda7319442</anchor>
      <arglist>(bool orthogonal=true) const</arglist>
    </member>
    <member kind="function">
      <type>ImageAttributes</type>
      <name>ForegroundDomain</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>afc5b1884b6858bf31d49c2d446fe94fc</anchor>
      <arglist>(double padding, bool orthogonal=true) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a5233f6a0eebe1fabf9a2e07c4e91e4c1</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a0002508c1bb1484476a930fb5ceecfc2</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>const Matrix &amp;</type>
      <name>GetAffineMatrix</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a75805b30bd786d34a6e4033f59baa3b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a18fecdd4e4721491219efc1f7cf6762c</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>afddd911788cc9e3eaa9295568df41c24</anchor>
      <arglist>(int, int, int=0, int=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a756761be368bae699a28f33373ee0d37</anchor>
      <arglist>(Vector &amp;, int) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a60b277b6637af712f26fc3bdba9180fc</anchor>
      <arglist>(Vector &amp;, int, int, int=0, int=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a530b94af50961fbf277c5b594fa14d2b</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a62a2d456e443faae99b0d14886ba3f9a</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetBackgroundValueAsDouble</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a68c88ff62a5076db9a61553288f82754</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>af1c550daf93b34bde896e26704db4033</anchor>
      <arglist>(int=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ab1ee2d44e51e892975930dbb19fad35e</anchor>
      <arglist>(int=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a5c4d926bba7bc366b75dba822eb492b6</anchor>
      <arglist>(int, int, int=0, int=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a550fa5c2cdf85feb09e37db0392c4ee8</anchor>
      <arglist>(int, int, int=0, int=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>GetDataType</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ab3a709c8d51121058c8e3190ef34c37c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>GetDataTypeMax</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a374a20cce34c58325bf2569d4d7b7991</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>GetDataTypeMin</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a5cb7dadc19cc0cb7f4f842e950f9bd70</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>GetDataTypeSize</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a6e5b3e0fdec723a01f99c79b7116af7a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>aa07ec1adaa885bf5dde859de3a27f3c0</anchor>
      <arglist>(BaseImage *&amp;, int, int=-1) const =0</arglist>
    </member>
    <member kind="function">
      <type>const ImageAttributes &amp;</type>
      <name>GetImageAttributes</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a0534ecaf84522dfc33bc5df080fda13e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Matrix &amp;</type>
      <name>GetImageToWorldMatrix</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ac253f2b4be72f87e3a4e9cd1cced5fd1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BinaryImage *</type>
      <name>GetMask</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a168414cf3cea35cfb994ca4723569de1</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="function">
      <type>const BinaryImage *</type>
      <name>GetMask</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a7b8c7d94fe79051d594a5ec1ad978bae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetMinMaxAsDouble</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>abb392fc4bc4307682dd2c74b45ccb6c7</anchor>
      <arglist>(double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMaxAsDouble</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a115c1bac393247c6e8a743c3cca7340a</anchor>
      <arglist>(double *, double *) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetNumberOfVoxels</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ae0e1ea0c716414a0c02631c975dd77e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetOrientation</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>abea75b0f58a40256dde4054bccc56151</anchor>
      <arglist>(double *, double *, double *=NULL) const</arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>GetOrigin</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a74465bd8e4e7c6492fe061af19a97b92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetOrigin</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a72874fcbab82c0d8785a4f3bc41701f8</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetOrigin</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>acabf82c949b51f0051ffdfa333ceb308</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetPixelSize</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a0b2b3e41beb8b7663915bbd3a16a5f1c</anchor>
      <arglist>(double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetPixelSize</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a9e594613eafe99299d3e2d0a4acc6d50</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetPixelSize</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>abb31f7b777adc597503d1e75444f1ec8</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetPixelSize</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a4ef09148ce76632c7c24fb60f533cb10</anchor>
      <arglist>(double *, double *, double *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetPixelSize</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a7ad972c03106ae9767a039cf5c94054f</anchor>
      <arglist>(double *, double *, double *, double *) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>abd6b6001aa3b4145f21769a93f6bab3a</anchor>
      <arglist>(BaseImage *&amp;, int, int) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a646b7233f3a7b22ede0c7b6ad7d27d26</anchor>
      <arglist>(BaseImage *&amp;, int, int, int, int, int, int) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a1d2324fb269ee405930ad48ce9929720</anchor>
      <arglist>(BaseImage *&amp;, int, int, int, int, int, int, int, int) const =0</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetScalarPointer</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a03c65ad40d940c685fdaf7c12ed7284f</anchor>
      <arglist>(int=0, int=0, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>GetScalarPointer</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a1a804330c060b58924e2771c9c7b9533</anchor>
      <arglist>(int=0, int=0, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetScalarType</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a41b7119ee34327bfbddc0ef8c6d81fc7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetScalarTypeMax</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a41f1c1c6bc18e5bd2d4674b157c9545c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetScalarTypeMin</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>af2084a100009d830b3bf0d732dc6e028</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetScalarTypeSize</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a7f0087adfa5d57655323663970bcd658</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetT</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a1ddb6a5dc780caa394222b4b998a5a97</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetTOrigin</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a3c052ff856dba29a62eb29eab300cc06</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetTSize</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a29155403a1ef8f30ba9c2ceabf894f96</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Matrix &amp;</type>
      <name>GetWorldToImageMatrix</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a8022f207417a49cb4e2586d4bf354185</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetX</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a8e24fa2bfb983ce3e97f5a11d35694a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetXSize</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a6dcab6d77bc33edc879839c2ff785123</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetY</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a55f17f9d2af1b3d827a6ae0f68577257</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetYSize</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>adee4e2857c9ec88140a97d4b3e0c8ae5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetZ</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ab422d77894b64c3e4f4b9cd4bb1238e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetZSize</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>aafa5767fb15bb41c037d04c4c81e1260</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasBackground</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ae304b188ce61ef54ff2f1daaabc44be6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasBackgroundValue</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>af25388b2b9f9fe7e0c80c33ed6a2c889</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasMask</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a7b369be319abb156e55ba529311a56f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasSpatialAttributesOf</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a7f81c42255b818ac07acb8c7d43a8b07</anchor>
      <arglist>(const BaseImage *) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ImageToTime</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>aabbd9801a065f6d15a0c2e5431dc68fd</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ImageToWorld</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a939156582b300c1032b90297e210deb5</anchor>
      <arglist>(double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ImageToWorld</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ae65270d03c8d1b0b2bd3cb63cc1a2bc9</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ImageToWorld</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ac6aed045564173e663f7c54d3ce8a389</anchor>
      <arglist>(Point &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ImageToWorld</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a5b2509324d54256f173e937bd7d46da2</anchor>
      <arglist>(Vector3 &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ImageToWorld</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>acaf6d505bdecd27bff052f3e600b3be7</anchor>
      <arglist>(WorldCoordsImage &amp;i2w, bool _3D=true) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ImageToWorld</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>abe92d565a1636c9282fa7137ccecc828</anchor>
      <arglist>(double *i2w, bool _3D=true) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ImageToWorld</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ae48fe56bd6b5db567a3890c533ca4b97</anchor>
      <arglist>(PointSet &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IndexToVoxel</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ae1398aeb4a1a09074b8f6351fa609211</anchor>
      <arglist>(int, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IndexToVoxel</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a5179905550f1eccc753b21f0162038d2</anchor>
      <arglist>(int, int &amp;, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IndexToVoxel</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>afa1402577e9d6431dcaa0f024c91af38</anchor>
      <arglist>(int, int &amp;, int &amp;, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IndexToWorld</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ad73ee2b54ce7bf60cd10ec773476cca0</anchor>
      <arglist>(int, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IndexToWorld</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a8cb891f5e0115b588e12f8af476da1f9</anchor>
      <arglist>(int, double &amp;, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IndexToWorld</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a224b1e9cc8667e21154c7acd3590623d</anchor>
      <arglist>(int, Point &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>IndexToWorld</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a7c1b137b5567543262bca6a4d43c7a6e</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a03952130956de937833ddf0d55af325f</anchor>
      <arglist>(const ImageAttributes &amp;, int=-1)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitializeMask</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a842964888dc1670d0312bd4191d81831</anchor>
      <arglist>(int t=-1, bool=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsBackground</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a106198c55e1a7e5b6bc6c19b3a079cf6</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsBackground</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ab8c5932cd5e6c005abf184d794629e59</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsBoundary</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ab45ae9603ba371da25404af3cf0fed3d</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsBoundary</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a4d2cfd431c203e347111b8b9353ba7bd</anchor>
      <arglist>(int, int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsBoundary</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a243d00bc3aa0ebb5c062dcdfbce2860c</anchor>
      <arglist>(int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsBoundary</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ac9664d97e8a943e73d5be1359551510e</anchor>
      <arglist>(int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsBoundingBoxInsideForeground</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ae560c14b6b6e68e7310d621ef92d234c</anchor>
      <arglist>(int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsBoundingBoxInsideForeground</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a925c74ff4d689703c34f33ae1dd8fd1b</anchor>
      <arglist>(int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsBoundingBoxInsideForeground</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>af81ec2aa0d82888ed9d4857d32be06c6</anchor>
      <arglist>(int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsEmpty</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ada763bc61f572724dfd2817a865205dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsForeground</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a0b19c75dea195ef89dbfb97e2e98f00d</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsForeground</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a1e08311aaae093f716abaa4a34a8042b</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInFOV</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a14d08a8c379abc5635facacbd6584996</anchor>
      <arglist>(double, double, double)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInside</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a67200d33272c7139eec123f17d17a98f</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInside</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a49e5d0408da655328837211489b077b7</anchor>
      <arglist>(int, int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInside</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>af45603ceefbb88ff98081965e976c76d</anchor>
      <arglist>(int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInside</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a97f57cb493524ee07a9f6adc7958dc29</anchor>
      <arglist>(int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInsideForeground</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ad08178a09a4e5378427d9b948176797c</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInsideForeground</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a4f1f18c5857f4778afb28e7443bbb44b</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNextToBackground</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a761a79e00459fcde5053b3699a1a99cb</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNextToBackground</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a78581b9e60484dc7da19e687dc37bcbf</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNextToForeground</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a243682086df17f670a09c92e62098646</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNextToForeground</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a70e5649cc9e9dad2a651aecdd5e8c30d</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOutside</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>aed96f1252764ae8294ea77a2b92e4746</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOutside</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a0d008177c7382d92c68e2cc7ec1759e2</anchor>
      <arglist>(int, int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOutside</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ae3591f55732c4e1cc3ffc0d57cdc1fb0</anchor>
      <arglist>(int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOutside</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a9b54525507daba5f35305eda9ee477b0</anchor>
      <arglist>(int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOutsideForeground</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a5194700e8f219939b299a7f7926e51a0</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOutsideForeground</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a631dcb49f710d164c068fa01abfb959e</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>N</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a689f03fe02847f86210180dffb4cb7c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfSpatialVoxels</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a56690890de23423bb948a84e26a03027</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfVoxels</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ad11fca35a48e56fb687552db4fd0e09e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BaseImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>aed7920cfd3fff8a4476f3a9a97779ca2</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Orientation</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a2e1e00c210d3d6f4e417e69a5859dd08</anchor>
      <arglist>(OrientationCode &amp;, OrientationCode &amp;, OrientationCode &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>OwnsMask</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>acc763dfd0ee1e1fba0ebb13eb275a0d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ab8775f2e310001fb4db46e6bd3e93a30</anchor>
      <arglist>(Indent=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutAffineMatrix</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>aa5695519064b1b7af9978842bc381201</anchor>
      <arglist>(const Matrix &amp;, bool=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a98d8a358ec9e70dd690b79c089d034c3</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a576ef17291b9dc704cf49a8d62240be7</anchor>
      <arglist>(int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a4ffe0122ecf44122693744fe6c2a7c1a</anchor>
      <arglist>(int, int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a26ae18b69b60773a2c125453e96d5494</anchor>
      <arglist>(int, int, int, int, double)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>aa264a8fd87fd4c3b01c5fc5b6f10cb36</anchor>
      <arglist>(int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a3bbbd7bb1aa1a4f4f943e3a116c149e8</anchor>
      <arglist>(int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a6b44b014c48c40241e73ce138e4a256b</anchor>
      <arglist>(int, int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a4f3744b488925ab02d38dfa4004437da</anchor>
      <arglist>(int, int, int, int, const Vector &amp;)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutBackgroundValueAsDouble</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a990a555bf1dc98f03c42c59021f8acdf</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutBackgroundValueAsDouble</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a37086e0f30a6fbf82a6c67a7b3a4dac6</anchor>
      <arglist>(double, bool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutMask</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a2516bbaf9ffb22de8aeaa0ce07f1cb24</anchor>
      <arglist>(BinaryImage *, bool=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutMinMaxAsDouble</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>aadea008fe4b5855cbb8e11964adae90d</anchor>
      <arglist>(double, double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutOrientation</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a46fef2e3dd67b0bddb09c9f105e72a16</anchor>
      <arglist>(double *, double *, double *=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutOrigin</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a2be38318c2b2bee2fcc7af0ba3628f1a</anchor>
      <arglist>(const Point &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutOrigin</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ad637f600e15cff125c92410aebe7300a</anchor>
      <arglist>(double, double, double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutOrigin</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>aabb9736eb80324dc75023463c989b1a2</anchor>
      <arglist>(double, double, double, double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutPixelSize</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>aef6e4773d88c1bd8afa7613d2d0d7485</anchor>
      <arglist>(double, double, double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutPixelSize</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a5daebb12f37ffb33da1f33717ed78937</anchor>
      <arglist>(double, double, double, double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutTOrigin</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>afea5e55d3c4074c56508d3b9e421d170</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutTSize</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a04870d18ea85b849d1c52b12e690c7e3</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a345b98024f77eb36748c32374bb7c611</anchor>
      <arglist>(const char *)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>ReflectT</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a8a4f392bf6751e31d975b0a315939132</anchor>
      <arglist>(bool modify_axes=false)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>ReflectX</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ae3becde2794669736d4c5b595d0e7061</anchor>
      <arglist>(bool modify_axes=false)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>ReflectY</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a5413e4b199c5fd43b448c1504bb2154e</anchor>
      <arglist>(bool modify_axes=false)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>ReflectZ</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a8926ffa0cc3fa4e657de8e653fc9e54f</anchor>
      <arglist>(bool modify_axes=false)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetAffineMatrix</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a063f0d6d0fc2cc72ed66650beb2ba166</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetBackgroundValueAsDouble</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a5f12dedb9111959c43f048ac14b41937</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SwapXT</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a4427a313ebda3f1d798466391b532a8e</anchor>
      <arglist>(bool modify_axes=true)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SwapXY</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>adadaefaea4759263d286d84e04573119</anchor>
      <arglist>(bool modify_axes=true)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SwapXZ</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a0ce818d017d8cfb7baaa734e43f3f9b6</anchor>
      <arglist>(bool modify_axes=true)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SwapYT</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a82add4afde4e024463f4a940a5334d85</anchor>
      <arglist>(bool modify_axes=true)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SwapYZ</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ae0cfab04fe8c21e11a9d465915596af3</anchor>
      <arglist>(bool modify_axes=true)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SwapZT</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ab8b8cb0f7c51eeea2a3789b9da912dc2</anchor>
      <arglist>(bool modify_axes=true)=0</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>T</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a6ce04269dc700578242b7e1d0f6ece10</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>TimeToImage</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a376e8cdeb9edf532e457225c970140c4</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>TSize</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a3bd89d7ae7d9d8c4caa78bd9459baab9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>VoxelToIndex</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a5cf708ecb634d820ab93f870b1e4a450</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WorldToImage</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ac976627653bbc826e25736011fbcb73f</anchor>
      <arglist>(double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WorldToImage</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a79994d222372e737b829865f99b07a2a</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WorldToImage</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a192bd705b51f3241af9d472764c895e7</anchor>
      <arglist>(Point &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WorldToImage</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a00464447dcd5273aa3d2789a8db9545d</anchor>
      <arglist>(Vector3 &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a0c020b83d1d79dcf41e263772066f8f6</anchor>
      <arglist>(const char *) const =0</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>X</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a96364731c42a53cb6ec8c8fc47a9ce58</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>XSize</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ab3b2f1c3b5ea016ca259db1d3d0c2c13</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Y</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>add50e39c5b950ca3d4de8c8b3f03bc1c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>YSize</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ac245dc036a9accfb92cc21f5ca8e3372</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Z</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ad891331785da0b18021a444e613655ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ZSize</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a12f67b9283fb742701d8681e4d676dde</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseImage</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>af9f682fcaedff130619dc19fe23841b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BaseImage *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a8ae6cf5c1f7d7a2f67cca6f683de112b</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BaseImage *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a4e35e0dcb49a6bd7c0a86c4c6dba7b91</anchor>
      <arglist>(const BaseImage *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BaseImage *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a6d33dc34232e70494f095d092d2c99ba</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BaseImage</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a6925e9971f0fcf46dc23117a2e84260d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BaseImage</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ade05f7c559b2db262d181724ca1f9a10</anchor>
      <arglist>(const ImageAttributes &amp;, int=-1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BaseImage</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ab2bbf39cebb8e0fd40adeda795eae792</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>PutAttributes</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a9ca2253ae62f0e8f352a2f4ebf074274</anchor>
      <arglist>(const ImageAttributes &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UpdateMatrix</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a08acb78bf880d1ee224ec4d98e887400</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ImageAttributes</type>
      <name>_attr</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a1a8472cb38b25034b402c8600e771de3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_bg</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a31e07fb101b3ec0f8498319e06e4622d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_bgSet</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a465a7837f9a0885c897e7301a2372500</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BinaryImage *</type>
      <name>_mask</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>aece01cdec43abd7f1b2399d22ee8a121</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_maskOwner</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ac1dc7c8307d2fca7023a4d156477aa60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix</type>
      <name>_matI2W</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a1f629427ffbf716ccc752c7cf5c07a2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix</type>
      <name>_matW2I</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a03f712860add3ddd2e73587eba60968c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_NumberOfVoxels</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a39e6eb3cfafe04b908415efd2fbf27cf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::MultipleVoxelTransformation::BaseTransform</name>
    <filename>structmirtk_1_1MultipleVoxelTransformation_1_1BaseTransform.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::MultipleVoxelTransformation::TransformData</base>
    <base>mirtk::MultipleVoxelTransformation::Base</base>
    <member kind="function">
      <type>void</type>
      <name>ApplyDisplacement</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1BaseTransform.html</anchorfile>
      <anchor>ac36ca93b4bf002d0558f97ac295ac0c8</anchor>
      <arglist>(const double *disp1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyDisplacementAndTransformation</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1BaseTransform.html</anchorfile>
      <anchor>af5086aac187ef7003d74cdfcf6cc8271</anchor>
      <arglist>(const double *disp1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyDisplacements</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1BaseTransform.html</anchorfile>
      <anchor>a3237417f5ad7dc04260f368d42e0dab6</anchor>
      <arglist>(const double *disp1, const double *disp2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyTransformation</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1BaseTransform.html</anchorfile>
      <anchor>a1cca3411e587a279d51e5b207bcf3672</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyTransformations</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1BaseTransform.html</anchorfile>
      <anchor>a19ab7ddb6a413cda908efd4b2738b691</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>InterpolateImageFunction *</type>
      <name>GetInterpolator</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1BaseTransform.html</anchorfile>
      <anchor>a2ca65b04e7d9a17dc0054c98a57c7f74</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>InterpolateImageFunction *</type>
      <name>GetInterpolator</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1BaseTransform.html</anchorfile>
      <anchor>ad531523bee69e07c5143514ee2775ea8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InterpolatePut</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1BaseTransform.html</anchorfile>
      <anchor>ad149f27eee1ae8ae881400540aaac8ad</anchor>
      <arglist>(int i, int j, int k, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InterpolatePut</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1BaseTransform.html</anchorfile>
      <anchor>a5571fa1182b07566dfdb0bbbbe6ec4cb</anchor>
      <arglist>(int i, int j, int k, OutputVoxelType *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InterpolatePutAsDouble</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1BaseTransform.html</anchorfile>
      <anchor>a09dabac84c339c7e0dc9162b0299ae53</anchor>
      <arglist>(int i, int j, int k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InterpolateRescalePut</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1BaseTransform.html</anchorfile>
      <anchor>adcbdad758a1c425e089eb508f141585b</anchor>
      <arglist>(int i, int j, int k, OutputVoxelType *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InterpolateRescalePutAsDouble</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1BaseTransform.html</anchorfile>
      <anchor>ab667b7b0f741e664e5fd27f612abee67</anchor>
      <arglist>(int i, int j, int k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>OutputToWorld</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1BaseTransform.html</anchorfile>
      <anchor>aaa9b85deee091f7f98be30d4648868fe</anchor>
      <arglist>(int i, int j, int k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>OutputToWorld</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1BaseTransform.html</anchorfile>
      <anchor>aff103f4e631f01933e4019e669bf8f72</anchor>
      <arglist>(const double *i2w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutOutsideValue</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1BaseTransform.html</anchorfile>
      <anchor>ad0ee3ad2a6b217637704c5f47c46f4a2</anchor>
      <arglist>(int i, int j, int k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutOutsideValueAsDouble</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1BaseTransform.html</anchorfile>
      <anchor>a3dec903c86a3ad716e580a3711961a68</anchor>
      <arglist>(int i, int j, int k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutVoxelTransformation</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1BaseTransform.html</anchorfile>
      <anchor>a69384bd8c582740f902e30fb798896d1</anchor>
      <arglist>(int i, int j, int k, double *o2i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WorldToInput</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1BaseTransform.html</anchorfile>
      <anchor>a278f705336b8532813351775d0c69c35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseTransform</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1BaseTransform.html</anchorfile>
      <anchor>a34e37a2e8867012a5ef6ddd55ea1e7c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BaseTransform</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1BaseTransform.html</anchorfile>
      <anchor>a2b9e465042c6ea3ab4019b5e3016b6a5</anchor>
      <arglist>(const TransformData &amp;data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BaseTransform</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1BaseTransform.html</anchorfile>
      <anchor>a80b712e118d690132b1e065df1181750</anchor>
      <arglist>(const BaseTransform &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::Binarize</name>
    <filename>classmirtk_1_1data_1_1op_1_1Binarize.html</filename>
    <base>mirtk::data::op::ElementWiseUnaryOp</base>
    <member kind="function">
      <type></type>
      <name>Binarize</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Binarize.html</anchorfile>
      <anchor>a0e6d09ce48a7047982097d73babc03b2</anchor>
      <arglist>(double l, double u=numeric_limits&lt; double &gt;::infinity())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Op</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Binarize.html</anchorfile>
      <anchor>a3c623c621230b6dd15b0165b49b4d2f7</anchor>
      <arglist>(double value, bool &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Binarize.html</anchorfile>
      <anchor>a493e6844d396d8ac714ba56e727289c5</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::BinaryForEachVoxelBody</name>
    <filename>structmirtk_1_1BinaryForEachVoxelBody.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type></type>
      <name>BinaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelBody.html</anchorfile>
      <anchor>a7624ca652aec555d63ebfaf37d4cc74d</anchor>
      <arglist>(GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelBody.html</anchorfile>
      <anchor>a0ec25d65b8598955f1a138f0cb7a110d</anchor>
      <arglist>(const BinaryForEachVoxelBody &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelBody.html</anchorfile>
      <anchor>a3d7394d390edda1289c9ac8169c8acda</anchor>
      <arglist>(BinaryForEachVoxelBody &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelBody.html</anchorfile>
      <anchor>ab28f3f3bb0a1308b729d96226baed205</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelBody.html</anchorfile>
      <anchor>a5f5ea28202bc320d5f9e61d0fc0cd5bc</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelBody.html</anchorfile>
      <anchor>aa402d2c83416a966122371d3a45b5065</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelBody.html</anchorfile>
      <anchor>a9aa0136f31e3153fdaaaa0f120b7d445</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::BinaryForEachVoxelBody_1Const</name>
    <filename>structmirtk_1_1BinaryForEachVoxelBody__1Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type></type>
      <name>BinaryForEachVoxelBody_1Const</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a7d30659c0b9a3f914ad6eed3a1fca6f3</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinaryForEachVoxelBody_1Const</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a890e1a41da3bb431bfef056c2cf075ad</anchor>
      <arglist>(const BinaryForEachVoxelBody_1Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinaryForEachVoxelBody_1Const</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a04e4151ca6d1924da4460c61516f5531</anchor>
      <arglist>(BinaryForEachVoxelBody_1Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a77c5841526bb75dbf7e6c1d666a1db82</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a7c857414b4eb169c7ee3a93294c0fa8e</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a6ed70a143823e8afc6e8ab2b519eceae</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a2c7c3bc6a84ab88c1a7249b79111898c</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::BinaryForEachVoxelBody_Const</name>
    <filename>structmirtk_1_1BinaryForEachVoxelBody__Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type></type>
      <name>BinaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a901f1b8da5a466d38e50a3e63d455692</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a9c03a486680941e8c8709694bbb76416</anchor>
      <arglist>(const BinaryForEachVoxelBody_Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a7171c367bb73f49a4ff1130fdd5a0c29</anchor>
      <arglist>(BinaryForEachVoxelBody_Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>ab631808efff946d43c904e267f4be578</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>aef8e54b3d9d21628bac65b189c647523</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>aa98c55fe68da8d064603901e8e5f05aa</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>afb413dd2177eefe2ad22bf406337a0f3</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::BinaryForEachVoxelIfBody</name>
    <filename>structmirtk_1_1BinaryForEachVoxelIfBody.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type></type>
      <name>BinaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a67edc2b48c7b18d6c6d191a98142fe57</anchor>
      <arglist>(GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelIfBody.html</anchorfile>
      <anchor>abb0a61efe33775805866d6637ec76403</anchor>
      <arglist>(const BinaryForEachVoxelIfBody &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelIfBody.html</anchorfile>
      <anchor>ab3ef0598a3bd4d481aa31e45106a76c7</anchor>
      <arglist>(BinaryForEachVoxelIfBody &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a3bcf7c177baf57c1f3c9fb0e80a52b34</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a72dc21eb7442e04b68bc7c44d35d0d1a</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a8d20284db897c9e88cd783aa59703f8b</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelIfBody.html</anchorfile>
      <anchor>aef5be6b5f93d9ea8c1ca2519fbd6ca03</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::BinaryForEachVoxelIfBody_1Const</name>
    <filename>structmirtk_1_1BinaryForEachVoxelIfBody__1Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type></type>
      <name>BinaryForEachVoxelIfBody_1Const</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>aff3087b77ba45c5618b9f60709d88228</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinaryForEachVoxelIfBody_1Const</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a9ecbcd1c1304afe712d51eefcfb0bb41</anchor>
      <arglist>(const BinaryForEachVoxelIfBody_1Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinaryForEachVoxelIfBody_1Const</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a6711051d6db1f1ff8640b2539a9a1982</anchor>
      <arglist>(BinaryForEachVoxelIfBody_1Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>ac10c28489ce30e15dd4d2357f78215d4</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a0ce5df50a1017e2af47f977284b524a0</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a042f33fee61b318445ab9eaac229b8ae</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a351d12619189f3ad7ab842e9568c3618</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::BinaryForEachVoxelIfBody_Const</name>
    <filename>structmirtk_1_1BinaryForEachVoxelIfBody__Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type></type>
      <name>BinaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>acba4f6c4e75602ff6d696d5edc891411</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a1341df395a35280095d519c5ea46b710</anchor>
      <arglist>(const BinaryForEachVoxelIfBody_Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>ae6225d8841a5e48acdd682f70d8050a1</anchor>
      <arglist>(BinaryForEachVoxelIfBody_Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a13fb2e8fc04f57cb739fb371e730a06b</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a2d9550ddf55ecc80f7451ce8927bf128</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a43138bc17ef44137a743fd9ab690c076</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>ac628fe7c542aff7bc7ae5f6638af2e8c</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::blocked_range</name>
    <filename>classmirtk_1_1blocked__range.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="class">
    <name>mirtk::blocked_range2d</name>
    <filename>classmirtk_1_1blocked__range2d.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="class">
    <name>mirtk::blocked_range3d</name>
    <filename>classmirtk_1_1blocked__range3d.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="class">
    <name>mirtk::BoundaryMapper</name>
    <filename>classmirtk_1_1BoundaryMapper.html</filename>
    <base>mirtk::Object</base>
    <member kind="function">
      <type>double</type>
      <name>GetBoundaryValue</name>
      <anchorfile>classmirtk_1_1BoundaryMapper.html</anchorfile>
      <anchor>a509f3fb0cef35daff09b83dbe7cf34c8</anchor>
      <arglist>(int i, int j=0) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetSurfaceValue</name>
      <anchorfile>classmirtk_1_1BoundaryMapper.html</anchorfile>
      <anchor>af03bc707a4ec14ecc9a0bac452ce7e4c</anchor>
      <arglist>(int ptId, int j=0) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasBoundaryValue</name>
      <anchorfile>classmirtk_1_1BoundaryMapper.html</anchorfile>
      <anchor>ad2d2e34da53abe7812733019c6e125e6</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual BoundaryMapper *</type>
      <name>NewCopy</name>
      <anchorfile>classmirtk_1_1BoundaryMapper.html</anchorfile>
      <anchor>a346a9d3bed1fef6ac5daa27fe6615b5c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumberOfComponents</name>
      <anchorfile>classmirtk_1_1BoundaryMapper.html</anchorfile>
      <anchor>a6e6d8b21fb9fcb751cb205fd065e20a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1BoundaryMapper.html</anchorfile>
      <anchor>ae88a1ea490719615fa8aae1919e9712a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BoundaryMapper</name>
      <anchorfile>classmirtk_1_1BoundaryMapper.html</anchorfile>
      <anchor>a0443aaf20bbcf5657a62a7f0623f4b40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BoundaryMapper</name>
      <anchorfile>classmirtk_1_1BoundaryMapper.html</anchorfile>
      <anchor>af13d5e44cda9b5b1c438a962676fd890</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BoundaryMapper</name>
      <anchorfile>classmirtk_1_1BoundaryMapper.html</anchorfile>
      <anchor>a96ecf0534460834f416f6c5eba68007a</anchor>
      <arglist>(const BoundaryMapper &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>ComputeMap</name>
      <anchorfile>classmirtk_1_1BoundaryMapper.html</anchorfile>
      <anchor>a96f9448bad8bc4ec23a09b3ee025e626</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1BoundaryMapper.html</anchorfile>
      <anchor>a00c9d401bcf8a0af563dd7c55d2119fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1BoundaryMapper.html</anchorfile>
      <anchor>abd821ac227fc26f9e4cecfdb95d29be9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>BoundaryMapper &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1BoundaryMapper.html</anchorfile>
      <anchor>af463c375050e604435aeb6a04a7e8868</anchor>
      <arglist>(const BoundaryMapper &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetBoundaryValue</name>
      <anchorfile>classmirtk_1_1BoundaryMapper.html</anchorfile>
      <anchor>a930f44ef02d5aadad493ae0a9c0c2e0b</anchor>
      <arglist>(int i, double v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetBoundaryValue</name>
      <anchorfile>classmirtk_1_1BoundaryMapper.html</anchorfile>
      <anchor>a983a56bf87e22ddd74dc96d91af16a2c</anchor>
      <arglist>(int i, int j, double v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::BoundarySegment</name>
    <filename>classmirtk_1_1BoundarySegment.html</filename>
    <base>mirtk::Object</base>
    <member kind="function">
      <type></type>
      <name>BoundarySegment</name>
      <anchorfile>classmirtk_1_1BoundarySegment.html</anchorfile>
      <anchor>a3007e9dc0c99c7560139973c45d01ec2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoundarySegment</name>
      <anchorfile>classmirtk_1_1BoundarySegment.html</anchorfile>
      <anchor>a1aeaed22a286cdbe930cd5cf3ead9816</anchor>
      <arglist>(vtkPolyData *surface, const Array&lt; int &gt; &amp;ptIds)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoundarySegment</name>
      <anchorfile>classmirtk_1_1BoundarySegment.html</anchorfile>
      <anchor>a6d79fea16cc2463cf721d70ed7de2dc6</anchor>
      <arglist>(const BoundarySegment &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearSelection</name>
      <anchorfile>classmirtk_1_1BoundarySegment.html</anchorfile>
      <anchor>a5476239aa9f954d626a4768658638881</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>ComputeEdgeLengths</name>
      <anchorfile>classmirtk_1_1BoundarySegment.html</anchorfile>
      <anchor>aafd1b251b601f4624a61ac3ee65d64bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ComputeLength</name>
      <anchorfile>classmirtk_1_1BoundarySegment.html</anchorfile>
      <anchor>a47da85de8673299b4237cf354e6318ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Contains</name>
      <anchorfile>classmirtk_1_1BoundarySegment.html</anchorfile>
      <anchor>a40759a54fba30fc3d5abc2aa1ab860d7</anchor>
      <arglist>(int ptId) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DeselectPoint</name>
      <anchorfile>classmirtk_1_1BoundarySegment.html</anchorfile>
      <anchor>ab04ba57b38449e77d39078138e19d9a3</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>EdgeLength</name>
      <anchorfile>classmirtk_1_1BoundarySegment.html</anchorfile>
      <anchor>ad3cf4cbc1212879a2756876081a50bf7</anchor>
      <arglist>(int i, int di=+1) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>EdgeLengths</name>
      <anchorfile>classmirtk_1_1BoundarySegment.html</anchorfile>
      <anchor>ad6a12fa192eac7a5a948288d2a903828</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Find</name>
      <anchorfile>classmirtk_1_1BoundarySegment.html</anchorfile>
      <anchor>ae6fd3f8941b2f444403a0d7eaa636304</anchor>
      <arglist>(int ptId) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>FindClosestPoint</name>
      <anchorfile>classmirtk_1_1BoundarySegment.html</anchorfile>
      <anchor>a5b3fd0055327396ade93301125c2620b</anchor>
      <arglist>(const class Point &amp;x, double *dist2=nullptr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetPoint</name>
      <anchorfile>classmirtk_1_1BoundarySegment.html</anchorfile>
      <anchor>a77fc4f051d5a8a2d428992a12a717b8a</anchor>
      <arglist>(int i, double p[3]) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetSelectedPoint</name>
      <anchorfile>classmirtk_1_1BoundarySegment.html</anchorfile>
      <anchor>ab3e5c96bc45519e6f8c75cb5fcd413ec</anchor>
      <arglist>(int i, double p[3]) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>IndexModuloNumberOfPoints</name>
      <anchorfile>classmirtk_1_1BoundarySegment.html</anchorfile>
      <anchor>adaa54e8080ff2bdb827f138a5de0ea85</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitializeIndex</name>
      <anchorfile>classmirtk_1_1BoundarySegment.html</anchorfile>
      <anchor>a9f8cdb8c6fcf17511713d280abb0ce4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSelected</name>
      <anchorfile>classmirtk_1_1BoundarySegment.html</anchorfile>
      <anchor>ad1209dc1746d98401538eab6c11cfa1a</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Length</name>
      <anchorfile>classmirtk_1_1BoundarySegment.html</anchorfile>
      <anchor>a13f4c2baca42184043f504a5867968ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfPoints</name>
      <anchorfile>classmirtk_1_1BoundarySegment.html</anchorfile>
      <anchor>a3050d126f1603f73fedfce1eb73e0ab4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfSelectedPoints</name>
      <anchorfile>classmirtk_1_1BoundarySegment.html</anchorfile>
      <anchor>ac0a44df4b7ff5bc0bd3d00113045c650</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BoundarySegment &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1BoundarySegment.html</anchorfile>
      <anchor>ac5d902945a9511c2501b0598ba92d12b</anchor>
      <arglist>(const BoundarySegment &amp;)</arglist>
    </member>
    <member kind="function">
      <type>class Point</type>
      <name>Point</name>
      <anchorfile>classmirtk_1_1BoundarySegment.html</anchorfile>
      <anchor>ab4bd923669e9b35fa9dfe1ea9d4a19dd</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Point</name>
      <anchorfile>classmirtk_1_1BoundarySegment.html</anchorfile>
      <anchor>af13e2ca1f808cf9e42ff13b626a78dfa</anchor>
      <arglist>(int i, const class Point &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>PointId</name>
      <anchorfile>classmirtk_1_1BoundarySegment.html</anchorfile>
      <anchor>a97409da565ca074c5c81cfc3f72b7a4a</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveSelection</name>
      <anchorfile>classmirtk_1_1BoundarySegment.html</anchorfile>
      <anchor>a54f7dcb8d01f696452f920dce2d89722</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ReserveSelection</name>
      <anchorfile>classmirtk_1_1BoundarySegment.html</anchorfile>
      <anchor>ab000debf63eaa5198f9ea869bfd8ee72</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>class Point</type>
      <name>SelectedPoint</name>
      <anchorfile>classmirtk_1_1BoundarySegment.html</anchorfile>
      <anchor>a9df8ec367e1573e8b5986b2c841bc50c</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SelectedPointId</name>
      <anchorfile>classmirtk_1_1BoundarySegment.html</anchorfile>
      <anchor>a351b9ca4a04bd7abaf58ea06626dc0b0</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SelectedPointIndex</name>
      <anchorfile>classmirtk_1_1BoundarySegment.html</anchorfile>
      <anchor>aa2aa93bb983a1151b1c10521d7eee115</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SelectPoint</name>
      <anchorfile>classmirtk_1_1BoundarySegment.html</anchorfile>
      <anchor>a3cb7c34774de142a7100de50b7c51e31</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPoint</name>
      <anchorfile>classmirtk_1_1BoundarySegment.html</anchorfile>
      <anchor>a44276abcfd75abfef376cd5c461740c4</anchor>
      <arglist>(int i, const double p[3])</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BoundarySegment</name>
      <anchorfile>classmirtk_1_1BoundarySegment.html</anchorfile>
      <anchor>af7e5162fa92d575f83e951607cb32fd9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::BoundarySegmentMapper</name>
    <filename>classmirtk_1_1BoundarySegmentMapper.html</filename>
    <base>mirtk::BoundaryMapper</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1BoundarySegmentMapper.html</anchorfile>
      <anchor>a1fdc3cb9f1df29695b90db82764b67fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1BoundarySegmentMapper.html</anchorfile>
      <anchor>a3fce63bfab40e35ac721b191c603acbf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MapLargest</name>
      <anchorfile>classmirtk_1_1BoundarySegmentMapper.html</anchorfile>
      <anchor>a23ed0c6dc918fd4d9f1ac196a9284511</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MapLongest</name>
      <anchorfile>classmirtk_1_1BoundarySegmentMapper.html</anchorfile>
      <anchor>a830aff402844744e2658fc0e22a6dc29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MapSegment</name>
      <anchorfile>classmirtk_1_1BoundarySegmentMapper.html</anchorfile>
      <anchor>aa6b639502b815ca9857297c78328edec</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BoundarySegmentMapper</name>
      <anchorfile>classmirtk_1_1BoundarySegmentMapper.html</anchorfile>
      <anchor>a0d50d0bd826e2deae018d98cdc5dc74c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BoundarySegmentMapper</name>
      <anchorfile>classmirtk_1_1BoundarySegmentMapper.html</anchorfile>
      <anchor>a12f2a1e4226c03638a770e65a29a0b35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BoundarySegmentMapper</name>
      <anchorfile>classmirtk_1_1BoundarySegmentMapper.html</anchorfile>
      <anchor>ac5de926dbe7faf2e0e5dbb7217a900ee</anchor>
      <arglist>(const BoundarySegmentMapper &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>ComputeMap</name>
      <anchorfile>classmirtk_1_1BoundarySegmentMapper.html</anchorfile>
      <anchor>a461bba18e6578e8bba2f393dc621a4f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>MapBoundarySegment</name>
      <anchorfile>classmirtk_1_1BoundarySegmentMapper.html</anchorfile>
      <anchor>a5a01bac33c978782bb441d396aea951e</anchor>
      <arglist>(int n, const Array&lt; int &gt; &amp;indices, const Array&lt; double &gt; &amp;tvalues, const Array&lt; int &gt; &amp;selection)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>BoundarySegmentMapper &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1BoundarySegmentMapper.html</anchorfile>
      <anchor>a14aff9761ad99987aa5d6648bc95c3ce</anchor>
      <arglist>(const BoundarySegmentMapper &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::BoundarySegmentParameterizer</name>
    <filename>classmirtk_1_1BoundarySegmentParameterizer.html</filename>
    <base>mirtk::Object</base>
    <member kind="function" virtualness="pure">
      <type>virtual BoundarySegmentParameterizer *</type>
      <name>NewCopy</name>
      <anchorfile>classmirtk_1_1BoundarySegmentParameterizer.html</anchorfile>
      <anchor>a540cbe0b1adc8ed3a7d1976af2ef531f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1BoundarySegmentParameterizer.html</anchorfile>
      <anchor>a0e16fb4e1102cad758d35c67c4148de0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Value</name>
      <anchorfile>classmirtk_1_1BoundarySegmentParameterizer.html</anchorfile>
      <anchor>ab5376990073702c0435accb10cc2cb54</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BoundarySegmentParameterizer</name>
      <anchorfile>classmirtk_1_1BoundarySegmentParameterizer.html</anchorfile>
      <anchor>a21f0204d1555c1901d48ba2dc04e9b75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BoundarySegmentParameterizer</name>
      <anchorfile>classmirtk_1_1BoundarySegmentParameterizer.html</anchorfile>
      <anchor>a62b5fba5d112dc83e3c9640cae61049d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BoundarySegmentParameterizer</name>
      <anchorfile>classmirtk_1_1BoundarySegmentParameterizer.html</anchorfile>
      <anchor>ab6f71766d55096fc9d02ddfa56042a8d</anchor>
      <arglist>(const BoundarySegmentParameterizer &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1BoundarySegmentParameterizer.html</anchorfile>
      <anchor>a08099d110198165d4dd10531974818d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1BoundarySegmentParameterizer.html</anchorfile>
      <anchor>a3de01d1604069903f153621cda62a3f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>BoundarySegmentParameterizer &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1BoundarySegmentParameterizer.html</anchorfile>
      <anchor>a0e10f97cb3bdd684a1e2512c02f67abc</anchor>
      <arglist>(const BoundarySegmentParameterizer &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>Parameterize</name>
      <anchorfile>classmirtk_1_1BoundarySegmentParameterizer.html</anchorfile>
      <anchor>a9ccc3233fbbd114a902b2da528807a69</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::BoundaryToDiskMapper</name>
    <filename>classmirtk_1_1BoundaryToDiskMapper.html</filename>
    <base>mirtk::BoundarySegmentMapper</base>
    <member kind="function">
      <type></type>
      <name>BoundaryToDiskMapper</name>
      <anchorfile>classmirtk_1_1BoundaryToDiskMapper.html</anchorfile>
      <anchor>ad00aa14f6856215f3a620609ea40935b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoundaryToDiskMapper</name>
      <anchorfile>classmirtk_1_1BoundaryToDiskMapper.html</anchorfile>
      <anchor>ae58501815230587beda53af43c25a385</anchor>
      <arglist>(const BoundaryToDiskMapper &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1BoundaryToDiskMapper.html</anchorfile>
      <anchor>a6e8fe4243900514a7cbe5de2a0ab63c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BoundaryMapper *</type>
      <name>NewCopy</name>
      <anchorfile>classmirtk_1_1BoundaryToDiskMapper.html</anchorfile>
      <anchor>ace3def2d53761257a75628048352f2e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BoundaryToDiskMapper &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1BoundaryToDiskMapper.html</anchorfile>
      <anchor>aa2b06be41892b29e142b873356274db9</anchor>
      <arglist>(const BoundaryToDiskMapper &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BoundaryToDiskMapper</name>
      <anchorfile>classmirtk_1_1BoundaryToDiskMapper.html</anchorfile>
      <anchor>a7e2bb00e3b72fce9e74e3360a1c9fd21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>MapBoundarySegment</name>
      <anchorfile>classmirtk_1_1BoundaryToDiskMapper.html</anchorfile>
      <anchor>a5fb5615981963c0b1ef98c2b6b0cead0</anchor>
      <arglist>(int n, const Array&lt; int &gt; &amp;indices, const Array&lt; double &gt; &amp;tvalues, const Array&lt; int &gt; &amp;selection)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::BoundaryToPolygonMapper</name>
    <filename>classmirtk_1_1BoundaryToPolygonMapper.html</filename>
    <base>mirtk::BoundarySegmentMapper</base>
    <member kind="function">
      <type></type>
      <name>BoundaryToPolygonMapper</name>
      <anchorfile>classmirtk_1_1BoundaryToPolygonMapper.html</anchorfile>
      <anchor>a086dbbb7c4ec14791d82a28ca94e0ccf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoundaryToPolygonMapper</name>
      <anchorfile>classmirtk_1_1BoundaryToPolygonMapper.html</anchorfile>
      <anchor>aa8d15ce9c6e1b8408d664a2930616382</anchor>
      <arglist>(const BoundaryToPolygonMapper &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1BoundaryToPolygonMapper.html</anchorfile>
      <anchor>a8b1312c7d04141847b29d96e2533f48d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BoundaryMapper *</type>
      <name>NewCopy</name>
      <anchorfile>classmirtk_1_1BoundaryToPolygonMapper.html</anchorfile>
      <anchor>a8b28561a94652ac6b0688870a7ca64b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BoundaryToPolygonMapper &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1BoundaryToPolygonMapper.html</anchorfile>
      <anchor>adde4255a1e0f116152ac50bdac2fc7ac</anchor>
      <arglist>(const BoundaryToPolygonMapper &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BoundaryToPolygonMapper</name>
      <anchorfile>classmirtk_1_1BoundaryToPolygonMapper.html</anchorfile>
      <anchor>ac6f4a4a536998676798d3c1dbca96926</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>MapBoundarySegment</name>
      <anchorfile>classmirtk_1_1BoundaryToPolygonMapper.html</anchorfile>
      <anchor>acd0b3da2af766a7254e65aaedca08327</anchor>
      <arglist>(int n, const Array&lt; int &gt; &amp;indices, const Array&lt; double &gt; &amp;tvalues, const Array&lt; int &gt; &amp;selection)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::BoundaryToSquareMapper</name>
    <filename>classmirtk_1_1BoundaryToSquareMapper.html</filename>
    <base>mirtk::BoundarySegmentMapper</base>
    <member kind="function">
      <type></type>
      <name>BoundaryToSquareMapper</name>
      <anchorfile>classmirtk_1_1BoundaryToSquareMapper.html</anchorfile>
      <anchor>a0c7b3119ca0a1b92febc539d7247ae87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoundaryToSquareMapper</name>
      <anchorfile>classmirtk_1_1BoundaryToSquareMapper.html</anchorfile>
      <anchor>a9d1ba705e4f8bc1eef1f759367d84bd9</anchor>
      <arglist>(const BoundaryToSquareMapper &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1BoundaryToSquareMapper.html</anchorfile>
      <anchor>ae080747dd2eb2016b673e135f6559380</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BoundaryMapper *</type>
      <name>NewCopy</name>
      <anchorfile>classmirtk_1_1BoundaryToSquareMapper.html</anchorfile>
      <anchor>af9ed9b9c6fa2862599ad0ed866cbfc0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BoundaryToSquareMapper &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1BoundaryToSquareMapper.html</anchorfile>
      <anchor>a0882d2486ac51fb6d22ddf5c66e4c942</anchor>
      <arglist>(const BoundaryToSquareMapper &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BoundaryToSquareMapper</name>
      <anchorfile>classmirtk_1_1BoundaryToSquareMapper.html</anchorfile>
      <anchor>a3bbd5df8ddddb452553d2d65d16c2933</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>MapBoundarySegment</name>
      <anchorfile>classmirtk_1_1BoundaryToSquareMapper.html</anchorfile>
      <anchor>ae3f54b5088c3994f4b8e927be09dba46</anchor>
      <arglist>(int n, const Array&lt; int &gt; &amp;indices, const Array&lt; double &gt; &amp;tvalues, const Array&lt; int &gt; &amp;selection)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::BrentLineSearch</name>
    <filename>classmirtk_1_1BrentLineSearch.html</filename>
    <base>mirtk::InexactLineSearch</base>
    <member kind="function">
      <type></type>
      <name>BrentLineSearch</name>
      <anchorfile>classmirtk_1_1BrentLineSearch.html</anchorfile>
      <anchor>aeed4265a72b238ec98e97b8b123edd26</anchor>
      <arglist>(ObjectiveFunction *=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BrentLineSearch</name>
      <anchorfile>classmirtk_1_1BrentLineSearch.html</anchorfile>
      <anchor>a2d1ff47705d95fa689f153a78ea2eddc</anchor>
      <arglist>(const BrentLineSearch &amp;)</arglist>
    </member>
    <member kind="function">
      <type>BrentLineSearch &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1BrentLineSearch.html</anchorfile>
      <anchor>a439866fc5bca9cf8e8bc30bc29882084</anchor>
      <arglist>(const BrentLineSearch &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1BrentLineSearch.html</anchorfile>
      <anchor>a6478151f6170e6cb7763bd2a13fbd08e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1BrentLineSearch.html</anchorfile>
      <anchor>a35e7264080ae237f4b9390dc953c799f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1BrentLineSearch.html</anchorfile>
      <anchor>a90a6e02582d6439581bf9e8e20642477</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BrentLineSearch</name>
      <anchorfile>classmirtk_1_1BrentLineSearch.html</anchorfile>
      <anchor>a4e2e4c74ba04628525231d4f255862f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>BracketExtremum</name>
      <anchorfile>classmirtk_1_1BrentLineSearch.html</anchorfile>
      <anchor>a5396f1c791c20022daf2fdcfe527faa7</anchor>
      <arglist>(double &amp;a, double &amp;b, double &amp;c, double *delta=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::BSpline</name>
    <filename>classmirtk_1_1BSpline.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>TReal</type>
      <name>RealType</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a84fef1f7a5fe8356afb87d1a77775ce7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>ae2dea619e8f3eb23cc748bb6dd3752b7</anchor>
      <arglist>(TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>ac4fd0d27e2657033d3007eb909c5381c</anchor>
      <arglist>(int, TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B0</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a0864d1758051ecdde58f271d21350a53</anchor>
      <arglist>(TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B0_I</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a3a53f3c23acc870fd04c9334ff85dfcd</anchor>
      <arglist>(TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B0_II</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>ab6fe3398fdc8795b4f7b083e3b7e3f52</anchor>
      <arglist>(TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B0_III</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a16ad33ec9e6fa21d44570432a6e008f5</anchor>
      <arglist>(TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B0_nI</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a26d3e0d9f702a699fd2120908cd4ad74</anchor>
      <arglist>(int, TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B1</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a42d24a30ebd5273d405842330963d3dd</anchor>
      <arglist>(TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B1_I</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a7ebcb4f22c02974e7dbb670f7f7fcdda</anchor>
      <arglist>(TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B1_II</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a1ceca6dbdf0185b097040e11088b3a33</anchor>
      <arglist>(TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B1_III</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>ae272844ee98c0a8b731a4df28fa6d06a</anchor>
      <arglist>(TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B1_nI</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a579bfdda057adc8db6a5953c714ffdf9</anchor>
      <arglist>(int, TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B2</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>ae481403d8c50a4cec4c66ecfc68d6bfb</anchor>
      <arglist>(TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B2_I</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a9bbe2feef8aad81caa8b43bcbc1f984a</anchor>
      <arglist>(TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B2_II</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a19b44bf970af526a9909790bfcca2faa</anchor>
      <arglist>(TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B2_III</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>ad07a64bb2ba58400baac39416d9fe1ce</anchor>
      <arglist>(TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B2_nI</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a28c2f4d99c8f6714e7a266f688898800</anchor>
      <arglist>(int, TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B3</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a14d4ab484b3163fc9ea53892cd616f75</anchor>
      <arglist>(TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B3_I</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>af706b35de2b7ba3d3f65dca1b966e059</anchor>
      <arglist>(TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B3_II</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a5251ebdc9d13e7492be574de538ea9c6</anchor>
      <arglist>(TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B3_III</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a48506d884e17fc603501df8f2e87944f</anchor>
      <arglist>(TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B3_nI</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a15c6dead4ad1b2e172bbc8c6eff812c8</anchor>
      <arglist>(int, TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B_I</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>ad957e5c2d8e6924b8f982517d4f6839e</anchor>
      <arglist>(TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B_I</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a7df94283ae8ebb0571b083d4aff0ec69</anchor>
      <arglist>(int, TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B_II</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a15e82a98bed9bc3ff0f4371681575d39</anchor>
      <arglist>(TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B_II</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a0e569ef6d6a1dda8c1611d27d73edd32</anchor>
      <arglist>(int, TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B_III</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a9b711e561ee2fd4d9c4977f5fe56da76</anchor>
      <arglist>(TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B_III</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a2c0761fc3c3b868746e88c9bb915bc0d</anchor>
      <arglist>(int, TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B_nI</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a431414691120fee63f14598cea6595cf</anchor>
      <arglist>(int, TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B_nI</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a9e72c4f03f78fda7eca867585d77ef8c</anchor>
      <arglist>(int, int, TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>aa58bd3930988f3ec22d9edef6d73875b</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>VariableToIndex</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a902a961cc366d49a292a9e7bcf940447</anchor>
      <arglist>(TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>VariableToIndex</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a57d7412adb82924f97b33e03308e02fe</anchor>
      <arglist>(TReal, int &amp;i, int &amp;j)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>Weight</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>ac484f9c009b7c0f27a28932c1062e236</anchor>
      <arglist>(TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API void</type>
      <name>Weights</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a10f306cf883f26a5759d102bf212c114</anchor>
      <arglist>(TReal, TReal[4])</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const TReal</type>
      <name>LatticeWeights</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a10ff06e755239647942284b5034a1220</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const TReal</type>
      <name>LatticeWeights_I</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>ac39fe7af7b15cfde1ec0f7c3244237a2</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const TReal</type>
      <name>LatticeWeights_II</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a484b76d8299d73d10eb7977d1ae42cff</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MIRTK_Numerics_EXPORT TReal</type>
      <name>LookupTable</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a59ea1ee3c0d75c2e3f7ac2d30e640ac9</anchor>
      <arglist>[LookupTableSize][4]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MIRTK_Numerics_EXPORT TReal</type>
      <name>LookupTable_I</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>aba7935f5ec05669085d5e43264d1b42e</anchor>
      <arglist>[LookupTableSize][4]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MIRTK_Numerics_EXPORT TReal</type>
      <name>LookupTable_II</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a8e5602077821a7f93f38444e420adcfc</anchor>
      <arglist>[LookupTableSize][4]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>LookupTableSize</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a8276e610d143eaf34374e1cdc5a3e392</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MIRTK_Numerics_EXPORT TReal</type>
      <name>WeightLookupTable</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>aa71f2fe1dffabcce72961f8e1a0b1d64</anchor>
      <arglist>[LookupTableSize]</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static MIRTK_Numerics_EXPORT bool</type>
      <name>_initialized</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a4304e4e7134c7de6e77cc2358d106a6b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::BSplineFreeFormTransformation3D</name>
    <filename>classmirtk_1_1BSplineFreeFormTransformation3D.html</filename>
    <base>mirtk::FreeFormTransformation3D</base>
    <member kind="enumeration">
      <type></type>
      <name>ParametricGradientType</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a8abdb416756a2eb2203ad5ec88b14aa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PG_Default</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a8abdb416756a2eb2203ad5ec88b14aa7aac254429f2b16b793560848cdb93a038</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PG_Analytic</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a8abdb416756a2eb2203ad5ec88b14aa7ac81ad49bd6f662fb5a5ba3d38ef69d02</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PG_Convolution</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a8abdb416756a2eb2203ad5ec88b14aa7ac0871e3a2df5d81c5d2447551f98304a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PG_Approximation</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a8abdb416756a2eb2203ad5ec88b14aa7a2716c9c31e65a4b5896d325883d17805</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PG_Analytic</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a8abdb416756a2eb2203ad5ec88b14aa7ac81ad49bd6f662fb5a5ba3d38ef69d02</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PG_Approximation</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a8abdb416756a2eb2203ad5ec88b14aa7a2716c9c31e65a4b5896d325883d17805</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PG_Convolution</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a8abdb416756a2eb2203ad5ec88b14aa7ac0871e3a2df5d81c5d2447551f98304a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PG_Default</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a8abdb416756a2eb2203ad5ec88b14aa7aac254429f2b16b793560848cdb93a038</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddApproximateSplineCoefficients</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a9eb60aaa859d145e49cbdea5725d4891</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, int, double *, double=1., bool=false) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>ad3a6feacc3047ce5fd7badc6cf3e1776</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFsGradient</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a9d70009205fa121c35a10ffc20f200be</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int, double *, double=1.0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>BendingEnergy</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a5a52faa130a4a50d6da2c0bd18988816</anchor>
      <arglist>(double, double, double, double=0, double=NaN, bool=true) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>BendingEnergy</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a31eb6605e22c16d8a896bcd0c250f43e</anchor>
      <arglist>(bool=false, bool=true) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>BendingEnergy</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a798d787f9f6b9c9cb4d589fef3310eb8</anchor>
      <arglist>(const ImageAttributes &amp;, double=NaN, bool=true) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BendingEnergyGradient</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>adb06fc9a9bec42a35d10c78d9e13703f</anchor>
      <arglist>(double *, double=1, bool=false, bool=true, bool=true) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a6d1be161dcfc7c34718d70e598577913</anchor>
      <arglist>(int, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double=1) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSplineFreeFormTransformation3D</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>ac74b3153d374b417e8b959ba671266ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSplineFreeFormTransformation3D</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>af20faaa826bda3434c98b96e1738d62b</anchor>
      <arglist>(double, double, double, double, double, double, double, double, double, double *, double *, double *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSplineFreeFormTransformation3D</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>aca5d487e5a5a6a0eec61cd80d1c4ee26</anchor>
      <arglist>(const ImageAttributes &amp;, double=-1, double=-1, double=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSplineFreeFormTransformation3D</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a5975c624b1738892bf6bc6c296e5f0b3</anchor>
      <arglist>(const BaseImage &amp;, double, double, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSplineFreeFormTransformation3D</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a779ad3c44ac2a009fca4082a19f3b660</anchor>
      <arglist>(const GenericImage&lt; double &gt; &amp;, bool=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSplineFreeFormTransformation3D</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a108f9cf84ec4e802590eaec0fbf3561c</anchor>
      <arglist>(const BSplineFreeFormTransformation3D &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CanModifyDisplacement</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a83b407d413e56004a3cd75268419153e</anchor>
      <arglist>(int=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CanRead</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>ab114f4de029175028952b3ad45f65fba</anchor>
      <arglist>(TransformationType) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DeriveJacobianWrtDOF</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a4a7938abf5f281b9c5ff45edfe18bb2e</anchor>
      <arglist>(Matrix &amp;, int, double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DisplacementAfterDOFChange</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a24a7c591903e40a1be1500be484da57d</anchor>
      <arglist>(int dof, double dv, GenericImage&lt; double &gt; &amp;dx, double t, double t0=-1, const WorldCoordsImage *i2w=NULL) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a8d5594b0f865d5af4cc9bf0312fc505f</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a63c6f10ae5c88ee555ab10f45796f95d</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a84c0db9761afb52e7d1fb02ff0d57765</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateDerivativeOfJacobianWrtDOF</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>aee3b333c86b7c1a23bcfce9f7a8517f5</anchor>
      <arglist>(Matrix &amp;, int, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateDerivativeOfJacobianWrtDOF</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a2c55434a87c688b9d173f253db6de39e</anchor>
      <arglist>(Matrix &amp;, int, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateHessian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>ab4390dc1910fe06a09af2c170e34ac46</anchor>
      <arglist>(Matrix [3], int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateHessian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a9442f23deb852ac035c40c709ab25cd1</anchor>
      <arglist>(Matrix [3], double, double) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateHessian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>aa562b55bdd7d6415391b8a264c70e11d</anchor>
      <arglist>(Matrix [3], int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateHessian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>ab634867ae0c53bb327a1d2e81eb9410f</anchor>
      <arglist>(Matrix [3], double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateInside</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a66bbd7ea184f9cc7595425400003324a</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateJacobian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a7517d5590bfe29592019ca4e935724cf</anchor>
      <arglist>(Matrix &amp;, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateJacobian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>ad8bfee9fd505083b9240ac178b10f187</anchor>
      <arglist>(Matrix &amp;, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateJacobian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a9c6a929e60609dafc8d0bdd156c9d7c0</anchor>
      <arglist>(Matrix &amp;, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateJacobian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>af54ec4709941afc59943c86b236dab9f</anchor>
      <arglist>(Matrix &amp;, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateJacobianDetDerivative</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>afda85bcf368e8beaba7d2b2ac3412e36</anchor>
      <arglist>(double dJ[3], const Matrix &amp;adj, double a, double b, double c, bool wrt_world=true, bool use_spacing=true) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateJacobianDetDerivative</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a8a6ded3d4cdbd882f6f470fb01c3bba3</anchor>
      <arglist>(double dJ[3], const Matrix &amp;adj, int a, int b, int c, bool wrt_world=true, bool use_spacing=true) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateJacobianDetDerivative</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a094c580e7f3a7596d419ea6e053e1ca8</anchor>
      <arglist>(double dJ[3], const Matrix &amp;adj, int i, int j, int k, double x, double y, double z, bool wrt_world=true, bool use_spacing=true) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateJacobianDetDerivative</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a7bc27650321a6066bb2d0af326c623fe</anchor>
      <arglist>(double dJ[3], const Matrix &amp;adj, int cp, double x, double y, double z, bool wrt_world=true, bool use_spacing=true) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateJacobianDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a5c56cce9f8a1946b8dacd972dbc82cc3</anchor>
      <arglist>(double [3], int, int, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateJacobianDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a90b926ff2d4784669e9ac05df8643ea7</anchor>
      <arglist>(double [3], int, int, int, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateJacobianDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a5231e1acac5217bfa2aec3493176d48a</anchor>
      <arglist>(double [3], int, int, int, int, double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateJacobianWorld</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>aada8f5659f906a883188b1d8dea449a0</anchor>
      <arglist>(Matrix &amp;, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateJacobianWorld</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>afd759f30f68b90b226b828a0037d4854</anchor>
      <arglist>(Matrix &amp;, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateLaplacian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>aea7a08c4aedaae8afafb57bf876a7235</anchor>
      <arglist>(double [3], int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateLaplacian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a439010a719bf727e74da3b32bb36c151</anchor>
      <arglist>(double [3], double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateLaplacian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>aaeac168fb767c0bddacdde1637448bd3</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FFDJacobianDetDerivative</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>aa05dec9650881ee2268a257a88f90ab5</anchor>
      <arglist>(double dJ[3], const Matrix &amp;adj, int cp, double x, double y, double z, double=0, double=NaN, bool wrt_world=true, bool use_spacing=true) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FFDJacobianWorld</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>ab2e812e822b97bee143d142daaac8e7a</anchor>
      <arglist>(Matrix &amp;, double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetTAfterSubdivision</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>adb1b211b21974dae4ee62443a3a0f44e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetTSpacingAfterSubdivision</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>af0cf10752ff5ba9eba50fe9eaeff8220</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetXAfterSubdivision</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>afd795100a832d251975e13c07f26cf51</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetXSpacingAfterSubdivision</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a4ee86d77b23664a9a0f40a07d7f8ad25</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetYAfterSubdivision</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>ae09ea5d9b4e4ed5b6533469e48885237</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetYSpacingAfterSubdivision</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a0d59e76142c3c2e8df4234e4509a82f6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetZAfterSubdivision</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>ad6352068fa5f90837f0af33863b42524</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetZSpacingAfterSubdivision</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a76441cf00fcc14bcd69bbbf9c773cd8e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Interpolate</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a39e5f4d52e31fa68fe90bd8fba2887c6</anchor>
      <arglist>(const double *, const double *, const double *=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>aa8725407880487a72477e06fd1453667</anchor>
      <arglist>(double [3], int, int, int, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>KernelSize</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>acf729235c880d0c5b0c732e43b7da89c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalHessian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a24123f7c325ea06e175210a62982ef00</anchor>
      <arglist>(Matrix [3], double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalJacobian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>adb3661720fae758056bc8afefc995a57</anchor>
      <arglist>(Matrix &amp;, double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalTransform</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>aebad88daea4aa079b0b53b00308e4ed9</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a494b563e16e16bdcc22d8bc1ae6947e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a9bec50cd85e43b202a063d037d9a344f</anchor>
      <arglist>(const GenericImage&lt; double &gt; *, double *, const WorldCoordsImage *, const WorldCoordsImage *, double=NaN, double=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a2fad4f6cc68bda791033895d05351bb0</anchor>
      <arglist>(ostream &amp;, Indent=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a216e2c2931e8f446f4be5dc9bebabc98</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Subdivide</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a4b5500e20bb8e73462b8fb9972f4995e</anchor>
      <arglist>(bool=true, bool=true, bool=true, bool=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BSplineFreeFormTransformation3D</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>af7f2c03667bad48ad702f1ea44361fca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a363482f2ca1cc176e103063dfab14755</anchor>
      <arglist>(ParametricGradientType, ParametricGradientCalculation)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Interpolator</type>
      <name>_FFD</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>acf14e0df5d88d14d49dfc1cbc81b55ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Interpolator2D</type>
      <name>_FFD2D</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>af9bff713dd0e8026d9e5631211ea6584</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::BSplineFreeFormTransformation4D</name>
    <filename>classmirtk_1_1BSplineFreeFormTransformation4D.html</filename>
    <base>mirtk::FreeFormTransformation4D</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a3faf1a8ef72c5150c7345460ee0a559d</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFsGradient</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a9847573f8f738bf57f56eb9e82969d30</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int, double *, double=1.0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>BendingEnergy</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a0c7e42dd66143f95a8888e05b5f882ec</anchor>
      <arglist>(double, double, double, double=0, double=NaN, bool=true) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>BendingEnergy</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a9ac7b359acf7ac5ec71125a807c92ed7</anchor>
      <arglist>(bool=false, bool=true) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>BendingEnergy</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>af7412adb90187cb056546306ae7bcd12</anchor>
      <arglist>(const ImageAttributes &amp;, double=NaN, bool=true) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BendingEnergyGradient</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>ab83793a0d6aee0195b1b72310846aa10</anchor>
      <arglist>(double *, double=1.0, bool=false, bool=true, bool=true) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a8835e8e07b824f539c6817dfe4b0b2ca</anchor>
      <arglist>(int, double &amp;, double &amp;, double=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a6c3e0f630f656d55668f18cf2cfc0510</anchor>
      <arglist>(int, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>aa5d0407e21d9affe2dfdb606aa011629</anchor>
      <arglist>(int, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double=1) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSplineFreeFormTransformation4D</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>acb9d5e58ef8adfdf8215645066a987e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSplineFreeFormTransformation4D</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a0fb145264ece8a2fe87f7d46fd2f3627</anchor>
      <arglist>(double, double, double, double, double, double, double, double, double, double, double, double, double *, double *, double *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSplineFreeFormTransformation4D</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a4a052c7c4248f8f2d84ee917b77757c8</anchor>
      <arglist>(const ImageAttributes &amp;, double=-1, double=-1, double=-1, double=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSplineFreeFormTransformation4D</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a7d3a4873baaed0daa911a6a7cfd8a4d5</anchor>
      <arglist>(const BaseImage &amp;, double, double, double, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSplineFreeFormTransformation4D</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a6636122e5399465b7fe308b1fd5babb3</anchor>
      <arglist>(const BSplineFreeFormTransformation4D &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CanRead</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>adb899c3e2d6413234bb7ca33b8ef26ed</anchor>
      <arglist>(TransformationType) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a97c7e7e8575fbfff7bf3685700986143</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateHessian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>ad144ddb6cdd11c536505e70577d81288</anchor>
      <arglist>(Matrix [3], int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateHessian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a8134313c70b2b49ea696b88d2064b89e</anchor>
      <arglist>(Matrix [3], double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateHessianWorld</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>ad51c44810796c84b6368df9200a2f87d</anchor>
      <arglist>(Matrix [3], double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateInside</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>ab92e7c6f5fdedb1a466d968b662f0238</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateJacobian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a3b2b6c0ab5ece98d3998cd33be570949</anchor>
      <arglist>(Matrix &amp;, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateJacobian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a57e325faa58dea28cffec0e19233c95b</anchor>
      <arglist>(Matrix &amp;, double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateJacobianDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>afdf4b9f4e92b2db16fb7b681ea8ac9b4</anchor>
      <arglist>(double [3], int, int, int, int, double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateJacobianDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a0df56bd5226bcef094067da66f877ef4</anchor>
      <arglist>(TransformationJacobian &amp;jac, double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateJacobianWorld</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a17809c9ac55705e3cf7a3136db93fec5</anchor>
      <arglist>(Matrix &amp;, double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateLaplacian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a671c696305b195cde5ab932a65d4ff12</anchor>
      <arglist>(double [3], int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateLaplacian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>acb8954575c393d6aceb05de03d090447</anchor>
      <arglist>(double [3], int, int, int, double) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateLaplacian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a0fe15f36d6b420bd88751171417e0d50</anchor>
      <arglist>(double [3], double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateLaplacian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a9e86460e0ea703ad92c0296980920690</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetTAfterSubdivision</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a2cf65d66102e589389a4522bdf20891b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetTSpacingAfterSubdivision</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>ac9a0ae5f52fb8bd28d34b0764256d4ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetXAfterSubdivision</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a4c62501a393e86f1e47533a747d94737</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetXSpacingAfterSubdivision</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a31c7aa552c450723b54a8eef6f67b328</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetYAfterSubdivision</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a538d07287e5c50cca46ad6be432697b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetYSpacingAfterSubdivision</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a9ea32589a74e46233b71cb2579de3ca0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetZAfterSubdivision</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a4ef8aeafd324fbf031b979edc3f34d04</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetZSpacingAfterSubdivision</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a8e4c7792a18b766127e32d561bae0c57</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Interpolate</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>aa3ce1acacdb82ba84ca50efef901bf2f</anchor>
      <arglist>(const double *, const double *, const double *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a8fa96ce72a91500b2aad7f28a3ac4a7c</anchor>
      <arglist>(Matrix &amp;, int, int, int, int, double, double, double, double, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>aecf703516eb724f8c7b5620328f872b9</anchor>
      <arglist>(double [3], int, int, int, int, double, double, double, double, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a48b3277e8d16d1a637d73726df3f1b1c</anchor>
      <arglist>(TransformationJacobian &amp;, double, double, double, double, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>KernelSize</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a6b47b50b935197ed4e7e41d3feb1f93a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalHessian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a1cf4c53383183df02bcb85e45815af76</anchor>
      <arglist>(Matrix [3], double, double, double, double, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalJacobian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>ada5d48d7a34435e7b7bb29d236456c11</anchor>
      <arglist>(Matrix &amp;, double, double, double, double, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalTransform</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>acc977ed7b33dc25c188616047c684489</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a2afee4af5c8f5911f02bf40ddfd3aee4</anchor>
      <arglist>(const GenericImage&lt; double &gt; *, double *, const WorldCoordsImage *, const WorldCoordsImage *, double=NaN, double=1.0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a0b8848b9800d637c5ec82e0381ff3fe1</anchor>
      <arglist>(ostream &amp;, Indent=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Subdivide</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>af74c7285e79b0e18f0783fca60b7eb92</anchor>
      <arglist>(bool=true, bool=true, bool=true, bool=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BSplineFreeFormTransformation4D</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a63736098ad2ccb66df794c6e50e3d17c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Interpolator</type>
      <name>_FFD</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>ad51a050244c2b07eadb9ec0b7c4ea165</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::BSplineFreeFormTransformationStatistical</name>
    <filename>classmirtk_1_1BSplineFreeFormTransformationStatistical.html</filename>
    <base>mirtk::BSplineFreeFormTransformation3D</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Add</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationStatistical.html</anchorfile>
      <anchor>a1efd2d3e7e7dc5de54035af158cb9e7e</anchor>
      <arglist>(const DOFValue *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationStatistical.html</anchorfile>
      <anchor>aadc11a9ae3fdf47dbc80de08bbc4606f</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFsGradient</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationStatistical.html</anchorfile>
      <anchor>a17c448f523fa44585772260c21ac13f6</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int, double *, double=1.0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BendingEnergyGradient</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationStatistical.html</anchorfile>
      <anchor>ae201126a17a2d80db7fc6151258380da</anchor>
      <arglist>(double *, double=1, bool=false, bool=true, bool=true) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSplineFreeFormTransformationStatistical</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationStatistical.html</anchorfile>
      <anchor>af28f66dcd29ddf4173a62459316c23be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSplineFreeFormTransformationStatistical</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationStatistical.html</anchorfile>
      <anchor>a906445936fc546e7caf96f273115d47d</anchor>
      <arglist>(const ImageAttributes &amp;, CPStatus ****, const Matrix &amp;, const Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSplineFreeFormTransformationStatistical</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationStatistical.html</anchorfile>
      <anchor>a82d505053032fd18c5e4646b8ee20372</anchor>
      <arglist>(const BSplineFreeFormTransformationStatistical &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CropPadPassiveCPs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationStatistical.html</anchorfile>
      <anchor>a4bc29be9cf80086383520d81712f1b8e</anchor>
      <arglist>(int, int, int=0, int=0, bool=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>DOFGradientNorm</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationStatistical.html</anchorfile>
      <anchor>a63d2a1798f63d1ccb149ad90e69f053e</anchor>
      <arglist>(const double *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationStatistical.html</anchorfile>
      <anchor>a3107545efa00c619aa70ebcf7dd47b3d</anchor>
      <arglist>(const ImageAttributes &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Interpolate</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationStatistical.html</anchorfile>
      <anchor>a10aa219596b5234822e9eaead773a5ed</anchor>
      <arglist>(const double *, const double *, const double *=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationStatistical.html</anchorfile>
      <anchor>a3026f363babd994a70ce44d3ef1032c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationStatistical.html</anchorfile>
      <anchor>a10586278c9c878f3780358ac045b570f</anchor>
      <arglist>(const GenericImage&lt; double &gt; *, double *, const WorldCoordsImage *, const WorldCoordsImage *, double=1, double=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationStatistical.html</anchorfile>
      <anchor>a108c7066c2d73cfce9432ca2b4262f6a</anchor>
      <arglist>(ostream &amp;, Indent=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationStatistical.html</anchorfile>
      <anchor>afefeac92c77277ba5b55ca3c4b0dd68b</anchor>
      <arglist>(int, DOFValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationStatistical.html</anchorfile>
      <anchor>aefa0629df0318f6714fce8752e43a97d</anchor>
      <arglist>(const DOFValue *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReadSDM</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationStatistical.html</anchorfile>
      <anchor>a9039551c9f2f6de1d71a17eb6e981677</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationStatistical.html</anchorfile>
      <anchor>aa03caab32acaa179ac6cf234fb56e9fe</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UpdateCPs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationStatistical.html</anchorfile>
      <anchor>a27af8228f05507df440fcc668b5baf54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UpdateDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationStatistical.html</anchorfile>
      <anchor>a4a7a2e9df9660bc55dccff72d356a7a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Verify</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationStatistical.html</anchorfile>
      <anchor>a8940ddb54de4b1a650b775043d937039</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cofstream &amp;</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationStatistical.html</anchorfile>
      <anchor>a634dadcb0d53f676ae4c5da03b4e17c0</anchor>
      <arglist>(Cofstream &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteSDM</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationStatistical.html</anchorfile>
      <anchor>ae268f842e9284c3c8a0a934f00f3cf8e</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BSplineFreeFormTransformationStatistical</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationStatistical.html</anchorfile>
      <anchor>a75140cde9e640aa76a366b5fe5c316d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Cifstream &amp;</type>
      <name>ReadDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationStatistical.html</anchorfile>
      <anchor>a9712e363091c7eaf6d30f45e823553a0</anchor>
      <arglist>(Cifstream &amp;, TransformationType)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::BSplineFreeFormTransformationSV</name>
    <filename>classmirtk_1_1BSplineFreeFormTransformationSV.html</filename>
    <base>mirtk::BSplineFreeFormTransformation3D</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApproximateAsNew</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a19838674bef58a45d0371c83a7cb120e</anchor>
      <arglist>(const ImageAttributes &amp;, const Transformation *, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApproximateAsNew</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>ae785aba4ef824b3054c2350c5c529d4f</anchor>
      <arglist>(GenericImage&lt; double &gt; &amp;, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApproximateAsNew</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>ac5998b3e067bf49cca6c9a031c54d2fc</anchor>
      <arglist>(GenericImage&lt; double &gt; &amp;, bool, int=3, int=8)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>ab9a6fde4123e448d5d09676299e96ac2</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFsGradient</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a47922eec617ec136c4e3ebb0315cce14</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int, double *, double=1.0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApproximateVelocitiesAsNew</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>aa538af369ea4dfacaf792b81cb7657bf</anchor>
      <arglist>(GenericImage&lt; double &gt; &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ImageAttributes</type>
      <name>ApproximationDomain</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a92d95349c236fb5945049d952c410fdf</anchor>
      <arglist>(const ImageAttributes &amp;, const Transformation *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSplineFreeFormTransformationSV</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>aaa373256279abc0af0efac4793d5e737</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSplineFreeFormTransformationSV</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a344bf0e2aa41a94c7eab74ada4711fda</anchor>
      <arglist>(const ImageAttributes &amp;, double=-1, double=-1, double=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSplineFreeFormTransformationSV</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>ae10f3d771d663f96c7f4668049baf354</anchor>
      <arglist>(const BaseImage &amp;, double, double, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSplineFreeFormTransformationSV</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a6e41a7b3b1fb0bd9406c301440a8dd04</anchor>
      <arglist>(const GenericImage&lt; double &gt; &amp;, bool=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSplineFreeFormTransformationSV</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>aeed3323081905bf53c1dc9f99e1411d6</anchor>
      <arglist>(const BSplineFreeFormTransformationSV &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CanRead</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a66496dea25a884b3c6f48144054745ce</anchor>
      <arglist>(TransformationType) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>CombineWith</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>ada2452a378cd095f816590b108c43872</anchor>
      <arglist>(const Transformation *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>CombineWith</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>ae14d0e50ef906a3aa00281e49db6a551</anchor>
      <arglist>(const BSplineFreeFormTransformationSV *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a5d1ff804ac2bf2ee8571603e9cbc0fa9</anchor>
      <arglist>(GenericImage&lt; double &gt; &amp;, double, double=NaN, const WorldCoordsImage *=NULL) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>af1e2cb2f622c795715cea17c64967f3e</anchor>
      <arglist>(GenericImage&lt; float &gt; &amp;, double, double=NaN, const WorldCoordsImage *=NULL) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>af27747eccc14618862d721dc0e4b4c1f</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateJacobianDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a5d42804a19ac8c69aac8d6508bc03646</anchor>
      <arglist>(TransformationJacobian &amp;, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateJacobianDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>ad78b04dd3f37e7f49dcdb504c76510c9</anchor>
      <arglist>(TransformationJacobian &amp;, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateJacobianDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a1bdfc5131c436d74814ca6249f79626d</anchor>
      <arglist>(TransformationJacobian &amp;, double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateJacobianWorld</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>ad2e5713866a59e3a25ef74bdc0bd2014</anchor>
      <arglist>(Matrix &amp;, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a3c40f3e8e92395fbb5b92dec48f31bc2</anchor>
      <arglist>(const ImageAttributes &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a3239617582a71f1133406614571d63c7</anchor>
      <arglist>(const ImageAttributes &amp;, double, double, double, const Transformation *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IntegrateVelocities</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>aee3d5715e8661c06c94432496f697118</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double T=1.0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Interpolate</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a8383149e0414b92895f6dc367653c3d3</anchor>
      <arglist>(const double *, const double *, const double *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>InterpolateVelocities</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>ac2e2a3b89619eec79fe81b543e0e0886</anchor>
      <arglist>(const double *, const double *, const double *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InverseDisplacement</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>aba4105ba66a605bc32468f683a9278e2</anchor>
      <arglist>(GenericImage&lt; double &gt; &amp;, double, double=NaN, const WorldCoordsImage *=NULL) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InverseDisplacement</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a922312e63d1241a73c5b0b06fd73ff67</anchor>
      <arglist>(GenericImage&lt; float &gt; &amp;, double, double=NaN, const WorldCoordsImage *=NULL) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Invert</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>afffe94f3fdf2c8cf0339f69048d6e14f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDetDerivative</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>ab45a693eb95748d7772d757e7b0b7928</anchor>
      <arglist>(double dJ[3], const Matrix &amp;adj, int cp, double x, double y, double z, double t=0, double t0=NaN, bool wrt_world=true, bool use_spacing=true) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a222ea103af83f9afe2235ecaca9cc2ff</anchor>
      <arglist>(Matrix &amp;, int, double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>aa7cd4cfe85992ce31388b52d833b01f8</anchor>
      <arglist>(double [3], int, double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a76e4de5b82bc9a46c01dc65ddc5f09a8</anchor>
      <arglist>(TransformationJacobian &amp;, double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalHessian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>ad8a8149c7edc67aa1de61a0ac71fe527</anchor>
      <arglist>(Matrix [3], double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LocalInverse</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a3e0f00d287f310a79a6061dbdd663edc</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalJacobian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a6c0e9a147d2979e0112d6c3c87b862f1</anchor>
      <arglist>(Matrix &amp;, double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalTransform</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a2cc563142202f9801800aac4f29e1690</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a5802f003b5ba258a9b6f765811b178fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a507bba642a743c331f25040555d655a8</anchor>
      <arglist>(const GenericImage&lt; double &gt; *, double *, const WorldCoordsImage *, const WorldCoordsImage *, double=-1, double=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>ac0a3b1fffbbd98bca166b862adddf3ab</anchor>
      <arglist>(const PointSet &amp;, const Vector3D&lt; double &gt; *, double *, double=0, double=-1, double=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a536d7cb3281384ad66462f9bbb8df109</anchor>
      <arglist>(ostream &amp;, Indent=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>RequiresCachingOfDisplacements</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a42149ddef0b317686fa8b7126cd05223</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ScaleVelocities</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a3348809eec1a0c001544550b543df044</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ScalingAndSquaring</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a67669bdb31a9d01d3680d15c1e0faea2</anchor>
      <arglist>(GenericImage&lt; VoxelType &gt; *d, double T=1.0, const WorldCoordsImage *wc=NULL) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ScalingAndSquaring</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a7780dc9124a8cbc642845edcc1c324f9</anchor>
      <arglist>(const ImageAttributes &amp;attr, GenericImage&lt; VoxelType &gt; *d, GenericImage&lt; VoxelType &gt; *dx, GenericImage&lt; VoxelType &gt; *dj=NULL, GenericImage&lt; VoxelType &gt; *lj=NULL, double T=1.0, const WorldCoordsImage *wc=NULL) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a4fd8096c1ba034641e95eb11a3342778</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Subdivide</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>abcb071336370e1ea9ba787c42eb0270c</anchor>
      <arglist>(bool=true, bool=true, bool=true, bool=true)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>UpperIntegrationLimit</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a38d04d964ec3cb33ce679739238673e9</anchor>
      <arglist>(double t, double t0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Velocity</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a0dbabd3b1775623f92e16e45593bc8a4</anchor>
      <arglist>(GenericImage&lt; float &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Velocity</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>ad28c304e54302b778b593b6aed9ce0b1</anchor>
      <arglist>(GenericImage&lt; double &gt; &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BSplineFreeFormTransformationSV</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a95670631a1aa4601d04bab569dc1b953</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>EvaluateBCHFormula</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a36572e3aa4739184e16731be10a94297</anchor>
      <arglist>(int, CPImage &amp;, double, const CPImage &amp;, double, const CPImage &amp;, bool=false) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>InitializeExtrapolator</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a18d69756567d2fa85c5f042a9dfed608</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>NumberOfStepsForIntervalLength</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>aae7c641f638f3fff359182c75124e2f4</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>NumberOfStepsForIntervalLength</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a7ddf5a6151600e0acd7ccbbda70f7b49</anchor>
      <arglist>(double, int) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a13c2da2272ed71d9ed8e3dbfc8cdeaa3</anchor>
      <arglist>(const GenericImage&lt; double &gt; *, double *, const WorldCoordsImage *, const WorldCoordsImage *, double, double, double) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Cifstream &amp;</type>
      <name>ReadDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a3357c39558d89e08a33d2fffc8b2144d</anchor>
      <arglist>(Cifstream &amp;, TransformationType)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>StepLengthForIntervalLength</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a20e907dca075677c93747597a5e62087</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Cofstream &amp;</type>
      <name>WriteDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>ac0d8ef086a907d6a32600a2af88b539b</anchor>
      <arglist>(Cofstream &amp;) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::BSplineFreeFormTransformationTD</name>
    <filename>classmirtk_1_1BSplineFreeFormTransformationTD.html</filename>
    <base>mirtk::BSplineFreeFormTransformation4D</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApproximateAsNew</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>a9f6f8a6688a1563e90bf63fddf63c293</anchor>
      <arglist>(GenericImage&lt; double &gt; **, const double *, const double *, int, bool=false, int=3, int=8)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>a3ea3154dd1042361c83d616e36d4106d</anchor>
      <arglist>(const GenericImage&lt; double &gt; *const *, const double *, const double *, int, bool=false, int=3, int=8)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>a74031dc4fec84397b9f99051ee4f3a89</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFsGradient</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>a0952f1c4a52caa07648632c8dfa56d41</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int, double *, double=1.0) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSplineFreeFormTransformationTD</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>a1d0ac69e058751472718a812a1a94deb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSplineFreeFormTransformationTD</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>a2675948932258b04451e9b06207d64c9</anchor>
      <arglist>(const ImageAttributes &amp;, double=-1, double=-1, double=-1, double=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSplineFreeFormTransformationTD</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>a0e103d34da94d8d70810cc41a7381bf9</anchor>
      <arglist>(const BaseImage &amp;, double, double, double, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSplineFreeFormTransformationTD</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>ac9fe497e9f5017f7ed9de9dc1589432f</anchor>
      <arglist>(const BSplineFreeFormTransformationTD &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CanRead</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>a5ce261e7d93b708dc481308cdf01f57c</anchor>
      <arglist>(TransformationType) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Interpolate</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>a58a5e8ebcba576edc9e34e443755cf3d</anchor>
      <arglist>(const double *, const double *, const double *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Invert</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>a2d33ea7864e7e74a55178525f0c04b40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>a28b8b88358a05306ea1ad93960947cff</anchor>
      <arglist>(Matrix &amp;, int, int, int, int, double, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>a0d1f2ca4045117b37b36ac5ad6009d39</anchor>
      <arglist>(double [3], int, int, int, int, double, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>a488944becb578ae31b31bd121733449c</anchor>
      <arglist>(TransformationJacobian &amp;, double, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalHessian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>ae2bf3bc01da8882ac77c8ee0dd5d61a8</anchor>
      <arglist>(Matrix [3], double, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LocalInverse</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>a797b3508a3abc2e0ce46b61e42ddf6d2</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalJacobian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>affe63cc90ea526e676c5d6d979b8bfe2</anchor>
      <arglist>(Matrix &amp;, double, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalTransform</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>ae0248a249f45f9f1a00d083df2e3456b</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>a1ccff200d4417c0385e908d5dc70a65a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>a4e05ae0db04a9b994f13479d86d015db</anchor>
      <arglist>(const GenericImage&lt; double &gt; *, double *, const WorldCoordsImage *, const WorldCoordsImage *, double=1, double=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>a8b407418d17b31d58da3991c913b21ab</anchor>
      <arglist>(const PointSet &amp;, const Vector3D&lt; double &gt; *, double *, double=0, double=-1, double=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>a019b0d4faa02c53ba64a70bf7fff250b</anchor>
      <arglist>(ostream &amp;, Indent=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>a53e78cde324c8f1dcc683e29e5c3cb08</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>TransformAndJacobian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>aaee06da8c191569c2394a451675b9c4f</anchor>
      <arglist>(Matrix &amp;, double &amp;, double &amp;, double &amp;, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>TransformAndJacobianDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>a807d14b1f0b0260003d8d436ef00dd57</anchor>
      <arglist>(Matrix &amp;, int, int, int, int, double &amp;, double &amp;, double &amp;, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>TransformAndJacobianDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>a1c503ee084e785e59f4ff94d43979179</anchor>
      <arglist>(Matrix &amp;, int, double &amp;, double &amp;, double &amp;, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>TransformAndJacobianDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>a83c541b049a01ef50c5805ead92bacde</anchor>
      <arglist>(TransformationJacobian &amp;, double &amp;, double &amp;, double &amp;, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BSplineFreeFormTransformationTD</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>a8daaf69bf14f75d0d39fe6ae569f3e0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Cifstream &amp;</type>
      <name>ReadDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>ac1d5a2fdc863289575036bb4ebac04a5</anchor>
      <arglist>(Cifstream &amp;, TransformationType)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Cofstream &amp;</type>
      <name>WriteDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>a52edb60df4de90f49666fc4ee1dd8baa</anchor>
      <arglist>(Cofstream &amp;) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::BSplineInterpolateImageFunction</name>
    <filename>classmirtk_1_1BSplineInterpolateImageFunction.html</filename>
    <base>GenericBSplineInterpolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>BSplineInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1BSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ae48585bb353fa345c065c963dbcaa5f7</anchor>
      <arglist>(int degree=3)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::BSplineInterpolateImageFunction2D</name>
    <filename>classmirtk_1_1BSplineInterpolateImageFunction2D.html</filename>
    <base>GenericBSplineInterpolateImageFunction2D&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>BSplineInterpolateImageFunction2D</name>
      <anchorfile>classmirtk_1_1BSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>aa8d609fb4c87389bd9d91d0b906f480b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::BSplineInterpolateImageFunction3D</name>
    <filename>classmirtk_1_1BSplineInterpolateImageFunction3D.html</filename>
    <base>GenericBSplineInterpolateImageFunction3D&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>BSplineInterpolateImageFunction3D</name>
      <anchorfile>classmirtk_1_1BSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a2cc9483fdbd58d75c1b1bf0804792fb4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::BSplineInterpolateImageFunction4D</name>
    <filename>classmirtk_1_1BSplineInterpolateImageFunction4D.html</filename>
    <base>GenericBSplineInterpolateImageFunction4D&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>BSplineInterpolateImageFunction4D</name>
      <anchorfile>classmirtk_1_1BSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a5fffdb218d4d90d6080df2572bf826c6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::UnaryVoxelFunction::CastToGreyValue</name>
    <filename>structmirtk_1_1UnaryVoxelFunction_1_1CastToGreyValue.html</filename>
    <base>mirtk::VoxelFunction</base>
  </compound>
  <compound kind="class">
    <name>mirtk::CellDataFilter</name>
    <filename>classmirtk_1_1CellDataFilter.html</filename>
    <base>mirtk::MeshFilter</base>
    <member kind="function">
      <type>void</type>
      <name>GetEdgeNeighbors</name>
      <anchorfile>classmirtk_1_1CellDataFilter.html</anchorfile>
      <anchor>ace6f940bbcedb44e376990d7906c7fd1</anchor>
      <arglist>(int, UnorderedSet&lt; int &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetNodeNeighbors</name>
      <anchorfile>classmirtk_1_1CellDataFilter.html</anchorfile>
      <anchor>aafcdfc6af3c63cde9e47cc3b4e8c1825</anchor>
      <arglist>(int, UnorderedSet&lt; int &gt; &amp;) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CellDataFilter</name>
      <anchorfile>classmirtk_1_1CellDataFilter.html</anchorfile>
      <anchor>acaa2083289121d8689820821e2fc3adf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CellDataFilter</name>
      <anchorfile>classmirtk_1_1CellDataFilter.html</anchorfile>
      <anchor>ab8815d2c9d895c7aab824a9b5b822fc6</anchor>
      <arglist>(const CellDataFilter &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1CellDataFilter.html</anchorfile>
      <anchor>acf7504384820f01202eb28e3e8c88731</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CellDataFilter &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1CellDataFilter.html</anchorfile>
      <anchor>a18d3fba47e10ba3d669a09c814d18469</anchor>
      <arglist>(const CellDataFilter &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CellDataFilter</name>
      <anchorfile>classmirtk_1_1CellDataFilter.html</anchorfile>
      <anchor>a8e8a9aa3147da6d0605d53b9d5b94377</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::CharbonnierErrorFunction</name>
    <filename>classmirtk_1_1CharbonnierErrorFunction.html</filename>
    <base>mirtk::RadialErrorFunction</base>
    <member kind="function">
      <type></type>
      <name>CharbonnierErrorFunction</name>
      <anchorfile>classmirtk_1_1CharbonnierErrorFunction.html</anchorfile>
      <anchor>a3643b28625b4cee05e2fcfb8345a8209</anchor>
      <arglist>(double threshold=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CharbonnierErrorFunction</name>
      <anchorfile>classmirtk_1_1CharbonnierErrorFunction.html</anchorfile>
      <anchor>a99097d5722de10d5bbeb9d191262342a</anchor>
      <arglist>(const CharbonnierErrorFunction &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Derivative</name>
      <anchorfile>classmirtk_1_1CharbonnierErrorFunction.html</anchorfile>
      <anchor>a970a5436135e6b086d18ef53f5ef1bdb</anchor>
      <arglist>(double d) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RadialErrorFunction *</type>
      <name>NewInstance</name>
      <anchorfile>classmirtk_1_1CharbonnierErrorFunction.html</anchorfile>
      <anchor>acd60ca08f12bb892b8e017d6eefd7378</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1CharbonnierErrorFunction.html</anchorfile>
      <anchor>a0a6763a24ccc6dc8e0d574134827e646</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1CharbonnierErrorFunction.html</anchorfile>
      <anchor>a536559013001908592e0c870d0ecbe7d</anchor>
      <arglist>(const char *name, const char *value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TypeId</type>
      <name>Type</name>
      <anchorfile>classmirtk_1_1CharbonnierErrorFunction.html</anchorfile>
      <anchor>ad97d38f3ea9be22929f980619eff4cff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Value</name>
      <anchorfile>classmirtk_1_1CharbonnierErrorFunction.html</anchorfile>
      <anchor>a710df931af15d8460d053704da8ccf1b</anchor>
      <arglist>(double d) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ChordLengthBoundarySegmentParameterizer</name>
    <filename>classmirtk_1_1ChordLengthBoundarySegmentParameterizer.html</filename>
    <base>mirtk::BoundarySegmentParameterizer</base>
    <member kind="function">
      <type></type>
      <name>ChordLengthBoundarySegmentParameterizer</name>
      <anchorfile>classmirtk_1_1ChordLengthBoundarySegmentParameterizer.html</anchorfile>
      <anchor>a0bd034ec061019b843cd9d9f6ea5c1fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ChordLengthBoundarySegmentParameterizer</name>
      <anchorfile>classmirtk_1_1ChordLengthBoundarySegmentParameterizer.html</anchorfile>
      <anchor>a1e5adaef8c2ad8592c3f92ed49c43dd0</anchor>
      <arglist>(const ChordLengthBoundarySegmentParameterizer &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BoundarySegmentParameterizer *</type>
      <name>NewCopy</name>
      <anchorfile>classmirtk_1_1ChordLengthBoundarySegmentParameterizer.html</anchorfile>
      <anchor>a25f55cd97ddf967d203725c06c0968f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ChordLengthBoundarySegmentParameterizer &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1ChordLengthBoundarySegmentParameterizer.html</anchorfile>
      <anchor>ac1e3d40130b9a80f882e2982e08dfb27</anchor>
      <arglist>(const ChordLengthBoundarySegmentParameterizer &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ChordLengthBoundarySegmentParameterizer</name>
      <anchorfile>classmirtk_1_1ChordLengthBoundarySegmentParameterizer.html</anchorfile>
      <anchor>a2f4a52423644b20bb5fa40d1213c9113</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Parameterize</name>
      <anchorfile>classmirtk_1_1ChordLengthBoundarySegmentParameterizer.html</anchorfile>
      <anchor>a3eb40c4a5875a1504a97e40bef9cf3dc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ChordLengthSurfaceMapper</name>
    <filename>classmirtk_1_1ChordLengthSurfaceMapper.html</filename>
    <base>mirtk::SymmetricWeightsSurfaceMapper</base>
    <member kind="function">
      <type></type>
      <name>ChordLengthSurfaceMapper</name>
      <anchorfile>classmirtk_1_1ChordLengthSurfaceMapper.html</anchorfile>
      <anchor>a6d7ede674fc59f2868842ab8d1def40c</anchor>
      <arglist>(int p=2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ChordLengthSurfaceMapper</name>
      <anchorfile>classmirtk_1_1ChordLengthSurfaceMapper.html</anchorfile>
      <anchor>a9b8127b61cd6636be0a9ea1666faa769</anchor>
      <arglist>(const ChordLengthSurfaceMapper &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ChordLengthSurfaceMapper &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1ChordLengthSurfaceMapper.html</anchorfile>
      <anchor>a97c77013eb33dab6ac58ef58c01babc2</anchor>
      <arglist>(const ChordLengthSurfaceMapper &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ChordLengthSurfaceMapper</name>
      <anchorfile>classmirtk_1_1ChordLengthSurfaceMapper.html</anchorfile>
      <anchor>acfb506db048833d171f2dadf262c8cc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Weight</name>
      <anchorfile>classmirtk_1_1ChordLengthSurfaceMapper.html</anchorfile>
      <anchor>a5830ee3e48fcee45c18be8d61d092619</anchor>
      <arglist>(int i, int j) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::Cifstream</name>
    <filename>classmirtk_1_1Cifstream.html</filename>
    <base>mirtk::Object</base>
    <member kind="function">
      <type></type>
      <name>Cifstream</name>
      <anchorfile>classmirtk_1_1Cifstream.html</anchorfile>
      <anchor>a184a1399759194b714337c30474b46eb</anchor>
      <arglist>(const char *=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Close</name>
      <anchorfile>classmirtk_1_1Cifstream.html</anchorfile>
      <anchor>a5a9c1a5dd735d24078dae059b2a0bd22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MIRTK_Common_DEPRECATED int</type>
      <name>IsSwapped</name>
      <anchorfile>classmirtk_1_1Cifstream.html</anchorfile>
      <anchor>a6588e137f8970a43f3b317d3c2efa688</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MIRTK_Common_DEPRECATED void</type>
      <name>IsSwapped</name>
      <anchorfile>classmirtk_1_1Cifstream.html</anchorfile>
      <anchor>a24fee7857cf2f81f49e9d6f041645085</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Open</name>
      <anchorfile>classmirtk_1_1Cifstream.html</anchorfile>
      <anchor>af40c2bd4d8f15d33db747d12e285cce7</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1Cifstream.html</anchorfile>
      <anchor>a2ea43fedc9cb9fae6507745df718e256</anchor>
      <arglist>(char *, long, long)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ReadAsChar</name>
      <anchorfile>classmirtk_1_1Cifstream.html</anchorfile>
      <anchor>a0a42e3a502c741a14a5d3449d937de8e</anchor>
      <arglist>(char *, long, long=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ReadAsDouble</name>
      <anchorfile>classmirtk_1_1Cifstream.html</anchorfile>
      <anchor>a169365a9ead026d2d50d18f743458aa8</anchor>
      <arglist>(double *, long, long=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ReadAsFloat</name>
      <anchorfile>classmirtk_1_1Cifstream.html</anchorfile>
      <anchor>ac46c12974106ef9b28d7ccefe5dd7623</anchor>
      <arglist>(float *, long, long offset=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ReadAsInt</name>
      <anchorfile>classmirtk_1_1Cifstream.html</anchorfile>
      <anchor>a8d11dc163c58e5192419537d31e654be</anchor>
      <arglist>(int *, long, long=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ReadAsShort</name>
      <anchorfile>classmirtk_1_1Cifstream.html</anchorfile>
      <anchor>a72b06860648214e1c1fbb1d30c93a031</anchor>
      <arglist>(short *, long, long=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ReadAsString</name>
      <anchorfile>classmirtk_1_1Cifstream.html</anchorfile>
      <anchor>af67520e28c297590277533655e4b6df7</anchor>
      <arglist>(char *, long, long=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ReadAsUChar</name>
      <anchorfile>classmirtk_1_1Cifstream.html</anchorfile>
      <anchor>a8074e1647a8fcb35855ae09c1b292c74</anchor>
      <arglist>(unsigned char *, long, long=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ReadAsUInt</name>
      <anchorfile>classmirtk_1_1Cifstream.html</anchorfile>
      <anchor>a8a765eea8b64b19687a017165f3fb3aa</anchor>
      <arglist>(unsigned int *, long, long=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ReadAsUShort</name>
      <anchorfile>classmirtk_1_1Cifstream.html</anchorfile>
      <anchor>acfdeca3ea2fcb701339df3ee5a664951</anchor>
      <arglist>(unsigned short *, long, long=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Seek</name>
      <anchorfile>classmirtk_1_1Cifstream.html</anchorfile>
      <anchor>aa057d5864ace89a2311830325460fa1d</anchor>
      <arglist>(long)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>Tell</name>
      <anchorfile>classmirtk_1_1Cifstream.html</anchorfile>
      <anchor>abe712bdacafe60a286bd5d47ffd7b514</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Cifstream</name>
      <anchorfile>classmirtk_1_1Cifstream.html</anchorfile>
      <anchor>a01c8fa5d914cbfcb04969f1ab31a9182</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::CityBlockDistanceTransform</name>
    <filename>classmirtk_1_1CityBlockDistanceTransform.html</filename>
    <templarg></templarg>
    <base>mirtk::ImageToImage</base>
    <member kind="function">
      <type></type>
      <name>CityBlockDistanceTransform</name>
      <anchorfile>classmirtk_1_1CityBlockDistanceTransform.html</anchorfile>
      <anchor>af2e2353f5ce6261fa158f5dcfffaf446</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1CityBlockDistanceTransform.html</anchorfile>
      <anchor>a5e46fa1e80c35596dbe83068a31e42a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CityBlockDistanceTransform</name>
      <anchorfile>classmirtk_1_1CityBlockDistanceTransform.html</anchorfile>
      <anchor>ae2dfe0b9ca7e8037cd3882e6f45240f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1CityBlockDistanceTransform.html</anchorfile>
      <anchor>afbf3102f51cd8be3680d0248b2e86d37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1CityBlockDistanceTransform.html</anchorfile>
      <anchor>a960618557f6f9cb4a0948a0ea54125ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize2D</name>
      <anchorfile>classmirtk_1_1CityBlockDistanceTransform.html</anchorfile>
      <anchor>a938039d9fc8cbc9427aad5d62b2bf35f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize3D</name>
      <anchorfile>classmirtk_1_1CityBlockDistanceTransform.html</anchorfile>
      <anchor>a092dc0faa7336705037795fc140ac674</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Run2D</name>
      <anchorfile>classmirtk_1_1CityBlockDistanceTransform.html</anchorfile>
      <anchor>a0097f1f59d4d3bd35fc50bdd45d9cf20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Run3D</name>
      <anchorfile>classmirtk_1_1CityBlockDistanceTransform.html</anchorfile>
      <anchor>a7a33d64c1a8756eace8c3296acde3dc2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::UnaryVoxelFunction::Clamp</name>
    <filename>structmirtk_1_1UnaryVoxelFunction_1_1Clamp.html</filename>
    <templarg></templarg>
    <base>mirtk::VoxelFunction</base>
    <member kind="variable">
      <type>T</type>
      <name>_LowerThreshold</name>
      <anchorfile>structmirtk_1_1UnaryVoxelFunction_1_1Clamp.html</anchorfile>
      <anchor>a13f3a918b0f2cf334d20ddc9f319f761</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>_UpperThreshold</name>
      <anchorfile>structmirtk_1_1UnaryVoxelFunction_1_1Clamp.html</anchorfile>
      <anchor>a840c23d9900453f9cdd3d7eaaebcd5e5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::Clamp</name>
    <filename>classmirtk_1_1data_1_1op_1_1Clamp.html</filename>
    <base>mirtk::data::op::ElementWiseUnaryOp</base>
    <member kind="function">
      <type></type>
      <name>Clamp</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Clamp.html</anchorfile>
      <anchor>ac69577f6db4b2c780d4f9b56ca9d1d05</anchor>
      <arglist>(double l, double u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Clamp</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Clamp.html</anchorfile>
      <anchor>a2048d9e38f6c2b74a8354dbff2b60034</anchor>
      <arglist>(const double *l, const double *u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Clamp</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Clamp.html</anchorfile>
      <anchor>a4a03f4388d92e33df656269af07ddf17</anchor>
      <arglist>(double l, const double *u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Clamp</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Clamp.html</anchorfile>
      <anchor>ac8710b59e0e759736aa796a3bb6933b1</anchor>
      <arglist>(const double *l, double u)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Op</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Clamp.html</anchorfile>
      <anchor>a7d2de949f3938f4dfc648a856038cf07</anchor>
      <arglist>(double value, bool &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Clamp.html</anchorfile>
      <anchor>aa2a63da5a0f9098426d0d80415eb0759</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::CloseCellData</name>
    <filename>classmirtk_1_1CloseCellData.html</filename>
    <base>mirtk::CellDataFilter</base>
    <member kind="function">
      <type></type>
      <name>CloseCellData</name>
      <anchorfile>classmirtk_1_1CloseCellData.html</anchorfile>
      <anchor>a322ea04bd83c42120e2c574f0fdbab91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CloseCellData</name>
      <anchorfile>classmirtk_1_1CloseCellData.html</anchorfile>
      <anchor>a3d37a84d00f520c5948a7bcc7300a7fe</anchor>
      <arglist>(const CloseCellData &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CloseCellData &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1CloseCellData.html</anchorfile>
      <anchor>a4489a9dbe0bff6deae3921c924ad29d3</anchor>
      <arglist>(const CloseCellData &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CloseCellData</name>
      <anchorfile>classmirtk_1_1CloseCellData.html</anchorfile>
      <anchor>ab1f5011ac65032dba5095c7a3be7f1c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Execute</name>
      <anchorfile>classmirtk_1_1CloseCellData.html</anchorfile>
      <anchor>a4a9d629f5b9258aa8ccb7e428a4c50c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1CloseCellData.html</anchorfile>
      <anchor>ad724dedb50bebae1439e83a3f23d158c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ClosePointData</name>
    <filename>classmirtk_1_1ClosePointData.html</filename>
    <base>mirtk::PointDataFilter</base>
    <member kind="function">
      <type></type>
      <name>ClosePointData</name>
      <anchorfile>classmirtk_1_1ClosePointData.html</anchorfile>
      <anchor>a037d509d3d1084a48ce9103781edf6be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClosePointData</name>
      <anchorfile>classmirtk_1_1ClosePointData.html</anchorfile>
      <anchor>a68f10fe05ffe5b4c0eca834d5755cc44</anchor>
      <arglist>(const ClosePointData &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ClosePointData &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1ClosePointData.html</anchorfile>
      <anchor>a697e5480cfb6488f8bb9842742e568fb</anchor>
      <arglist>(const ClosePointData &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ClosePointData</name>
      <anchorfile>classmirtk_1_1ClosePointData.html</anchorfile>
      <anchor>ab2897bbf448ff7e39c39e1b7ad2083ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Execute</name>
      <anchorfile>classmirtk_1_1ClosePointData.html</anchorfile>
      <anchor>a490db7cb9eb6b4ddf9d92e0cdc3a4f57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1ClosePointData.html</anchorfile>
      <anchor>a00ddd8295af0cd0ac2da9a6da4a2dfc6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ClosestCell</name>
    <filename>classmirtk_1_1ClosestCell.html</filename>
    <base>mirtk::PointCorrespondence</base>
    <member kind="enumeration">
      <type></type>
      <name>LocatorType</name>
      <anchorfile>classmirtk_1_1ClosestCell.html</anchorfile>
      <anchor>a3dc5e0e4c095eb5f1f58a0ca0b9b8408</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClosestCell</name>
      <anchorfile>classmirtk_1_1ClosestCell.html</anchorfile>
      <anchor>ab79d31c8fedbbd0cefe8beca0374e55e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClosestCell</name>
      <anchorfile>classmirtk_1_1ClosestCell.html</anchorfile>
      <anchor>ac667140a77588337a340fdf186ba0bea</anchor>
      <arglist>(const ClosestCell &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetInputSourcePoint</name>
      <anchorfile>classmirtk_1_1ClosestCell.html</anchorfile>
      <anchor>a942d3b6b7d0daff8223958e0da3340e7</anchor>
      <arglist>(int, Point &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetInputTargetPoint</name>
      <anchorfile>classmirtk_1_1ClosestCell.html</anchorfile>
      <anchor>a848163734c7f6151ca473a0624a38f70</anchor>
      <arglist>(int, Point &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetSourcePoint</name>
      <anchorfile>classmirtk_1_1ClosestCell.html</anchorfile>
      <anchor>a80ae4f99064f3c8a4b1d235e9384c0e5</anchor>
      <arglist>(int, Point &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetTargetPoint</name>
      <anchorfile>classmirtk_1_1ClosestCell.html</anchorfile>
      <anchor>a495cdfb016394baf9b31491f8c772e3d</anchor>
      <arglist>(int, Point &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1ClosestCell.html</anchorfile>
      <anchor>ad70d78b4a687affcf74615520140cd99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PointCorrespondence *</type>
      <name>NewInstance</name>
      <anchorfile>classmirtk_1_1ClosestCell.html</anchorfile>
      <anchor>a7b219e17a9caaebd7396801ee6755458</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1ClosestCell.html</anchorfile>
      <anchor>abc77db06a6241e8717e2e013d03edbb0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1ClosestCell.html</anchorfile>
      <anchor>a84703663e8226432a64259ae5784f63a</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TypeId</type>
      <name>Type</name>
      <anchorfile>classmirtk_1_1ClosestCell.html</anchorfile>
      <anchor>ac36f5aa60c99ca5844a96ebed1c1c098</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1ClosestCell.html</anchorfile>
      <anchor>a964cc37e5a91da6e9c09548d3d924666</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Upgrade</name>
      <anchorfile>classmirtk_1_1ClosestCell.html</anchorfile>
      <anchor>ae091111be47901dfc72e45b2eaca3255</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ClosestCell</name>
      <anchorfile>classmirtk_1_1ClosestCell.html</anchorfile>
      <anchor>a8eae1fe759fe76167602593f775239e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1ClosestCell.html</anchorfile>
      <anchor>a1e03e05255acb32857644e285747d3b1</anchor>
      <arglist>(PointSet, TargetPoints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1ClosestCell.html</anchorfile>
      <anchor>afd14bdb1ff8e1659cb3c3f9d030ac06c</anchor>
      <arglist>(Array&lt; double &gt;, TargetDistance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1ClosestCell.html</anchorfile>
      <anchor>a65df3403b7b47bd0feb8ed6d476f9044</anchor>
      <arglist>(PointSet, SourcePoints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1ClosestCell.html</anchorfile>
      <anchor>a0e63c87e1f00f4c35abcc959e0359d50</anchor>
      <arglist>(Array&lt; double &gt;, SourceDistance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1ClosestCell.html</anchorfile>
      <anchor>a13865416dbb47cb2a5f9c0715a21fae4</anchor>
      <arglist>(enum LocatorType, LocatorType)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1ClosestCell.html</anchorfile>
      <anchor>a34da1d5df96090de74ecd12059fd76d4</anchor>
      <arglist>(int, NumberOfCellsPerNode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1ClosestCell.html</anchorfile>
      <anchor>a8b8bd723a360ea2bb2ab6612b24d8cc3</anchor>
      <arglist>(double, Sigma)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1ClosestCell.html</anchorfile>
      <anchor>a17a63994d6ff8726422459e8c6d30682</anchor>
      <arglist>(double, MaxDistance)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ClosestPoint</name>
    <filename>classmirtk_1_1ClosestPoint.html</filename>
    <base>mirtk::PointCorrespondence</base>
    <member kind="function">
      <type></type>
      <name>ClosestPoint</name>
      <anchorfile>classmirtk_1_1ClosestPoint.html</anchorfile>
      <anchor>a33810ed9ef6aa122831592b3122bb3db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClosestPoint</name>
      <anchorfile>classmirtk_1_1ClosestPoint.html</anchorfile>
      <anchor>ab83a26a804b886601c4d65102f740797</anchor>
      <arglist>(const ClosestPoint &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetInputSourcePoint</name>
      <anchorfile>classmirtk_1_1ClosestPoint.html</anchorfile>
      <anchor>a6775d0db8dbe8d545c3dacc8a2fe8433</anchor>
      <arglist>(int, Point &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetInputTargetPoint</name>
      <anchorfile>classmirtk_1_1ClosestPoint.html</anchorfile>
      <anchor>ad4093300678a5dda6a61a1368147195e</anchor>
      <arglist>(int, Point &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetSourceIndex</name>
      <anchorfile>classmirtk_1_1ClosestPoint.html</anchorfile>
      <anchor>a46119be871ccf0d1d050b93c5867eeed</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetSourcePoint</name>
      <anchorfile>classmirtk_1_1ClosestPoint.html</anchorfile>
      <anchor>ac68f50ea9bcfcaad1f1af6a24b7ccc92</anchor>
      <arglist>(int, Point &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetTargetIndex</name>
      <anchorfile>classmirtk_1_1ClosestPoint.html</anchorfile>
      <anchor>ae6717b52544e26f43c5f992cd52a8ae2</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetTargetPoint</name>
      <anchorfile>classmirtk_1_1ClosestPoint.html</anchorfile>
      <anchor>a10b54674a8f7a85e71e16d8fff21ae97</anchor>
      <arglist>(int, Point &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1ClosestPoint.html</anchorfile>
      <anchor>a6a1a7cce121725b61d7ed71f1f9a415b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PointCorrespondence *</type>
      <name>NewInstance</name>
      <anchorfile>classmirtk_1_1ClosestPoint.html</anchorfile>
      <anchor>a07ed492271ee07721fb63128eb1fdcef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1ClosestPoint.html</anchorfile>
      <anchor>af96b92e4b41fbcb40732436f787c6af0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1ClosestPoint.html</anchorfile>
      <anchor>af062dba7a6f900c1a5dc6d12b087a71d</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TypeId</type>
      <name>Type</name>
      <anchorfile>classmirtk_1_1ClosestPoint.html</anchorfile>
      <anchor>a79e9089959873e76943733e433bf2024</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1ClosestPoint.html</anchorfile>
      <anchor>a1ef6505bb202acd46a4f48389e8a059f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Upgrade</name>
      <anchorfile>classmirtk_1_1ClosestPoint.html</anchorfile>
      <anchor>a1172c60b9e27b9b664144e8bc76a23a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ClosestPoint</name>
      <anchorfile>classmirtk_1_1ClosestPoint.html</anchorfile>
      <anchor>a85fecb1747ade37aa40d95a43d1a244a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1ClosestPoint.html</anchorfile>
      <anchor>ab6486d511871d69cb6c1e303edfa518d</anchor>
      <arglist>(double, MaxSquaredDistance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1ClosestPoint.html</anchorfile>
      <anchor>a899c5030c52a3fffab4ac407309652db</anchor>
      <arglist>(Array&lt; int &gt;, TargetIndex)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1ClosestPoint.html</anchorfile>
      <anchor>a53c77159420b61e577b11615e667f1a6</anchor>
      <arglist>(Array&lt; double &gt;, TargetDistance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1ClosestPoint.html</anchorfile>
      <anchor>a1a0ea4d289aabd7fa78b3680db01f4de</anchor>
      <arglist>(Array&lt; int &gt;, SourceIndex)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1ClosestPoint.html</anchorfile>
      <anchor>a934f086ce7d9561e4beac089b83114fd</anchor>
      <arglist>(Array&lt; double &gt;, SourceDistance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1ClosestPoint.html</anchorfile>
      <anchor>af40d21c8817c6855bd484c6489cde7bc</anchor>
      <arglist>(double, Sigma)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1ClosestPoint.html</anchorfile>
      <anchor>aa2d34708e8936a59bdd2f570d72f5ab2</anchor>
      <arglist>(double, MaxDistance)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ClosestPointLabel</name>
    <filename>classmirtk_1_1ClosestPointLabel.html</filename>
    <base>mirtk::ClosestPoint</base>
    <member kind="function">
      <type></type>
      <name>ClosestPointLabel</name>
      <anchorfile>classmirtk_1_1ClosestPointLabel.html</anchorfile>
      <anchor>a682fc91f87eafc95f9744ac8509151ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClosestPointLabel</name>
      <anchorfile>classmirtk_1_1ClosestPointLabel.html</anchorfile>
      <anchor>a9ed8e21464ab9a9fc569475820831f66</anchor>
      <arglist>(const ClosestPointLabel &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1ClosestPointLabel.html</anchorfile>
      <anchor>aec10970bbf1350a31e12a25e07add32c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PointCorrespondence *</type>
      <name>NewInstance</name>
      <anchorfile>classmirtk_1_1ClosestPointLabel.html</anchorfile>
      <anchor>a9d7cceef70e3d12355fb45dfe15995d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Reinitialize</name>
      <anchorfile>classmirtk_1_1ClosestPointLabel.html</anchorfile>
      <anchor>ab687c4f1b58a2c07685ae58706ba5111</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TypeId</type>
      <name>Type</name>
      <anchorfile>classmirtk_1_1ClosestPointLabel.html</anchorfile>
      <anchor>a80b441ac494d074cf4b6ea1249d78f93</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1ClosestPointLabel.html</anchorfile>
      <anchor>ad47d19ce26e5641239abb8aaad4938eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ClosestPointLabel</name>
      <anchorfile>classmirtk_1_1ClosestPointLabel.html</anchorfile>
      <anchor>a8daa66a059d4ba718d0e529660e0a3b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Init</name>
      <anchorfile>classmirtk_1_1ClosestPointLabel.html</anchorfile>
      <anchor>ade9608371c5a61db5b766261f05cc1c3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::Closing</name>
    <filename>classmirtk_1_1Closing.html</filename>
    <templarg>TVoxel</templarg>
    <base>mirtk::ImageToImage</base>
    <member kind="function">
      <type></type>
      <name>Closing</name>
      <anchorfile>classmirtk_1_1Closing.html</anchorfile>
      <anchor>aede6042f7f166d9be2fb5ac64ac48169</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1Closing.html</anchorfile>
      <anchor>ae64bf122c2a1541b9399c7a8db643562</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Closing</name>
      <anchorfile>classmirtk_1_1Closing.html</anchorfile>
      <anchor>a6c6580fb3e5a1032a946047abf8e9c3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1Closing.html</anchorfile>
      <anchor>a04f387f63bffeeeac4c8e0b486d22880</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::Cofstream</name>
    <filename>classmirtk_1_1Cofstream.html</filename>
    <base>mirtk::Object</base>
    <member kind="function">
      <type>void</type>
      <name>Close</name>
      <anchorfile>classmirtk_1_1Cofstream.html</anchorfile>
      <anchor>adfdf94e3a3404b5a91bc66bb922b1c32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cofstream</name>
      <anchorfile>classmirtk_1_1Cofstream.html</anchorfile>
      <anchor>af0be399c3e9c5ddb8b0c40a015662314</anchor>
      <arglist>(const char *=NULL)</arglist>
    </member>
    <member kind="function">
      <type>MIRTK_Common_DEPRECATED int</type>
      <name>IsCompressed</name>
      <anchorfile>classmirtk_1_1Cofstream.html</anchorfile>
      <anchor>a40a04fe547ec5175c4d4efccd9c643a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MIRTK_Common_DEPRECATED void</type>
      <name>IsCompressed</name>
      <anchorfile>classmirtk_1_1Cofstream.html</anchorfile>
      <anchor>af15b2e6a3d6ff325c73cb7200d6ef0fb</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>MIRTK_Common_DEPRECATED int</type>
      <name>IsSwapped</name>
      <anchorfile>classmirtk_1_1Cofstream.html</anchorfile>
      <anchor>aad234befb31a15a831eb6c803aeacc17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MIRTK_Common_DEPRECATED void</type>
      <name>IsSwapped</name>
      <anchorfile>classmirtk_1_1Cofstream.html</anchorfile>
      <anchor>ac4043b2f56cba1c8938eb647a66a6209</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Open</name>
      <anchorfile>classmirtk_1_1Cofstream.html</anchorfile>
      <anchor>accc7bd1235c590c013f52342e888c040</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1Cofstream.html</anchorfile>
      <anchor>ac3764ec99a7fd05fbdd9428c040c6233</anchor>
      <arglist>(const char *, long, long)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteAsChar</name>
      <anchorfile>classmirtk_1_1Cofstream.html</anchorfile>
      <anchor>ac1b04ec45bf2f1473297d79cf65c8782</anchor>
      <arglist>(char, long=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteAsChar</name>
      <anchorfile>classmirtk_1_1Cofstream.html</anchorfile>
      <anchor>ae7c48053ddae32a924b847900c1c205b</anchor>
      <arglist>(const char *, long, long=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteAsDouble</name>
      <anchorfile>classmirtk_1_1Cofstream.html</anchorfile>
      <anchor>a50efc5f7888a0735d57fea2da7346d30</anchor>
      <arglist>(double, long=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteAsDouble</name>
      <anchorfile>classmirtk_1_1Cofstream.html</anchorfile>
      <anchor>a811940d724d15d0cafc48b19f900fef1</anchor>
      <arglist>(const double *, long, long=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteAsFloat</name>
      <anchorfile>classmirtk_1_1Cofstream.html</anchorfile>
      <anchor>aca02bc248a6f3609e3e2822ae1e53fb1</anchor>
      <arglist>(float, long=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteAsFloat</name>
      <anchorfile>classmirtk_1_1Cofstream.html</anchorfile>
      <anchor>aa376fdf3f21d3a77700ee469b5081feb</anchor>
      <arglist>(const float *, long, long=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteAsInt</name>
      <anchorfile>classmirtk_1_1Cofstream.html</anchorfile>
      <anchor>a2e8e473415e0d1bf0f5745213116da85</anchor>
      <arglist>(int, long=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteAsInt</name>
      <anchorfile>classmirtk_1_1Cofstream.html</anchorfile>
      <anchor>ae2b03bd9fcf47edae1a0d62409d5d783</anchor>
      <arglist>(const int *, long, long=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteAsShort</name>
      <anchorfile>classmirtk_1_1Cofstream.html</anchorfile>
      <anchor>ab84a0fd5ed5f1e6a5a92358d33e96473</anchor>
      <arglist>(short, long=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteAsShort</name>
      <anchorfile>classmirtk_1_1Cofstream.html</anchorfile>
      <anchor>a8758b70e44b67849e41c3b7ddf2c16fc</anchor>
      <arglist>(const short *, long, long=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteAsString</name>
      <anchorfile>classmirtk_1_1Cofstream.html</anchorfile>
      <anchor>a6b8a7a60e67099be0649dd215ce23d44</anchor>
      <arglist>(const char *, long=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteAsUChar</name>
      <anchorfile>classmirtk_1_1Cofstream.html</anchorfile>
      <anchor>aa8db0ec1979eec8f5490e13691a8d67b</anchor>
      <arglist>(unsigned char, long=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteAsUChar</name>
      <anchorfile>classmirtk_1_1Cofstream.html</anchorfile>
      <anchor>a922242d24a9ca09e81fccdc4b2e2c23d</anchor>
      <arglist>(const unsigned char *, long, long=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteAsUInt</name>
      <anchorfile>classmirtk_1_1Cofstream.html</anchorfile>
      <anchor>a6f60bdb44f827129c29e9ee10f10e25e</anchor>
      <arglist>(unsigned int, long=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteAsUInt</name>
      <anchorfile>classmirtk_1_1Cofstream.html</anchorfile>
      <anchor>a7ca01b0d02fe239a0a3cb0bf66a301f6</anchor>
      <arglist>(const unsigned int *, long, long=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteAsUShort</name>
      <anchorfile>classmirtk_1_1Cofstream.html</anchorfile>
      <anchor>aa916529c9453d14af423942b43a03f32</anchor>
      <arglist>(unsigned short, long=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteAsUShort</name>
      <anchorfile>classmirtk_1_1Cofstream.html</anchorfile>
      <anchor>ae6668201933e063768672f5982ad65ed</anchor>
      <arglist>(const unsigned short *, long, long=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Cofstream</name>
      <anchorfile>classmirtk_1_1Cofstream.html</anchorfile>
      <anchor>a05b92666b2daf36e02cbb3f9c977b085</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SurfaceCollisions::CollisionInfo</name>
    <filename>structmirtk_1_1SurfaceCollisions_1_1CollisionInfo.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>_CellId</name>
      <anchorfile>structmirtk_1_1SurfaceCollisions_1_1CollisionInfo.html</anchorfile>
      <anchor>acfd0548d892b6925894361cb5b9717ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_Distance</name>
      <anchorfile>structmirtk_1_1SurfaceCollisions_1_1CollisionInfo.html</anchorfile>
      <anchor>a2d71867043993f12652cc97372e08f60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_Point1</name>
      <anchorfile>structmirtk_1_1SurfaceCollisions_1_1CollisionInfo.html</anchorfile>
      <anchor>a89737ae2a3c5c937de80896ba5aea37a</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_Point2</name>
      <anchorfile>structmirtk_1_1SurfaceCollisions_1_1CollisionInfo.html</anchorfile>
      <anchor>ae223dd28c16b10ebd0ff8587b9e06eb9</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>CollisionType</type>
      <name>_Type</name>
      <anchorfile>structmirtk_1_1SurfaceCollisions_1_1CollisionInfo.html</anchorfile>
      <anchor>a83e4b9d01d94e0417003cc886792fb5e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::CompareIndicesOfArrayByDecreasingValue</name>
    <filename>classmirtk_1_1CompareIndicesOfArrayByDecreasingValue.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>mirtk::CompareIndicesOfArrayByIncreasingValue</name>
    <filename>classmirtk_1_1CompareIndicesOfArrayByIncreasingValue.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>mirtk::BinaryVoxelFunction::ComposeDisplacementFields2D</name>
    <filename>structmirtk_1_1BinaryVoxelFunction_1_1ComposeDisplacementFields2D.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::VoxelFunction</base>
  </compound>
  <compound kind="struct">
    <name>mirtk::BinaryVoxelFunction::ComposeDisplacementFields3D</name>
    <filename>structmirtk_1_1BinaryVoxelFunction_1_1ComposeDisplacementFields3D.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::VoxelFunction</base>
  </compound>
  <compound kind="class">
    <name>mirtk::Configurable</name>
    <filename>classmirtk_1_1Configurable.html</filename>
    <base>mirtk::Observable</base>
    <member kind="function">
      <type>string</type>
      <name>DefaultName</name>
      <anchorfile>classmirtk_1_1Configurable.html</anchorfile>
      <anchor>a0e28a4b5f7afaddb59495458ae7ba7f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1Configurable.html</anchorfile>
      <anchor>a0616e625a68cbf4043a941e299c1a8c3</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Configurable</name>
      <anchorfile>classmirtk_1_1Configurable.html</anchorfile>
      <anchor>ae63446ae9dff3297887cc03440af3e67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Configurable</name>
      <anchorfile>classmirtk_1_1Configurable.html</anchorfile>
      <anchor>a841e2cdaf74ad0fad8d97bd4eb66f762</anchor>
      <arglist>(const char *=&quot;&quot;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Configurable</name>
      <anchorfile>classmirtk_1_1Configurable.html</anchorfile>
      <anchor>a2ea340e84ad8312a370b1861c7bad565</anchor>
      <arglist>(const Configurable &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>string</type>
      <name>DefaultPrefix</name>
      <anchorfile>classmirtk_1_1Configurable.html</anchorfile>
      <anchor>a2fd7bc85a52ab6005772f0754d70c5df</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>HasName</name>
      <anchorfile>classmirtk_1_1Configurable.html</anchorfile>
      <anchor>a7bc7ab0c9b536dded239086e5d8591dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>HasPrefix</name>
      <anchorfile>classmirtk_1_1Configurable.html</anchorfile>
      <anchor>a917da6b39c039a93dd40d111bdd0b4ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>InsertWithPrefix</name>
      <anchorfile>classmirtk_1_1Configurable.html</anchorfile>
      <anchor>a916d6e8d438ca28242a7a7e03ecef6bf</anchor>
      <arglist>(ParameterList &amp;, string, T) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>InsertWithPrefix</name>
      <anchorfile>classmirtk_1_1Configurable.html</anchorfile>
      <anchor>a9e6ac9ce224e80a501c8df6883138b84</anchor>
      <arglist>(ParameterList &amp;, const ParameterList &amp;) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Configurable &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1Configurable.html</anchorfile>
      <anchor>a8c385aba1deea3cfd156e1f66f8b6a82</anchor>
      <arglist>(const Configurable &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>string</type>
      <name>ParameterNameWithoutPrefix</name>
      <anchorfile>classmirtk_1_1Configurable.html</anchorfile>
      <anchor>a392e7e1b245d519c071bc2f61e2b34b2</anchor>
      <arglist>(const char *) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>string</type>
      <name>ParameterNameWithPrefix</name>
      <anchorfile>classmirtk_1_1Configurable.html</anchorfile>
      <anchor>a512c046796dca13df0618fb130e69d5a</anchor>
      <arglist>(const string &amp;) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>string</type>
      <name>ParameterNameWithPrefix</name>
      <anchorfile>classmirtk_1_1Configurable.html</anchorfile>
      <anchor>a8f16dba5e98ae774917a6f6dddf816db</anchor>
      <arglist>(const char *) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithoutPrefix</name>
      <anchorfile>classmirtk_1_1Configurable.html</anchorfile>
      <anchor>a401e8da8fc194c62069fa3fa5a9468ca</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithPrefix</name>
      <anchorfile>classmirtk_1_1Configurable.html</anchorfile>
      <anchor>a7ac448c975fe997e3a97b77e97c0e2f1</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ConformalSurfaceFlattening</name>
    <filename>classmirtk_1_1ConformalSurfaceFlattening.html</filename>
    <base>mirtk::SphericalSurfaceMapper</base>
    <member kind="function">
      <type></type>
      <name>ConformalSurfaceFlattening</name>
      <anchorfile>classmirtk_1_1ConformalSurfaceFlattening.html</anchorfile>
      <anchor>af91ce2b05e934b2c1eba88304562642f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConformalSurfaceFlattening</name>
      <anchorfile>classmirtk_1_1ConformalSurfaceFlattening.html</anchorfile>
      <anchor>acc53993bbcbea3fd372e6a3f4259dec9</anchor>
      <arglist>(const ConformalSurfaceFlattening &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ConformalSurfaceFlattening &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1ConformalSurfaceFlattening.html</anchorfile>
      <anchor>a2b97f98fda0528c442067c794c4c50c3</anchor>
      <arglist>(const ConformalSurfaceFlattening &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConformalSurfaceFlattening</name>
      <anchorfile>classmirtk_1_1ConformalSurfaceFlattening.html</anchorfile>
      <anchor>a58413ab4feb39c75f5c2cca832d3ca18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>ComputeMap</name>
      <anchorfile>classmirtk_1_1ConformalSurfaceFlattening.html</anchorfile>
      <anchor>a2144d87e2723c6eb4833c6b6448633ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1ConformalSurfaceFlattening.html</anchorfile>
      <anchor>a23929f435fd5cfd2864def8dc849c4ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1ConformalSurfaceFlattening.html</anchorfile>
      <anchor>a484d937e69115b46d7460b2d0972c107</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ConjugateGradientDescent</name>
    <filename>classmirtk_1_1ConjugateGradientDescent.html</filename>
    <base>mirtk::GradientDescent</base>
    <member kind="function">
      <type></type>
      <name>ConjugateGradientDescent</name>
      <anchorfile>classmirtk_1_1ConjugateGradientDescent.html</anchorfile>
      <anchor>a2fd853cf8ffd859fa14b7bdd6a723ca7</anchor>
      <arglist>(ObjectiveFunction *=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConjugateGradientDescent</name>
      <anchorfile>classmirtk_1_1ConjugateGradientDescent.html</anchorfile>
      <anchor>aa6e1eabf7bd4105c3f7b29b951542bea</anchor>
      <arglist>(const ConjugateGradientDescent &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ConjugateGradientOff</name>
      <anchorfile>classmirtk_1_1ConjugateGradientDescent.html</anchorfile>
      <anchor>a7de93dfca2f39cffa833b0a4ab7c3b16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ConjugateGradientOn</name>
      <anchorfile>classmirtk_1_1ConjugateGradientDescent.html</anchorfile>
      <anchor>a391bc525591e8574786d801162f9112b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ConjugateTotalGradientOff</name>
      <anchorfile>classmirtk_1_1ConjugateGradientDescent.html</anchorfile>
      <anchor>a40fe2c1eab30983a14af35e06928ab5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ConjugateTotalGradientOn</name>
      <anchorfile>classmirtk_1_1ConjugateGradientDescent.html</anchorfile>
      <anchor>a6eb25ead1fca9e5bdf64ffd63b8be49c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConjugateGradientDescent &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1ConjugateGradientDescent.html</anchorfile>
      <anchor>a35116616cd67d1aa81cd56894ee7fdfe</anchor>
      <arglist>(const ConjugateGradientDescent &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1ConjugateGradientDescent.html</anchorfile>
      <anchor>a04729b465e10c529f9f94dce3fa8d57c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetConjugateGradient</name>
      <anchorfile>classmirtk_1_1ConjugateGradientDescent.html</anchorfile>
      <anchor>adbd694b6326425b97bcc45a3e73543e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1ConjugateGradientDescent.html</anchorfile>
      <anchor>aea94b600957e951c773bca3fc260883c</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConjugateGradientDescent</name>
      <anchorfile>classmirtk_1_1ConjugateGradientDescent.html</anchorfile>
      <anchor>a8ff40e1bbfa9055d6ac73b13bd84db23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ConjugateGradient</name>
      <anchorfile>classmirtk_1_1ConjugateGradientDescent.html</anchorfile>
      <anchor>a9f2ba615a7c459792f10bfd0cab6ccfc</anchor>
      <arglist>(double *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CopyAttributes</name>
      <anchorfile>classmirtk_1_1ConjugateGradientDescent.html</anchorfile>
      <anchor>a01e1e45c5229e4b6a9659c53717cc9e9</anchor>
      <arglist>(const ConjugateGradientDescent &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1ConjugateGradientDescent.html</anchorfile>
      <anchor>acb4010af8f336237130588dd45212dca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Gradient</name>
      <anchorfile>classmirtk_1_1ConjugateGradientDescent.html</anchorfile>
      <anchor>aedc89705bd2e00c8070d00a870d8051a</anchor>
      <arglist>(double *, double=.0, bool *=NULL)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1ConjugateGradientDescent.html</anchorfile>
      <anchor>af83ec2a4d76b599e56d6ebaf16bf97fd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ConnectedComponents</name>
    <filename>classmirtk_1_1ConnectedComponents.html</filename>
    <templarg></templarg>
    <base>mirtk::ImageToImage</base>
    <member kind="function">
      <type>int</type>
      <name>ComponentSize</name>
      <anchorfile>classmirtk_1_1ConnectedComponents.html</anchorfile>
      <anchor>af1cda345051aa229b7af32d129095ee1</anchor>
      <arglist>(VoxelType label) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConnectedComponents</name>
      <anchorfile>classmirtk_1_1ConnectedComponents.html</anchorfile>
      <anchor>a59e8d4672c8e630a89bc43135c321670</anchor>
      <arglist>(ConnectedComponentsOrdering=CC_LargestFirst, ConnectivityType=CONNECTIVITY_26)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DeleteComponent</name>
      <anchorfile>classmirtk_1_1ConnectedComponents.html</anchorfile>
      <anchor>ac24fd97faeeb09f8f7221d627f018848</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1ConnectedComponents.html</anchorfile>
      <anchor>ab78411267a067ef7d2115814108561c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConnectedComponents</name>
      <anchorfile>classmirtk_1_1ConnectedComponents.html</anchorfile>
      <anchor>a3101640ca70bc61045a6a59c0336bb09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1ConnectedComponents.html</anchorfile>
      <anchor>aa407cde7b5f65abb6fe6c51d0331b007</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1ConnectedComponents.html</anchorfile>
      <anchor>a14a413ec81581958bf0ec3c8e8366449</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1ConnectedComponents.html</anchorfile>
      <anchor>a405d23c63a1ce9bd3be648c821ef678b</anchor>
      <arglist>(NeighborhoodOffsets, Offsets)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1ConnectedComponents.html</anchorfile>
      <anchor>a6055e93dd45dd4ef251bdfa9e57057b8</anchor>
      <arglist>(ConnectedComponentsOrdering, Ordering)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1ConnectedComponents.html</anchorfile>
      <anchor>a481f7e4f26a9674e67fc81b0e83b4f77</anchor>
      <arglist>(ConnectivityType, Connectivity)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1ConnectedComponents.html</anchorfile>
      <anchor>a0042f651873efbfeb661837064918fce</anchor>
      <arglist>(int, NumberOfComponents)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1ConnectedComponents.html</anchorfile>
      <anchor>a91ae0197102d30bab7198e274b4afb5a</anchor>
      <arglist>(Array&lt; int &gt;, ComponentSize)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ConstExtrapolateImageFunction</name>
    <filename>classmirtk_1_1ConstExtrapolateImageFunction.html</filename>
    <base>GenericConstExtrapolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>ConstExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1ConstExtrapolateImageFunction.html</anchorfile>
      <anchor>aaf88542400b27d5a20ec932e435f08b8</anchor>
      <arglist>(double padding_value=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConstExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1ConstExtrapolateImageFunction.html</anchorfile>
      <anchor>abf4f1d282addcc8be5c2395986ba1861</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ConstExtrapolateImageFunctionWithPeriodicTime</name>
    <filename>classmirtk_1_1ConstExtrapolateImageFunctionWithPeriodicTime.html</filename>
    <base>GenericConstExtrapolateImageFunctionWithPeriodicTime&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>ConstExtrapolateImageFunctionWithPeriodicTime</name>
      <anchorfile>classmirtk_1_1ConstExtrapolateImageFunctionWithPeriodicTime.html</anchorfile>
      <anchor>ae32ff4f5d4a41d9222c818d30187a785</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConstExtrapolateImageFunctionWithPeriodicTime</name>
      <anchorfile>classmirtk_1_1ConstExtrapolateImageFunctionWithPeriodicTime.html</anchorfile>
      <anchor>ab67d0f8bb21abef536cece3c089f65af</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ConstGenericImageIterator</name>
    <filename>classmirtk_1_1ConstGenericImageIterator.html</filename>
    <templarg></templarg>
    <base>mirtk::ConstImageIterator</base>
    <member kind="function">
      <type></type>
      <name>ConstGenericImageIterator</name>
      <anchorfile>classmirtk_1_1ConstGenericImageIterator.html</anchorfile>
      <anchor>ab3bcd8567dcb2730c820fad9790c8fea</anchor>
      <arglist>(const ImageAttributes &amp;, const VoxelType *=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstGenericImageIterator</name>
      <anchorfile>classmirtk_1_1ConstGenericImageIterator.html</anchorfile>
      <anchor>ab246f6e7b794f3983768d45ce66a5b0f</anchor>
      <arglist>(GenericImage&lt; VoxelType &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstGenericImageIterator</name>
      <anchorfile>classmirtk_1_1ConstGenericImageIterator.html</anchorfile>
      <anchor>ae79d925ac6060c4660ec5362920eec07</anchor>
      <arglist>(GenericImage&lt; VoxelType &gt; *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstGenericImageIterator</name>
      <anchorfile>classmirtk_1_1ConstGenericImageIterator.html</anchorfile>
      <anchor>a6d23f1d622c63f04549a60381d482299</anchor>
      <arglist>(const ConstImageIterator &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Current</name>
      <anchorfile>classmirtk_1_1ConstGenericImageIterator.html</anchorfile>
      <anchor>a8aef1e5c63597c66890bdb2a54837104</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Current</name>
      <anchorfile>classmirtk_1_1ConstGenericImageIterator.html</anchorfile>
      <anchor>ad70f23321c9a2c79a8fd4a570bf4a038</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Next</name>
      <anchorfile>classmirtk_1_1ConstGenericImageIterator.html</anchorfile>
      <anchor>a94717845bc2b8df6ef7ea3fe8ddf32e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Next</name>
      <anchorfile>classmirtk_1_1ConstGenericImageIterator.html</anchorfile>
      <anchor>a7b9c612798772faeee9104451783fdd5</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>ConstGenericImageIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1ConstGenericImageIterator.html</anchorfile>
      <anchor>a4d2c3ccd18ffbe390c1bb0afc045ed51</anchor>
      <arglist>(const ConstGenericImageIterator &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType &amp;</type>
      <name>Value</name>
      <anchorfile>classmirtk_1_1ConstGenericImageIterator.html</anchorfile>
      <anchor>a4cf73b273c9459c04098f42bdaa694d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType &amp;</type>
      <name>Value</name>
      <anchorfile>classmirtk_1_1ConstGenericImageIterator.html</anchorfile>
      <anchor>a0c2b84815279530c5dc611af7f7a715a</anchor>
      <arglist>(int t) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ValueAsDouble</name>
      <anchorfile>classmirtk_1_1ConstGenericImageIterator.html</anchorfile>
      <anchor>a41df96b210febfc87103e6462891f99e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ValueAsDouble</name>
      <anchorfile>classmirtk_1_1ConstGenericImageIterator.html</anchorfile>
      <anchor>a1c3b0ba01093411da18ab3e73c488469</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ConstGenericImageIterator</name>
      <anchorfile>classmirtk_1_1ConstGenericImageIterator.html</anchorfile>
      <anchor>a8f8ad4894e2d3f714257798d20f1b0f4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ConstImageIterator</name>
    <filename>classmirtk_1_1ConstImageIterator.html</filename>
    <member kind="function">
      <type>int</type>
      <name>ColumnStride</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a598e63dbf670d2e8132e0725de2f9de8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstImageIterator</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a3cf0d6e289fb37f9c19bc653918eb5cc</anchor>
      <arglist>(const ImageAttributes &amp;, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstImageIterator</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a5a62e270fcf392bdfc69bb735507cfed</anchor>
      <arglist>(const ImageAttributes &amp;, const void *=NULL, int=MIRTK_VOXEL_UNKNOWN)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstImageIterator</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a546e0276b9c53f6ada3d3943e723ecfe</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstImageIterator</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a5bebd58f4bef4a99b4efbd37b4e2da83</anchor>
      <arglist>(const BaseImage *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstImageIterator</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>af3fecd53f000dce19864bd21ceb7a203</anchor>
      <arglist>(const ConstImageIterator &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Current</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a0d0c6050774dd214af633231a0a58265</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Current</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a2bcdab56063d2c96f9ac57f1ed10d736</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>FrameStride</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a9e0d272192da3189fbbce6fa400d11f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GoToBegin</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>abe0305c3994f38e6dfa66503030abc3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GoToCenter</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a523d0dc0ed7aaa03d5c1d5e8cf267452</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GoToEnd</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a093d049b5e191d563564d01f3291e3d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GoToIndex</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a61b959aff6174231c5dfc6fe8eb01d7e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GoToPos</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>aa654506275071d58f048d31ba4e1dbea</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GoToVoxel</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a7226de2320fa4afe65edc9d44aa3de21</anchor>
      <arglist>(int, int, int=-1, int=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GoToVoxel</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a88d48a0daa0a91004d5980b6d44aa375</anchor>
      <arglist>(const Vector4D&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Index</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a022f1e03d1dc225f23eb5b341a1087e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>IndexToPos</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a7576a4bd6b0ee400669e7227066d6ef8</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IndexToVoxel</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a5a51c5251d8d39fd62cccbc221f7e68f</anchor>
      <arglist>(int, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IndexToVoxel</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a83bd6483e5651ca12575d0a51343c5dd</anchor>
      <arglist>(int, int &amp;, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IndexToVoxel</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>ac9cfa087adaab9974bfadb0bbaee34f7</anchor>
      <arglist>(int, int &amp;, int &amp;, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IndexToVoxel</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a8c42747f9fb053a01cad639da8a8a8ba</anchor>
      <arglist>(int, Vector4D&lt; int &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsAtBegin</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>af35164b1686cea7f030c235f7baa31da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsAtEnd</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>ad05d82ff0aaf746ce7f68ca98b2f8469</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsImageSequence</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a5b24b8698cfc6a445fef50ef4e0c4779</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsScalar</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a24a5ab13b434c847f7a964c140c65dfc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsScalarImage</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a446fd21b3a5b446e1fd32c11c9663fb0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSequence</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a4dc3b75cad8bffbb7c7b27b321e16e28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LineStride</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>acf41806f2478c399f28ff73066e7b4ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Move</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a5b64277c219715134652310e62fb0a04</anchor>
      <arglist>(const VoxelType *&amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Move</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a315aa3bb1f5c943e49c2b07243e16137</anchor>
      <arglist>(VoxelType *&amp;) const</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Next</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>ac4dea3c2b018c7c215c86ee7ecb1cd34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Next</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a863be62bc6cc4a05e193d9d482a7415f</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfChannels</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>aabd4080af563c171236fc76a386a1d69</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfComponents</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a5d82600c73321c4ae1f7228525c7911b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfFrames</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>adde5dd613068e3ec277baa80487c1878</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfImageChannels</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a922c8a05fea3feb6361e17f02723a35f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfImageVoxels</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>ae8f5b44e6161286549340fbb94cab465</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfSequenceFrames</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a9bba21cb9937f45adee26a6a8bce2557</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfVectorComponents</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>ab1528865c7b96d8123d3ed6b9659bf4c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfVoxels</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>aa1df9aed98d89d7284ca2e5f5ce6ea78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>ad922f593b4d26ae84ad86c42f6fe2636</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator++</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a33fd4b874bcc40697d89962ce30c3e79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator--</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a1015f538929a1625cff9ab8545ac3bf2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstImageIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a2b6e6659840a72d6412f4de12c644019</anchor>
      <arglist>(const ConstImageIterator &amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Pos</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a4975ce4e642341750afca8346dbf0c42</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>PosToIndex</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a78d48409f6f7d9807d803a6ebcb7fc9f</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PosToVoxel</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a4ebbe0e71590f9ae8a357b2c8aafbfc2</anchor>
      <arglist>(int, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PosToVoxel</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>af4a42c6502ca0d03377345f7826d441a</anchor>
      <arglist>(int, int &amp;, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PosToVoxel</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>ab11e86743562ba90b34cfc4eaa3719aa</anchor>
      <arglist>(int, int &amp;, int &amp;, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PosToVoxel</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>ad79a74f8faf2538cb9e1e76990a4a91f</anchor>
      <arglist>(int, Vector4D&lt; int &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetChannel</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a5579a9d2d19c6387d1fc7e41db407ae7</anchor>
      <arglist>(int, int=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetChannel</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>af338c3f4dc06aaedb3a14e27e7183959</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetComponent</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a6832e4e2445cf31739fd6b0cb8f5ab88</anchor>
      <arglist>(int, int=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetComponent</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a8428f3496c96417b879102ddddd197af</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetData</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a37db09b29c985f54555720779287bb3f</anchor>
      <arglist>(const void *, int=MIRTK_VOXEL_UNKNOWN)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDataType</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a486ce4d9a783969d8423d408d8a8f268</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFrame</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a1c37949761d3d1d2e388805e1fcc6426</anchor>
      <arglist>(int, int=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFrame</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>af2a240e943477ebbdf7e6a4b8e3ed93e</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNeighborhood</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a5b69e6d726eca9dd7ae13ab5a239ce5f</anchor>
      <arglist>(int, int, int, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNeighborhood</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>abe1eacb8f33c7110caf052a79f5e0fca</anchor>
      <arglist>(int, int, int, int, int, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNeighborhood</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a5d0e1f78d137cd2720774938095cf069</anchor>
      <arglist>(int, int, int, int, int, int, int, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRegion</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>aa3438951c0f3356fd7265f0f5f9b2d78</anchor>
      <arglist>(int, int, int, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRegion</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>aad2115ccd4acf1e60c80e3e8f57aa486</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRegion</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a20e3146a4e9f431c0f775a612d709c33</anchor>
      <arglist>(int, int, int, int, int, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRegion</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a4b2eceb05371cc3529b93178282bc982</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRegion</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a89d75ed2b34145bc3100ee6971281ee6</anchor>
      <arglist>(int, int, int, int, int, int, int, int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SliceStride</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>aae64b9b042bd8c33f68873be73d09a11</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType &amp;</type>
      <name>Value</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a6eadbcecf9670f6932d9d57c806bd72c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType &amp;</type>
      <name>Value</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>ad16aa0440b4a56e371017806e4810b99</anchor>
      <arglist>(int t) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ValueAsDouble</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>af51c83c6482e3b399f9d87320acf5433</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ValueAsDouble</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a519b3a2e7e836e7f7dd6fbcfbab35890</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Voxel</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>acc2849201be90dfd8edafbb5bd5cc255</anchor>
      <arglist>(int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Voxel</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a7be22f6b53f80c3733f0c15a326c4d35</anchor>
      <arglist>(int &amp;, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Voxel</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a819e5bfe7f8e9c637a39247ba5b0f2a0</anchor>
      <arglist>(int &amp;, int &amp;, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>VoxelToIndex</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a322e8e209e3b57cec2450c48ead7a360</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>VoxelToIndex</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a16b9e91e154ff734146230f391f9f5c1</anchor>
      <arglist>(const Vector4D&lt; int &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>VoxelToPos</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>ac654529734bb7b6015ada0238a8e7b0b</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>VoxelToPos</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>aed8584df905b2f2153d6260530549171</anchor>
      <arglist>(const Vector4D&lt; int &gt; &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConstImageIterator</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>aeb25d904ca6cb46aafe533930e8c3c95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CalculateStride</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a0372e1fdc9bbd0744a743c8807c71590</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>ad1fc6515d16e71199cbc3216d06e796a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector4D&lt; int &gt;</type>
      <name>_Begin</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>abed93a31a60ae8ba21d1cac9090f410c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_ColumnStride</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a3d79b4cd59696273d653c60631bc3fd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>_Data</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a1752a0b73ae4b80e4527ba00583caf1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector4D&lt; int &gt;</type>
      <name>_DataSize</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a00fd0dcfde3b8edfa22501fbedb092ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector4D&lt; int &gt;</type>
      <name>_End</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a9b0704903ff61935f8c24ee4f0682839</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_FrameStride</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a0f46824c5e3ccdf897b9e901adf87b82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_Inc</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a4aaa745ac34764e0c81488524a02f497</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector4D&lt; int &gt;</type>
      <name>_Index</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a07cb64a55f5cf5ebdc72e862f2b1a8b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_IsImageSequence</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a393737f02a4356b4cf11c2b42d7ae016</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_LineStride</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a9505edea7b62431421a061245c2189d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>_Next</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>aac94a3b508eb6400e0da0eb3e9326a8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector4D&lt; int &gt;</type>
      <name>_Size</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a7fb26b7225458d1911f052b936fb5d7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_SliceStride</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>adf1d48de050639a2cfeb567ee8e86cb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_XYZ</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>ad4de76a783d3b6b510eac0dfb3fc2f26</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::GenericRegistrationFilter::ConstraintInfo</name>
    <filename>structmirtk_1_1GenericRegistrationFilter_1_1ConstraintInfo.html</filename>
    <member kind="variable">
      <type>ConstraintMeasure</type>
      <name>_Measure</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1ConstraintInfo.html</anchorfile>
      <anchor>a4f12887ec2c1ab2aa9de132b820000aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>_Name</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1ConstraintInfo.html</anchorfile>
      <anchor>a4ea8597dc73205e6fc172fde250bdfbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_Weight</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1ConstraintInfo.html</anchorfile>
      <anchor>a0f384e2241439836c979e19b8063938b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::ConvolveExtendedForegroundInT</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1ConvolveExtendedForegroundInT.html</filename>
    <templarg></templarg>
    <base>mirtk::ConvolutionFunction::ExtendedForegroundConvolution1D</base>
    <member kind="variable">
      <type>int</type>
      <name>_T</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveExtendedForegroundInT.html</anchorfile>
      <anchor>a7590287f93a94a326fc8c114818efb8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_XYZ</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveExtendedForegroundInT.html</anchorfile>
      <anchor>a29afcb9c9e9effd3391127b49e552c48</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::ConvolveExtendedForegroundInX</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1ConvolveExtendedForegroundInX.html</filename>
    <templarg>TKernel</templarg>
    <base>mirtk::ConvolutionFunction::ExtendedForegroundConvolution1D</base>
    <member kind="variable">
      <type>int</type>
      <name>_X</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveExtendedForegroundInX.html</anchorfile>
      <anchor>ae3cd543de42bf3925413513c42e0262c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::ConvolveExtendedForegroundInY</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1ConvolveExtendedForegroundInY.html</filename>
    <templarg>TKernel</templarg>
    <base>mirtk::ConvolutionFunction::ExtendedForegroundConvolution1D</base>
    <member kind="variable">
      <type>int</type>
      <name>_X</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveExtendedForegroundInY.html</anchorfile>
      <anchor>a17df92c160a2b059e9b257a72dd9dfcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Y</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveExtendedForegroundInY.html</anchorfile>
      <anchor>a07b15409ad1b704eeaa63445c985f079</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::ConvolveExtendedForegroundInZ</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1ConvolveExtendedForegroundInZ.html</filename>
    <templarg>TKernel</templarg>
    <base>mirtk::ConvolutionFunction::ExtendedForegroundConvolution1D</base>
    <member kind="variable">
      <type>int</type>
      <name>_XY</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveExtendedForegroundInZ.html</anchorfile>
      <anchor>ad8df8a3b125cf88fa216c0df52ebb3fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Z</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveExtendedForegroundInZ.html</anchorfile>
      <anchor>ae18fd183a4252217e1ee4785c4b58b5c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::ConvolveForegroundInT</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInT.html</filename>
    <templarg></templarg>
    <base>mirtk::VoxelFunction</base>
    <member kind="variable">
      <type>const BaseImage *</type>
      <name>_Image</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInT.html</anchorfile>
      <anchor>a3949998367a0b818f0650c6ddaf498e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TKernel *</type>
      <name>_Kernel</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInT.html</anchorfile>
      <anchor>a0ba564ee92d274bf5f459e4883f37561</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>_Normalize</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInT.html</anchorfile>
      <anchor>af6a7e70b921c5dde60bbb2f32a7c9a1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Radius</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInT.html</anchorfile>
      <anchor>ac1c02445733217e500f0f8016c2798b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_T</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInT.html</anchorfile>
      <anchor>a319d65765571df19d0bb7cbf6f6ea5e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_XYZ</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInT.html</anchorfile>
      <anchor>ac4eb6a581b7c43203b69549669cfec74</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::ConvolveForegroundInX</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInX.html</filename>
    <templarg></templarg>
    <base>mirtk::VoxelFunction</base>
    <member kind="variable">
      <type>const BaseImage *</type>
      <name>_Image</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInX.html</anchorfile>
      <anchor>a51cf85a5119989d372e0142a12b9aaa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TKernel *</type>
      <name>_Kernel</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInX.html</anchorfile>
      <anchor>a74d146ee558ead411b0a360c11464a51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>_Normalize</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInX.html</anchorfile>
      <anchor>a359f7d6fbfd10b33a4a89da4bd4d8adb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Offset</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInX.html</anchorfile>
      <anchor>a9b18c7d033527dcaae693f0ab029252a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Radius</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInX.html</anchorfile>
      <anchor>aee347c6c0d5b59acce7eab99967ee968</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_X</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInX.html</anchorfile>
      <anchor>a4d8c7b7d8ea3f9280735e9445c8c4688</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::ConvolveForegroundInY</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInY.html</filename>
    <templarg></templarg>
    <base>mirtk::VoxelFunction</base>
    <member kind="variable">
      <type>const BaseImage *</type>
      <name>_Image</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInY.html</anchorfile>
      <anchor>a1e40f7ae4e4d84fbcd29456c511d7d5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TKernel *</type>
      <name>_Kernel</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInY.html</anchorfile>
      <anchor>a7a6e9f499b626eae9004b38ef11fda89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>_Normalize</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInY.html</anchorfile>
      <anchor>a725fe2fda84550c7a3124952a3bad017</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Offset</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInY.html</anchorfile>
      <anchor>a0b0ed46d25cbc07de1816c2522a79e59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Radius</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInY.html</anchorfile>
      <anchor>a1183f7c700b8df3022a299b800efeafb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_X</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInY.html</anchorfile>
      <anchor>aff09cf9fbf6b164237c8ac6406ff0599</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Y</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInY.html</anchorfile>
      <anchor>aa48790df99aa0ea5e9c639cf0064f82d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::ConvolveForegroundInZ</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInZ.html</filename>
    <templarg></templarg>
    <base>mirtk::VoxelFunction</base>
    <member kind="variable">
      <type>const BaseImage *</type>
      <name>_Image</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInZ.html</anchorfile>
      <anchor>a3cd24be1ad54d7bdf3497693541c81f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TKernel *</type>
      <name>_Kernel</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInZ.html</anchorfile>
      <anchor>ac55a5b9a29de7719e29fd40337c28cee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>_Normalize</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInZ.html</anchorfile>
      <anchor>a50f958eb5b38629890ee7312cee9385d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Offset</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInZ.html</anchorfile>
      <anchor>a0a635c283d9215f40b7e295336f2b524</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Radius</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInZ.html</anchorfile>
      <anchor>a3db7f78eeee39f5e269f1d5bb7da8997</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_XY</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInZ.html</anchorfile>
      <anchor>a8d792c6f0e6ce3934cb8b2b69b522117</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Z</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInZ.html</anchorfile>
      <anchor>af90a484a66187e9a08ae9673c6e69897</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::ConvolveInT</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1ConvolveInT.html</filename>
    <templarg></templarg>
    <base>mirtk::VoxelFunction</base>
    <member kind="variable">
      <type>const TKernel *</type>
      <name>_Kernel</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveInT.html</anchorfile>
      <anchor>af835ead4fa92f06589ac48d8e0b25a3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>_Normalize</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveInT.html</anchorfile>
      <anchor>a97b211419fa2627833f5354a5f012147</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Radius</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveInT.html</anchorfile>
      <anchor>ac280c7fbc84f029200eee093b0aa0972</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_T</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveInT.html</anchorfile>
      <anchor>a7e3dc925d545ded13aaf650135693a2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_XYZ</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveInT.html</anchorfile>
      <anchor>a5b574e708c3117e86c790f743e882a2e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::ConvolveInX</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1ConvolveInX.html</filename>
    <templarg></templarg>
    <base>mirtk::VoxelFunction</base>
    <member kind="variable">
      <type>const TKernel *</type>
      <name>_Kernel</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveInX.html</anchorfile>
      <anchor>a3b039bba3bd896acdb3552a6b484a554</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>_Normalize</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveInX.html</anchorfile>
      <anchor>a33f9bd32436642ae552725b16f4b5b2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Offset</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveInX.html</anchorfile>
      <anchor>a1bddf8d1190bd51d90fbe982e6a348e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Radius</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveInX.html</anchorfile>
      <anchor>a766d68d12b8989b946273ffcedff1a06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_X</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveInX.html</anchorfile>
      <anchor>a29a24cd0b4492005653e4007d498f73c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::ConvolveInY</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1ConvolveInY.html</filename>
    <templarg></templarg>
    <base>mirtk::VoxelFunction</base>
    <member kind="variable">
      <type>const TKernel *</type>
      <name>_Kernel</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveInY.html</anchorfile>
      <anchor>a0bfe8c261ca006d90e62cbf94dfa40ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>_Normalize</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveInY.html</anchorfile>
      <anchor>ae9e981eb77dd3be111a44d92b3565c97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Offset</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveInY.html</anchorfile>
      <anchor>a89996fa52b3680119438972011c842e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Radius</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveInY.html</anchorfile>
      <anchor>a76c1488419e0e30057b3d6faf03213a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_X</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveInY.html</anchorfile>
      <anchor>ae70e0637c4500029634641d47fe7be2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Y</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveInY.html</anchorfile>
      <anchor>ac80933437aaf13fdcc76930405d2c854</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::ConvolveInZ</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1ConvolveInZ.html</filename>
    <templarg></templarg>
    <base>mirtk::VoxelFunction</base>
    <member kind="variable">
      <type>const TKernel *</type>
      <name>_Kernel</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveInZ.html</anchorfile>
      <anchor>a043c644bbcc07468615b7f43100badf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>_Normalize</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveInZ.html</anchorfile>
      <anchor>a1948407dfb050e27ec56ef5b035502bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Offset</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveInZ.html</anchorfile>
      <anchor>ab7d3101d4f1e5b3453331be53c3b3108</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Radius</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveInZ.html</anchorfile>
      <anchor>a5ad5662cb891a4040ae58ae92a8135c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_XY</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveInZ.html</anchorfile>
      <anchor>a0ff6651472b3744635c404d87181d5bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Z</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveInZ.html</anchorfile>
      <anchor>a8330e8b6dcca4460b83e0fe334deea3c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::ConvolveMirroredForegroundInT</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1ConvolveMirroredForegroundInT.html</filename>
    <templarg></templarg>
    <base>mirtk::ConvolutionFunction::MirroredForegroundConvolution1D</base>
    <member kind="variable">
      <type>int</type>
      <name>_T</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveMirroredForegroundInT.html</anchorfile>
      <anchor>a1577bd4cc22bb06ce160ff1a0b0b9573</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_XYZ</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveMirroredForegroundInT.html</anchorfile>
      <anchor>acc6204dcc125f8386eb7109a009ca68a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::ConvolveMirroredForegroundInX</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1ConvolveMirroredForegroundInX.html</filename>
    <templarg>TKernel</templarg>
    <base>mirtk::ConvolutionFunction::MirroredForegroundConvolution1D</base>
    <member kind="variable">
      <type>int</type>
      <name>_X</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveMirroredForegroundInX.html</anchorfile>
      <anchor>a0dac90515219a9ef386663dacdf02ca4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::ConvolveMirroredForegroundInY</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1ConvolveMirroredForegroundInY.html</filename>
    <templarg>TKernel</templarg>
    <base>mirtk::ConvolutionFunction::MirroredForegroundConvolution1D</base>
    <member kind="variable">
      <type>int</type>
      <name>_X</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveMirroredForegroundInY.html</anchorfile>
      <anchor>a969c30a261ba978b1b93f227293d0622</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Y</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveMirroredForegroundInY.html</anchorfile>
      <anchor>a2a7f9feaa2d6d055077d748bff67038b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::ConvolveMirroredForegroundInZ</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1ConvolveMirroredForegroundInZ.html</filename>
    <templarg>TKernel</templarg>
    <base>mirtk::ConvolutionFunction::MirroredForegroundConvolution1D</base>
    <member kind="variable">
      <type>int</type>
      <name>_XY</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveMirroredForegroundInZ.html</anchorfile>
      <anchor>a15069012523871d77596d433dbbf8e03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Z</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveMirroredForegroundInZ.html</anchorfile>
      <anchor>ad209f96242f907c7c5e2068de83d609b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::ConvolveTruncatedForegroundInT</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1ConvolveTruncatedForegroundInT.html</filename>
    <templarg></templarg>
    <base>mirtk::ConvolutionFunction::TruncatedForegroundConvolution1D</base>
    <member kind="variable">
      <type>int</type>
      <name>_T</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveTruncatedForegroundInT.html</anchorfile>
      <anchor>a665106b29dddccff0de86571b9b24951</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_XYZ</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveTruncatedForegroundInT.html</anchorfile>
      <anchor>ad694361495343f496708df56e37ed512</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::ConvolveTruncatedForegroundInX</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1ConvolveTruncatedForegroundInX.html</filename>
    <templarg></templarg>
    <base>mirtk::ConvolutionFunction::TruncatedForegroundConvolution1D</base>
    <member kind="variable">
      <type>int</type>
      <name>_Offset</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveTruncatedForegroundInX.html</anchorfile>
      <anchor>ae13b68365a3f86fdd25102f7631dba2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_X</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveTruncatedForegroundInX.html</anchorfile>
      <anchor>a431b4684611c96cc49b9082ebb20969d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::ConvolveTruncatedForegroundInY</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1ConvolveTruncatedForegroundInY.html</filename>
    <templarg></templarg>
    <base>mirtk::ConvolutionFunction::TruncatedForegroundConvolution1D</base>
    <member kind="variable">
      <type>int</type>
      <name>_Offset</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveTruncatedForegroundInY.html</anchorfile>
      <anchor>a6656101048955d2be5aa25f908f943a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_X</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveTruncatedForegroundInY.html</anchorfile>
      <anchor>a03f27a9630e8dfa49500ca168b1ba01f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Y</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveTruncatedForegroundInY.html</anchorfile>
      <anchor>af24804e24ef36522b0739f2784e8a484</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::ConvolveTruncatedForegroundInZ</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1ConvolveTruncatedForegroundInZ.html</filename>
    <templarg></templarg>
    <base>mirtk::ConvolutionFunction::TruncatedForegroundConvolution1D</base>
    <member kind="variable">
      <type>int</type>
      <name>_Offset</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveTruncatedForegroundInZ.html</anchorfile>
      <anchor>a037d5edffc939a891370570d9f982305</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_XY</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveTruncatedForegroundInZ.html</anchorfile>
      <anchor>acf3ad726cdc11d657d2d375cef6eb471</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Z</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveTruncatedForegroundInZ.html</anchorfile>
      <anchor>a774c74c70084bc406ec63e2605b4b49d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::ConvolveWeightedImageInT</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1ConvolveWeightedImageInT.html</filename>
    <templarg></templarg>
    <base>mirtk::VoxelFunction</base>
    <member kind="variable">
      <type>const TKernel *</type>
      <name>_Kernel</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveWeightedImageInT.html</anchorfile>
      <anchor>a9adce2fb1a945dce20795e01850216f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Radius</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveWeightedImageInT.html</anchorfile>
      <anchor>ad1f1e87de4f483e4448a45d3f5b9606f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_T</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveWeightedImageInT.html</anchorfile>
      <anchor>a78ce96d70f44a74daf333e1973bbc4fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_XYZ</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveWeightedImageInT.html</anchorfile>
      <anchor>a6db60e6a8a9cafc47acbac4e917576d5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::ConvolveWeightedImageInX</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1ConvolveWeightedImageInX.html</filename>
    <templarg></templarg>
    <base>mirtk::VoxelFunction</base>
    <member kind="variable">
      <type>const TKernel *</type>
      <name>_Kernel</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveWeightedImageInX.html</anchorfile>
      <anchor>a59eea1745611d299cf02ff7082aae8e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Offset1</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveWeightedImageInX.html</anchorfile>
      <anchor>aaca98dce15c9b3a45cdc8996483f8a9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Offset2</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveWeightedImageInX.html</anchorfile>
      <anchor>a59a7ef82c4c3f942b932e560e7a38d37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Radius</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveWeightedImageInX.html</anchorfile>
      <anchor>a7fe7a4e17d565c15e5a4789f92829262</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_X</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveWeightedImageInX.html</anchorfile>
      <anchor>a28a387fd1adf2b232ca60d35e8c224e1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::ConvolveWeightedImageInY</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1ConvolveWeightedImageInY.html</filename>
    <templarg></templarg>
    <base>mirtk::VoxelFunction</base>
    <member kind="variable">
      <type>const TKernel *</type>
      <name>_Kernel</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveWeightedImageInY.html</anchorfile>
      <anchor>ac86ad359977ade806ff3c651511e489a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Offset1</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveWeightedImageInY.html</anchorfile>
      <anchor>ada52f48b3eb7e634ddef005f0d5e8b7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Offset2</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveWeightedImageInY.html</anchorfile>
      <anchor>aeea127803ab7273742bee42cc61e9ee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Radius</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveWeightedImageInY.html</anchorfile>
      <anchor>a1ac59ac54606051e54b595ee16919018</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_X</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveWeightedImageInY.html</anchorfile>
      <anchor>addec932f619876dedeadbc42420795bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Y</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveWeightedImageInY.html</anchorfile>
      <anchor>a9fd3039a4910c352cae4ab3298390c4c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::ConvolveWeightedImageInZ</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1ConvolveWeightedImageInZ.html</filename>
    <templarg></templarg>
    <base>mirtk::VoxelFunction</base>
    <member kind="variable">
      <type>const TKernel *</type>
      <name>_Kernel</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveWeightedImageInZ.html</anchorfile>
      <anchor>a2a758254010d80f85859ca505828b435</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Offset1</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveWeightedImageInZ.html</anchorfile>
      <anchor>a4fdfcae2852ee1f0b5869ab9e0ab9973</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Offset2</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveWeightedImageInZ.html</anchorfile>
      <anchor>af19a398272670f14ef93cc15260d0c9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Radius</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveWeightedImageInZ.html</anchorfile>
      <anchor>a1bdf3961ac6b6d12986447c3e516191a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_XY</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveWeightedImageInZ.html</anchorfile>
      <anchor>a81724074387096d09b2d5163d8d47b8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Z</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveWeightedImageInZ.html</anchorfile>
      <anchor>a2e33e6af71a417cd24f0b94446ef5ef6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::BinaryVoxelFunction::Copy</name>
    <filename>structmirtk_1_1BinaryVoxelFunction_1_1Copy.html</filename>
    <base>mirtk::VoxelFunction</base>
  </compound>
  <compound kind="class">
    <name>mirtk::CosineOfNormalizedGradientField</name>
    <filename>classmirtk_1_1CosineOfNormalizedGradientField.html</filename>
    <base>mirtk::NormalizedGradientFieldSimilarity</base>
    <member kind="function">
      <type></type>
      <name>CosineOfNormalizedGradientField</name>
      <anchorfile>classmirtk_1_1CosineOfNormalizedGradientField.html</anchorfile>
      <anchor>ad828500cd35ed7edcef2dc6858874c2a</anchor>
      <arglist>(const char *=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CosineOfNormalizedGradientField</name>
      <anchorfile>classmirtk_1_1CosineOfNormalizedGradientField.html</anchorfile>
      <anchor>a7211098359ccafc297aae1c322348fea</anchor>
      <arglist>(const CosineOfNormalizedGradientField &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CosineOfNormalizedGradientField &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1CosineOfNormalizedGradientField.html</anchorfile>
      <anchor>ad9a73cbac5ac57b8caaf870929640dac</anchor>
      <arglist>(const CosineOfNormalizedGradientField &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1CosineOfNormalizedGradientField.html</anchorfile>
      <anchor>aefbd6f971b19981b45a9e46d52f18e3c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>RawValue</name>
      <anchorfile>classmirtk_1_1CosineOfNormalizedGradientField.html</anchorfile>
      <anchor>af1e1137204d170a650f306366f3a75a9</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteDataSets</name>
      <anchorfile>classmirtk_1_1CosineOfNormalizedGradientField.html</anchorfile>
      <anchor>a09e2a9ff5d068a4425e4d4064590c63b</anchor>
      <arglist>(const char *, const char *, bool=true) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CosineOfNormalizedGradientField</name>
      <anchorfile>classmirtk_1_1CosineOfNormalizedGradientField.html</anchorfile>
      <anchor>aac3c041ac491c702a1045fc814d16f1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1CosineOfNormalizedGradientField.html</anchorfile>
      <anchor>a61bf1f71420a9458cdd9d761c3274170</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>NonParametricGradient</name>
      <anchorfile>classmirtk_1_1CosineOfNormalizedGradientField.html</anchorfile>
      <anchor>aea090cd45ec881d4577fbfd17646e79f</anchor>
      <arglist>(const RegisteredImage *, GradientImageType *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithoutPrefix</name>
      <anchorfile>classmirtk_1_1CosineOfNormalizedGradientField.html</anchorfile>
      <anchor>ad3b241b28194d6fc6879d62765f5fbab</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::statistic::Count</name>
    <filename>classmirtk_1_1data_1_1statistic_1_1Count.html</filename>
    <base>mirtk::data::Statistic</base>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1data_1_1statistic_1_1Count.html</anchorfile>
      <anchor>ae6d162eab4751451b5b3e72b7ec95f33</anchor>
      <arglist>(Array&lt; double &gt; &amp;values, int n, const double *data, const bool *mask=nullptr) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1data_1_1statistic_1_1Count.html</anchorfile>
      <anchor>aa8e7fc163bd1a41b7c6845b3f1a5969e</anchor>
      <arglist>(ostream &amp;os=cout, int=5, const char *prefix=&quot;&quot;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintValues</name>
      <anchorfile>classmirtk_1_1data_1_1statistic_1_1Count.html</anchorfile>
      <anchor>a56288d775dc3967f07508dbbbd0099e2</anchor>
      <arglist>(ostream &amp;os=cout, int=5, const char *delimiter=&quot;,&quot;) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::CSplineInterpolateImageFunction</name>
    <filename>classmirtk_1_1CSplineInterpolateImageFunction.html</filename>
    <base>GenericCSplineInterpolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>CSplineInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1CSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ad430ae7485d5927cb7d8813779cefe61</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::CSplineInterpolateImageFunction2D</name>
    <filename>classmirtk_1_1CSplineInterpolateImageFunction2D.html</filename>
    <base>GenericCSplineInterpolateImageFunction2D&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>CSplineInterpolateImageFunction2D</name>
      <anchorfile>classmirtk_1_1CSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a652690d3ac492fe06d869bef43dd0687</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::CSplineInterpolateImageFunction3D</name>
    <filename>classmirtk_1_1CSplineInterpolateImageFunction3D.html</filename>
    <base>GenericCSplineInterpolateImageFunction3D&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>CSplineInterpolateImageFunction3D</name>
      <anchorfile>classmirtk_1_1CSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>ae1f01d8214a9cfa3b849634c5cbb6e35</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::CSplineInterpolateImageFunction4D</name>
    <filename>classmirtk_1_1CSplineInterpolateImageFunction4D.html</filename>
    <base>GenericCSplineInterpolateImageFunction4D&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>CSplineInterpolateImageFunction4D</name>
      <anchorfile>classmirtk_1_1CSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a404e96091147aca50b335b9ff34d876a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::CubicBSplineConvolution</name>
    <filename>classmirtk_1_1CubicBSplineConvolution.html</filename>
    <templarg></templarg>
    <base>SeparableConvolution&lt; TVoxel &gt;</base>
    <member kind="function">
      <type></type>
      <name>CubicBSplineConvolution</name>
      <anchorfile>classmirtk_1_1CubicBSplineConvolution.html</anchorfile>
      <anchor>afc76c9cb3e3b1a780c683b5da8f91a8f</anchor>
      <arglist>(double=2.)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CubicBSplineConvolution</name>
      <anchorfile>classmirtk_1_1CubicBSplineConvolution.html</anchorfile>
      <anchor>aedf80493bdc377610ce77f1659220725</anchor>
      <arglist>(double, double, double=0., double=0.)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Radius</name>
      <anchorfile>classmirtk_1_1CubicBSplineConvolution.html</anchorfile>
      <anchor>ac2205d384d8964989488f8bfd818aca0</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Radius</name>
      <anchorfile>classmirtk_1_1CubicBSplineConvolution.html</anchorfile>
      <anchor>af3168ed35ffeb4abe9a5751856e2ba64</anchor>
      <arglist>(double, double, double=0., double=0.)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CubicBSplineConvolution</name>
      <anchorfile>classmirtk_1_1CubicBSplineConvolution.html</anchorfile>
      <anchor>a80ae5a4bd893ce98e567f81997aaeca1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>KernelSize</name>
      <anchorfile>classmirtk_1_1CubicBSplineConvolution.html</anchorfile>
      <anchor>a53873c5badb370d420b6ecb6cc2c9689</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>SeparableConvolution&lt; TVoxel &gt;::KernelType</type>
      <name>KernelType</name>
      <anchorfile>classmirtk_1_1CubicBSplineConvolution.html</anchorfile>
      <anchor>a9f67ba11440c551e0af04e98894c63d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1CubicBSplineConvolution.html</anchorfile>
      <anchor>ad6301c12ae28adca88509468f9800a1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>UniquePtr&lt; KernelType &gt;</type>
      <name>InitializeKernel</name>
      <anchorfile>classmirtk_1_1CubicBSplineConvolution.html</anchorfile>
      <anchor>a14d5220e7f7b197f7dea80a46623d185</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1CubicBSplineConvolution.html</anchorfile>
      <anchor>a2dd6030de364eb976d2126c995e171ea</anchor>
      <arglist>(double, RadiusX)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1CubicBSplineConvolution.html</anchorfile>
      <anchor>accfc36d42d53b51fd4422afd7468ed51</anchor>
      <arglist>(double, RadiusY)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1CubicBSplineConvolution.html</anchorfile>
      <anchor>ac91e665c1bc99a7062ebb8705729ac6f</anchor>
      <arglist>(double, RadiusZ)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1CubicBSplineConvolution.html</anchorfile>
      <anchor>a47c55b44d5a80860799b5919389bf01d</anchor>
      <arglist>(double, RadiusT)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::CubicBSplineInterpolateImageFunction</name>
    <filename>classmirtk_1_1CubicBSplineInterpolateImageFunction.html</filename>
    <base>GenericCubicBSplineInterpolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>CubicBSplineInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1CubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a4697885972cc72f0a8fd89fde9ba08ea</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::CubicBSplineInterpolateImageFunction2D</name>
    <filename>classmirtk_1_1CubicBSplineInterpolateImageFunction2D.html</filename>
    <base>GenericCubicBSplineInterpolateImageFunction2D&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>CubicBSplineInterpolateImageFunction2D</name>
      <anchorfile>classmirtk_1_1CubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a695dfe99344e1d8984de10fe5c0d4bd6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::CubicBSplineInterpolateImageFunction3D</name>
    <filename>classmirtk_1_1CubicBSplineInterpolateImageFunction3D.html</filename>
    <base>GenericCubicBSplineInterpolateImageFunction3D&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>CubicBSplineInterpolateImageFunction3D</name>
      <anchorfile>classmirtk_1_1CubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a147fdaa27e86cc206da36fffbc79a5d0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::CubicBSplineInterpolateImageFunction4D</name>
    <filename>classmirtk_1_1CubicBSplineInterpolateImageFunction4D.html</filename>
    <base>GenericCubicBSplineInterpolateImageFunction4D&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>CubicBSplineInterpolateImageFunction4D</name>
      <anchorfile>classmirtk_1_1CubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>aa681b2e46ef4ae0114ae28fe9111fa55</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::CurrentsDistance</name>
    <filename>classmirtk_1_1CurrentsDistance.html</filename>
    <base>mirtk::PointSetDistance</base>
    <member kind="function">
      <type></type>
      <name>CurrentsDistance</name>
      <anchorfile>classmirtk_1_1CurrentsDistance.html</anchorfile>
      <anchor>abd2a1c2b2479f9d17c8811d90b1a6350</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CurrentsDistance</name>
      <anchorfile>classmirtk_1_1CurrentsDistance.html</anchorfile>
      <anchor>af4321bde1b2db40cf2fe8ea86229b326</anchor>
      <arglist>(const CurrentsDistance &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1CurrentsDistance.html</anchorfile>
      <anchor>ab35b6627a3486cbc3e94fc39c780544a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CurrentsDistance &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1CurrentsDistance.html</anchorfile>
      <anchor>abef7e80e65b8a9932e6250f8be6914be</anchor>
      <arglist>(const CurrentsDistance &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1CurrentsDistance.html</anchorfile>
      <anchor>a82518b740b649c19bd68867b5261a31f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Reinitialize</name>
      <anchorfile>classmirtk_1_1CurrentsDistance.html</anchorfile>
      <anchor>a8c495658ee3b8d813a58b0cc65ec6079</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1CurrentsDistance.html</anchorfile>
      <anchor>ab2aede744596bcd9331cab3fa69403ff</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteDataSets</name>
      <anchorfile>classmirtk_1_1CurrentsDistance.html</anchorfile>
      <anchor>a2455bcc5278ec02c0f4ad85455b9b921</anchor>
      <arglist>(const char *, const char *, bool=true) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CurrentsDistance</name>
      <anchorfile>classmirtk_1_1CurrentsDistance.html</anchorfile>
      <anchor>ae521fd92d7f9c4eb32359ed4b7524579</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1CurrentsDistance.html</anchorfile>
      <anchor>a73b001f73a8529049c095b2372ef76d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Init</name>
      <anchorfile>classmirtk_1_1CurrentsDistance.html</anchorfile>
      <anchor>aa05d93427bb8cb0972cef076ad0069f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>NonParametricGradient</name>
      <anchorfile>classmirtk_1_1CurrentsDistance.html</anchorfile>
      <anchor>a54a4955cfc047a48bce6f04d918f7ffa</anchor>
      <arglist>(const RegisteredPointSet *target, GradientType *gradient)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithoutPrefix</name>
      <anchorfile>classmirtk_1_1CurrentsDistance.html</anchorfile>
      <anchor>a41c62c1567af8802d6aefb37c655bc15</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithPrefix</name>
      <anchorfile>classmirtk_1_1CurrentsDistance.html</anchorfile>
      <anchor>aaffeb5722bcd85a4e4553131bf69cc4c</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static vtkSmartPointer&lt; vtkPolyData &gt;</type>
      <name>SurfaceToCurrent</name>
      <anchorfile>classmirtk_1_1CurrentsDistance.html</anchorfile>
      <anchor>a3f8ce9551833503cd07016d78db2487d</anchor>
      <arglist>(vtkPolyData *)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static vtkSmartPointer&lt; vtkPolyData &gt;</type>
      <name>ToCurrent</name>
      <anchorfile>classmirtk_1_1CurrentsDistance.html</anchorfile>
      <anchor>a9bfd98241e7f175c4c2af3fb4233b0a8</anchor>
      <arglist>(vtkPointSet *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::CurvatureConstraint</name>
    <filename>classmirtk_1_1CurvatureConstraint.html</filename>
    <base>mirtk::SurfaceConstraint</base>
    <member kind="function">
      <type></type>
      <name>CurvatureConstraint</name>
      <anchorfile>classmirtk_1_1CurvatureConstraint.html</anchorfile>
      <anchor>a5ec4dd6287fd6d7ee74d3139a230f26c</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CurvatureConstraint</name>
      <anchorfile>classmirtk_1_1CurvatureConstraint.html</anchorfile>
      <anchor>a84607444794c1397664e9f5576ffa6eb</anchor>
      <arglist>(const CurvatureConstraint &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1CurvatureConstraint.html</anchorfile>
      <anchor>a46e61a9aa7bc228a0b3c7b9146377450</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CurvatureConstraint &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1CurvatureConstraint.html</anchorfile>
      <anchor>abc922e95625741f1374e85d38ea65485</anchor>
      <arglist>(const CurvatureConstraint &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Reinitialize</name>
      <anchorfile>classmirtk_1_1CurvatureConstraint.html</anchorfile>
      <anchor>a60d83babd308dd00610b8825cb919f95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1CurvatureConstraint.html</anchorfile>
      <anchor>a96ecdd85e60b1f5b2ba0546d686cd18b</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CurvatureConstraint</name>
      <anchorfile>classmirtk_1_1CurvatureConstraint.html</anchorfile>
      <anchor>a168624a96bb5a8cee40c3c76a1b9c7ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CopyAttributes</name>
      <anchorfile>classmirtk_1_1CurvatureConstraint.html</anchorfile>
      <anchor>a20aff09e66d1d15d0492d975738ea7d2</anchor>
      <arglist>(const CurvatureConstraint &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1CurvatureConstraint.html</anchorfile>
      <anchor>a147ec8b0526ba8287945240eefa6d6ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1CurvatureConstraint.html</anchorfile>
      <anchor>a4bd1414f70a80295cbc3d12e317490cd</anchor>
      <arglist>(double *, double, double)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Init</name>
      <anchorfile>classmirtk_1_1CurvatureConstraint.html</anchorfile>
      <anchor>aefd10e39516d30775feeeadbe8c2f8fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1CurvatureConstraint.html</anchorfile>
      <anchor>ab282fe9d348c1099e3106400b80a6639</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPoints &gt;, Centroids)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::DataFidelity</name>
    <filename>classmirtk_1_1DataFidelity.html</filename>
    <base>mirtk::EnergyTerm</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DataFidelity</name>
      <anchorfile>classmirtk_1_1DataFidelity.html</anchorfile>
      <anchor>abb59db4882313369f8613249bb84440b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DataFidelity</name>
      <anchorfile>classmirtk_1_1DataFidelity.html</anchorfile>
      <anchor>a8fbd614939ebe8131354ce759d833f2c</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DataFidelity</name>
      <anchorfile>classmirtk_1_1DataFidelity.html</anchorfile>
      <anchor>afb33f1a4515687066cc6aba77aa599c5</anchor>
      <arglist>(const DataFidelity &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DataFidelity &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1DataFidelity.html</anchorfile>
      <anchor>a28c77e2c59231b59cb00fe932e51e466</anchor>
      <arglist>(const DataFidelity &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithPrefix</name>
      <anchorfile>classmirtk_1_1DataFidelity.html</anchorfile>
      <anchor>a810b1114ab511b5a4142df8b78bf7194</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::DeformableSurfaceDebugger</name>
    <filename>classmirtk_1_1DeformableSurfaceDebugger.html</filename>
    <base>mirtk::Observer</base>
    <member kind="function">
      <type></type>
      <name>DeformableSurfaceDebugger</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceDebugger.html</anchorfile>
      <anchor>a62f8cfcc0ceabb4b7c5fa79626d25760</anchor>
      <arglist>(const DeformableSurfaceModel *=NULL, const char *=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>HandleEvent</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceDebugger.html</anchorfile>
      <anchor>a111291e10ec699371f0c7e25f3274751</anchor>
      <arglist>(Observable *, Event, const void *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DeformableSurfaceDebugger</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceDebugger.html</anchorfile>
      <anchor>af2e4b5b71d5f3462628a1371cebf5b0a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::DeformableSurfaceLogger</name>
    <filename>classmirtk_1_1DeformableSurfaceLogger.html</filename>
    <base>mirtk::Observer</base>
    <member kind="function">
      <type></type>
      <name>DeformableSurfaceLogger</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceLogger.html</anchorfile>
      <anchor>abe1b65b2d456cbb96b83d0b33529848c</anchor>
      <arglist>(ostream *=&amp;cout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>HandleEvent</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceLogger.html</anchorfile>
      <anchor>a9aa1a30fb6f2dcaffb6b7e738ad3c1c5</anchor>
      <arglist>(Observable *, Event, const void *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DeformableSurfaceLogger</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceLogger.html</anchorfile>
      <anchor>a0e97985fcc8561bbb1cd52d3e8de6452</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::DeformableSurfaceModel</name>
    <filename>classmirtk_1_1DeformableSurfaceModel.html</filename>
    <base>mirtk::ObjectiveFunction</base>
    <member kind="function">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a0127869de908da1574e7b793530025c6</anchor>
      <arglist>(class ExternalForce *, bool=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>aba2abb49fb3e2267146e2f02aaa0264f</anchor>
      <arglist>(class InternalForce *, bool=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>ab13c04608828bdc84d5c11bbfa362187</anchor>
      <arglist>(TransformationConstraint *, bool=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>af079c3f60a10cad3526a1ca7105932d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DeformableSurfaceModel</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>ad27aa14fc6a2f8c73fb7e5604a4e9095</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Empty</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a3bbdf0657f9e3bf63445448b3d4aff36</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>ad08f5eb8447c7d07e49131d9a3c85c85</anchor>
      <arglist>(double *dx=NULL, double step=.0, bool *sgn_chg=NULL)</arglist>
    </member>
    <member kind="function">
      <type>class ExternalForce *</type>
      <name>ExternalForce</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a356a3b6bde6c6fabf5c117760ea3365e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const class ExternalForce *</type>
      <name>ExternalForce</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a0e871d2fc7547cbb5392dac19a4d2325</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a0d81daacd732ebc5f1df129f5414c6f9</anchor>
      <arglist>(double *x) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a7cb7dff36b46b35e8a967885ead98fd7</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Gradient</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a7637a86c3573025cffe63b1ed0c06eb5</anchor>
      <arglist>(double *dx, double step=.0, bool *sgn_chg=NULL)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GradientNorm</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a9ce0596b4c42e7e55e5cf48c3f60df06</anchor>
      <arglist>(const double *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GradientStep</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a99e9dd26bbdfbeb99b774764dff62a2f</anchor>
      <arglist>(const double *dx, double &amp;min, double &amp;max) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>ac060d03bb6f6c45a2e39db90c529e47b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>InitialValue</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>aefb82c293e53cd732e6d6bc4e8d5d720</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>InitialValue</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a591eb6b25fe667124932271ed8f3e8f8</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>class InternalForce *</type>
      <name>InternalForce</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a65aa26d867d0860ee6463bcae8d92fdc</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const class InternalForce *</type>
      <name>InternalForce</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a3d9dfcfbbf0b14a2f3f4c3e8f5d9e06e</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsExternalForce</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>abe83293c1aaad3943c4429a288379795</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsImplicitSurfaceForce</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a5889c67df88b6cb9cbb0fa2f9b252a4f</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInternalForce</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>af113438e20b8e986c49697cf608e9c06</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumberOfDOFs</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>ae02d8deb37fa09b75350c1d7541b9988</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfExternalForces</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>aadea4f876cf59f8f032913b9385386c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfForces</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>aa7f886db0e18634e3b1ba7fb1d01eeee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfInternalForces</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a1aa39ca89b0774265fe96f541c4c1db4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfPoints</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a8a9bd714b6ab9c0b17d7c9fbc035f722</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>vtkSmartPointer&lt; vtkPointSet &gt;</type>
      <name>Output</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>aef74045b22c9ba0ebe51dcac721ab0bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a86330381471d36880f8313c5be0c232f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>ae896c3e209803e33df2f77ce88010d52</anchor>
      <arglist>(const double *x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RawValue</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>ae0dd302df3ef978374b59bd8e33f05c1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Remesh</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a7c0ef6fc454fa727e8361a5c760ab43d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a8a2a3f540f28fb6865344cfe7bab0f9d</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Step</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a8079710a926510dfa88b856c820f5052</anchor>
      <arglist>(double *dx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Sub</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>af205216833d770ee0976c46eeb390499</anchor>
      <arglist>(class ExternalForce *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Sub</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a360684f3e55d26ad46791d09483c70a3</anchor>
      <arglist>(class InternalForce *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Sub</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a99b562079f35748f121de0c895080340</anchor>
      <arglist>(TransformationConstraint *)</arglist>
    </member>
    <member kind="function">
      <type>EnergyTerm *</type>
      <name>Term</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a014f18f9d8364fa7b521b35f0ad6422d</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const EnergyTerm *</type>
      <name>Term</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a985de88cb0f48dcb7ceaaeef1d7d4dee</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a9e95792c62524a90943553c2e4758cf3</anchor>
      <arglist>(bool=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Upgrade</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a8b6681d2366825a5958ae4c59af4dddc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Value</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a9c0473ea0d4407855886f95823c754c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Value</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>aef8dddfad026c0ece1b45ee9c913c16f</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteDataSets</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a52ed0647da62ad1374cb32933a144701</anchor>
      <arglist>(const char *, const char *, bool=true) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteGradient</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>ae7ccaefe86fb3436ef2736ee8e78d815</anchor>
      <arglist>(const char *, const char *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DeformableSurfaceModel</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a2a252fcbe34f8142b38942b92a135ed1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>IsExternalForce</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a4d8acaf338de68b0a29085863926b65e</anchor>
      <arglist>(const EnergyTerm *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>IsImplicitSurfaceForce</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a85e7b554a5ae4390f9a202ab2c377860</anchor>
      <arglist>(const EnergyTerm *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>IsInternalForce</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a8e6469fac6499f0328489a9100440ea3</anchor>
      <arglist>(const EnergyTerm *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>EnforceHardConstraints</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a08bcd5f4552c30eebe01a6bcb991ffe7</anchor>
      <arglist>(double *dx) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ResolveSurfaceCollisions</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a34a079fdae9cf7122e474aff5a03b18d</anchor>
      <arglist>(double *dx, bool nsi, double mind, double minw) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>SmoothGradient</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a52253c8982a8a681fb94d9ddba067618</anchor>
      <arglist>(double *dx) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; vtkSmartPointer&lt; vtkPolyData &gt; &gt;</type>
      <name>_BoundaryConstraint</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>acf95fbf722197a571ec7fc14958827d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; TransformationConstraint * &gt;</type>
      <name>_Constraint</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a9560150865702da3d0a28eeb3104562a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; class ExternalForce * &gt;</type>
      <name>_ExternalForce</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a239fa7195b9c34d2c605a2bd02e34190</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; class InternalForce * &gt;</type>
      <name>_InternalForce</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>ab233e4ab5cd34577a391f5f70ad0db06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_LowPassCounter</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a40dc856e65269d973bf01297ab400c21</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::TernaryVoxelFunction::Diff</name>
    <filename>structmirtk_1_1TernaryVoxelFunction_1_1Diff.html</filename>
    <base>mirtk::VoxelFunction</base>
  </compound>
  <compound kind="class">
    <name>mirtk::DifferenceOfCompositionLieBracketImageFilter3D</name>
    <filename>classmirtk_1_1DifferenceOfCompositionLieBracketImageFilter3D.html</filename>
    <templarg></templarg>
    <base>mirtk::LieBracketImageFilter</base>
    <member kind="function">
      <type></type>
      <name>DifferenceOfCompositionLieBracketImageFilter3D</name>
      <anchorfile>classmirtk_1_1DifferenceOfCompositionLieBracketImageFilter3D.html</anchorfile>
      <anchor>ad5d18a6d498ed58a7efc5594865b79af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1DifferenceOfCompositionLieBracketImageFilter3D.html</anchorfile>
      <anchor>a52e10a583e4297d4b87fea65ffcd64d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1DifferenceOfCompositionLieBracketImageFilter3D.html</anchorfile>
      <anchor>ae25b018c16d937591895876db73857dc</anchor>
      <arglist>(double [3], int, int, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1DifferenceOfCompositionLieBracketImageFilter3D.html</anchorfile>
      <anchor>af6f343c396272f76ba0081b57681fca4</anchor>
      <arglist>(int, int, int, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Scaling</name>
      <anchorfile>classmirtk_1_1DifferenceOfCompositionLieBracketImageFilter3D.html</anchorfile>
      <anchor>aff7cc6302bff920c6d3f3b80abcc1067</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Scaling</name>
      <anchorfile>classmirtk_1_1DifferenceOfCompositionLieBracketImageFilter3D.html</anchorfile>
      <anchor>aae001005bf922f6f1cbb6535eb0aeb08</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DifferenceOfCompositionLieBracketImageFilter3D</name>
      <anchorfile>classmirtk_1_1DifferenceOfCompositionLieBracketImageFilter3D.html</anchorfile>
      <anchor>a9628566825444c5a891dff93c30ca71b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1DifferenceOfCompositionLieBracketImageFilter3D.html</anchorfile>
      <anchor>a6c98bb9fb5f5e24d38b73808cda2808a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_Scaling</name>
      <anchorfile>classmirtk_1_1DifferenceOfCompositionLieBracketImageFilter3D.html</anchorfile>
      <anchor>acc2265ca5be317745cdd892a4a00b57b</anchor>
      <arglist>[2]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::BinaryVoxelFunction::Dilate</name>
    <filename>classmirtk_1_1BinaryVoxelFunction_1_1Dilate.html</filename>
    <base>mirtk::VoxelFunction</base>
  </compound>
  <compound kind="class">
    <name>mirtk::DilateCellData</name>
    <filename>classmirtk_1_1DilateCellData.html</filename>
    <base>mirtk::CellDataFilter</base>
    <member kind="function">
      <type></type>
      <name>DilateCellData</name>
      <anchorfile>classmirtk_1_1DilateCellData.html</anchorfile>
      <anchor>aa2a5ce2e93cd09734ca5cc0c78edcacd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DilateCellData</name>
      <anchorfile>classmirtk_1_1DilateCellData.html</anchorfile>
      <anchor>a6b4dab439b68a13e421b7474dbbc45dc</anchor>
      <arglist>(const DilateCellData &amp;)</arglist>
    </member>
    <member kind="function">
      <type>DilateCellData &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1DilateCellData.html</anchorfile>
      <anchor>a863e09d5a9c7fb2c0606871f707aec9a</anchor>
      <arglist>(const DilateCellData &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DilateCellData</name>
      <anchorfile>classmirtk_1_1DilateCellData.html</anchorfile>
      <anchor>a09d23dc58e188f9ef114e7c8b3a24822</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Execute</name>
      <anchorfile>classmirtk_1_1DilateCellData.html</anchorfile>
      <anchor>ab63ace4d229ceb3dd5097284221ed24a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::DilatePointData</name>
    <filename>classmirtk_1_1DilatePointData.html</filename>
    <base>mirtk::PointDataFilter</base>
    <member kind="function">
      <type></type>
      <name>DilatePointData</name>
      <anchorfile>classmirtk_1_1DilatePointData.html</anchorfile>
      <anchor>aaa5ccc0d2bf1c954bb3222d6ecb806a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DilatePointData</name>
      <anchorfile>classmirtk_1_1DilatePointData.html</anchorfile>
      <anchor>af3b664b54d5cd6fdec3a8d1bd9eeef85</anchor>
      <arglist>(const DilatePointData &amp;)</arglist>
    </member>
    <member kind="function">
      <type>DilatePointData &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1DilatePointData.html</anchorfile>
      <anchor>a4ffab92dad1ccefa7c620e672e67ae2d</anchor>
      <arglist>(const DilatePointData &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DilatePointData</name>
      <anchorfile>classmirtk_1_1DilatePointData.html</anchorfile>
      <anchor>a0c04e0527cd2931f11403b37ff0c6915</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Execute</name>
      <anchorfile>classmirtk_1_1DilatePointData.html</anchorfile>
      <anchor>adb9c25df1bfa7dd855a11fea544c286b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::Dilation</name>
    <filename>classmirtk_1_1Dilation.html</filename>
    <templarg>TVoxel</templarg>
    <base>mirtk::ImageToImage</base>
    <member kind="function">
      <type></type>
      <name>Dilation</name>
      <anchorfile>classmirtk_1_1Dilation.html</anchorfile>
      <anchor>af825292e938b677df995ed0934eec073</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1Dilation.html</anchorfile>
      <anchor>aefd4fe3c30c9212d5afd6e1fcb107e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Dilation</name>
      <anchorfile>classmirtk_1_1Dilation.html</anchorfile>
      <anchor>a4ba41c84d49f16fb16fad36554124727</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1Dilation.html</anchorfile>
      <anchor>a7b0b8f34cd5a230952a662142160a6f7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::GenericRegistrationFilter::DisplacementInfo</name>
    <filename>structmirtk_1_1GenericRegistrationFilter_1_1DisplacementInfo.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>_DispIndex</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1DisplacementInfo.html</anchorfile>
      <anchor>a9e22b76ccf46db75d0716ff0aea8fae0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ImageAttributes</type>
      <name>_Domain</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1DisplacementInfo.html</anchorfile>
      <anchor>ad3e02435f28184a9ae68dbdb13cd03c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_InputTime</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1DisplacementInfo.html</anchorfile>
      <anchor>a94c5af2c232aa585d2f5bc5c0eebcef1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Transformation *</type>
      <name>_Transformation</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1DisplacementInfo.html</anchorfile>
      <anchor>aa6c3d72a648541e7d526f318c4bc83aa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::DisplacementToVelocityField</name>
    <filename>classmirtk_1_1DisplacementToVelocityField.html</filename>
    <templarg>TVoxel</templarg>
    <base>mirtk::ImageToImage</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DisplacementToVelocityField</name>
      <anchorfile>classmirtk_1_1DisplacementToVelocityField.html</anchorfile>
      <anchor>a9b941a5442c6e4abf505fc5e1c9ad014</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DisplacementToVelocityField</name>
      <anchorfile>classmirtk_1_1DisplacementToVelocityField.html</anchorfile>
      <anchor>ac46bab4d0ace06a058dfd0f41300231b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DisplacementToVelocityField&lt; VoxelType &gt;</name>
    <filename>classmirtk_1_1DisplacementToVelocityField.html</filename>
    <base>ImageToImage&lt; VoxelType &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DisplacementToVelocityField</name>
      <anchorfile>classmirtk_1_1DisplacementToVelocityField.html</anchorfile>
      <anchor>a9b941a5442c6e4abf505fc5e1c9ad014</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DisplacementToVelocityField</name>
      <anchorfile>classmirtk_1_1DisplacementToVelocityField.html</anchorfile>
      <anchor>ac46bab4d0ace06a058dfd0f41300231b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::DisplacementToVelocityFieldBCH</name>
    <filename>classmirtk_1_1DisplacementToVelocityFieldBCH.html</filename>
    <templarg>VoxelType</templarg>
    <base>DisplacementToVelocityField&lt; VoxelType &gt;</base>
    <member kind="typedef">
      <type>VelocityToDisplacementField&lt; VoxelType &gt;</type>
      <name>ExponentialFilterType</name>
      <anchorfile>classmirtk_1_1DisplacementToVelocityFieldBCH.html</anchorfile>
      <anchor>af70a1e6602fae0dca23f5b70b39a96c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericImage&lt; VoxelType &gt;</type>
      <name>ImageType</name>
      <anchorfile>classmirtk_1_1DisplacementToVelocityFieldBCH.html</anchorfile>
      <anchor>a5e1ed071d553a299a2e9e9685bef5b8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DisplacementToVelocityFieldBCH</name>
      <anchorfile>classmirtk_1_1DisplacementToVelocityFieldBCH.html</anchorfile>
      <anchor>ab66145185e78cd557d0ff19de82a104f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ExponentialFilter</name>
      <anchorfile>classmirtk_1_1DisplacementToVelocityFieldBCH.html</anchorfile>
      <anchor>a01a382193aced6faac27f829f6ce6818</anchor>
      <arglist>(ExponentialFilterType *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NumberOfSteps</name>
      <anchorfile>classmirtk_1_1DisplacementToVelocityFieldBCH.html</anchorfile>
      <anchor>a70de144abee24be5fdf5d2009704d4cb</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfSteps</name>
      <anchorfile>classmirtk_1_1DisplacementToVelocityFieldBCH.html</anchorfile>
      <anchor>a42f7b928a18b0fe1fcd2b76495816e95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1DisplacementToVelocityFieldBCH.html</anchorfile>
      <anchor>a6fd22e2690d9aea39781f3c16854d7ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UpperIntegrationLimit</name>
      <anchorfile>classmirtk_1_1DisplacementToVelocityFieldBCH.html</anchorfile>
      <anchor>afcc7c8a40d78aa7b800427b718e760f2</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>UpperIntegrationLimit</name>
      <anchorfile>classmirtk_1_1DisplacementToVelocityFieldBCH.html</anchorfile>
      <anchor>a54f239e987f79226a95a1d34275eed07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DisplacementToVelocityFieldBCH</name>
      <anchorfile>classmirtk_1_1DisplacementToVelocityFieldBCH.html</anchorfile>
      <anchor>a1496ef620b38241d6279b903af2d2286</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1DisplacementToVelocityFieldBCH.html</anchorfile>
      <anchor>a48b9d346c33c1e08883624cea5157742</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1DisplacementToVelocityFieldBCH.html</anchorfile>
      <anchor>a0357970fd042151386d8dd28d279ae12</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::DistanceErrorFunction</name>
    <filename>classmirtk_1_1DistanceErrorFunction.html</filename>
    <base>mirtk::RadialErrorFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Derivative</name>
      <anchorfile>classmirtk_1_1DistanceErrorFunction.html</anchorfile>
      <anchor>abac843c0fbf1f5031e6e97e13d5f368b</anchor>
      <arglist>(double d) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DistanceErrorFunction</name>
      <anchorfile>classmirtk_1_1DistanceErrorFunction.html</anchorfile>
      <anchor>ab947bfdcbf236bb408222de1e738b44e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DistanceErrorFunction</name>
      <anchorfile>classmirtk_1_1DistanceErrorFunction.html</anchorfile>
      <anchor>af984aa81333c2fbf97f019a9d4dcb2bd</anchor>
      <arglist>(const DistanceErrorFunction &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RadialErrorFunction *</type>
      <name>NewInstance</name>
      <anchorfile>classmirtk_1_1DistanceErrorFunction.html</anchorfile>
      <anchor>a3f7f7495e20da401d54cbad8267a01ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TypeId</type>
      <name>Type</name>
      <anchorfile>classmirtk_1_1DistanceErrorFunction.html</anchorfile>
      <anchor>a693672c2bb72a2f4e591e20bfa4931a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Value</name>
      <anchorfile>classmirtk_1_1DistanceErrorFunction.html</anchorfile>
      <anchor>acb65fe4d3c151d0f4e6e7775c606fd83</anchor>
      <arglist>(double d) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DistanceErrorFunction</name>
      <anchorfile>classmirtk_1_1DistanceErrorFunction.html</anchorfile>
      <anchor>adafd77b84aabc3c4687f46ccad294adf</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ImplicitSurfaceUtils::DistanceMeasurement</name>
    <filename>classmirtk_1_1ImplicitSurfaceUtils_1_1DistanceMeasurement.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceUtils_1_1DistanceMeasurement.html</anchorfile>
      <anchor>afd73ea23c232cc97c52a9a6bdbda3077</anchor>
      <arglist>(const double p[3], const PointSamples &amp;dirs, double mind, double minh, double maxd, const DistanceFunction &amp;distance, double offset=.0, double tol=1e-3)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceUtils_1_1DistanceMeasurement.html</anchorfile>
      <anchor>a62dfe3608ca6e24ef19e0c34ba3ffb21</anchor>
      <arglist>(const double p[3], const PointSamples &amp;dirs, double minh, double maxd, const DistanceFunction &amp;distance, double offset=.0, double tol=1e-3)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceUtils_1_1DistanceMeasurement.html</anchorfile>
      <anchor>a18b587a784a163719be34999b04f4366</anchor>
      <arglist>(int i=0) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfValues</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceUtils_1_1DistanceMeasurement.html</anchorfile>
      <anchor>aa70e2696e3a16516ad4c5f1967c2d6f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceUtils_1_1DistanceMeasurement.html</anchorfile>
      <anchor>ad798ff402aa4e18baa2c0f63cb1d4f18</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceUtils_1_1DistanceMeasurement.html</anchorfile>
      <anchor>ac1217d149ec96f6033d36b622c277098</anchor>
      <arglist>(int i, double v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DistanceMeasurement</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceUtils_1_1DistanceMeasurement.html</anchorfile>
      <anchor>abedb212ef23b5ba065d792b35a445fd2</anchor>
      <arglist>(int nvalues=1)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~DistanceMeasurement</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceUtils_1_1DistanceMeasurement.html</anchorfile>
      <anchor>ab1ccfb89aa646e028ab0e24cba2e84ef</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::BinaryVoxelFunction::Div</name>
    <filename>structmirtk_1_1BinaryVoxelFunction_1_1Div.html</filename>
    <base>mirtk::VoxelFunction</base>
  </compound>
  <compound kind="struct">
    <name>mirtk::TernaryVoxelFunction::Div</name>
    <filename>structmirtk_1_1TernaryVoxelFunction_1_1Div.html</filename>
    <base>mirtk::VoxelFunction</base>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::Div</name>
    <filename>classmirtk_1_1data_1_1op_1_1Div.html</filename>
    <base>mirtk::data::op::ElementWiseBinaryOp</base>
    <member kind="function">
      <type></type>
      <name>Div</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Div.html</anchorfile>
      <anchor>aadf5cc740ab3d4b0ad0cd52c642a7480</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Div</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Div.html</anchorfile>
      <anchor>ad0c6a87413115cf27c32efe42d4e2f8f</anchor>
      <arglist>(const double *value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Div</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Div.html</anchorfile>
      <anchor>a80062714d1c49d189f6fca414b8fc7c2</anchor>
      <arglist>(const char *fname)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Op</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Div.html</anchorfile>
      <anchor>a60c92619b061de3fa0a118d2b183002b</anchor>
      <arglist>(double value, double constant, bool &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Div.html</anchorfile>
      <anchor>a38ea7c65f9c049a3561ddb40a17d3bdb</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::DivWithZero</name>
    <filename>classmirtk_1_1data_1_1op_1_1DivWithZero.html</filename>
    <base>mirtk::data::op::ElementWiseBinaryOp</base>
    <member kind="function">
      <type></type>
      <name>DivWithZero</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1DivWithZero.html</anchorfile>
      <anchor>a7b77d509a13a3f278837c5efe169d66a</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DivWithZero</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1DivWithZero.html</anchorfile>
      <anchor>a26ea230661270a0d4470efc014572194</anchor>
      <arglist>(const double *value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DivWithZero</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1DivWithZero.html</anchorfile>
      <anchor>a252f58f55aedba156e5c77a859384ab0</anchor>
      <arglist>(const char *fname)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Op</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1DivWithZero.html</anchorfile>
      <anchor>afa0b8473c2a18899e2186ab5f9df9662</anchor>
      <arglist>(double value, double constant, bool &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1DivWithZero.html</anchorfile>
      <anchor>a821b3d1f69ab08529fdd184c70a34746</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::double2x2</name>
    <filename>structmirtk_1_1double2x2.html</filename>
  </compound>
  <compound kind="struct">
    <name>mirtk::double3x3</name>
    <filename>structmirtk_1_1double3x3.html</filename>
  </compound>
  <compound kind="struct">
    <name>mirtk::double3x4</name>
    <filename>structmirtk_1_1double3x4.html</filename>
  </compound>
  <compound kind="struct">
    <name>mirtk::double4x4</name>
    <filename>structmirtk_1_1double4x4.html</filename>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::DownsampleConvolvedExtendedForegroundInX</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1DownsampleConvolvedExtendedForegroundInX.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ConvolutionFunction::ConvolveExtendedForegroundInX</base>
    <member kind="variable">
      <type>int</type>
      <name>_Factor</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1DownsampleConvolvedExtendedForegroundInX.html</anchorfile>
      <anchor>ade21fb5891f9cd0ef3ebcdc751b21067</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const GenericImage&lt; TVoxel &gt; *</type>
      <name>_Input</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1DownsampleConvolvedExtendedForegroundInX.html</anchorfile>
      <anchor>a717070ce6d1e43f4d7e955406d86f674</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Offset</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1DownsampleConvolvedExtendedForegroundInX.html</anchorfile>
      <anchor>a0776b0c2e971167e58cee619b9c1c2e1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::DownsampleConvolvedExtendedForegroundInY</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1DownsampleConvolvedExtendedForegroundInY.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ConvolutionFunction::ConvolveExtendedForegroundInY</base>
    <member kind="variable">
      <type>int</type>
      <name>_Factor</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1DownsampleConvolvedExtendedForegroundInY.html</anchorfile>
      <anchor>aeefb0bffdbed045b23fa3ec3eb46bb8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const GenericImage&lt; TVoxel &gt; *</type>
      <name>_Input</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1DownsampleConvolvedExtendedForegroundInY.html</anchorfile>
      <anchor>a008035e43519b6871f6f082b05193594</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Offset</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1DownsampleConvolvedExtendedForegroundInY.html</anchorfile>
      <anchor>a157c203916e390e13b6ce24bd7e5a8a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::DownsampleConvolvedExtendedForegroundInZ</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1DownsampleConvolvedExtendedForegroundInZ.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ConvolutionFunction::ConvolveExtendedForegroundInZ</base>
    <member kind="variable">
      <type>int</type>
      <name>_Factor</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1DownsampleConvolvedExtendedForegroundInZ.html</anchorfile>
      <anchor>a25da99b4c6ca8fbb3409a4c60fcf344a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const GenericImage&lt; TVoxel &gt; *</type>
      <name>_Input</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1DownsampleConvolvedExtendedForegroundInZ.html</anchorfile>
      <anchor>ab17374b8b18c912ec9c8c4200bbdcb26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Offset</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1DownsampleConvolvedExtendedForegroundInZ.html</anchorfile>
      <anchor>ad48e721eff134bde536aae0bc5d8f24c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::DownsampleConvolvedMirroredForegroundInX</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1DownsampleConvolvedMirroredForegroundInX.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ConvolutionFunction::ConvolveMirroredForegroundInX</base>
    <member kind="variable">
      <type>int</type>
      <name>_Factor</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1DownsampleConvolvedMirroredForegroundInX.html</anchorfile>
      <anchor>a61a1faca454ac2210faa58f6f54c70fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const GenericImage&lt; TVoxel &gt; *</type>
      <name>_Input</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1DownsampleConvolvedMirroredForegroundInX.html</anchorfile>
      <anchor>a89cee059b908fc9624579683e71bbf88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Offset</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1DownsampleConvolvedMirroredForegroundInX.html</anchorfile>
      <anchor>a97735f632f7b226e5392e87b8c1bc930</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::DownsampleConvolvedMirroredForegroundInY</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1DownsampleConvolvedMirroredForegroundInY.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ConvolutionFunction::ConvolveMirroredForegroundInY</base>
    <member kind="variable">
      <type>int</type>
      <name>_Factor</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1DownsampleConvolvedMirroredForegroundInY.html</anchorfile>
      <anchor>a81c0c8966218fbdb42b1c2665735705b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const GenericImage&lt; TVoxel &gt; *</type>
      <name>_Input</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1DownsampleConvolvedMirroredForegroundInY.html</anchorfile>
      <anchor>afd1e122d94e8c8b69bd77c181ad4af5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Offset</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1DownsampleConvolvedMirroredForegroundInY.html</anchorfile>
      <anchor>a3ebf26906d4d39b50b175fac3f63d819</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::DownsampleConvolvedMirroredForegroundInZ</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1DownsampleConvolvedMirroredForegroundInZ.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ConvolutionFunction::ConvolveMirroredForegroundInZ</base>
    <member kind="variable">
      <type>int</type>
      <name>_Factor</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1DownsampleConvolvedMirroredForegroundInZ.html</anchorfile>
      <anchor>ad35cec9c38794c09404e05eefa87b13c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const GenericImage&lt; TVoxel &gt; *</type>
      <name>_Input</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1DownsampleConvolvedMirroredForegroundInZ.html</anchorfile>
      <anchor>a08a983092dcd726802043b8e61815407</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Offset</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1DownsampleConvolvedMirroredForegroundInZ.html</anchorfile>
      <anchor>a65699b643c64d91cc02a197443ae24ce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::Downsampling</name>
    <filename>classmirtk_1_1Downsampling.html</filename>
    <templarg></templarg>
    <base>mirtk::ImageToImage</base>
    <member kind="function">
      <type></type>
      <name>Downsampling</name>
      <anchorfile>classmirtk_1_1Downsampling.html</anchorfile>
      <anchor>a8e1b7ed7e976c63a3a7b0a51c8c2676b</anchor>
      <arglist>(int=2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Downsampling</name>
      <anchorfile>classmirtk_1_1Downsampling.html</anchorfile>
      <anchor>ad68f1a0f603f550c9d4586ba55a96c9f</anchor>
      <arglist>(int, int, int=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Kernel</name>
      <anchorfile>classmirtk_1_1Downsampling.html</anchorfile>
      <anchor>a6836214e4d681c5b64e9709cc3c93e2d</anchor>
      <arglist>(ScalarFunction *, int, bool=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1Downsampling.html</anchorfile>
      <anchor>a71d2f9295edef64bf69316f883144716</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DiscreteKernel</name>
      <anchorfile>classmirtk_1_1Downsampling.html</anchorfile>
      <anchor>aff86809a4823f4741471684bb6dfa3c5</anchor>
      <arglist>(GenericImage&lt; RealPixel &gt; &amp;, double)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1Downsampling.html</anchorfile>
      <anchor>a028522a0f315d28188868b6aa1a7f128</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::EdgeConnectivity</name>
    <filename>classmirtk_1_1EdgeConnectivity.html</filename>
    <base>GenericSparseMatrix&lt; int &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1EdgeConnectivity.html</anchorfile>
      <anchor>ab675c38bbd073532cbd718224ae59132</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeConnectivity</name>
      <anchorfile>classmirtk_1_1EdgeConnectivity.html</anchorfile>
      <anchor>ae55f93ee8ada1478e6ded13012354cf1</anchor>
      <arglist>(vtkDataSet *=nullptr, int n=3, const EdgeTable *=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeConnectivity</name>
      <anchorfile>classmirtk_1_1EdgeConnectivity.html</anchorfile>
      <anchor>ab5e6e5cfc6b2e3d63b843907a224267f</anchor>
      <arglist>(vtkDataSet *, double r, const EdgeTable *=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeConnectivity</name>
      <anchorfile>classmirtk_1_1EdgeConnectivity.html</anchorfile>
      <anchor>a411e35d15b43010a28db1c0ff210f60b</anchor>
      <arglist>(const EdgeConnectivity &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetAdjacentPoints</name>
      <anchorfile>classmirtk_1_1EdgeConnectivity.html</anchorfile>
      <anchor>a44bbd731132dfae878b72d27f0b80a59</anchor>
      <arglist>(int, int &amp;, const int *&amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetAdjacentPoints</name>
      <anchorfile>classmirtk_1_1EdgeConnectivity.html</anchorfile>
      <anchor>ae6d4ad78a01c3f8fd0fcf7efc76e6ec3</anchor>
      <arglist>(int, const int *&amp;, const int *&amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetConnectedPoints</name>
      <anchorfile>classmirtk_1_1EdgeConnectivity.html</anchorfile>
      <anchor>ac95ef2d11e4bc91ad3cbf297bb8317ea</anchor>
      <arglist>(int, int &amp;, const int *&amp;, int n=-1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetConnectedPoints</name>
      <anchorfile>classmirtk_1_1EdgeConnectivity.html</anchorfile>
      <anchor>acf9b8d9fa56670c373bffd98adc7e1e1</anchor>
      <arglist>(int, const int *&amp;, const int *&amp;, int n=-1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1EdgeConnectivity.html</anchorfile>
      <anchor>a5cd5892a9774b054530f7e5f59b21d1c</anchor>
      <arglist>(vtkDataSet *, int n=3, const EdgeTable *=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1EdgeConnectivity.html</anchorfile>
      <anchor>a71a636863b6859d788458597099290a2</anchor>
      <arglist>(vtkDataSet *, double r, const EdgeTable *=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfAdjacentPoints</name>
      <anchorfile>classmirtk_1_1EdgeConnectivity.html</anchorfile>
      <anchor>adb7fb1439e749fd6ef0a7c35fe6d1202</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfConnectedPoints</name>
      <anchorfile>classmirtk_1_1EdgeConnectivity.html</anchorfile>
      <anchor>a70305b45953fe045c9e602ce063cbbba</anchor>
      <arglist>(int, int n=-1) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfPoints</name>
      <anchorfile>classmirtk_1_1EdgeConnectivity.html</anchorfile>
      <anchor>a016eb619bbdaca0ee033585277441e3c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EdgeConnectivity &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1EdgeConnectivity.html</anchorfile>
      <anchor>a0315789a31582f501cc865fb4c03cfde</anchor>
      <arglist>(const EdgeConnectivity &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EdgeConnectivity</name>
      <anchorfile>classmirtk_1_1EdgeConnectivity.html</anchorfile>
      <anchor>a9fc5bbffae89e8c3c9c7d921260461a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::EdgeIterator</name>
    <filename>classmirtk_1_1EdgeIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>EdgeIterator</name>
      <anchorfile>classmirtk_1_1EdgeIterator.html</anchorfile>
      <anchor>a25b1fbbbd5fcbc7ce633d2af2d4263dc</anchor>
      <arglist>(const EdgeTable &amp;table)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeIterator</name>
      <anchorfile>classmirtk_1_1EdgeIterator.html</anchorfile>
      <anchor>a5548fd72fb75cfe371757a8e3ff730d4</anchor>
      <arglist>(const EdgeTable &amp;table, int begin, int end=-1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetNextEdge</name>
      <anchorfile>classmirtk_1_1EdgeIterator.html</anchorfile>
      <anchor>abda364b6673077037abd6fb23d3a167b</anchor>
      <arglist>(IdType &amp;ptId1, IdType &amp;ptId2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitTraversal</name>
      <anchorfile>classmirtk_1_1EdgeIterator.html</anchorfile>
      <anchor>a894deb924f597cc8346685051219359f</anchor>
      <arglist>(int begin=0, int end=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitTraversal</name>
      <anchorfile>classmirtk_1_1EdgeIterator.html</anchorfile>
      <anchor>aa73ec4309f05e312a8043eb25a0d6ee7</anchor>
      <arglist>(const blocked_range&lt; IdType &gt; &amp;re)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::EdgeTable</name>
    <filename>classmirtk_1_1EdgeTable.html</filename>
    <base>GenericSparseMatrix&lt; int &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1EdgeTable.html</anchorfile>
      <anchor>a1d2a97124863eda692bb328ae79a0004</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>EdgeId</name>
      <anchorfile>classmirtk_1_1EdgeTable.html</anchorfile>
      <anchor>a1fb0483348f7a76b3998dd0ce1ac093f</anchor>
      <arglist>(IdType1, IdType2) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeTable</name>
      <anchorfile>classmirtk_1_1EdgeTable.html</anchorfile>
      <anchor>af02bf897e022ef4166f1557dfabd21ab</anchor>
      <arglist>(vtkDataSet *=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeTable</name>
      <anchorfile>classmirtk_1_1EdgeTable.html</anchorfile>
      <anchor>acb69ea6ddeff9fa804b85eec991de382</anchor>
      <arglist>(const EdgeTable &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetAdjacentPoints</name>
      <anchorfile>classmirtk_1_1EdgeTable.html</anchorfile>
      <anchor>a00575e6f0049f405f9e1ab33d6523b4e</anchor>
      <arglist>(int, int &amp;, const int *&amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetAdjacentPoints</name>
      <anchorfile>classmirtk_1_1EdgeTable.html</anchorfile>
      <anchor>ae6fd5cc89e72e75e857901f79e70016f</anchor>
      <arglist>(int, const int *&amp;, const int *&amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetEdge</name>
      <anchorfile>classmirtk_1_1EdgeTable.html</anchorfile>
      <anchor>afee63f79714efe7956a7916708e66b16</anchor>
      <arglist>(EdgeIdType, IdType1 &amp;ptId1, IdType2 &amp;ptId2) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1EdgeTable.html</anchorfile>
      <anchor>ac5eb60b6074f3f1af9bc20a09cbbebd3</anchor>
      <arglist>(vtkDataSet *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsEdge</name>
      <anchorfile>classmirtk_1_1EdgeTable.html</anchorfile>
      <anchor>a8dafbbf3034ca9c06bc2ecf341237348</anchor>
      <arglist>(IdType1, IdType2) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MaxNumberOfAdjacentPoints</name>
      <anchorfile>classmirtk_1_1EdgeTable.html</anchorfile>
      <anchor>a50c971d8d834ba10b30ed44d3ba09b8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfAdjacentPoints</name>
      <anchorfile>classmirtk_1_1EdgeTable.html</anchorfile>
      <anchor>a950b7d46270595bb38494b13ead9b33a</anchor>
      <arglist>(IdType) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfPoints</name>
      <anchorfile>classmirtk_1_1EdgeTable.html</anchorfile>
      <anchor>a3700454939cdfdd7ab8259251eefd409</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EdgeTable &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1EdgeTable.html</anchorfile>
      <anchor>aca9cc305cec43781bd264f0fe7de1f7c</anchor>
      <arglist>(const EdgeTable &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EdgeTable</name>
      <anchorfile>classmirtk_1_1EdgeTable.html</anchorfile>
      <anchor>a15215c4e3362c8078725f0c9550df3c4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::ElementWiseBinaryOp</name>
    <filename>classmirtk_1_1data_1_1op_1_1ElementWiseBinaryOp.html</filename>
    <base>mirtk::data::Op</base>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>Op</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1ElementWiseBinaryOp.html</anchorfile>
      <anchor>a70f5f9c4acc1fd0335862e0af325bc9c</anchor>
      <arglist>(double value, double, bool &amp;) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ElementWiseBinaryOp</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1ElementWiseBinaryOp.html</anchorfile>
      <anchor>a07b3a9dfa21f5492636527597cf308b7</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ElementWiseBinaryOp</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1ElementWiseBinaryOp.html</anchorfile>
      <anchor>a47dd30b67a1664cf188c1684c394692a</anchor>
      <arglist>(const double *value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ElementWiseBinaryOp</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1ElementWiseBinaryOp.html</anchorfile>
      <anchor>a47343c1da7765c2cee5e96fb6e041804</anchor>
      <arglist>(const char *fname)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ElementWiseBinaryOp</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1ElementWiseBinaryOp.html</anchorfile>
      <anchor>a93a1e9b079f5939b64d45e73623727bd</anchor>
      <arglist>(const char *fname, double value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ElementWiseBinaryOp</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1ElementWiseBinaryOp.html</anchorfile>
      <anchor>a977751139a8f02052ec72882b9ea1ecd</anchor>
      <arglist>(const char *fname, const double *value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ElementWiseBinaryOp</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1ElementWiseBinaryOp.html</anchorfile>
      <anchor>a73843ceaf51a6c63a73c98137e6d6de0</anchor>
      <arglist>(const char *fname, const char *aname, bool cell_data=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ElementWiseBinaryOp</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1ElementWiseBinaryOp.html</anchorfile>
      <anchor>a024149a4f31e90885c569f9344f12a47</anchor>
      <arglist>(const char *fname, const char *aname, double value, bool cell_data=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ElementWiseBinaryOp</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1ElementWiseBinaryOp.html</anchorfile>
      <anchor>a5e983081f82428e0a6f6ae01b3b1660d</anchor>
      <arglist>(const char *fname, const char *aname, const double *value, bool cell_data=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1ElementWiseBinaryOp.html</anchorfile>
      <anchor>a4a92e5a6dea25d598fcd693f6e6db545</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1ElementWiseBinaryOp.html</anchorfile>
      <anchor>aef2aecb9389034a617dee9315eb8da9f</anchor>
      <arglist>(int n, double *data, bool *mask=nullptr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::ElementWiseUnaryOp</name>
    <filename>classmirtk_1_1data_1_1op_1_1ElementWiseUnaryOp.html</filename>
    <base>mirtk::data::Op</base>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>Op</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1ElementWiseUnaryOp.html</anchorfile>
      <anchor>a74675e9a2d7086915ac5d777bc7c05a0</anchor>
      <arglist>(double value, bool &amp;) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1ElementWiseUnaryOp.html</anchorfile>
      <anchor>a582c30da156156f40f9d2e0f21d17a82</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::EnergyTerm</name>
    <filename>classmirtk_1_1EnergyTerm.html</filename>
    <base>mirtk::Configurable</base>
    <member kind="typedef">
      <type>ObjectFactory&lt; enum EnergyMeasure, EnergyTerm &gt;</type>
      <name>FactoryType</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>ae120c047c6c92f96fc2add3635dfe2b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual enum EnergyMeasure</type>
      <name>EnergyMeasure</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>ab3093d120424204366076e2a993cc9e4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Gradient</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>a54842eabf915c31982b870e8660432f3</anchor>
      <arglist>(double *gradient, double step)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GradientStep</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>abb4f88e03f4aa34a96a57991256cf41f</anchor>
      <arglist>(const double *gradient, double &amp;min, double &amp;max) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>a592cb603567d4cc929ea37a53b100a08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>InitialValue</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>a19673113b3f7a505af0459afe350f841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NormalizedGradient</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>aac16404457ba1c111a7a25e8144184fa</anchor>
      <arglist>(double *gradient, double step)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>abc17c5c1e18c7d5fd0d6541dbffe9ef2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>Prefix</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>a0931b1607aa9e896c782f045fbf08469</anchor>
      <arglist>(const char *=NULL) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>a1ecd71f5f45535f1e61ca589b49ce9e0</anchor>
      <arglist>(Indent=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>RawValue</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>ad5651d32e847ee4ea27791baae2110bc</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RawValue</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>ab840c6cb680c6cfef10b12974e58015c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetInitialValue</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>acdf86fcabce6c588b0115cf669ef716e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetValue</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>affed4921cbda8d2ae89b63d7d682e8a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>a01cc9587b942f17797d8fcc3af441384</anchor>
      <arglist>(bool gradient=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Upgrade</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>a4391e595ad8899576f82cc84cd8bbd88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Value</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>a9069b3fc5970a7f2c933f5e7f9c3c346</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteDataSets</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>a8740e10eb9b406889b10448c3ee9fa1f</anchor>
      <arglist>(const char *, const char *, bool=true) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteGradient</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>ae42664c34dedd5da9f7da937856a31c0</anchor>
      <arglist>(const char *, const char *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EnergyTerm</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>a787fd96f10a0be7a37cc339513c596e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FactoryType &amp;</type>
      <name>Factory</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>a07173605475f6ff062a3ecb740913e8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EnergyTerm *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>a1868b2ab4e00779a094d0af2533adf08</anchor>
      <arglist>(EnergyMeasure, const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EnergyTerm *</type>
      <name>TryNew</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>aeea502c39d76cd6cb01011450d8c7078</anchor>
      <arglist>(EnergyMeasure, const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EnergyTerm</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>a3745f4c531b1beb6eb3d5266c4d9a0fb</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EnergyTerm</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>a3d5351b729debb4a1b0166001889ad03</anchor>
      <arglist>(const EnergyTerm &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>ae5cf01c414a086c27874621afe103bc5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>aa97a8166dd7c3d99992c1d09ef41040a</anchor>
      <arglist>(double *gradient, double step, double weight)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>EnergyTerm &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>a03adfc001bdb7c5d1042fc7f21ffd681</anchor>
      <arglist>(const EnergyTerm &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithoutPrefix</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>a0272788457000ee90312fd16de13b3d5</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithPrefix</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>a0230505ed36e5ac317c77a201b73404c</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::EnergyThreshold</name>
    <filename>classmirtk_1_1EnergyThreshold.html</filename>
    <base>mirtk::StoppingCriterion</base>
    <member kind="function">
      <type></type>
      <name>EnergyThreshold</name>
      <anchorfile>classmirtk_1_1EnergyThreshold.html</anchorfile>
      <anchor>a5816ec6f283e33f0911e2c375775bbbb</anchor>
      <arglist>(const ObjectiveFunction *=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EnergyThreshold</name>
      <anchorfile>classmirtk_1_1EnergyThreshold.html</anchorfile>
      <anchor>a96b4cd430d00ea172be28cd43539d50a</anchor>
      <arglist>(const EnergyThreshold &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Fulfilled</name>
      <anchorfile>classmirtk_1_1EnergyThreshold.html</anchorfile>
      <anchor>a398b836b34ec959929fa02bc3a3ffa06</anchor>
      <arglist>(int iter, double value, const double *delta)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StoppingCriterion *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1EnergyThreshold.html</anchorfile>
      <anchor>ad32898638b030e706fe2c0525e71072c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EnergyThreshold &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1EnergyThreshold.html</anchorfile>
      <anchor>afc46ed8114df3ef6a84c58ded43b4ac8</anchor>
      <arglist>(const EnergyThreshold &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1EnergyThreshold.html</anchorfile>
      <anchor>a52441cc7ccb489069989fd3c9a72447b</anchor>
      <arglist>(ostream &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EnergyThreshold</name>
      <anchorfile>classmirtk_1_1EnergyThreshold.html</anchorfile>
      <anchor>a34a50dc977a9786c20c4fc81e90bf750</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::select::Equal</name>
    <filename>classmirtk_1_1data_1_1select_1_1Equal.html</filename>
    <base>mirtk::data::SelectionCriterium</base>
    <member kind="function">
      <type></type>
      <name>Equal</name>
      <anchorfile>classmirtk_1_1data_1_1select_1_1Equal.html</anchorfile>
      <anchor>a024251de4ab63d37c7775fcdb36bc35a</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Select</name>
      <anchorfile>classmirtk_1_1data_1_1select_1_1Equal.html</anchorfile>
      <anchor>abb401cfc033f196c64c12c4386ef9c78</anchor>
      <arglist>(double value) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::BinaryVoxelFunction::Erode</name>
    <filename>classmirtk_1_1BinaryVoxelFunction_1_1Erode.html</filename>
    <base>mirtk::VoxelFunction</base>
  </compound>
  <compound kind="class">
    <name>mirtk::ErodeCellData</name>
    <filename>classmirtk_1_1ErodeCellData.html</filename>
    <base>mirtk::CellDataFilter</base>
    <member kind="function">
      <type></type>
      <name>ErodeCellData</name>
      <anchorfile>classmirtk_1_1ErodeCellData.html</anchorfile>
      <anchor>ad470fcd2a1fe05b4e04b3a225606bb6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ErodeCellData</name>
      <anchorfile>classmirtk_1_1ErodeCellData.html</anchorfile>
      <anchor>a85ae07c25db49944e0481d94399bef73</anchor>
      <arglist>(const ErodeCellData &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ErodeCellData &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1ErodeCellData.html</anchorfile>
      <anchor>a1b9353b6ec4fddd7527182cc57d16bc6</anchor>
      <arglist>(const ErodeCellData &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ErodeCellData</name>
      <anchorfile>classmirtk_1_1ErodeCellData.html</anchorfile>
      <anchor>a8d2f14adaf2fbaa894e21d1f258f1ccd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Execute</name>
      <anchorfile>classmirtk_1_1ErodeCellData.html</anchorfile>
      <anchor>a21b565b0b04dcc1601978da949722bed</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ErodePointData</name>
    <filename>classmirtk_1_1ErodePointData.html</filename>
    <base>mirtk::PointDataFilter</base>
    <member kind="function">
      <type></type>
      <name>ErodePointData</name>
      <anchorfile>classmirtk_1_1ErodePointData.html</anchorfile>
      <anchor>a577554cd4c8d11bb8660f0bc3802cf31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ErodePointData</name>
      <anchorfile>classmirtk_1_1ErodePointData.html</anchorfile>
      <anchor>a9bcb5dae6e5c7ce3c63e241351585ebc</anchor>
      <arglist>(const ErodePointData &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ErodePointData &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1ErodePointData.html</anchorfile>
      <anchor>a357ec41d6f833509214d0a30b76b5b1a</anchor>
      <arglist>(const ErodePointData &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ErodePointData</name>
      <anchorfile>classmirtk_1_1ErodePointData.html</anchorfile>
      <anchor>a0300206e34ba143872ec9852f6efb01c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Execute</name>
      <anchorfile>classmirtk_1_1ErodePointData.html</anchorfile>
      <anchor>aa8a8867336af9a153a1d5a85d2116246</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::Erosion</name>
    <filename>classmirtk_1_1Erosion.html</filename>
    <templarg>TVoxel</templarg>
    <base>mirtk::ImageToImage</base>
    <member kind="function">
      <type></type>
      <name>Erosion</name>
      <anchorfile>classmirtk_1_1Erosion.html</anchorfile>
      <anchor>a6f334143580d047c228dcfef9ad6ff62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1Erosion.html</anchorfile>
      <anchor>a290b7d21909bc605cbfac15c6534a05e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Erosion</name>
      <anchorfile>classmirtk_1_1Erosion.html</anchorfile>
      <anchor>a642fa826f572a460f3827df067abfd5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1Erosion.html</anchorfile>
      <anchor>a590b3c8d7aec6350001d94640f5c65ce</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::EulerMethod</name>
    <filename>classmirtk_1_1EulerMethod.html</filename>
    <base>mirtk::LocalOptimizer</base>
    <member kind="function">
      <type></type>
      <name>EulerMethod</name>
      <anchorfile>classmirtk_1_1EulerMethod.html</anchorfile>
      <anchor>ab8322bd16626f44ae1fef759bfcdd4a9</anchor>
      <arglist>(ObjectiveFunction *=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EulerMethod</name>
      <anchorfile>classmirtk_1_1EulerMethod.html</anchorfile>
      <anchor>a8320376efbd60d9affe3e2d43c749f3a</anchor>
      <arglist>(const EulerMethod &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1EulerMethod.html</anchorfile>
      <anchor>ae53a7cf4327c570b2089211b77aab62d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EulerMethod &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1EulerMethod.html</anchorfile>
      <anchor>aeff231e84bfd428f6fbce36a51de54c9</anchor>
      <arglist>(const EulerMethod &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1EulerMethod.html</anchorfile>
      <anchor>aa7e3be33f4286929d5bd48fef21e3924</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1EulerMethod.html</anchorfile>
      <anchor>af8116f2d59212e535634ebaa3487230b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1EulerMethod.html</anchorfile>
      <anchor>a52af7d36bfba7434eb62ac6ba1de9e7f</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EulerMethod</name>
      <anchorfile>classmirtk_1_1EulerMethod.html</anchorfile>
      <anchor>a404d8eec359dd67f151509cd33985b0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1EulerMethod.html</anchorfile>
      <anchor>a5c247019cd5dd3dacadba8cae67d834e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>GradientNorm</name>
      <anchorfile>classmirtk_1_1EulerMethod.html</anchorfile>
      <anchor>abb4a648dc9bc6e3a6c2d54ccc3cbeea4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>RemeshModel</name>
      <anchorfile>classmirtk_1_1EulerMethod.html</anchorfile>
      <anchor>a84ffbb84f8cdd82c9a82e8cb62d3b314</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>TruncateDisplacement</name>
      <anchorfile>classmirtk_1_1EulerMethod.html</anchorfile>
      <anchor>a5c133aeabfe6c28bae9aec0df188c592</anchor>
      <arglist>(bool force=false)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>UpdateDisplacement</name>
      <anchorfile>classmirtk_1_1EulerMethod.html</anchorfile>
      <anchor>a49447313f08774882d615eaafdc96382</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>UpdateNormalDisplacement</name>
      <anchorfile>classmirtk_1_1EulerMethod.html</anchorfile>
      <anchor>a65094be970169c150a31e98946b7d83c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::EulerMethodWithDamping</name>
    <filename>classmirtk_1_1EulerMethodWithDamping.html</filename>
    <base>mirtk::EulerMethod</base>
    <member kind="function">
      <type></type>
      <name>EulerMethodWithDamping</name>
      <anchorfile>classmirtk_1_1EulerMethodWithDamping.html</anchorfile>
      <anchor>a3afcd10768dc95e8ec8bcd24239923e0</anchor>
      <arglist>(ObjectiveFunction *=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EulerMethodWithDamping</name>
      <anchorfile>classmirtk_1_1EulerMethodWithDamping.html</anchorfile>
      <anchor>aea32acc1f289657180de8ef149934612</anchor>
      <arglist>(const EulerMethodWithDamping &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1EulerMethodWithDamping.html</anchorfile>
      <anchor>ae68adbd2f68d2dfd491eafdc1213edb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EulerMethodWithDamping &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1EulerMethodWithDamping.html</anchorfile>
      <anchor>a3fa04566654d318708467e2e5c9467e4</anchor>
      <arglist>(const EulerMethodWithDamping &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1EulerMethodWithDamping.html</anchorfile>
      <anchor>ac01c166a9f01cd7717d9d833fb7946b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1EulerMethodWithDamping.html</anchorfile>
      <anchor>abefdb0528840d9288c237a17ec917148</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>UpdateDisplacement</name>
      <anchorfile>classmirtk_1_1EulerMethodWithDamping.html</anchorfile>
      <anchor>ab1e0adaf6e885b8078a077dce2a62046</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EulerMethodWithDamping</name>
      <anchorfile>classmirtk_1_1EulerMethodWithDamping.html</anchorfile>
      <anchor>a3ca55eb6498c92454c05a5a4be8358b2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::EulerMethodWithMomentum</name>
    <filename>classmirtk_1_1EulerMethodWithMomentum.html</filename>
    <base>mirtk::EulerMethod</base>
    <member kind="function">
      <type></type>
      <name>EulerMethodWithMomentum</name>
      <anchorfile>classmirtk_1_1EulerMethodWithMomentum.html</anchorfile>
      <anchor>a9b9e804239eb9d009187a4a9f17682fa</anchor>
      <arglist>(ObjectiveFunction *=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EulerMethodWithMomentum</name>
      <anchorfile>classmirtk_1_1EulerMethodWithMomentum.html</anchorfile>
      <anchor>ac81fbef99546f0c2639eba5b02121a67</anchor>
      <arglist>(const EulerMethodWithMomentum &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1EulerMethodWithMomentum.html</anchorfile>
      <anchor>a9e1e2f4bb55a6c50c60f8cee3f719a60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EulerMethodWithMomentum &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1EulerMethodWithMomentum.html</anchorfile>
      <anchor>a3a2e02fa47fcbc1bb4501beac802fa3d</anchor>
      <arglist>(const EulerMethodWithMomentum &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1EulerMethodWithMomentum.html</anchorfile>
      <anchor>a4b5e75da96c9580d7bbc6de240981d41</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1EulerMethodWithMomentum.html</anchorfile>
      <anchor>a1ba871425259bc9cd1ccd28f43f980ba</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EulerMethodWithMomentum</name>
      <anchorfile>classmirtk_1_1EulerMethodWithMomentum.html</anchorfile>
      <anchor>a36cb91653353487d84598f1e17b60bea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>UpdateDisplacement</name>
      <anchorfile>classmirtk_1_1EulerMethodWithMomentum.html</anchorfile>
      <anchor>ac2b6a16fc8a5a82d52af5fed5751496e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>UpdateNormalDisplacement</name>
      <anchorfile>classmirtk_1_1EulerMethodWithMomentum.html</anchorfile>
      <anchor>ab67fd355db456bb5816a6580a2a2bdae</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::NaryVoxelFunction::EvaluateBCHFormula</name>
    <filename>structmirtk_1_1NaryVoxelFunction_1_1EvaluateBCHFormula.html</filename>
    <base>mirtk::VoxelFunction</base>
  </compound>
  <compound kind="struct">
    <name>mirtk::NaryVoxelFunction::EvaluateBCHUpdate</name>
    <filename>structmirtk_1_1NaryVoxelFunction_1_1EvaluateBCHUpdate.html</filename>
    <base>mirtk::VoxelFunction</base>
  </compound>
  <compound kind="class">
    <name>mirtk::EvaluateBSplineSVFFD</name>
    <filename>classmirtk_1_1EvaluateBSplineSVFFD.html</filename>
    <base>mirtk::VoxelFunction</base>
    <member kind="variable" protection="protected">
      <type>const BSplineFreeFormTransformationSV *</type>
      <name>_Input</name>
      <anchorfile>classmirtk_1_1EvaluateBSplineSVFFD.html</anchorfile>
      <anchor>a865d861b17c80139c0104dcc27c8966d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseImage *</type>
      <name>_Output</name>
      <anchorfile>classmirtk_1_1EvaluateBSplineSVFFD.html</anchorfile>
      <anchor>ad6cc6195258b9693136f9b1252ef33f0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::EvaluateBSplineSVFFD3D</name>
    <filename>classmirtk_1_1EvaluateBSplineSVFFD3D.html</filename>
    <base>mirtk::VoxelFunction</base>
  </compound>
  <compound kind="class">
    <name>mirtk::EvaluateGlobalSVFFD</name>
    <filename>classmirtk_1_1EvaluateGlobalSVFFD.html</filename>
    <base>mirtk::VoxelFunction</base>
  </compound>
  <compound kind="class">
    <name>mirtk::EvaluateGlobalSVFFD3D</name>
    <filename>classmirtk_1_1EvaluateGlobalSVFFD3D.html</filename>
    <base>mirtk::VoxelFunction</base>
  </compound>
  <compound kind="class">
    <name>mirtk::EventDelegate</name>
    <filename>classmirtk_1_1EventDelegate.html</filename>
    <base>mirtk::Observer</base>
    <member kind="function">
      <type>void</type>
      <name>Bind</name>
      <anchorfile>classmirtk_1_1EventDelegate.html</anchorfile>
      <anchor>af0e7d1c03885ad4860a1ee64f56d27b1</anchor>
      <arglist>(Delegate0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Bind</name>
      <anchorfile>classmirtk_1_1EventDelegate.html</anchorfile>
      <anchor>a169637c58e130c739ec5bbc767e5babb</anchor>
      <arglist>(Delegate1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Bind</name>
      <anchorfile>classmirtk_1_1EventDelegate.html</anchorfile>
      <anchor>af5e2e2f8ad3352b8c7c877c02004906e</anchor>
      <arglist>(Delegate2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Bind</name>
      <anchorfile>classmirtk_1_1EventDelegate.html</anchorfile>
      <anchor>ab46e5e03c2e306c4234c8bbe5861e840</anchor>
      <arglist>(Delegate3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Bind</name>
      <anchorfile>classmirtk_1_1EventDelegate.html</anchorfile>
      <anchor>a567ed6454da12066fe43b8c7d64e2fd2</anchor>
      <arglist>(Event, Delegate0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Bind</name>
      <anchorfile>classmirtk_1_1EventDelegate.html</anchorfile>
      <anchor>a4c4d233606a562ce08f5e17f23444635</anchor>
      <arglist>(Event, Delegate1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Bind</name>
      <anchorfile>classmirtk_1_1EventDelegate.html</anchorfile>
      <anchor>ada680b8ae0a3626395bfde3fb3eb47d7</anchor>
      <arglist>(Event, Delegate2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Bind</name>
      <anchorfile>classmirtk_1_1EventDelegate.html</anchorfile>
      <anchor>a0f34f5edff1f13087d19668637b96e42</anchor>
      <arglist>(Event, Delegate3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EventDelegate</name>
      <anchorfile>classmirtk_1_1EventDelegate.html</anchorfile>
      <anchor>a23858bf02352b89262f9cb1cfb074111</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>HandleEvent</name>
      <anchorfile>classmirtk_1_1EventDelegate.html</anchorfile>
      <anchor>a7fe4d53b530ba79816f9ba959e6e74b4</anchor>
      <arglist>(Observable *, Event, const void *=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~EventDelegate</name>
      <anchorfile>classmirtk_1_1EventDelegate.html</anchorfile>
      <anchor>a4eef1fd0769fa919120f77fade7d7523</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::Exp</name>
    <filename>classmirtk_1_1data_1_1op_1_1Exp.html</filename>
    <base>mirtk::data::op::ElementWiseUnaryOp</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Op</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Exp.html</anchorfile>
      <anchor>a1746214fb911b40ed3515bafc3e27dd1</anchor>
      <arglist>(double value, bool &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Exp.html</anchorfile>
      <anchor>a365d26875c0664cc8103b97d7cd71d6f</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::NaryVoxelFunction::ExpVelocityFieldEuler2D</name>
    <filename>structmirtk_1_1NaryVoxelFunction_1_1ExpVelocityFieldEuler2D.html</filename>
    <templarg></templarg>
    <base>mirtk::VoxelFunction</base>
    <member kind="variable">
      <type>double</type>
      <name>_dt</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1ExpVelocityFieldEuler2D.html</anchorfile>
      <anchor>a6c487cdea78d9a98035d4677a5d32366</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_NumberOfSteps</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1ExpVelocityFieldEuler2D.html</anchorfile>
      <anchor>a1d34eb8506700fca3519067981e4dbd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BaseImage *</type>
      <name>_VelocityField</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1ExpVelocityFieldEuler2D.html</anchorfile>
      <anchor>a35f9b7ec09930921a4a2c4fb142d6ede</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TInterpolator *</type>
      <name>_VelocityInterpolator</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1ExpVelocityFieldEuler2D.html</anchorfile>
      <anchor>a3dc1294ba7dc86115a02b270db38bb45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_y</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1ExpVelocityFieldEuler2D.html</anchorfile>
      <anchor>acb94900cebf33849cba95086d3972b83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>_x</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1ExpVelocityFieldEuler2D.html</anchorfile>
      <anchor>a61e014bbc75a8f0da0fb50494b5ca2c5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::NaryVoxelFunction::ExpVelocityFieldEuler3D</name>
    <filename>structmirtk_1_1NaryVoxelFunction_1_1ExpVelocityFieldEuler3D.html</filename>
    <templarg></templarg>
    <base>mirtk::VoxelFunction</base>
    <member kind="variable">
      <type>double</type>
      <name>_dt</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1ExpVelocityFieldEuler3D.html</anchorfile>
      <anchor>a358ef8add28c7729e35fc782581bfd86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_NumberOfSteps</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1ExpVelocityFieldEuler3D.html</anchorfile>
      <anchor>a0ef47ecde5cba0d99f89a1a933a894a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BaseImage *</type>
      <name>_VelocityField</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1ExpVelocityFieldEuler3D.html</anchorfile>
      <anchor>ab0b8ee02b6185b833f48c7d8b7bcbaba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TInterpolator *</type>
      <name>_VelocityInterpolator</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1ExpVelocityFieldEuler3D.html</anchorfile>
      <anchor>a21fe237135cf6b8aad6569b1d8d4d071</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_z</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1ExpVelocityFieldEuler3D.html</anchorfile>
      <anchor>a721ff2edf93e55ba3624b20ba37567cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>_x</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1ExpVelocityFieldEuler3D.html</anchorfile>
      <anchor>adfd68e533b66f3c34ffa66ddc3938038</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ConvolutionFunction::ExtendedForegroundConvolution1D</name>
    <filename>classmirtk_1_1ConvolutionFunction_1_1ExtendedForegroundConvolution1D.html</filename>
    <templarg>TKernel</templarg>
    <base>mirtk::VoxelFunction</base>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>ConvolveCenterVoxel</name>
      <anchorfile>classmirtk_1_1ConvolutionFunction_1_1ExtendedForegroundConvolution1D.html</anchorfile>
      <anchor>af1ad5b97ab4614cfb74ba5537998d08b</anchor>
      <arglist>(const T *in, double &amp;acc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ConvolveLeftNeighbors</name>
      <anchorfile>classmirtk_1_1ConvolutionFunction_1_1ExtendedForegroundConvolution1D.html</anchorfile>
      <anchor>ae9a61ded3f63471fba897a6e32c5c4c9</anchor>
      <arglist>(int i, int n, const T *in, int s, double &amp;acc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ConvolveRightNeighbors</name>
      <anchorfile>classmirtk_1_1ConvolutionFunction_1_1ExtendedForegroundConvolution1D.html</anchorfile>
      <anchor>af2ad1de1c5f14e0465400e865379ac6b</anchor>
      <arglist>(int i, int n, const T *in, int s, double &amp;acc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ExtendedForegroundConvolution1D</name>
      <anchorfile>classmirtk_1_1ConvolutionFunction_1_1ExtendedForegroundConvolution1D.html</anchorfile>
      <anchor>ad03ea5b4e0c084505fd81c86e9f4ab84</anchor>
      <arglist>(const BaseImage *image, const TKernel *kernel, int size, double norm=1.0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ExternalForce</name>
    <filename>classmirtk_1_1ExternalForce.html</filename>
    <base>mirtk::PointSetForce</base>
    <member kind="typedef">
      <type>GenericImage&lt; VoxelType &gt;</type>
      <name>ImageType</name>
      <anchorfile>classmirtk_1_1ExternalForce.html</anchorfile>
      <anchor>a2741cc830c82c41f98addcc59e812d91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RegisteredImage::VoxelType</type>
      <name>VoxelType</name>
      <anchorfile>classmirtk_1_1ExternalForce.html</anchorfile>
      <anchor>a74bb67775225e610dbdeb54c963cb947</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1ExternalForce.html</anchorfile>
      <anchor>a28d4e76f438e007d173568a9e3d6bba6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1ExternalForce.html</anchorfile>
      <anchor>adf90c0164ffb266e22f87684f0b39968</anchor>
      <arglist>(bool=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ExternalForce</name>
      <anchorfile>classmirtk_1_1ExternalForce.html</anchorfile>
      <anchor>a77830e58c1d01c5b6ae6b0cf027075b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ExternalForce *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1ExternalForce.html</anchorfile>
      <anchor>a8d90f6be31b9be5cc3b7a6e40f0b5bb4</anchor>
      <arglist>(ExternalForceTerm, const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CopyAttributes</name>
      <anchorfile>classmirtk_1_1ExternalForce.html</anchorfile>
      <anchor>a40803382ea9c096b12036d96d9f77b66</anchor>
      <arglist>(const ExternalForce &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1ExternalForce.html</anchorfile>
      <anchor>a81065a398f3590ca09cba0536eb5aed6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ExternalForce</name>
      <anchorfile>classmirtk_1_1ExternalForce.html</anchorfile>
      <anchor>ab07f5efa3199bffb8b1aea0487a5ad08</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ExternalForce</name>
      <anchorfile>classmirtk_1_1ExternalForce.html</anchorfile>
      <anchor>a6ff688d14628a42f88afe850c768cc6a</anchor>
      <arglist>(const ExternalForce &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ExternalForce &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1ExternalForce.html</anchorfile>
      <anchor>a3b90d0803f4171cbc3eff151918e77c0</anchor>
      <arglist>(const ExternalForce &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ExtrapolateImageFunction</name>
    <filename>classmirtk_1_1ExtrapolateImageFunction.html</filename>
    <base>mirtk::ImageFunction</base>
    <member kind="function">
      <type>const ImageAttributes &amp;</type>
      <name>Attributes</name>
      <anchorfile>classmirtk_1_1ExtrapolateImageFunction.html</anchorfile>
      <anchor>ae2fb925d59a60837d8f72b92bb1e76b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1ExtrapolateImageFunction.html</anchorfile>
      <anchor>acba85276797fbc31a18ede8de1e64ba1</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1ExtrapolateImageFunction.html</anchorfile>
      <anchor>a33595f1ddb6a811a86b764205645ae04</anchor>
      <arglist>(double, double, double=0, double=0)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual enum ExtrapolationMode</type>
      <name>ExtrapolationMode</name>
      <anchorfile>classmirtk_1_1ExtrapolateImageFunction.html</anchorfile>
      <anchor>a7c4f68c93ec4ae2c224c387316e0ab13</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1ExtrapolateImageFunction.html</anchorfile>
      <anchor>a97021a3aa351adf22e8ba8a4a1c0654d</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1ExtrapolateImageFunction.html</anchorfile>
      <anchor>a517a4f2de07bb5c9d3aadc7eacdf31c4</anchor>
      <arglist>(int, int, int=0, int=0) const =0</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1ExtrapolateImageFunction.html</anchorfile>
      <anchor>ae7114260626db853833ce2eeb9fc0864</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1ExtrapolateImageFunction.html</anchorfile>
      <anchor>a40ac0e40ce4d6695c8b40b65cdb3caeb</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1ExtrapolateImageFunction.html</anchorfile>
      <anchor>a234e82e68f295ac0a77e03efd8f0a362</anchor>
      <arglist>(Vector &amp;, int) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1ExtrapolateImageFunction.html</anchorfile>
      <anchor>a027fe9744b12f7d8142c9977919480f8</anchor>
      <arglist>(Vector &amp;, int, int, int=0, int=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsForeground</name>
      <anchorfile>classmirtk_1_1ExtrapolateImageFunction.html</anchorfile>
      <anchor>a19db789b51aa5e7245a624cf8bd3ad18</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>N</name>
      <anchorfile>classmirtk_1_1ExtrapolateImageFunction.html</anchorfile>
      <anchor>a3cecf01ab552d9497368e29636400fa7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>T</name>
      <anchorfile>classmirtk_1_1ExtrapolateImageFunction.html</anchorfile>
      <anchor>ae27536338bc669eaba89332e6ddc62ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>TSize</name>
      <anchorfile>classmirtk_1_1ExtrapolateImageFunction.html</anchorfile>
      <anchor>a324811cca47f72593b3079b542b7fec2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>X</name>
      <anchorfile>classmirtk_1_1ExtrapolateImageFunction.html</anchorfile>
      <anchor>af8888867169728f25fa88b1111bb16b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>XSize</name>
      <anchorfile>classmirtk_1_1ExtrapolateImageFunction.html</anchorfile>
      <anchor>a6fb09e5e69170172721c507ffc86c0cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Y</name>
      <anchorfile>classmirtk_1_1ExtrapolateImageFunction.html</anchorfile>
      <anchor>a1a7c5b11d0c47b4056c14c7d14bc79e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>YSize</name>
      <anchorfile>classmirtk_1_1ExtrapolateImageFunction.html</anchorfile>
      <anchor>af8db253164881ed7b827b1bea2f017ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Z</name>
      <anchorfile>classmirtk_1_1ExtrapolateImageFunction.html</anchorfile>
      <anchor>aa926e7ddc49a36cf38d5726e088b23b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ZSize</name>
      <anchorfile>classmirtk_1_1ExtrapolateImageFunction.html</anchorfile>
      <anchor>ae3ac47eeeb493a3dc503060ee25ecea8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1ExtrapolateImageFunction.html</anchorfile>
      <anchor>ae63c7e35bfbf9c31f4ed4f5eb0b5caf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ExtrapolateImageFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1ExtrapolateImageFunction.html</anchorfile>
      <anchor>af0edc79120582bb437a04232cfd32a99</anchor>
      <arglist>(ExtrapolationMode mode, const BaseImage *=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1ExtrapolateImageFunction.html</anchorfile>
      <anchor>a511a6dc83eb3dfc6cf939588220c2eba</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::statistic::Extrema</name>
    <filename>classmirtk_1_1data_1_1statistic_1_1Extrema.html</filename>
    <base>mirtk::data::Statistic</base>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1data_1_1statistic_1_1Extrema.html</anchorfile>
      <anchor>a010d5cb43876a5abf081f076fac3f498</anchor>
      <arglist>(Array&lt; double &gt; &amp;values, int n, const double *data, const bool *mask=nullptr) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::FastCubicBSplineInterpolateImageFunction</name>
    <filename>classmirtk_1_1FastCubicBSplineInterpolateImageFunction.html</filename>
    <base>GenericFastCubicBSplineInterpolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>FastCubicBSplineInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1FastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a27d57cea863d4462f8435942e4e82c8b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::FastCubicBSplineInterpolateImageFunction2D</name>
    <filename>classmirtk_1_1FastCubicBSplineInterpolateImageFunction2D.html</filename>
    <base>GenericFastCubicBSplineInterpolateImageFunction2D&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>FastCubicBSplineInterpolateImageFunction2D</name>
      <anchorfile>classmirtk_1_1FastCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a7a2c680a684009b45674b5a1e734badd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::FastCubicBSplineInterpolateImageFunction3D</name>
    <filename>classmirtk_1_1FastCubicBSplineInterpolateImageFunction3D.html</filename>
    <base>GenericFastCubicBSplineInterpolateImageFunction3D&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>FastCubicBSplineInterpolateImageFunction3D</name>
      <anchorfile>classmirtk_1_1FastCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a08c2b09648b6811887830046343d075b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::FastCubicBSplineInterpolateImageFunction4D</name>
    <filename>classmirtk_1_1FastCubicBSplineInterpolateImageFunction4D.html</filename>
    <base>GenericFastCubicBSplineInterpolateImageFunction4D&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>FastCubicBSplineInterpolateImageFunction4D</name>
      <anchorfile>classmirtk_1_1FastCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>abebeca0611c30ef1f119b2788dc8fa08</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::FastLinearImageGradientFunction</name>
    <filename>classmirtk_1_1FastLinearImageGradientFunction.html</filename>
    <base>GenericFastLinearImageGradientFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>FastLinearImageGradientFunction</name>
      <anchorfile>classmirtk_1_1FastLinearImageGradientFunction.html</anchorfile>
      <anchor>aaaaee0601925b677f02db28bcdb2a300</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::FastLinearImageGradientFunction2D</name>
    <filename>classmirtk_1_1FastLinearImageGradientFunction2D.html</filename>
    <base>GenericFastLinearImageGradientFunction2D&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>FastLinearImageGradientFunction2D</name>
      <anchorfile>classmirtk_1_1FastLinearImageGradientFunction2D.html</anchorfile>
      <anchor>ababd7a8a1a14d2c8632738bd06b9880f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::FastLinearImageGradientFunction3D</name>
    <filename>classmirtk_1_1FastLinearImageGradientFunction3D.html</filename>
    <base>GenericFastLinearImageGradientFunction3D&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>FastLinearImageGradientFunction3D</name>
      <anchorfile>classmirtk_1_1FastLinearImageGradientFunction3D.html</anchorfile>
      <anchor>ae22c5ef327ba5f3feeaf213b4aebb930</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::PointLocator::FeatureInfo</name>
    <filename>structmirtk_1_1PointLocator_1_1FeatureInfo.html</filename>
    <member kind="function">
      <type></type>
      <name>FeatureInfo</name>
      <anchorfile>structmirtk_1_1PointLocator_1_1FeatureInfo.html</anchorfile>
      <anchor>a113f3bce0c25dfa7a268ef3e870a1df2</anchor>
      <arglist>(int index=-2, double weight=1.0, double slope=1.0, double intercept=.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FeatureInfo</name>
      <anchorfile>structmirtk_1_1PointLocator_1_1FeatureInfo.html</anchorfile>
      <anchor>a2bef9df8136b0b202e555611a6fe97cc</anchor>
      <arglist>(const char *name, double weight=1.0, double slope=1.0, double intercept=.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FeatureInfo</name>
      <anchorfile>structmirtk_1_1PointLocator_1_1FeatureInfo.html</anchorfile>
      <anchor>a88411d3310d5370441edb6a52a6a62d3</anchor>
      <arglist>(const string &amp;name, double weight=1.0, double slope=1.0, double intercept=.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FeatureInfo</name>
      <anchorfile>structmirtk_1_1PointLocator_1_1FeatureInfo.html</anchorfile>
      <anchor>a31d45cc5368840f01a9b7b3324864572</anchor>
      <arglist>(const char *name, int index, double weight=1.0, double slope=1.0, double intercept=.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FeatureInfo</name>
      <anchorfile>structmirtk_1_1PointLocator_1_1FeatureInfo.html</anchorfile>
      <anchor>a6478c28987fd49b185a731a177e98372</anchor>
      <arglist>(const string &amp;name, int index, double weight=1.0, double slope=1.0, double intercept=.0)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Index</name>
      <anchorfile>structmirtk_1_1PointLocator_1_1FeatureInfo.html</anchorfile>
      <anchor>a18ca5ef7dcee8db9a4e8cd03e7de4627</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_Intercept</name>
      <anchorfile>structmirtk_1_1PointLocator_1_1FeatureInfo.html</anchorfile>
      <anchor>a738e0358046641db2903b5fe03255783</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>_Name</name>
      <anchorfile>structmirtk_1_1PointLocator_1_1FeatureInfo.html</anchorfile>
      <anchor>ad39f60a85adb8fb73dc4cf3f1ad524f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_Slope</name>
      <anchorfile>structmirtk_1_1PointLocator_1_1FeatureInfo.html</anchorfile>
      <anchor>a6e3067f16f1940337b25199998445521</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_Weight</name>
      <anchorfile>structmirtk_1_1PointLocator_1_1FeatureInfo.html</anchorfile>
      <anchor>a01258c406526ff5187ef0b2249e6bbb8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::FiducialMatch</name>
    <filename>classmirtk_1_1FiducialMatch.html</filename>
    <base>mirtk::PointCorrespondence</base>
    <member kind="function">
      <type></type>
      <name>FiducialMatch</name>
      <anchorfile>classmirtk_1_1FiducialMatch.html</anchorfile>
      <anchor>aff93ecc4007f0d690e17fbee83bd63e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FiducialMatch</name>
      <anchorfile>classmirtk_1_1FiducialMatch.html</anchorfile>
      <anchor>a160fdc2b42ed586912729463c0631fc0</anchor>
      <arglist>(const FiducialMatch &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetInputSourcePoint</name>
      <anchorfile>classmirtk_1_1FiducialMatch.html</anchorfile>
      <anchor>a1d01c96bf6972370be9d484ff2e4390c</anchor>
      <arglist>(int, Point &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetInputTargetPoint</name>
      <anchorfile>classmirtk_1_1FiducialMatch.html</anchorfile>
      <anchor>a17d8b8f0ce917f80561809209ad80e73</anchor>
      <arglist>(int, Point &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetSourceIndex</name>
      <anchorfile>classmirtk_1_1FiducialMatch.html</anchorfile>
      <anchor>ae8b92ee4f49e767f84242784f25c0734</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetSourcePoint</name>
      <anchorfile>classmirtk_1_1FiducialMatch.html</anchorfile>
      <anchor>a0a352234b9a281e1861aec70bf802714</anchor>
      <arglist>(int, Point &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetTargetIndex</name>
      <anchorfile>classmirtk_1_1FiducialMatch.html</anchorfile>
      <anchor>aa67672b620d3005202224af32a5cf457</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetTargetPoint</name>
      <anchorfile>classmirtk_1_1FiducialMatch.html</anchorfile>
      <anchor>a7ae6d12e1cedf4f46a2716266c482d4d</anchor>
      <arglist>(int, Point &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1FiducialMatch.html</anchorfile>
      <anchor>a47f1babfe44465536ce228f52a1a36dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PointCorrespondence *</type>
      <name>NewInstance</name>
      <anchorfile>classmirtk_1_1FiducialMatch.html</anchorfile>
      <anchor>abcc3cc72cf79a0e823feec01102fb296</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1FiducialMatch.html</anchorfile>
      <anchor>aa6dcd8a3a3ea0ebbdbc53071289155d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1FiducialMatch.html</anchorfile>
      <anchor>a8674812c03f8eafc68fe05456eecb728</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TypeId</type>
      <name>Type</name>
      <anchorfile>classmirtk_1_1FiducialMatch.html</anchorfile>
      <anchor>a43418b9eaccf12a53051c5f5ccd6344b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FiducialMatch</name>
      <anchorfile>classmirtk_1_1FiducialMatch.html</anchorfile>
      <anchor>af6c056359e0ade6474d51dd4ae962c8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>InvertCorrespondenceMap</name>
      <anchorfile>classmirtk_1_1FiducialMatch.html</anchorfile>
      <anchor>a7fbf99e35671e0c916d1ecf8de17a8d1</anchor>
      <arglist>(const RegisteredPointSet *, const RegisteredPointSet *, const Array&lt; int &gt; &amp;, Array&lt; int &gt; &amp;) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ValidateCorrespondenceMap</name>
      <anchorfile>classmirtk_1_1FiducialMatch.html</anchorfile>
      <anchor>aa0c8495a1a2af62dbb24aa55f1ebe806</anchor>
      <arglist>(const RegisteredPointSet *, const RegisteredPointSet *, const Array&lt; int &gt; &amp;, const char *=NULL) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::FiducialRegistrationError</name>
    <filename>classmirtk_1_1FiducialRegistrationError.html</filename>
    <base>mirtk::PointCorrespondenceDistance</base>
    <member kind="function">
      <type></type>
      <name>FiducialRegistrationError</name>
      <anchorfile>classmirtk_1_1FiducialRegistrationError.html</anchorfile>
      <anchor>a39cd212d0a1f2551bc7efcfedd84e0aa</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FiducialRegistrationError</name>
      <anchorfile>classmirtk_1_1FiducialRegistrationError.html</anchorfile>
      <anchor>af9d09fb3b89536dd6a3afe304a447b18</anchor>
      <arglist>(const FiducialRegistrationError &amp;)</arglist>
    </member>
    <member kind="function">
      <type>FiducialRegistrationError &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1FiducialRegistrationError.html</anchorfile>
      <anchor>af9a7a93318bd1e97d279b7bc284adcad</anchor>
      <arglist>(const FiducialRegistrationError &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FiducialRegistrationError</name>
      <anchorfile>classmirtk_1_1FiducialRegistrationError.html</anchorfile>
      <anchor>ac6298b57e9404243ae64073c789d112a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::SpectralDecomposition::FindClosestNPoints</name>
    <filename>classmirtk_1_1SpectralDecomposition_1_1FindClosestNPoints.html</filename>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1SpectralDecomposition_1_1FindClosestNPoints.html</anchorfile>
      <anchor>a7b3d5f0fd1c8ca42feb618616f27a146</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Array&lt; Array&lt; int &gt; &gt;</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1SpectralDecomposition_1_1FindClosestNPoints.html</anchorfile>
      <anchor>af65f83f12fa7c8cf0fc01a47d95c72d9</anchor>
      <arglist>(const PointSet &amp;p1, const PointSet &amp;p2, int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::SpectralDecomposition::FindClosestPoints</name>
    <filename>classmirtk_1_1SpectralDecomposition_1_1FindClosestPoints.html</filename>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1SpectralDecomposition_1_1FindClosestPoints.html</anchorfile>
      <anchor>ac1ac524fb1dde8bc839cdf29d87bf5d9</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Array&lt; int &gt;</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1SpectralDecomposition_1_1FindClosestPoints.html</anchorfile>
      <anchor>ad7659ccb2282d63b9a02e55ea1af1cd7</anchor>
      <arglist>(const PointSet &amp;p1, const PointSet &amp;p2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::FixedBoundarySurfaceMapper</name>
    <filename>classmirtk_1_1FixedBoundarySurfaceMapper.html</filename>
    <base>mirtk::SurfaceMapper</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FixedBoundarySurfaceMapper</name>
      <anchorfile>classmirtk_1_1FixedBoundarySurfaceMapper.html</anchorfile>
      <anchor>a7bc2c72b2ba1ec0e76eace1de630e7d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FixedBoundarySurfaceMapper</name>
      <anchorfile>classmirtk_1_1FixedBoundarySurfaceMapper.html</anchorfile>
      <anchor>ab97dc390d3a6c55e23558695ed53301b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FixedBoundarySurfaceMapper</name>
      <anchorfile>classmirtk_1_1FixedBoundarySurfaceMapper.html</anchorfile>
      <anchor>aabe3ff124e03f0aa03302f214e207787</anchor>
      <arglist>(const FixedBoundarySurfaceMapper &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1FixedBoundarySurfaceMapper.html</anchorfile>
      <anchor>a737b5ccdfcb38a7d93e724ccd1efb1d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>NumberOfComponents</name>
      <anchorfile>classmirtk_1_1FixedBoundarySurfaceMapper.html</anchorfile>
      <anchor>aed6a2ca7d43cb8c4f01fa7fa95b3ade5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>FixedBoundarySurfaceMapper &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1FixedBoundarySurfaceMapper.html</anchorfile>
      <anchor>afa7c16b7cff77b59ac65be73c4fe17d3</anchor>
      <arglist>(const FixedBoundarySurfaceMapper &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::float2x2</name>
    <filename>structmirtk_1_1float2x2.html</filename>
  </compound>
  <compound kind="struct">
    <name>mirtk::float3x3</name>
    <filename>structmirtk_1_1float3x3.html</filename>
  </compound>
  <compound kind="struct">
    <name>mirtk::float3x4</name>
    <filename>structmirtk_1_1float3x4.html</filename>
  </compound>
  <compound kind="struct">
    <name>mirtk::float4x4</name>
    <filename>structmirtk_1_1float4x4.html</filename>
  </compound>
  <compound kind="class">
    <name>mirtk::FluidFreeFormTransformation</name>
    <filename>classmirtk_1_1FluidFreeFormTransformation.html</filename>
    <base>mirtk::MultiLevelTransformation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Approximate</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>ad9f97722ac78a5ec390118d8e283742a</anchor>
      <arglist>(const ImageAttributes &amp;, double *, double *, double *, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Approximate</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>aac91afad413705649273a99a1b96e82e</anchor>
      <arglist>(const double *, const double *, const double *, double *, double *, double *, int, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Approximate</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>a7d0f15c593e8301855bf1cfa5428d222</anchor>
      <arglist>(const double *, const double *, const double *, const double *, double *, double *, double *, int, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApproximateAsNew</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>ac5bf97140062c5f32527284f45b3d217</anchor>
      <arglist>(const ImageAttributes &amp;, double *, double *, double *, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApproximateAsNew</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>ab67eb05df350f3cb47cd99ba803881c1</anchor>
      <arglist>(const double *, const double *, const double *, double *, double *, double *, int, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApproximateAsNew</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>a56b011fca58d35d94622600daf0e073c</anchor>
      <arglist>(const double *, const double *, const double *, const double *, double *, double *, double *, int, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFs</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>a61ecd04e6d9d904ae381e3732ecd431d</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFsGradient</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>a343a44664c5377fb970aca02063b7d71</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int, double *, double=1.0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CanRead</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>ae7de98e1b14e3a84c90ec0256a27bae1</anchor>
      <arglist>(TransformationType) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>a7df310f527f0ce5f046be4508ea16003</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>CombineLocalTransformation</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>adbc61efe81a9cc7b4ec401bf9b783361</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>ae5559a99401431d895f7d8ac70107eea</anchor>
      <arglist>(const Transformation *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>a1fec927fc4b5b3577ba3c2e878b52319</anchor>
      <arglist>(int, int, GenericImage&lt; double &gt; &amp;, double, double=-1, const WorldCoordsImage *=NULL) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>a0fef48237a23e52a9e851c7afe2d10b4</anchor>
      <arglist>(int, int, GenericImage&lt; float &gt; &amp;, double, double=-1, const WorldCoordsImage *=NULL) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>DOFBoundingBox</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>a27b4cddaaba0f480b2be0463bfc1e774</anchor>
      <arglist>(const Image *, int, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, double=1) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FluidFreeFormTransformation</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>a5cc23a54262cac522a5549d9f90bbb84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FluidFreeFormTransformation</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>aa5155df63f9b215151fb1635c937e5a4</anchor>
      <arglist>(const RigidTransformation &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FluidFreeFormTransformation</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>a99a49d3dffa83e3bae3f05fd10027d76</anchor>
      <arglist>(const AffineTransformation &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FluidFreeFormTransformation</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>aec6c5ee7acccb06dd1704d2424cc4563</anchor>
      <arglist>(const FluidFreeFormTransformation &amp;)</arglist>
    </member>
    <member kind="function">
      <type>AffineTransformation *</type>
      <name>GetAffineTransformation</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>aaedddfd140dec815b76daad490156aec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const AffineTransformation *</type>
      <name>GetAffineTransformation</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>a4f3d3d9bb46efa2bbbffcb7fd3da8601</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Hessian</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>aaaabed83f8fd3b2b95060b68eacb6de9</anchor>
      <arglist>(int, int, Matrix [3], double, double, double, double=0, double=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Inverse</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>a27c5d20ca6fcd70537481039b7da8782</anchor>
      <arglist>(int, int, double &amp;, double &amp;, double &amp;, double=0, double=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InverseDisplacement</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>a724146267db6e37cf7259e4c805051dd</anchor>
      <arglist>(int, int, GenericImage&lt; double &gt; &amp;, double, double=-1, const WorldCoordsImage *=NULL) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InverseDisplacement</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>af38527a5fafefe767d23e8e8c6190460</anchor>
      <arglist>(int, int, GenericImage&lt; float &gt; &amp;, double, double=-1, const WorldCoordsImage *=NULL) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIdentity</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>a610dbc9b043b28b9973982ac9d027c06</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Jacobian</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>ae1da299fef0ae2fc0eff6ae2d467d6f3</anchor>
      <arglist>(int, int, Matrix &amp;, double, double, double, double=0, double=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>MergeGlobalIntoLocalDisplacement</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>a2fc676c4f59439989ad87bec428eeb30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>a3714b1b0143057488e9350af8bd21107</anchor>
      <arglist>(const GenericImage&lt; double &gt; *, double *, const WorldCoordsImage *=NULL, const WorldCoordsImage *=NULL, double=-1, double=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>a4f66f885f1f2bfeee9c426ba280304aa</anchor>
      <arglist>(const PointSet &amp;, const Vector3D&lt; double &gt; *, double *, double=0, double=-1, double=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>a48a0cae5e3d66a7ceb50b5aadcec0c08</anchor>
      <arglist>(ostream &amp;, Indent=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PushTransformation</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>a58f63a78e235093f8f66e5b096d6be81</anchor>
      <arglist>(const Transformation *, ImageAttributes *attr=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Reset</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>aa730ca8ebaa1c17c0f032b926533dd01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Transform</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>a145bc4a4d192f50e68457f7ef55dfce9</anchor>
      <arglist>(int, int, double &amp;, double &amp;, double &amp;, double=0, double=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FluidFreeFormTransformation</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>aa5a3eeafb9758acbb3b81021d62c2c7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>CheckTransformation</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>a4ad33096f33e572fbd28bedc3c6145af</anchor>
      <arglist>(FreeFormTransformation *) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Cifstream &amp;</type>
      <name>ReadDOFs</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>a5310b50774c795c8fd9fc202f84cdb92</anchor>
      <arglist>(Cifstream &amp;, TransformationType)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Cofstream &amp;</type>
      <name>WriteDOFs</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>aa232b041c9dc220244373b8c2dbaa463</anchor>
      <arglist>(Cofstream &amp;) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AffineTransformation</type>
      <name>_AffineTransformation</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>a9ef2ba2653e7cf907305c8a81f5f1c7e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ForEachVoxelBody</name>
    <filename>structmirtk_1_1ForEachVoxelBody.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>ForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1ForEachVoxelBody.html</anchorfile>
      <anchor>a396dab7d3f18c371fdee37e5b0cb49df</anchor>
      <arglist>(const VoxelFunc &amp;vf, const ImageAttributes &amp;attr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1ForEachVoxelBody.html</anchorfile>
      <anchor>a8e6cb2b0673b88bc23c88b123dc6206d</anchor>
      <arglist>(const ForEachVoxelBody &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1ForEachVoxelBody.html</anchorfile>
      <anchor>a3c2a7d58847baafbf3dbaf390815a1a8</anchor>
      <arglist>(ForEachVoxelBody &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>join</name>
      <anchorfile>structmirtk_1_1ForEachVoxelBody.html</anchorfile>
      <anchor>a19dede9ccea61ae0ec65053fb9782405</anchor>
      <arglist>(ForEachVoxelBody &amp;rhs)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_l</name>
      <anchorfile>structmirtk_1_1ForEachVoxelBody.html</anchorfile>
      <anchor>ab4dc888a0f6499f4cff874ed91179358</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VoxelFunc</type>
      <name>_VoxelFunc</name>
      <anchorfile>structmirtk_1_1ForEachVoxelBody.html</anchorfile>
      <anchor>a954dc78e28ff3b0d36c33e12621bb100</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ForEachVoxelIfBody</name>
    <filename>structmirtk_1_1ForEachVoxelIfBody.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type></type>
      <name>ForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1ForEachVoxelIfBody.html</anchorfile>
      <anchor>aee1fd5c1cf7d143e0fb7352d0e57023f</anchor>
      <arglist>(const VoxelFunc &amp;vf, const OutsideFunc &amp;of, const ImageAttributes &amp;attr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1ForEachVoxelIfBody.html</anchorfile>
      <anchor>ae70d37b342e5f5866fe8484384cc5e4d</anchor>
      <arglist>(const ForEachVoxelIfBody &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1ForEachVoxelIfBody.html</anchorfile>
      <anchor>a12d432936bcc8da769b984f5a1abd1ed</anchor>
      <arglist>(ForEachVoxelIfBody &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>join</name>
      <anchorfile>structmirtk_1_1ForEachVoxelIfBody.html</anchorfile>
      <anchor>ae9b847d5694435b2d2ee27105eb78969</anchor>
      <arglist>(ForEachVoxelIfBody &amp;rhs)</arglist>
    </member>
    <member kind="variable">
      <type>OutsideFunc</type>
      <name>_OutsideFunc</name>
      <anchorfile>structmirtk_1_1ForEachVoxelIfBody.html</anchorfile>
      <anchor>a1731393f5a91eef56fd537a2f3f1d342</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ForEachVoxelDomain::Foreground</name>
    <filename>structmirtk_1_1ForEachVoxelDomain_1_1Foreground.html</filename>
  </compound>
  <compound kind="struct">
    <name>mirtk::InterpolationDomain::Foreground</name>
    <filename>structmirtk_1_1InterpolationDomain_1_1Foreground.html</filename>
  </compound>
  <compound kind="class">
    <name>mirtk::FreeBoundarySurfaceMapper</name>
    <filename>classmirtk_1_1FreeBoundarySurfaceMapper.html</filename>
    <base>mirtk::SurfaceMapper</base>
    <member kind="function">
      <type>int</type>
      <name>NumberOfComponents</name>
      <anchorfile>classmirtk_1_1FreeBoundarySurfaceMapper.html</anchorfile>
      <anchor>ab55ad3eb31526c9912c883eae4c4a8b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FreeBoundarySurfaceMapper</name>
      <anchorfile>classmirtk_1_1FreeBoundarySurfaceMapper.html</anchorfile>
      <anchor>a27eee6b05a3d3bc25674f1c263b96498</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FreeBoundarySurfaceMapper</name>
      <anchorfile>classmirtk_1_1FreeBoundarySurfaceMapper.html</anchorfile>
      <anchor>aa9eea2d58c53acac8914e7d231985d63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FreeBoundarySurfaceMapper</name>
      <anchorfile>classmirtk_1_1FreeBoundarySurfaceMapper.html</anchorfile>
      <anchor>a47f2d6109587110a8356fbf6d3c99023</anchor>
      <arglist>(const FreeBoundarySurfaceMapper &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1FreeBoundarySurfaceMapper.html</anchorfile>
      <anchor>ab4da7e84751fce188f2bc3702112e973</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>FreeBoundarySurfaceMapper &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1FreeBoundarySurfaceMapper.html</anchorfile>
      <anchor>a8fa6d50b50028c82ee06daea75792ffa</anchor>
      <arglist>(const FreeBoundarySurfaceMapper &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::FreeFormTransformation</name>
    <filename>classmirtk_1_1FreeFormTransformation.html</filename>
    <base>mirtk::Transformation</base>
    <member kind="typedef">
      <type>GenericExtrapolateImageFunction&lt; CPImage &gt;</type>
      <name>CPExtrapolator</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>aa684f413f164fec9e6b1271d9f2c7989</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericImage&lt; CPValue &gt;</type>
      <name>CPImage</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a5d15e53b076b659dbebbc07dbcdd5d44</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericInterpolateImageFunction&lt; CPImage &gt;</type>
      <name>CPInterpolator</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a089ae4a3d6374a3c787f243d4d1e58e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector3D&lt; DOFStatus &gt;</type>
      <name>CPStatus</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>aaedfff681c2723f66f94344ceec63386</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector3D&lt; DOFValue &gt;</type>
      <name>CPValue</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a24c31691765db40b51a3fe4401f2ce68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CPValue</type>
      <name>Vector</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a072195fd1812b128dec1204696214460</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ActualNumberOfDOFs</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>aa1c0047dc6f4768dc5fafeda230b42e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Approximate</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>aaf145d16392c1f0c2ea0c7d7b77d3817</anchor>
      <arglist>(const Transformation *, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Approximate</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a8c0aabd8dadb59b974d39866f9a18cdd</anchor>
      <arglist>(const ImageAttributes &amp;, double *, double *, double *, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Approximate</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>ae44d3af7bfa09df4026c6fd61acf5cff</anchor>
      <arglist>(const double *, const double *, const double *, double *, double *, double *, int, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Approximate</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a316ce428192e6fce1ca1877eeeb0cf3c</anchor>
      <arglist>(const double *, const double *, const double *, const double *, double *, double *, double *, int, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApproximateAsNew</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a33a73c0ba2518990dc1015b3a0b7bff0</anchor>
      <arglist>(const Transformation *, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApproximateAsNew</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>aa83c61bdb818e2e87dd306fc33ee2786</anchor>
      <arglist>(const ImageAttributes &amp;, double *, double *, double *, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ImageAttributes</type>
      <name>ApproximationDomain</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a4e91e16f3779b78fafcfa4fc2ce86a3e</anchor>
      <arglist>(const ImageAttributes &amp;, const Transformation *)</arglist>
    </member>
    <member kind="function">
      <type>const ImageAttributes &amp;</type>
      <name>Attributes</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a2c4ca390a20239b9ebedac235b4ab815</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>BendingEnergy</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>add6f2427ade5405b7000969e0b9a5369</anchor>
      <arglist>(double, double, double, double=0, double=NaN, bool=true) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>BendingEnergy</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a0b2e2132172b83bf6dbb0469e14c004f</anchor>
      <arglist>(bool=false, bool=true) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>BendingEnergy</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>ac241f4113a0fffc242b0bb3dd8f2cb54</anchor>
      <arglist>(const ImageAttributes &amp;attr, double=NaN, bool=true) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BendingEnergyGradient</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a04d2abd921fd6f8bab3229665bc1c2f7</anchor>
      <arglist>(double *, double=1.0, bool=false, bool=true, bool=true) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a2e090e04d2ee387d072183d55c0d2794</anchor>
      <arglist>(double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>ad2beb3b5ddbc228599fb62d43d58d635</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a346e828e426340c5b940aa06e87a18b1</anchor>
      <arglist>(Point &amp;, Point &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a3b1b78c0bffed53c88f266f801eaacc2</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a26dc409cbb64d975e5fbf97f74f52766</anchor>
      <arglist>(Point &amp;, double &amp;, Point &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>aa2e38170bc01e41b79d9a6206f7a76fa</anchor>
      <arglist>(int, double &amp;, double &amp;, double=1) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>ace106cd30401fc1f03bade561bc40ead</anchor>
      <arglist>(int, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double=1) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a14b5d002a3f0e44bfc1d0e7b675367a1</anchor>
      <arglist>(int, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double=1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a764069f8e25d173b8207fbb94f93f463</anchor>
      <arglist>(int, Point &amp;, Point &amp;, double=1) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>ae35238796fe324259301db7caa85ee72</anchor>
      <arglist>(const ImageAttributes &amp;, int, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, double=1) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>af5d94f4cacbbd096162fa32f713e0b78</anchor>
      <arglist>(const ImageAttributes &amp;, int, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, double=1) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>af2a9013da4273b5663863b4de1cb0058</anchor>
      <arglist>(const Image *, int, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, double=1) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a1c899bad2b17fe9663c7fc0eb246e39c</anchor>
      <arglist>(const Image *, int, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, double=1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ControlPointLocation</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>aad859876062f9295c35109aa78e1ec80</anchor>
      <arglist>(int, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ControlPointLocation</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a18ff8ec2a3b8094f3e8ee061bb9ebd49</anchor>
      <arglist>(int, double &amp;, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>ControlPointLocation</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>acc76d9dd90a5b104c979427a5b06d48d</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a82df694b72ac2aa8fed01c9e519d7448</anchor>
      <arglist>(const Transformation *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CropPadPassiveCPs</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>af8a6f85b7eee04f8eb861ed12b3a9882</anchor>
      <arglist>(int=0, bool=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CropPadPassiveCPs</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a414ae8b070d823ba95d6da3cdd538301</anchor>
      <arglist>(int, int, int=0, int=0, bool=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DOFBoundingBox</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a8253090a441d3c54f35bd0e3ec5fa736</anchor>
      <arglist>(const ImageAttributes &amp;, int, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, double=1) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DOFBoundingBox</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a9c3179fefc275918c03e93f118faffde</anchor>
      <arglist>(const Image *, int, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, double=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>DOFGradientNorm</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a153bee156b24c8b3354a7c38b50c4769</anchor>
      <arglist>(const double *) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>DOFToDimension</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a50da70d14106b592adc9cd61f18d3439</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>DOFToIndex</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a56ef1fdb60b90746ca3a2a560f56dd46</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>EvaluateRMSError</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a48bc331bfa4cd228f73d7770f1517252</anchor>
      <arglist>(const Transformation *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ExtrapolationMode</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a4d9ef4cb43070a94af2705e6fd8a4fb1</anchor>
      <arglist>(enum ExtrapolationMode)</arglist>
    </member>
    <member kind="function">
      <type>const CPExtrapolator *</type>
      <name>Extrapolator</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a75cc4b0f8cb575e99dceecb23dfe91aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FFDJacobianDetDerivative</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>ac61c638e0d68834a92403ea8fd6da9cf</anchor>
      <arglist>(double dJ[3], const Matrix &amp;adj, int cp, double x, double y, double z, double=0, double=NaN, bool wrt_world=true, bool use_spacing=true) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FFDJacobianWorld</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a4a6c4646807bb6a0f0733517e7d71a5e</anchor>
      <arglist>(Matrix &amp;, double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a5f88f92867d2557dd53bc0c87dc97be2</anchor>
      <arglist>(int, Vector &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>aaa4a620571921accf6792361b7b5d354</anchor>
      <arglist>(int, double &amp;, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>afe3316f2258367f38ca3b93d15869ce3</anchor>
      <arglist>(int, int, int, double &amp;, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>aa58d9b29a9b78c72309e99ea191added</anchor>
      <arglist>(int, int, int, int, double &amp;, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetOrientation</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a430e5e1b6a7b898842f76e6e09ceb420</anchor>
      <arglist>(double *, double *, double *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetSpacing</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>ab631bc1754d8ca3b0dfc5752033861dd</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetSpacing</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a6d4f95b6faffd4af5828a93056973264</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetStatus</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a25bca7280508aa5315ee030ca6988d8b</anchor>
      <arglist>(int, CPStatus &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetStatus</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a29daf9fbaf0c754c9d847d54f08ff31e</anchor>
      <arglist>(int, int, int, DOFStatus &amp;, DOFStatus &amp;, DOFStatus &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetStatus</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a960cbd283d5f9d5acffd95443eaa5ac7</anchor>
      <arglist>(int, int, int, int, DOFStatus &amp;, DOFStatus &amp;, DOFStatus &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetT</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>aaf4bab3f5f205dbd202477ffa20cef1a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetTAfterSubdivision</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a42a64b5a8d87357ab8af5f0e214076c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetTSpacing</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a7696c6ce547b9990f5833b1ca2da4906</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetTSpacingAfterSubdivision</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>af5514be932e0ad8bfc030b0065d71f08</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetX</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a244738ab2eb623c2514bb59630a4d5c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetXAfterSubdivision</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a1d18e1e23e0b6a7574d4864c01419fd8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetXSpacing</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a632c9030875f4b3a197e9077cdbc9348</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetXSpacingAfterSubdivision</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>ac0ecb43f8b4c3330aa7d5840043d3177</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetY</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a7f659fda11649d2a1c949346a42c531c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetYAfterSubdivision</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>af5be3a1002007b0b2099504f6a07bfd5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetYSpacing</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>af63384181001d396d680f6dd633d519d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetYSpacingAfterSubdivision</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a2a45cd9bf3f3049bfaa5a50489e5f567</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetZ</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a886fa8fc2554e0cc9074b8bcceeb6a61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetZAfterSubdivision</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>ad2b8a6efb02c1050bc343788a6c580af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetZSpacing</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a6ed39c9f1ec547c97e2c7d8345fd6edf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetZSpacingAfterSubdivision</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a6c9f2fc7ce18b6cb0fdbf95af8c3600e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GlobalHessian</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a4ea3f91bef5bf6b7eafc8acc0dad75b7</anchor>
      <arglist>(Matrix [3], double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GlobalInverse</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a62b633faa634cbd44604815dc64d8c9f</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GlobalJacobian</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a6b02bef0a4e1d2faeade6477cb24711e</anchor>
      <arglist>(Matrix &amp;, double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GlobalTransform</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a0455f8d7209d50a5923343c69499ee89</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Hessian</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a3c5a30ab5f8a760aede42038e9219e0a</anchor>
      <arglist>(Matrix [3], double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>HessianToWorld</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a4835dd74a5d4e2a6f14b0911a6259f1c</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>HessianToWorld</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a3195aa3e17af5983d1ac04d3b32e86f3</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>HessianToWorld</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>afbdf4534a67760cf6419458fb3ca11d5</anchor>
      <arglist>(Matrix &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>HessianToWorld</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a06e8e2f9b67b04ec4846931a2e8d83ef</anchor>
      <arglist>(Matrix [3]) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IndexToDOFs</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a67f0a764c71c03b80c06a31f5a3ae58f</anchor>
      <arglist>(int, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IndexToDOFs</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>aa304d12d2d41015fc3b5fd84391c80d9</anchor>
      <arglist>(int, int &amp;, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IndexToLattice</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>ac30b39a5ebaf0940226c005d6074b830</anchor>
      <arglist>(int, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IndexToLattice</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a17eede5c66862fc0c3b30d300c6e3fad</anchor>
      <arglist>(int, int &amp;, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IndexToLattice</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a251b84ee0e341e63b774d81d5659dcb0</anchor>
      <arglist>(int, int &amp;, int &amp;, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IndexToWorld</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>ad7250aa15cb5dd86242bd20a512a5440</anchor>
      <arglist>(int, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IndexToWorld</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a834491eaf1683095e20aa7c08d1fe701</anchor>
      <arglist>(int, double &amp;, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IndexToWorld</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>ad557251db84bca1820f47e999d477ca8</anchor>
      <arglist>(int, Point &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>IndexToWorld</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a8dcd880d85dad96b4427b7057bd4e77d</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a8877b940f589219e5765e85325191737</anchor>
      <arglist>(const ImageAttributes &amp;)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a1d87f38d1e2719c60fb56983ba073064</anchor>
      <arglist>(const ImageAttributes &amp;, double, double, double=-1.0, double=-1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a04717f7d9f64b891aa7b65a75db2c8e9</anchor>
      <arglist>(const CPImage &amp;, bool=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>ad4b73f84f2c11c0b4ee8d5feaa3fa313</anchor>
      <arglist>(const GenericImage&lt; double &gt; &amp;, bool=false)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Interpolate</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>af4e5aa6e1e98b462e713b782dd27c656</anchor>
      <arglist>(const double *, const double *, const double *)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Inverse</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a776879cd6840ab42a1ef4de014eafc96</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsActive</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>afe62caf9b12192e03ae256b5b80c2b5f</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsActive</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a2a0548a7350b1a8e018efe6d38149fd5</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Jacobian</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>af1c39ed1f1cc5b4683c738e5422ccd3d</anchor>
      <arglist>(Matrix &amp;, double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDetDerivative</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>ad4ca6db2fcf12c4e43ca0e0ec7794b62</anchor>
      <arglist>(double dJ[3], const Matrix &amp;adj, int cp, double x, double y, double z, double t=0, double t0=NaN, bool wrt_world=true, bool use_spacing=true) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>aeed0ef8edf9b408b1c98c3a089d3498a</anchor>
      <arglist>(Matrix &amp;, int, double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a9f138a6f0c55c4dcca57d8ea70693341</anchor>
      <arglist>(TransformationJacobian &amp;, double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>JacobianToWorld</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a5ade3a86093a60007b02e071c7df9fe6</anchor>
      <arglist>(double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>JacobianToWorld</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a5218818dd518a5c9bb935563561a4e8b</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>JacobianToWorld</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a081832a7b22b6124c87cc70b5c5b201e</anchor>
      <arglist>(Matrix &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>JacobianToWorldOrientation</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a0279aa551f3b8b51d0e1fad874aef8d5</anchor>
      <arglist>(double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>JacobianToWorldOrientation</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>ae7d0372eeb28eb8259b27ac68991c77d</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>KernelRadius</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>ae3181459e63415bee95b69e8e1778d92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>KernelSize</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a9450748bc335c39efce3076dd75a387a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LatticeToIndex</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a26dad3addd01e7d84e7704f5c455a4ce</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>LatticeToTime</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a9d9a3b9277576f5a88cf1bcc87f57e9e</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LatticeToWorld</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a529c40e0422298e3f313a7513f0329bd</anchor>
      <arglist>(double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LatticeToWorld</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a780f99a644a63b1d03d9389bc7d87c97</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LatticeToWorld</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a8d643768bbae006c3258aa2df26af444</anchor>
      <arglist>(Point &amp;) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a360d76cef0c8beaf5900ef9e7dbc9704</anchor>
      <arglist>(double, SpeedupFactor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a1a7953385fbb82687d883960f98ce0bc</anchor>
      <arglist>(enum ExtrapolationMode, ExtrapolationMode)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfActiveCPs</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a9b7722066eb855cb74a9054d9b2dd84f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfCPs</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a213b8c88a55a4a8ccd07d5bcd912f4a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfPassiveCPs</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a43e69d7dd43a744570a86a42d2b98d39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>aff9ac3a7d668ec71246de86515924e4b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a7537ea1af6456b33390f393aca4b7a5b</anchor>
      <arglist>(const GenericImage&lt; double &gt; *, double *, const WorldCoordsImage *, const WorldCoordsImage *, double=NaN, double=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a75cbc9f33e9554a6ab3e15f55e586872</anchor>
      <arglist>(const PointSet &amp;, const Vector3D&lt; double &gt; *, double *, double=0, double=NaN, double=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>aab5ad48d7d4593fbf5dc2dc1c4c34f4d</anchor>
      <arglist>(ostream &amp;, Indent=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>aab48ac34a1cb8c356a515daa890c4f16</anchor>
      <arglist>(int, const Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a30b0859f361904a04596e812489037e1</anchor>
      <arglist>(int, double, double, double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a8c7d209810df9661f2610b1c5282412d</anchor>
      <arglist>(int, int, int, double, double, double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>add3f079ca08fe5a0d40316a92c80516f</anchor>
      <arglist>(int, int, int, int, double, double, double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutBoundingBox</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a9793a8ae05fb0d73da1ddbaa42cbd867</anchor>
      <arglist>(double, double, double, double, double, double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutBoundingBox</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>af7fbf7a2e369a5fd635abaa30202013c</anchor>
      <arglist>(const Point &amp;, const Point &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutBoundingBox</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>add00f59481e7fb1ac6dda20b9c16d794</anchor>
      <arglist>(double, double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutBoundingBox</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a8e4910cf7fbb1a3852204e414bcf8aa6</anchor>
      <arglist>(double, double, double, double, double, double, double, double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutOrientation</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a89a4a2d7158ec7c2c5ab3594f04c803f</anchor>
      <arglist>(double *, double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutStatus</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>ab29b5324a3e76327ca64609e40dcac31</anchor>
      <arglist>(int, const CPStatus &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutStatus</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>aa42a3445c666bf0be02dc62705ccc645</anchor>
      <arglist>(int, int, int, DOFStatus, DOFStatus, DOFStatus)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutStatus</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a7de75fdba2d33ddfd728124f8f4deda7</anchor>
      <arglist>(int, int, int, int, DOFStatus, DOFStatus, DOFStatus)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>afaac696371f4feaea5a35485a9362757</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Subdivide</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>ac5ece33a3690a4e444936b6f82993485</anchor>
      <arglist>(bool=true, bool=true, bool=true, bool=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Subdivide2D</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a37f21fce85ffcce1807be91135185fe5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Subdivide3D</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a4bae05a5cc4d9ca00c39b9d3b2885fcb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Subdivide4D</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a794713882469e7d0e222180a7bb8ab86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>T</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>af9810f2d7437acae140330df50f9a279</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>TimeToLattice</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a7cec63afc8eee6e2318ff21e5b3ed1d9</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Transform</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>abb37182857c3b9fb9024bb243105530c</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WorldToLattice</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>aed0d055693d278cbdd3b71495fe89106</anchor>
      <arglist>(double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WorldToLattice</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a55710baaba6019a914aa3dc372a8e74d</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WorldToLattice</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a5bc22109fb2b3126e35a1e67d19d09a1</anchor>
      <arglist>(Point &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>X</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a6b053e97c3fa07248110577d059d5af4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Y</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a6665c6f454be82c034e5f4ef2e7a16a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Z</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a5fb4081d678e91872d054bd768c4e45a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FreeFormTransformation</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a0f63d6b915ff3968c7ba7451f204d5c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>Bending3D</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>ad35b45b0572153c356aa133af747d5ae</anchor>
      <arglist>(const Matrix [3])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImageAttributes</type>
      <name>DefaultAttributes</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a1e502651f942599c3e05ade618c631d6</anchor>
      <arglist>(const ImageAttributes &amp;attr, double dx=-1.0, double dy=-1.0, double dz=-1.0, double dt=-1.0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImageAttributes</type>
      <name>DefaultAttributes</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>aa7e454aa2ab800b01a89eef42a296015</anchor>
      <arglist>(double, double, double, double, double, double, double, double, double, double, double, double, const double *, const double *, const double *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FreeFormTransformation</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a60f6ce771f644026f00683c521736a3d</anchor>
      <arglist>(CPInterpolator &amp;, CPInterpolator *=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FreeFormTransformation</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a40bfd8c4fa223eb49ba77fb0ae245aac</anchor>
      <arglist>(const FreeFormTransformation &amp;, CPInterpolator &amp;, CPInterpolator *=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>InitializeCPs</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a86b4626cad8e860ba514fae3edc7f3ec</anchor>
      <arglist>(const ImageAttributes &amp;, bool=true)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>InitializeCPs</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>ada727bbaacddcd265906080e39c1a250</anchor>
      <arglist>(const FreeFormTransformation &amp;, bool=true)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>InitializeInterpolator</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>ac4bf227346e5caaf55bdf63ff4d64ca1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>InitializeStatus</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a91604cb8e29f768ec4d9c15006d98975</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Cofstream &amp;</type>
      <name>WriteCPs</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>adead04928ad53a7f1c2192800b0b5fc4</anchor>
      <arglist>(Cofstream &amp;) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ImageAttributes &amp;</type>
      <name>_attr</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>ac40fabd86872ea2ed955119a354c4dfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CPInterpolator *</type>
      <name>_CPFunc</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a6354d1f8635c5c2551d33f29fb62cacc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CPImage</type>
      <name>_CPImage</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>aa67cf30f0bd3203fd7f7977797208555</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CPStatus ****</type>
      <name>_CPStatus</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a164620e3770196f59b80ea0fb0f0741d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CPExtrapolator *</type>
      <name>_CPValue</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a8d0b6b3aa12cedb33d9e60fc6d8a03b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const double &amp;</type>
      <name>_dt</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a7f50bc9e54cd8dd082ca94c029d243eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const double &amp;</type>
      <name>_dx</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a3ac5aec789964b10b8df57fec2973ba1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const double &amp;</type>
      <name>_dy</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>ab562b71cd738f1bfe92adfe08aa4d4a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const double &amp;</type>
      <name>_dz</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>aa5047e38586858e53a610253214b3231</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Matrix &amp;</type>
      <name>_matL2W</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a18b8e9659a648fda53e71c15f842985a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Matrix &amp;</type>
      <name>_matW2L</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a6939972dc44410379a15782d84bb9b75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int &amp;</type>
      <name>_t</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>aef232fb378327284fa7aadb4e2f60fcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int &amp;</type>
      <name>_x</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>af25d16a2c066fb166795d898e8fecf10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int &amp;</type>
      <name>_y</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a791e6bdd8f8a7ce228b97deebf665682</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int &amp;</type>
      <name>_z</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a4edf78524f3a1dac17724f662e857164</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::FreeFormTransformation3D</name>
    <filename>classmirtk_1_1FreeFormTransformation3D.html</filename>
    <base>mirtk::FreeFormTransformation</base>
    <member kind="function">
      <type>void</type>
      <name>BoundingBoxCP</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation3D.html</anchorfile>
      <anchor>a3f6fde8904391c0e05f3fb8da21784bb</anchor>
      <arglist>(int cp, Point &amp;, Point &amp;, double=1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BoundingBoxImage</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation3D.html</anchorfile>
      <anchor>a4b8efbdccc3fb453cb19b257e3717fb0</anchor>
      <arglist>(const BaseImage *, int, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, double=1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetStatusCP</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation3D.html</anchorfile>
      <anchor>a67e85fc9bf88722995dd182de76fe039</anchor>
      <arglist>(int, int, int, DOFStatus &amp;, DOFStatus &amp;, DOFStatus &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation3D.html</anchorfile>
      <anchor>a9eb365d88f58c3e4f3c358fa718c55c9</anchor>
      <arglist>(const ImageAttributes &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation3D.html</anchorfile>
      <anchor>a10ba40d4599200a09bfc37c83c504157</anchor>
      <arglist>(Matrix &amp;, int, int, int, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation3D.html</anchorfile>
      <anchor>a60ebdec9dd18c9fc7788c994cafb2b88</anchor>
      <arglist>(Matrix &amp;, int, double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation3D.html</anchorfile>
      <anchor>abb71cd8521e0adffef1f834d9a1fa587</anchor>
      <arglist>(double [3], int, int, int, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation3D.html</anchorfile>
      <anchor>a23d48309cca95fe142c5ee1af089722e</anchor>
      <arglist>(double [3], int, double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MultiBoundingBoxImage</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation3D.html</anchorfile>
      <anchor>a9cb150971941966229e75b53ab8d9850</anchor>
      <arglist>(const BaseImage *, int, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, double=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation3D.html</anchorfile>
      <anchor>ac9f4f0227668daa8a91203a8ec168051</anchor>
      <arglist>(const GenericImage&lt; double &gt; *, double *, const WorldCoordsImage *, const WorldCoordsImage *, double=NaN, double=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation3D.html</anchorfile>
      <anchor>ad71e727c750f43f6aa728f1d624316a8</anchor>
      <arglist>(const PointSet &amp;, const Vector3D&lt; double &gt; *, double *, double=0, double=NaN, double=1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutStatusCP</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation3D.html</anchorfile>
      <anchor>af15615f5ea38c07bf9d7a10e2ad8b2a3</anchor>
      <arglist>(int, int, int, DOFStatus, DOFStatus, DOFStatus)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FreeFormTransformation3D</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation3D.html</anchorfile>
      <anchor>a0f87756ddce649288086270307a32450</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImageAttributes</type>
      <name>DefaultAttributes</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation3D.html</anchorfile>
      <anchor>a2450c7f690ad2e8cfdd9eeaed199eeb3</anchor>
      <arglist>(double, double, double, double, double, double, double, double, double, const double *, const double *, const double *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FreeFormTransformation3D</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation3D.html</anchorfile>
      <anchor>aa2e92cfb3bb8225fddebcddf891fa1c0</anchor>
      <arglist>(CPInterpolator &amp;, CPInterpolator *=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FreeFormTransformation3D</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation3D.html</anchorfile>
      <anchor>aa8b13b4414090ad6302454c53af3c032</anchor>
      <arglist>(const FreeFormTransformation3D &amp;, CPInterpolator &amp;, CPInterpolator *=NULL)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Cifstream &amp;</type>
      <name>ReadDOFs</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation3D.html</anchorfile>
      <anchor>ab9cc8449cbb861eb65f548d94947146b</anchor>
      <arglist>(Cifstream &amp;, TransformationType)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Cofstream &amp;</type>
      <name>WriteDOFs</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation3D.html</anchorfile>
      <anchor>a3def84688a56a4e4927f6f43eb2a19be</anchor>
      <arglist>(Cofstream &amp;) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::FreeFormTransformation4D</name>
    <filename>classmirtk_1_1FreeFormTransformation4D.html</filename>
    <base>mirtk::FreeFormTransformation</base>
    <member kind="function">
      <type>void</type>
      <name>BoundingBoxCP</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation4D.html</anchorfile>
      <anchor>adae36ea36de15f8cbe9fbc28b6b429d3</anchor>
      <arglist>(int, Point &amp;, Point &amp;, double=1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BoundingBoxImage</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation4D.html</anchorfile>
      <anchor>aa7509427dbd17ce53945302943f79996</anchor>
      <arglist>(const GreyImage *, int, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, double=1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetStatusCP</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation4D.html</anchorfile>
      <anchor>af7c4983ab80d0c9942702d1c41556ceb</anchor>
      <arglist>(int, int, int, int, DOFStatus &amp;, DOFStatus &amp;, DOFStatus &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation4D.html</anchorfile>
      <anchor>a72b9dea6f2c37a34e53fc8d0b7c73523</anchor>
      <arglist>(const ImageAttributes &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation4D.html</anchorfile>
      <anchor>a3851298527770494a2adfd18370b2504</anchor>
      <arglist>(Matrix &amp;, int, int, int, int, double, double, double, double, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation4D.html</anchorfile>
      <anchor>ae95b185bbe490970a074279cd6964800</anchor>
      <arglist>(Matrix &amp;, int, double, double, double, double, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation4D.html</anchorfile>
      <anchor>a11497af2985c6e07882f1165dd89e292</anchor>
      <arglist>(double [3], int, int, int, int, double, double, double, double, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation4D.html</anchorfile>
      <anchor>a181f986e1a3dca204c1c91f93ce4e48c</anchor>
      <arglist>(double [3], int, double, double, double, double, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation4D.html</anchorfile>
      <anchor>ad92915bde530e2cfb171b227901545bf</anchor>
      <arglist>(const GenericImage&lt; double &gt; *, double *, const WorldCoordsImage *, const WorldCoordsImage *, double=NaN, double=1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutStatusCP</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation4D.html</anchorfile>
      <anchor>a72bfc524814e17bf93f37d077c9520c2</anchor>
      <arglist>(int, int, int, int, DOFStatus, DOFStatus, DOFStatus)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FreeFormTransformation4D</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation4D.html</anchorfile>
      <anchor>abbdf6b8d110f52c72f17eb1d76092a0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FreeFormTransformation4D</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation4D.html</anchorfile>
      <anchor>a493fe19a72915fdb64e2ffd612d5f59d</anchor>
      <arglist>(CPInterpolator &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FreeFormTransformation4D</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation4D.html</anchorfile>
      <anchor>a3adc5487d59dbd63943ddc21010cd782</anchor>
      <arglist>(const FreeFormTransformation4D &amp;, CPInterpolator &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Cifstream &amp;</type>
      <name>ReadDOFs</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation4D.html</anchorfile>
      <anchor>a6b33c5528078fb7f505ceec3961505e7</anchor>
      <arglist>(Cifstream &amp;, TransformationType)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Cofstream &amp;</type>
      <name>WriteDOFs</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation4D.html</anchorfile>
      <anchor>a6653e285cf3f3aea2f1e29cceeb6f56e</anchor>
      <arglist>(Cofstream &amp;) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::FreeFormTransformationEmbeddedRungeKutta</name>
    <filename>classmirtk_1_1FreeFormTransformationEmbeddedRungeKutta.html</filename>
    <templarg>TFreeFormTransformation</templarg>
    <templarg>TButcherTableau</templarg>
    <base>mirtk::FreeFormTransformationRungeKutta</base>
    <member kind="typedef">
      <type>TButcherTableau</type>
      <name>BT</name>
      <anchorfile>classmirtk_1_1FreeFormTransformationEmbeddedRungeKutta.html</anchorfile>
      <anchor>acc445799b4a69d68b5bb8dfeb5fa21de</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FreeFormTransformationEmbeddedRungeKutta&lt; TFreeFormTransformation, FreeFormTransformationButcherTableauRKBS23 &gt;</name>
    <filename>classmirtk_1_1FreeFormTransformationEmbeddedRungeKutta.html</filename>
    <base>mirtk::FreeFormTransformationRungeKutta</base>
    <member kind="typedef">
      <type>FreeFormTransformationButcherTableauRKBS23</type>
      <name>BT</name>
      <anchorfile>classmirtk_1_1FreeFormTransformationEmbeddedRungeKutta.html</anchorfile>
      <anchor>acc445799b4a69d68b5bb8dfeb5fa21de</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FreeFormTransformationEmbeddedRungeKutta&lt; TFreeFormTransformation, FreeFormTransformationButcherTableauRKCK45 &gt;</name>
    <filename>classmirtk_1_1FreeFormTransformationEmbeddedRungeKutta.html</filename>
    <base>mirtk::FreeFormTransformationRungeKutta</base>
    <member kind="typedef">
      <type>FreeFormTransformationButcherTableauRKCK45</type>
      <name>BT</name>
      <anchorfile>classmirtk_1_1FreeFormTransformationEmbeddedRungeKutta.html</anchorfile>
      <anchor>acc445799b4a69d68b5bb8dfeb5fa21de</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FreeFormTransformationEmbeddedRungeKutta&lt; TFreeFormTransformation, FreeFormTransformationButcherTableauRKDP45 &gt;</name>
    <filename>classmirtk_1_1FreeFormTransformationEmbeddedRungeKutta.html</filename>
    <base>mirtk::FreeFormTransformationRungeKutta</base>
    <member kind="typedef">
      <type>FreeFormTransformationButcherTableauRKDP45</type>
      <name>BT</name>
      <anchorfile>classmirtk_1_1FreeFormTransformationEmbeddedRungeKutta.html</anchorfile>
      <anchor>acc445799b4a69d68b5bb8dfeb5fa21de</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FreeFormTransformationEmbeddedRungeKutta&lt; TFreeFormTransformation, FreeFormTransformationButcherTableauRKEH12 &gt;</name>
    <filename>classmirtk_1_1FreeFormTransformationEmbeddedRungeKutta.html</filename>
    <base>mirtk::FreeFormTransformationRungeKutta</base>
    <member kind="typedef">
      <type>FreeFormTransformationButcherTableauRKEH12</type>
      <name>BT</name>
      <anchorfile>classmirtk_1_1FreeFormTransformationEmbeddedRungeKutta.html</anchorfile>
      <anchor>acc445799b4a69d68b5bb8dfeb5fa21de</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FreeFormTransformationEmbeddedRungeKutta&lt; TFreeFormTransformation, FreeFormTransformationButcherTableauRKF45 &gt;</name>
    <filename>classmirtk_1_1FreeFormTransformationEmbeddedRungeKutta.html</filename>
    <base>mirtk::FreeFormTransformationRungeKutta</base>
    <member kind="typedef">
      <type>FreeFormTransformationButcherTableauRKF45</type>
      <name>BT</name>
      <anchorfile>classmirtk_1_1FreeFormTransformationEmbeddedRungeKutta.html</anchorfile>
      <anchor>acc445799b4a69d68b5bb8dfeb5fa21de</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::FreeFormTransformationExplicitRungeKutta</name>
    <filename>classmirtk_1_1FreeFormTransformationExplicitRungeKutta.html</filename>
    <templarg>TFreeFormTransformation</templarg>
    <templarg>TButcherTableau</templarg>
    <base>mirtk::FreeFormTransformationRungeKutta</base>
    <member kind="typedef">
      <type>TButcherTableau</type>
      <name>BT</name>
      <anchorfile>classmirtk_1_1FreeFormTransformationExplicitRungeKutta.html</anchorfile>
      <anchor>aae68aec3134d6fffd9faad6e3cad9ef3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FreeFormTransformationExplicitRungeKutta&lt; TFreeFormTransformation, FreeFormTransformationButcherTableauRK4 &gt;</name>
    <filename>classmirtk_1_1FreeFormTransformationExplicitRungeKutta.html</filename>
    <base>mirtk::FreeFormTransformationRungeKutta</base>
    <member kind="typedef">
      <type>FreeFormTransformationButcherTableauRK4</type>
      <name>BT</name>
      <anchorfile>classmirtk_1_1FreeFormTransformationExplicitRungeKutta.html</anchorfile>
      <anchor>aae68aec3134d6fffd9faad6e3cad9ef3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FreeFormTransformationExplicitRungeKutta&lt; TFreeFormTransformation, FreeFormTransformationButcherTableauRKE1 &gt;</name>
    <filename>classmirtk_1_1FreeFormTransformationExplicitRungeKutta.html</filename>
    <base>mirtk::FreeFormTransformationRungeKutta</base>
    <member kind="typedef">
      <type>FreeFormTransformationButcherTableauRKE1</type>
      <name>BT</name>
      <anchorfile>classmirtk_1_1FreeFormTransformationExplicitRungeKutta.html</anchorfile>
      <anchor>aae68aec3134d6fffd9faad6e3cad9ef3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FreeFormTransformationExplicitRungeKutta&lt; TFreeFormTransformation, FreeFormTransformationButcherTableauRKE2 &gt;</name>
    <filename>classmirtk_1_1FreeFormTransformationExplicitRungeKutta.html</filename>
    <base>mirtk::FreeFormTransformationRungeKutta</base>
    <member kind="typedef">
      <type>FreeFormTransformationButcherTableauRKE2</type>
      <name>BT</name>
      <anchorfile>classmirtk_1_1FreeFormTransformationExplicitRungeKutta.html</anchorfile>
      <anchor>aae68aec3134d6fffd9faad6e3cad9ef3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FreeFormTransformationExplicitRungeKutta&lt; TFreeFormTransformation, FreeFormTransformationButcherTableauRKH2 &gt;</name>
    <filename>classmirtk_1_1FreeFormTransformationExplicitRungeKutta.html</filename>
    <base>mirtk::FreeFormTransformationRungeKutta</base>
    <member kind="typedef">
      <type>FreeFormTransformationButcherTableauRKH2</type>
      <name>BT</name>
      <anchorfile>classmirtk_1_1FreeFormTransformationExplicitRungeKutta.html</anchorfile>
      <anchor>aae68aec3134d6fffd9faad6e3cad9ef3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::FreeFormTransformationIntegrationRK4</name>
    <filename>classmirtk_1_1FreeFormTransformationIntegrationRK4.html</filename>
    <templarg></templarg>
    <base>FreeFormTransformationExplicitRungeKutta&lt; TFreeFormTransformation, FreeFormTransformationButcherTableauRK4 &gt;</base>
  </compound>
  <compound kind="class">
    <name>mirtk::FreeFormTransformationIntegrationRKBS23</name>
    <filename>classmirtk_1_1FreeFormTransformationIntegrationRKBS23.html</filename>
    <templarg></templarg>
    <base>FreeFormTransformationEmbeddedRungeKutta&lt; TFreeFormTransformation, FreeFormTransformationButcherTableauRKBS23 &gt;</base>
  </compound>
  <compound kind="class">
    <name>mirtk::FreeFormTransformationIntegrationRKCK45</name>
    <filename>classmirtk_1_1FreeFormTransformationIntegrationRKCK45.html</filename>
    <templarg></templarg>
    <base>FreeFormTransformationEmbeddedRungeKutta&lt; TFreeFormTransformation, FreeFormTransformationButcherTableauRKCK45 &gt;</base>
  </compound>
  <compound kind="class">
    <name>mirtk::FreeFormTransformationIntegrationRKDP45</name>
    <filename>classmirtk_1_1FreeFormTransformationIntegrationRKDP45.html</filename>
    <templarg></templarg>
    <base>FreeFormTransformationEmbeddedRungeKutta&lt; TFreeFormTransformation, FreeFormTransformationButcherTableauRKDP45 &gt;</base>
  </compound>
  <compound kind="class">
    <name>mirtk::FreeFormTransformationIntegrationRKE1</name>
    <filename>classmirtk_1_1FreeFormTransformationIntegrationRKE1.html</filename>
    <templarg></templarg>
    <base>FreeFormTransformationExplicitRungeKutta&lt; TFreeFormTransformation, FreeFormTransformationButcherTableauRKE1 &gt;</base>
  </compound>
  <compound kind="class">
    <name>mirtk::FreeFormTransformationIntegrationRKE2</name>
    <filename>classmirtk_1_1FreeFormTransformationIntegrationRKE2.html</filename>
    <templarg></templarg>
    <base>FreeFormTransformationExplicitRungeKutta&lt; TFreeFormTransformation, FreeFormTransformationButcherTableauRKE2 &gt;</base>
  </compound>
  <compound kind="class">
    <name>mirtk::FreeFormTransformationIntegrationRKEH12</name>
    <filename>classmirtk_1_1FreeFormTransformationIntegrationRKEH12.html</filename>
    <templarg></templarg>
    <base>FreeFormTransformationEmbeddedRungeKutta&lt; TFreeFormTransformation, FreeFormTransformationButcherTableauRKEH12 &gt;</base>
  </compound>
  <compound kind="class">
    <name>mirtk::FreeFormTransformationIntegrationRKF45</name>
    <filename>classmirtk_1_1FreeFormTransformationIntegrationRKF45.html</filename>
    <templarg></templarg>
    <base>FreeFormTransformationEmbeddedRungeKutta&lt; TFreeFormTransformation, FreeFormTransformationButcherTableauRKF45 &gt;</base>
  </compound>
  <compound kind="class">
    <name>mirtk::FreeFormTransformationIntegrationRKH2</name>
    <filename>classmirtk_1_1FreeFormTransformationIntegrationRKH2.html</filename>
    <templarg></templarg>
    <base>FreeFormTransformationExplicitRungeKutta&lt; TFreeFormTransformation, FreeFormTransformationButcherTableauRKH2 &gt;</base>
  </compound>
  <compound kind="class">
    <name>mirtk::FreeFormTransformationRungeKutta</name>
    <filename>classmirtk_1_1FreeFormTransformationRungeKutta.html</filename>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>dkdp</name>
      <anchorfile>classmirtk_1_1FreeFormTransformationRungeKutta.html</anchorfile>
      <anchor>abd3b8ef41555a1c12891123fc59e5b5c</anchor>
      <arglist>(Matrix &amp;dk, const Matrix &amp;Dv, const Matrix &amp;dx, const double dv[3], double h)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>dkdx</name>
      <anchorfile>classmirtk_1_1FreeFormTransformationRungeKutta.html</anchorfile>
      <anchor>ad4af0b7b598f2de19f7af873a8d6466a</anchor>
      <arglist>(Matrix &amp;dk, const Matrix &amp;Dv, const Matrix &amp;dx, double h)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::FuzzyCorrespondence</name>
    <filename>classmirtk_1_1FuzzyCorrespondence.html</filename>
    <base>mirtk::PointCorrespondence</base>
    <member kind="typedef">
      <type>GenericSparseMatrix&lt; float &gt;</type>
      <name>WeightMatrix</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>ade29cbdc1cbd9bf045d5b94f06ab3ae6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetInputSourcePoint</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>a414ea1698c436d849a36ff357cc126c2</anchor>
      <arglist>(int, Point &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetInputTargetPoint</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>aad170cbe6eb2be93deec6fc1152bf776</anchor>
      <arglist>(int, Point &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetSourcePoint</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>ae0d8864fb8f5c9b67f07b8a259181caf</anchor>
      <arglist>(int, Point &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetTargetPoint</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>a53f94ba11b53c342ffb9a7b816dca6e4</anchor>
      <arglist>(int, Point &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>a2511f8d357b6272441b919d4a4e25062</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>af47f9bc5d850a65c64de165fe3c90473</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Reinitialize</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>ace855f54b48934fe3f5fe561eb7af7c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>a15719c76729b4e0c11291c97868e75b8</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>aae9160b34366ea7ef344b38f595c83b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Upgrade</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>a38e1eeaa6286bb9746fe4a3223d46f1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FuzzyCorrespondence</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>aeda73c4eff8271cc6ef16e1220ddb630</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AddGaussianNoise</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>a2c9f1402c3bcd845b3094ea86764c9f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>CalculateClusters</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>a7d49bc1c56e19a36fa5ec72b76200318</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>CalculateWeights</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>aec16ef5fbf8b0a765a78b0fafa58c5fd</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FuzzyCorrespondence</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>a474abc6cad3c8bc9e2b997f77c96c7bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FuzzyCorrespondence</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>adf8156b695286873bea37bc21ede0bc3</anchor>
      <arglist>(const FuzzyCorrespondence &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Init</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>a613eeff28d5aa7442182ac455e42bfb3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>a1c14d180dbe9b8c4599ce284f72fb1da</anchor>
      <arglist>(PointSet, InputTargetClusters)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>abc4690e478671cf1736fc6c1a4305d72</anchor>
      <arglist>(PointSet, InputSourceClusters)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>aa725593af1fe1764559579fef8daec4e</anchor>
      <arglist>(PointSet, TargetClusters)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>ae2f1fa3ae5b5c0d9e2138c94c5eb595f</anchor>
      <arglist>(PointSet, SourceClusters)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>a8c52ce6839ab7a137ffa9c460f7f0809</anchor>
      <arglist>(Array&lt; bool &gt;, TargetOutlier)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>a205fdf630c3bc0cd6236e75d435f1d41</anchor>
      <arglist>(Array&lt; bool &gt;, SourceOutlier)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>a37f95757c154e07147f0ee00ca1d213b</anchor>
      <arglist>(double, MinWeight)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>a3b883c1f5f012a2dab0f2d7f278ae087</anchor>
      <arglist>(double, GaussianNoise)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>a3d2e12933a7f5897ddf1db603f15d943</anchor>
      <arglist>(WeightMatrix, Weight)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>NormalizeWeights</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>a1feb1c0f23e0f02915e29d9d8d5258a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteDataSets</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>a9e11b23b470a2e67d14a87768dcb8354</anchor>
      <arglist>(const char *, const char *, bool=true) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GaussCurvatureConstraint</name>
    <filename>classmirtk_1_1GaussCurvatureConstraint.html</filename>
    <base>mirtk::SurfaceConstraint</base>
    <member kind="enumeration">
      <type></type>
      <name>Action</name>
      <anchorfile>classmirtk_1_1GaussCurvatureConstraint.html</anchorfile>
      <anchor>aea69b55c4ae564168c5bc85e037cf7dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussCurvatureConstraint</name>
      <anchorfile>classmirtk_1_1GaussCurvatureConstraint.html</anchorfile>
      <anchor>ada08a3aaecb4999c53aefab2f36663f3</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussCurvatureConstraint</name>
      <anchorfile>classmirtk_1_1GaussCurvatureConstraint.html</anchorfile>
      <anchor>ab1c922aab1e7f326d434bb73f2443adf</anchor>
      <arglist>(const GaussCurvatureConstraint &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GaussCurvatureConstraint.html</anchorfile>
      <anchor>a20ef14acf701021d7de306d8ac2a692f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GaussCurvatureConstraint &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GaussCurvatureConstraint.html</anchorfile>
      <anchor>a2d8eccc1fa88989eae3e98323e3d7889</anchor>
      <arglist>(const GaussCurvatureConstraint &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1GaussCurvatureConstraint.html</anchorfile>
      <anchor>acfe591bfc677aa600a70b856ee766d80</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GaussCurvatureConstraint</name>
      <anchorfile>classmirtk_1_1GaussCurvatureConstraint.html</anchorfile>
      <anchor>a6cf7e793c936515aa66f90aa63a2d34c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1GaussCurvatureConstraint.html</anchorfile>
      <anchor>a75d6f94572ab861fae7ebe6cf66d5f9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1GaussCurvatureConstraint.html</anchorfile>
      <anchor>a2481330ec28de347b8e2726d6f12e0d4</anchor>
      <arglist>(double *, double, double)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GaussianBlurring</name>
    <filename>classmirtk_1_1GaussianBlurring.html</filename>
    <templarg></templarg>
    <base>SeparableConvolution&lt; TVoxel &gt;</base>
    <member kind="function">
      <type></type>
      <name>GaussianBlurring</name>
      <anchorfile>classmirtk_1_1GaussianBlurring.html</anchorfile>
      <anchor>aa4d9d2b057341c09d06a5df649b47886</anchor>
      <arglist>(double=1.)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianBlurring</name>
      <anchorfile>classmirtk_1_1GaussianBlurring.html</anchorfile>
      <anchor>ab5f0a38cc72e22d3d93b3fadc8287343</anchor>
      <arglist>(double, double, double=0., double=0.)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetSigma</name>
      <anchorfile>classmirtk_1_1GaussianBlurring.html</anchorfile>
      <anchor>ab6b811f2fddfc25d327a2c98320b108e</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetSigma</name>
      <anchorfile>classmirtk_1_1GaussianBlurring.html</anchorfile>
      <anchor>ad4ae0f8ce7912c7a263941eada5bd4e9</anchor>
      <arglist>(double, double, double=0., double=0.)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GaussianBlurring</name>
      <anchorfile>classmirtk_1_1GaussianBlurring.html</anchorfile>
      <anchor>a706702dbd4ca96b1694e0fb0ce91f369</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>KernelSize</name>
      <anchorfile>classmirtk_1_1GaussianBlurring.html</anchorfile>
      <anchor>a422ee0a5dd57839291a74a9c384633d2</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>SeparableConvolution&lt; TVoxel &gt;::KernelType</type>
      <name>KernelType</name>
      <anchorfile>classmirtk_1_1GaussianBlurring.html</anchorfile>
      <anchor>ac05fc3b0b63b152e1d3b5edb01555417</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GaussianBlurring.html</anchorfile>
      <anchor>a51620434edde0b341a565fece6137d44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>UniquePtr&lt; KernelType &gt;</type>
      <name>InitializeKernel</name>
      <anchorfile>classmirtk_1_1GaussianBlurring.html</anchorfile>
      <anchor>a5341336778760591bc89c58a95369f6e</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1GaussianBlurring.html</anchorfile>
      <anchor>a7119f5bb0e3b0d1877f55018e69fee6d</anchor>
      <arglist>(double, SigmaX)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1GaussianBlurring.html</anchorfile>
      <anchor>a5fd13d4718c7738a2379bdb5951d71f2</anchor>
      <arglist>(double, SigmaY)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1GaussianBlurring.html</anchorfile>
      <anchor>ad32729aed269f484c91c0e2ba7abcc12</anchor>
      <arglist>(double, SigmaZ)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1GaussianBlurring.html</anchorfile>
      <anchor>a8c395d5e8ab8beadd853513fc52ff46b</anchor>
      <arglist>(double, SigmaT)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GaussianBlurring2D</name>
    <filename>classmirtk_1_1GaussianBlurring2D.html</filename>
    <templarg></templarg>
    <base>mirtk::GaussianBlurring</base>
    <member kind="function">
      <type></type>
      <name>GaussianBlurring2D</name>
      <anchorfile>classmirtk_1_1GaussianBlurring2D.html</anchorfile>
      <anchor>a8089d1c8ff9067d3d9572d778329df9b</anchor>
      <arglist>(double=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianBlurring2D</name>
      <anchorfile>classmirtk_1_1GaussianBlurring2D.html</anchorfile>
      <anchor>a4ad79fcc093c3b322bc847deca80658f</anchor>
      <arglist>(double, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GaussianBlurring2D</name>
      <anchorfile>classmirtk_1_1GaussianBlurring2D.html</anchorfile>
      <anchor>a650f897ca913c5e273b373e2734653c4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GaussianBlurring4D</name>
    <filename>classmirtk_1_1GaussianBlurring4D.html</filename>
    <templarg></templarg>
    <base>mirtk::GaussianBlurring</base>
    <member kind="function">
      <type></type>
      <name>GaussianBlurring4D</name>
      <anchorfile>classmirtk_1_1GaussianBlurring4D.html</anchorfile>
      <anchor>aed1a8125d3982a2ffe38d452ba50f2c3</anchor>
      <arglist>(double=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianBlurring4D</name>
      <anchorfile>classmirtk_1_1GaussianBlurring4D.html</anchorfile>
      <anchor>a107dd1e032577cffbd5f18293102f37f</anchor>
      <arglist>(double, double, double, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GaussianBlurring4D</name>
      <anchorfile>classmirtk_1_1GaussianBlurring4D.html</anchorfile>
      <anchor>a10bede5586cd43f91ed8796908ec4ff6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GaussianBlurringWithPadding</name>
    <filename>classmirtk_1_1GaussianBlurringWithPadding.html</filename>
    <templarg></templarg>
    <base>mirtk::GaussianBlurring</base>
    <member kind="function">
      <type></type>
      <name>GaussianBlurringWithPadding</name>
      <anchorfile>classmirtk_1_1GaussianBlurringWithPadding.html</anchorfile>
      <anchor>abb87f17ebc227a42e97aeaec7dad23cb</anchor>
      <arglist>(double, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianBlurringWithPadding</name>
      <anchorfile>classmirtk_1_1GaussianBlurringWithPadding.html</anchorfile>
      <anchor>a614e7a8b4c85590d30bb7a1c3512afc6</anchor>
      <arglist>(double, double, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianBlurringWithPadding</name>
      <anchorfile>classmirtk_1_1GaussianBlurringWithPadding.html</anchorfile>
      <anchor>a422001406e5a7e8ba5f2492933a3be36</anchor>
      <arglist>(double, double, double, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianBlurringWithPadding</name>
      <anchorfile>classmirtk_1_1GaussianBlurringWithPadding.html</anchorfile>
      <anchor>a2f1462ef7c7f6b9c00c71580b927ff9f</anchor>
      <arglist>(double, double, double, double, VoxelType)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GaussianBlurringWithPadding2D</name>
    <filename>classmirtk_1_1GaussianBlurringWithPadding2D.html</filename>
    <templarg></templarg>
    <base>mirtk::GaussianBlurringWithPadding</base>
    <member kind="function">
      <type></type>
      <name>GaussianBlurringWithPadding2D</name>
      <anchorfile>classmirtk_1_1GaussianBlurringWithPadding2D.html</anchorfile>
      <anchor>a6de7aa0bd131bfe44a7340eb124da3f9</anchor>
      <arglist>(double=1.0, VoxelType=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianBlurringWithPadding2D</name>
      <anchorfile>classmirtk_1_1GaussianBlurringWithPadding2D.html</anchorfile>
      <anchor>ac03235ad84ab390cfc629144392616df</anchor>
      <arglist>(double, double, VoxelType)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GaussianErrorFunction</name>
    <filename>classmirtk_1_1GaussianErrorFunction.html</filename>
    <base>mirtk::RadialErrorFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Derivative</name>
      <anchorfile>classmirtk_1_1GaussianErrorFunction.html</anchorfile>
      <anchor>a7a5cf540a35ece441e02d8277f4bdf69</anchor>
      <arglist>(double d) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianErrorFunction</name>
      <anchorfile>classmirtk_1_1GaussianErrorFunction.html</anchorfile>
      <anchor>ad0495cc5fbf8a20a5bea33640a3f239f</anchor>
      <arglist>(double sigma=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianErrorFunction</name>
      <anchorfile>classmirtk_1_1GaussianErrorFunction.html</anchorfile>
      <anchor>a62c561a8c0aa8488d9f2f24a46b252be</anchor>
      <arglist>(const GaussianErrorFunction &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RadialErrorFunction *</type>
      <name>NewInstance</name>
      <anchorfile>classmirtk_1_1GaussianErrorFunction.html</anchorfile>
      <anchor>a88f891e30736c35555e73e00ef83a7e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1GaussianErrorFunction.html</anchorfile>
      <anchor>a5a90feea7b2414d2dd3349c80ee2a043</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1GaussianErrorFunction.html</anchorfile>
      <anchor>acbc9aed1b5eb18cffe3c3ee5f5d2177c</anchor>
      <arglist>(const char *name, const char *value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TypeId</type>
      <name>Type</name>
      <anchorfile>classmirtk_1_1GaussianErrorFunction.html</anchorfile>
      <anchor>a9b376b7761c15a754a66a87edb3d5cf3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Value</name>
      <anchorfile>classmirtk_1_1GaussianErrorFunction.html</anchorfile>
      <anchor>a0168ff04522fa2e7f23579aa626c9606</anchor>
      <arglist>(double d) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GaussianErrorFunction</name>
      <anchorfile>classmirtk_1_1GaussianErrorFunction.html</anchorfile>
      <anchor>a90f518c2de28d66af78f473f77fc61f2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GaussianInterpolateImageFunction</name>
    <filename>classmirtk_1_1GaussianInterpolateImageFunction.html</filename>
    <base>GenericGaussianInterpolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>GaussianInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GaussianInterpolateImageFunction.html</anchorfile>
      <anchor>ae3f61bba2cf9f9172a51a19f490468ce</anchor>
      <arglist>(double sigma=1.0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GaussianInterpolateImageFunction2D</name>
    <filename>classmirtk_1_1GaussianInterpolateImageFunction2D.html</filename>
    <base>GenericGaussianInterpolateImageFunction2D&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>GaussianInterpolateImageFunction2D</name>
      <anchorfile>classmirtk_1_1GaussianInterpolateImageFunction2D.html</anchorfile>
      <anchor>aa41ab52d771ce63db839cd5bc4260734</anchor>
      <arglist>(double sigma)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GaussianInterpolateImageFunction3D</name>
    <filename>classmirtk_1_1GaussianInterpolateImageFunction3D.html</filename>
    <base>GenericGaussianInterpolateImageFunction3D&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>GaussianInterpolateImageFunction3D</name>
      <anchorfile>classmirtk_1_1GaussianInterpolateImageFunction3D.html</anchorfile>
      <anchor>a827dabcddcab053fabf6bfce5c3f1e6d</anchor>
      <arglist>(double sigma)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GaussianInterpolateImageFunction4D</name>
    <filename>classmirtk_1_1GaussianInterpolateImageFunction4D.html</filename>
    <base>GenericGaussianInterpolateImageFunction4D&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>GaussianInterpolateImageFunction4D</name>
      <anchorfile>classmirtk_1_1GaussianInterpolateImageFunction4D.html</anchorfile>
      <anchor>aaf464b8d5d22f57e7ac04f9449742cfa</anchor>
      <arglist>(double sigma)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GaussianPyramidFilter</name>
    <filename>classmirtk_1_1GaussianPyramidFilter.html</filename>
    <templarg></templarg>
    <base>mirtk::ImageToImage</base>
    <member kind="function">
      <type></type>
      <name>GaussianPyramidFilter</name>
      <anchorfile>classmirtk_1_1GaussianPyramidFilter.html</anchorfile>
      <anchor>a6e8fcb240fe4012d37283260a72f6429</anchor>
      <arglist>(int=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianPyramidFilter</name>
      <anchorfile>classmirtk_1_1GaussianPyramidFilter.html</anchorfile>
      <anchor>acccd89a10674f586c093035d3fae0ebb</anchor>
      <arglist>(int, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1GaussianPyramidFilter.html</anchorfile>
      <anchor>a277494685d4bc2ebc891a1477999890a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Downsample</name>
      <anchorfile>classmirtk_1_1GaussianPyramidFilter.html</anchorfile>
      <anchor>a15e79a153e279ca855bc7b3f3b3dc56e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GaussianPyramidFilter.html</anchorfile>
      <anchor>a46e07628c956cbf36a27e365f83caf11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Upsample</name>
      <anchorfile>classmirtk_1_1GaussianPyramidFilter.html</anchorfile>
      <anchor>aed885dab1e2f8a18ab473668154819f5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericBSplineInterpolateImageFunction</name>
    <filename>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericInterpolateImageFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingInterval</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>abebaa1c87404fb700418693fcb21dee8</anchor>
      <arglist>(double, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericBSplineInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a027cd69df9e218516bc1c88b8058a0dc</anchor>
      <arglist>(int=3)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a9b69b0116de07d9387e45a0614e1cb3a</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>aff48ff2f8659351c9320ebabe635b38f</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a83861f7998630a155d645152c2b3703c</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a745c109fb8603e313065947bdcf36869</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a48e53f684154633c4f37113e5f85a37f</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>abf06ddb2a8e22fa17a0a36ee9a2ae37e</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ac5c2cd394defe54ae6e9988114d6b783</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a8e0b4db3019602a20753aeb7c7088e2a</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a33f1046203c76fca80c4a296dc57a69d</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a3df70a6093e2695917705f9451fed916</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ac79e9e70b80a49359a6b978fd82fbf8d</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a4e8174a40554fb74ab90881a9f3c293e</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>aebfd2100ecd7ca9e22e5448fd3f397d8</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>afa0045fbe23e538e68ed0fd3eec34f73</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>acfa1958fbbb2d2111d7a9100258e1925</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a38d2e5e7d8fdc37998a318f1464ebd38</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a336c925d35687a7e434beeac532f62ac</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a657d8e56d2c2e14070dfdfaeb0f05d1b</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a03f4bae974f3463841058d241d116cec</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a4c0ee8de91b336ad95f9fbbea59c694b</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a61f23af8a52ff5051c69674ce84b8f53</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>aa2c85d05ee58a4a4c20810deee383483</anchor>
      <arglist>(bool, UseInputCoefficients)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a6be9e40933ca779c9fc0e495927cd9e7</anchor>
      <arglist>(CoefficientImage, Coefficient)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkComponentMacro</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>aa191793c31a4ea2963e4549800e9905c</anchor>
      <arglist>(CoefficientExtrapolator, InfiniteCoefficient)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a8e0f85d10a9679455ec81ced6797edc5</anchor>
      <arglist>(int, SplineDegree)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a73b8b9119ece70b6b8f60f717fd92e32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericBSplineInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a38148750922f91af64841f2f21143fd9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericBSplineInterpolateImageFunction2D</name>
    <filename>classmirtk_1_1GenericBSplineInterpolateImageFunction2D.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericBSplineInterpolateImageFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericBSplineInterpolateImageFunction2D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a3c10fd95a531ae5c415195b87054d0c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>ac85be520704ff36aac6e4021aa8a356c</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a84ef738274c8a4d285765b94735396c3</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a35bbbea0e9ae556fbfe2e4a9498ccb25</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>add6f2ef18f458b7be8c7513873f2a5a9</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>ae2fb8086eae7744d1672bfd2ca986e51</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a5d2edc3e723bd8b687fd798aa00add16</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a82deeba0bd389c9d30ef2e1214d44ad4</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>adc3166ed925c757188c72472a9230d1b</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericBSplineInterpolateImageFunction2D&lt; BaseImage &gt;</name>
    <filename>classmirtk_1_1GenericBSplineInterpolateImageFunction2D.html</filename>
    <base>GenericBSplineInterpolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>GenericBSplineInterpolateImageFunction2D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a3c10fd95a531ae5c415195b87054d0c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>ac85be520704ff36aac6e4021aa8a356c</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a84ef738274c8a4d285765b94735396c3</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a35bbbea0e9ae556fbfe2e4a9498ccb25</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>add6f2ef18f458b7be8c7513873f2a5a9</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>ae2fb8086eae7744d1672bfd2ca986e51</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a5d2edc3e723bd8b687fd798aa00add16</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a82deeba0bd389c9d30ef2e1214d44ad4</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>adc3166ed925c757188c72472a9230d1b</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericBSplineInterpolateImageFunction3D</name>
    <filename>classmirtk_1_1GenericBSplineInterpolateImageFunction3D.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericBSplineInterpolateImageFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericBSplineInterpolateImageFunction3D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a597e2aae4bdcee45b1c13e94e1e0ea73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a6d98e1c81a7a11c8439fc28503b55e2f</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a0bec70af6ad63d4f867e72c3e47c2300</anchor>
      <arglist>(const TOtherImage *, double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a4ea0bd9b8ee7905e5cf3be0b30fb3d16</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a11ad7f19b5e62e8c93ca0635ed706499</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a7b25e9066008b4ac16be5e0f1a21eb73</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a49676130f40c1b3bd952c4d356469cd2</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a3dd50676efd3b8f1893ae1444585b074</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>ac76ce028e4a01133016c18fd1a79473c</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericBSplineInterpolateImageFunction3D&lt; BaseImage &gt;</name>
    <filename>classmirtk_1_1GenericBSplineInterpolateImageFunction3D.html</filename>
    <base>GenericBSplineInterpolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>GenericBSplineInterpolateImageFunction3D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a597e2aae4bdcee45b1c13e94e1e0ea73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a6d98e1c81a7a11c8439fc28503b55e2f</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a0bec70af6ad63d4f867e72c3e47c2300</anchor>
      <arglist>(const TOtherImage *, double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a4ea0bd9b8ee7905e5cf3be0b30fb3d16</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a11ad7f19b5e62e8c93ca0635ed706499</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a7b25e9066008b4ac16be5e0f1a21eb73</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a49676130f40c1b3bd952c4d356469cd2</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a3dd50676efd3b8f1893ae1444585b074</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>ac76ce028e4a01133016c18fd1a79473c</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericBSplineInterpolateImageFunction4D</name>
    <filename>classmirtk_1_1GenericBSplineInterpolateImageFunction4D.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericBSplineInterpolateImageFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericBSplineInterpolateImageFunction4D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>ac7ccf46f0433e75c1a191875683f2507</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a4eaf9f4645741c95fdf1ed5f767a52d9</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a93ed1253980eef292ca9b57ad5373e8f</anchor>
      <arglist>(const TOtherImage *, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a11105c1fcbe42383f27d02480efba6b1</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a7cc3480c956143e916802575fdef8446</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>ae28ec40879c914ceaa7d9bd0648264c3</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a77b94c2c1ab5073f8320a241f012c5bb</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a85aa6922275f2d6faab300e44392726c</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>ac6434d2719dc61c236400a3a02ed8958</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericBSplineInterpolateImageFunction4D&lt; BaseImage &gt;</name>
    <filename>classmirtk_1_1GenericBSplineInterpolateImageFunction4D.html</filename>
    <base>GenericBSplineInterpolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>GenericBSplineInterpolateImageFunction4D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>ac7ccf46f0433e75c1a191875683f2507</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a4eaf9f4645741c95fdf1ed5f767a52d9</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a93ed1253980eef292ca9b57ad5373e8f</anchor>
      <arglist>(const TOtherImage *, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a11105c1fcbe42383f27d02480efba6b1</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a7cc3480c956143e916802575fdef8446</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>ae28ec40879c914ceaa7d9bd0648264c3</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a77b94c2c1ab5073f8320a241f012c5bb</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a85aa6922275f2d6faab300e44392726c</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>ac6434d2719dc61c236400a3a02ed8958</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericBSplineInterpolateImageFunction&lt; BaseImage &gt;</name>
    <filename>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</filename>
    <base>GenericInterpolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingInterval</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>abebaa1c87404fb700418693fcb21dee8</anchor>
      <arglist>(double, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericBSplineInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a027cd69df9e218516bc1c88b8058a0dc</anchor>
      <arglist>(int=3)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a9b69b0116de07d9387e45a0614e1cb3a</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>aff48ff2f8659351c9320ebabe635b38f</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a83861f7998630a155d645152c2b3703c</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a745c109fb8603e313065947bdcf36869</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a48e53f684154633c4f37113e5f85a37f</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>abf06ddb2a8e22fa17a0a36ee9a2ae37e</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ac5c2cd394defe54ae6e9988114d6b783</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a8e0b4db3019602a20753aeb7c7088e2a</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a33f1046203c76fca80c4a296dc57a69d</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a3df70a6093e2695917705f9451fed916</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ac79e9e70b80a49359a6b978fd82fbf8d</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a4e8174a40554fb74ab90881a9f3c293e</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>aebfd2100ecd7ca9e22e5448fd3f397d8</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>afa0045fbe23e538e68ed0fd3eec34f73</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>acfa1958fbbb2d2111d7a9100258e1925</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a38d2e5e7d8fdc37998a318f1464ebd38</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a336c925d35687a7e434beeac532f62ac</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a657d8e56d2c2e14070dfdfaeb0f05d1b</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a03f4bae974f3463841058d241d116cec</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a4c0ee8de91b336ad95f9fbbea59c694b</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a61f23af8a52ff5051c69674ce84b8f53</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>aa2c85d05ee58a4a4c20810deee383483</anchor>
      <arglist>(bool, UseInputCoefficients)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a6be9e40933ca779c9fc0e495927cd9e7</anchor>
      <arglist>(CoefficientImage, Coefficient)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkComponentMacro</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>aa191793c31a4ea2963e4549800e9905c</anchor>
      <arglist>(CoefficientExtrapolator, InfiniteCoefficient)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a8e0f85d10a9679455ec81ced6797edc5</anchor>
      <arglist>(int, SplineDegree)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a73b8b9119ece70b6b8f60f717fd92e32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericBSplineInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a38148750922f91af64841f2f21143fd9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericConstExtrapolateImageFunction</name>
    <filename>classmirtk_1_1GenericConstExtrapolateImageFunction.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericExtrapolateImageFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericConstExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericConstExtrapolateImageFunction.html</anchorfile>
      <anchor>a2b107f35edb57100b05caac28d4d228c</anchor>
      <arglist>(double padding_value=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericConstExtrapolateImageFunction.html</anchorfile>
      <anchor>a66ec2ba72d0e9c97b6beb7b2a2e85159</anchor>
      <arglist>(int i, int j, int k=0, int l=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericConstExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericConstExtrapolateImageFunction.html</anchorfile>
      <anchor>aa9b23f49ed8401d898f159a65af6f94f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericConstExtrapolateImageFunction&lt; BaseImage &gt;</name>
    <filename>classmirtk_1_1GenericConstExtrapolateImageFunction.html</filename>
    <base>GenericExtrapolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>GenericConstExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericConstExtrapolateImageFunction.html</anchorfile>
      <anchor>a2b107f35edb57100b05caac28d4d228c</anchor>
      <arglist>(double padding_value=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericConstExtrapolateImageFunction.html</anchorfile>
      <anchor>a66ec2ba72d0e9c97b6beb7b2a2e85159</anchor>
      <arglist>(int i, int j, int k=0, int l=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericConstExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericConstExtrapolateImageFunction.html</anchorfile>
      <anchor>aa9b23f49ed8401d898f159a65af6f94f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericConstExtrapolateImageFunctionWithPeriodicTime</name>
    <filename>classmirtk_1_1GenericConstExtrapolateImageFunctionWithPeriodicTime.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericConstExtrapolateImageFunction</base>
    <member kind="typedef">
      <type>TImage</type>
      <name>ImageType</name>
      <anchorfile>classmirtk_1_1GenericConstExtrapolateImageFunctionWithPeriodicTime.html</anchorfile>
      <anchor>a29ddad4777af2e763876f8ec6a69aad2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImageType::RealType</type>
      <name>RealType</name>
      <anchorfile>classmirtk_1_1GenericConstExtrapolateImageFunctionWithPeriodicTime.html</anchorfile>
      <anchor>a2d5116c841605e43d72b1b6282798804</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImageType::VoxelType</type>
      <name>VoxelType</name>
      <anchorfile>classmirtk_1_1GenericConstExtrapolateImageFunctionWithPeriodicTime.html</anchorfile>
      <anchor>a26af4f1cab967b1187956e40344aeb07</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericConstExtrapolateImageFunctionWithPeriodicTime</name>
      <anchorfile>classmirtk_1_1GenericConstExtrapolateImageFunctionWithPeriodicTime.html</anchorfile>
      <anchor>af9ae11778290f521dc38a940b7b2b83f</anchor>
      <arglist>(double padding_value=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericConstExtrapolateImageFunctionWithPeriodicTime.html</anchorfile>
      <anchor>adddc548fa03abad5eac8bb7fb2d31a8f</anchor>
      <arglist>(int i, int j, int k=0, int l=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericConstExtrapolateImageFunctionWithPeriodicTime</name>
      <anchorfile>classmirtk_1_1GenericConstExtrapolateImageFunctionWithPeriodicTime.html</anchorfile>
      <anchor>a9c5b710d311a24dbf1a24601fc23c1f1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericConstExtrapolateImageFunctionWithPeriodicTime&lt; BaseImage &gt;</name>
    <filename>classmirtk_1_1GenericConstExtrapolateImageFunctionWithPeriodicTime.html</filename>
    <base>GenericConstExtrapolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="typedef">
      <type>BaseImage</type>
      <name>ImageType</name>
      <anchorfile>classmirtk_1_1GenericConstExtrapolateImageFunctionWithPeriodicTime.html</anchorfile>
      <anchor>a29ddad4777af2e763876f8ec6a69aad2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImageType::RealType</type>
      <name>RealType</name>
      <anchorfile>classmirtk_1_1GenericConstExtrapolateImageFunctionWithPeriodicTime.html</anchorfile>
      <anchor>a2d5116c841605e43d72b1b6282798804</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImageType::VoxelType</type>
      <name>VoxelType</name>
      <anchorfile>classmirtk_1_1GenericConstExtrapolateImageFunctionWithPeriodicTime.html</anchorfile>
      <anchor>a26af4f1cab967b1187956e40344aeb07</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericConstExtrapolateImageFunctionWithPeriodicTime</name>
      <anchorfile>classmirtk_1_1GenericConstExtrapolateImageFunctionWithPeriodicTime.html</anchorfile>
      <anchor>af9ae11778290f521dc38a940b7b2b83f</anchor>
      <arglist>(double padding_value=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericConstExtrapolateImageFunctionWithPeriodicTime.html</anchorfile>
      <anchor>adddc548fa03abad5eac8bb7fb2d31a8f</anchor>
      <arglist>(int i, int j, int k=0, int l=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericConstExtrapolateImageFunctionWithPeriodicTime</name>
      <anchorfile>classmirtk_1_1GenericConstExtrapolateImageFunctionWithPeriodicTime.html</anchorfile>
      <anchor>a9c5b710d311a24dbf1a24601fc23c1f1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericCSplineInterpolateImageFunction</name>
    <filename>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericInterpolateImageFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingInterval</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a63ab7407cc9aca5a1a1dfd6024e2367c</anchor>
      <arglist>(double, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericCSplineInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a44b128b0dbbd37856e074b0cbfad97de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ae5a5b479ccb6e50e5fd43e44a2365411</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a744352e711ffd73b5a6b8bd5c977c9d2</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>abbd28438c609097e3824e119691c937d</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>af11ed96ca4de522aee0837a7a1ca89ff</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>af318dcf4a14b5347cc6fd7ed779be7f7</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a880116cb6b4b358258837a40bbafb6ce</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a7a119da015c1e7d205e11aca8edad90b</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a3486319f6666caa56b77c8c4140576ed</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a72ca57c509102fd3f4fa73675a9b08a8</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a337eb5b7edc1c2710db7adfb76613b2a</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a2520d6de89c74a713bfcfd6998f6d956</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>acc1c7db7012c40908cf33db6fc012551</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a6f23c12f52489401015310e1a4b7b2c3</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ad3d39e8c3a559a8feb8aa01ad45a0b5d</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a6cc791fade091a93bcd7d93dc04e15df</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a17e4d28db2d2ccda8ae9dc8c5fe222bb</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a6ac512d8948fe4107a19adc4dc4b8621</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a8ee10e71748f528c073aedfdc7d7a411</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a01a3b30bf623745f8e95a85c39537623</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ac4dcd0a9ac16271c22cda4e4ee59520d</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>abd70ed31525e0bf6e391b3df990b2843</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericCSplineInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ac2a7c1e0f8295bcb0cee419c8340bafe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static Real</type>
      <name>CSpline</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a006f01907e3dfeebe67193a478a3fede</anchor>
      <arglist>(Real)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericCSplineInterpolateImageFunction2D</name>
    <filename>classmirtk_1_1GenericCSplineInterpolateImageFunction2D.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericCSplineInterpolateImageFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericCSplineInterpolateImageFunction2D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>af5cb443f94e555cff1ec7961ca7c32e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a54ac3f91d2a54d661e1618870824395d</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>aacff21a71f611728765b14d4997dad0d</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>afcad4c98eb03a6b58e2a49cce7f0c29c</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a9101a75167ffe6b0ae4fc8eaa354ae8e</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>ac27c67d13ad1ef5dc1ed7bd5afb27fa9</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>aaf9ebf05a1f5af082b742585cb932f57</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a73d250e254431ceabb49637c9ff946b6</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a9410535e2618993102a2ab726a052e86</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericCSplineInterpolateImageFunction2D&lt; BaseImage &gt;</name>
    <filename>classmirtk_1_1GenericCSplineInterpolateImageFunction2D.html</filename>
    <base>GenericCSplineInterpolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>GenericCSplineInterpolateImageFunction2D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>af5cb443f94e555cff1ec7961ca7c32e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a54ac3f91d2a54d661e1618870824395d</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>aacff21a71f611728765b14d4997dad0d</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>afcad4c98eb03a6b58e2a49cce7f0c29c</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a9101a75167ffe6b0ae4fc8eaa354ae8e</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>ac27c67d13ad1ef5dc1ed7bd5afb27fa9</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>aaf9ebf05a1f5af082b742585cb932f57</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a73d250e254431ceabb49637c9ff946b6</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a9410535e2618993102a2ab726a052e86</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericCSplineInterpolateImageFunction3D</name>
    <filename>classmirtk_1_1GenericCSplineInterpolateImageFunction3D.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericCSplineInterpolateImageFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericCSplineInterpolateImageFunction3D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a0e0d6b684a1b9aa0084742365e17a4d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>ac72461a3e2c9aab77bf37c06be812749</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a84a909c40f301385bb58c4278bc0f1cf</anchor>
      <arglist>(const TOtherImage *, double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a6b63afba35e781f13e4bed0996039ab9</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>ab2fab931488f568075f53afbfaf95002</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a2ba2a33ef47274a6c023000d5c5d5970</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>af8c66c93ebff95298f56d0b174395099</anchor>
      <arglist>(const TOtherImage *, double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>acb119c3dfbcb7237dcdd16c5aaee9492</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>afdf1782f841ead7d845dc09f4352b7c1</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericCSplineInterpolateImageFunction3D&lt; BaseImage &gt;</name>
    <filename>classmirtk_1_1GenericCSplineInterpolateImageFunction3D.html</filename>
    <base>GenericCSplineInterpolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>GenericCSplineInterpolateImageFunction3D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a0e0d6b684a1b9aa0084742365e17a4d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>ac72461a3e2c9aab77bf37c06be812749</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a84a909c40f301385bb58c4278bc0f1cf</anchor>
      <arglist>(const TOtherImage *, double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a6b63afba35e781f13e4bed0996039ab9</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>ab2fab931488f568075f53afbfaf95002</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a2ba2a33ef47274a6c023000d5c5d5970</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>af8c66c93ebff95298f56d0b174395099</anchor>
      <arglist>(const TOtherImage *, double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>acb119c3dfbcb7237dcdd16c5aaee9492</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>afdf1782f841ead7d845dc09f4352b7c1</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericCSplineInterpolateImageFunction4D</name>
    <filename>classmirtk_1_1GenericCSplineInterpolateImageFunction4D.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericCSplineInterpolateImageFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericCSplineInterpolateImageFunction4D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>ae55ca01ef31b48bb87e6c4b7fbe71667</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a413558dd4bc78ee48ef949325434fd0b</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a2cf28d98fc46328dd1e6056ed545449e</anchor>
      <arglist>(const TOtherImage *, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>ab5e23e0694605435dad59c65db6ab969</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>acd059454f6138f79fdc70d636e0b139e</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>acaca25cbbc33e5a0cec3c520e57cdec5</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a37c6c9f13020406909e01ee431b59dad</anchor>
      <arglist>(const TOtherImage *, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a4867133a99b60b6df91031ddc65589d7</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a0d7a44485cc32ca0e801209fffd57037</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericCSplineInterpolateImageFunction4D&lt; BaseImage &gt;</name>
    <filename>classmirtk_1_1GenericCSplineInterpolateImageFunction4D.html</filename>
    <base>GenericCSplineInterpolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>GenericCSplineInterpolateImageFunction4D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>ae55ca01ef31b48bb87e6c4b7fbe71667</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a413558dd4bc78ee48ef949325434fd0b</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a2cf28d98fc46328dd1e6056ed545449e</anchor>
      <arglist>(const TOtherImage *, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>ab5e23e0694605435dad59c65db6ab969</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>acd059454f6138f79fdc70d636e0b139e</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>acaca25cbbc33e5a0cec3c520e57cdec5</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a37c6c9f13020406909e01ee431b59dad</anchor>
      <arglist>(const TOtherImage *, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a4867133a99b60b6df91031ddc65589d7</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a0d7a44485cc32ca0e801209fffd57037</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericCSplineInterpolateImageFunction&lt; BaseImage &gt;</name>
    <filename>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</filename>
    <base>GenericInterpolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingInterval</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a63ab7407cc9aca5a1a1dfd6024e2367c</anchor>
      <arglist>(double, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericCSplineInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a44b128b0dbbd37856e074b0cbfad97de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ae5a5b479ccb6e50e5fd43e44a2365411</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a744352e711ffd73b5a6b8bd5c977c9d2</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>abbd28438c609097e3824e119691c937d</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>af11ed96ca4de522aee0837a7a1ca89ff</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>af318dcf4a14b5347cc6fd7ed779be7f7</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a880116cb6b4b358258837a40bbafb6ce</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a7a119da015c1e7d205e11aca8edad90b</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a3486319f6666caa56b77c8c4140576ed</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a72ca57c509102fd3f4fa73675a9b08a8</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a337eb5b7edc1c2710db7adfb76613b2a</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a2520d6de89c74a713bfcfd6998f6d956</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>acc1c7db7012c40908cf33db6fc012551</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a6f23c12f52489401015310e1a4b7b2c3</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ad3d39e8c3a559a8feb8aa01ad45a0b5d</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a6cc791fade091a93bcd7d93dc04e15df</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a17e4d28db2d2ccda8ae9dc8c5fe222bb</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a6ac512d8948fe4107a19adc4dc4b8621</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a8ee10e71748f528c073aedfdc7d7a411</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a01a3b30bf623745f8e95a85c39537623</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ac4dcd0a9ac16271c22cda4e4ee59520d</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>abd70ed31525e0bf6e391b3df990b2843</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericCSplineInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ac2a7c1e0f8295bcb0cee419c8340bafe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static Real</type>
      <name>CSpline</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a006f01907e3dfeebe67193a478a3fede</anchor>
      <arglist>(Real)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericCubicBSplineInterpolateImageFunction</name>
    <filename>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericInterpolateImageFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingInterval</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a5bf7e9f692e453eda938dc4cc504cc0b</anchor>
      <arglist>(double, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericCubicBSplineInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>aa5dfa769b9797d37ecf742b6135b4303</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a782ca2d70b05b6bb463a64442cacb7c9</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a7e3e5a3f9b5bf1acc58489dd4fde97a7</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a4e40da8cab731ab870c91e9c75cf5106</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>aac8117acd9ccd81fe935eba95913fd17</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a85dca4b84ebb8ef88af5f0e1c6dd46bc</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>af709ff1071003ba951266bde4599b6a8</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a5e70fec41cba853db3695ed07737253e</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>adca0ea283a4c95d1aab62504f0f0c7dc</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ab650bf00794aa2fe26566249f954f4c3</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside2D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a7facb4a2260a097ea2af5686c2d1c44e</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside3D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a28b9f5e95a6389cb4151a215197b7d92</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside4D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a6eea945b483191030f13967524a921de</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>aee1e11308c58e45f3c9dc7eb633adabe</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a0d4c5a133f56b557ed7b74fb12040d80</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a7f9d309f4f4d707b7af210913792ccc0</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a9cc8f04b95a3ee2b51ac9409557e36e9</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a6f1f2f79a850a3051107733733f25e08</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a036514a101502bee4b4d304165aec66b</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a863945f1b1495604e92039102f3446f6</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ad3bd90ea813d0b6691a544de6d7d65e6</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a74d6c8ef1fa9ba23c6a6ca9b3b5254c0</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a0168fb79951e02c17e4073e7ba3aad92</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a21d20b1823fae859ed94cb10d0c31167</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a4f0e0ae21848a6cb93859905d94dc832</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkAggregateMacro</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a3690d3eb9fea99d29ec00890deada290</anchor>
      <arglist>(CoefficientExtrapolator, InfiniteCoefficient)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ac9ee9c73bc0198e28fb0dca5aa0e53cb</anchor>
      <arglist>(bool, UseInputCoefficients)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a12370c7f675cb512bca3d556ecb5beda</anchor>
      <arglist>(CoefficientImage, Coefficient)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>af7cd264e7f289bc1ae3e89f2123e721e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericCubicBSplineInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>adb1542d7a6abeeab54ffc6d1ffa83c23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_s2</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a21f14400afe6a38c52a0149309ad1140</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericCubicBSplineInterpolateImageFunction2D</name>
    <filename>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction2D.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericCubicBSplineInterpolateImageFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericCubicBSplineInterpolateImageFunction2D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a0042f815bbdda3e019607e7e0b3592db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a05daaccfed3ca4acaf209918304def6e</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>aaeb3d9784006e88de87f8ae47e8754fc</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a3cb1a6da78c2bb7bdb6facb64c2cb842</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>ad1b3551fe0a5e6499f522bf19f4b2a67</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a6ecf9bc1ee81e215ecc2d8be4fc4c9c1</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a406f7349aa1d48982353f307b4835e42</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>adffd5d3dc3f00e3438023319116ca9f4</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>af5ed9778a5086eec892f6ddcab7de573</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericCubicBSplineInterpolateImageFunction2D&lt; BaseImage &gt;</name>
    <filename>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction2D.html</filename>
    <base>GenericCubicBSplineInterpolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>GenericCubicBSplineInterpolateImageFunction2D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a0042f815bbdda3e019607e7e0b3592db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a05daaccfed3ca4acaf209918304def6e</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>aaeb3d9784006e88de87f8ae47e8754fc</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a3cb1a6da78c2bb7bdb6facb64c2cb842</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>ad1b3551fe0a5e6499f522bf19f4b2a67</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a6ecf9bc1ee81e215ecc2d8be4fc4c9c1</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a406f7349aa1d48982353f307b4835e42</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>adffd5d3dc3f00e3438023319116ca9f4</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>af5ed9778a5086eec892f6ddcab7de573</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericCubicBSplineInterpolateImageFunction3D</name>
    <filename>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction3D.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericCubicBSplineInterpolateImageFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericCubicBSplineInterpolateImageFunction3D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a4ae143203c19782a52efedcda9df72a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a8f7f8911a4f281f1aa6b967c6948b0d2</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a360845d48577250edb8b0caf35f0d7b6</anchor>
      <arglist>(const TOtherImage *, double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a921ec4d9961b3d2dede1e86e1a1e18d8</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>af951b25309d8e9d2d60b08fd366c890f</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a6701dbdb4329623187632260d509cc6d</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a38cfb99a06052d2a5fa4a49eb80ba691</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a36f5683b93ea10e7c5693864fbef6c29</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a23edcdca98ecfdb95587ea70f3a7f569</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericCubicBSplineInterpolateImageFunction3D&lt; BaseImage &gt;</name>
    <filename>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction3D.html</filename>
    <base>GenericCubicBSplineInterpolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>GenericCubicBSplineInterpolateImageFunction3D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a4ae143203c19782a52efedcda9df72a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a8f7f8911a4f281f1aa6b967c6948b0d2</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a360845d48577250edb8b0caf35f0d7b6</anchor>
      <arglist>(const TOtherImage *, double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a921ec4d9961b3d2dede1e86e1a1e18d8</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>af951b25309d8e9d2d60b08fd366c890f</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a6701dbdb4329623187632260d509cc6d</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a38cfb99a06052d2a5fa4a49eb80ba691</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a36f5683b93ea10e7c5693864fbef6c29</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a23edcdca98ecfdb95587ea70f3a7f569</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericCubicBSplineInterpolateImageFunction4D</name>
    <filename>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction4D.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericCubicBSplineInterpolateImageFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericCubicBSplineInterpolateImageFunction4D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>aa0d51ce7627a015f0d42626fd0c0026f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a8aa20542eac61215f0d3674073ee12a0</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a053f3b971ef2ecf56ec9d975833f47dc</anchor>
      <arglist>(const TOtherImage *, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>aceef76d7851d74081698771591b71299</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a6097c1021e7e10010d85fcd3dbe7b450</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a5912a3ad5d8f9e4fcd4efa61c668f998</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>ac6bd94a062e53e8b43d176e6af93eecb</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>adbb46128cf1f76aea2eed58c2d91dce6</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a96841390aefef15f054fe4497843802f</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericCubicBSplineInterpolateImageFunction4D&lt; BaseImage &gt;</name>
    <filename>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction4D.html</filename>
    <base>GenericCubicBSplineInterpolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>GenericCubicBSplineInterpolateImageFunction4D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>aa0d51ce7627a015f0d42626fd0c0026f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a8aa20542eac61215f0d3674073ee12a0</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a053f3b971ef2ecf56ec9d975833f47dc</anchor>
      <arglist>(const TOtherImage *, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>aceef76d7851d74081698771591b71299</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a6097c1021e7e10010d85fcd3dbe7b450</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a5912a3ad5d8f9e4fcd4efa61c668f998</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>ac6bd94a062e53e8b43d176e6af93eecb</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>adbb46128cf1f76aea2eed58c2d91dce6</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a96841390aefef15f054fe4497843802f</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericCubicBSplineInterpolateImageFunction&lt; BaseImage &gt;</name>
    <filename>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</filename>
    <base>GenericInterpolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingInterval</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a5bf7e9f692e453eda938dc4cc504cc0b</anchor>
      <arglist>(double, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericCubicBSplineInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>aa5dfa769b9797d37ecf742b6135b4303</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a782ca2d70b05b6bb463a64442cacb7c9</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a7e3e5a3f9b5bf1acc58489dd4fde97a7</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a4e40da8cab731ab870c91e9c75cf5106</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>aac8117acd9ccd81fe935eba95913fd17</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a85dca4b84ebb8ef88af5f0e1c6dd46bc</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>af709ff1071003ba951266bde4599b6a8</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a5e70fec41cba853db3695ed07737253e</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>adca0ea283a4c95d1aab62504f0f0c7dc</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ab650bf00794aa2fe26566249f954f4c3</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside2D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a7facb4a2260a097ea2af5686c2d1c44e</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside3D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a28b9f5e95a6389cb4151a215197b7d92</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside4D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a6eea945b483191030f13967524a921de</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>aee1e11308c58e45f3c9dc7eb633adabe</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a0d4c5a133f56b557ed7b74fb12040d80</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a7f9d309f4f4d707b7af210913792ccc0</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a9cc8f04b95a3ee2b51ac9409557e36e9</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a6f1f2f79a850a3051107733733f25e08</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a036514a101502bee4b4d304165aec66b</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a863945f1b1495604e92039102f3446f6</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ad3bd90ea813d0b6691a544de6d7d65e6</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a74d6c8ef1fa9ba23c6a6ca9b3b5254c0</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a0168fb79951e02c17e4073e7ba3aad92</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a21d20b1823fae859ed94cb10d0c31167</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a4f0e0ae21848a6cb93859905d94dc832</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkAggregateMacro</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a3690d3eb9fea99d29ec00890deada290</anchor>
      <arglist>(CoefficientExtrapolator, InfiniteCoefficient)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ac9ee9c73bc0198e28fb0dca5aa0e53cb</anchor>
      <arglist>(bool, UseInputCoefficients)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a12370c7f675cb512bca3d556ecb5beda</anchor>
      <arglist>(CoefficientImage, Coefficient)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>af7cd264e7f289bc1ae3e89f2123e721e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericCubicBSplineInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>adb1542d7a6abeeab54ffc6d1ffa83c23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_s2</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a21f14400afe6a38c52a0149309ad1140</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericExtrapolateImageFunction</name>
    <filename>classmirtk_1_1GenericExtrapolateImageFunction.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::ExtrapolateImageFunction</base>
    <member kind="typedef">
      <type>TImage</type>
      <name>ImageType</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>a2123eaddddaf78310963cc153ddeee6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImageType::RealType</type>
      <name>RealType</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>a5eb86672130110e0511a3f800225c98d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImageType::VoxelType</type>
      <name>VoxelType</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>a8a4ca0e97b1cba01c2b9066000240580</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>ade807709eae17a562da7818ff6d84565</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>ae4a0f7ae8291f968d86f72e5a11331b8</anchor>
      <arglist>(int, int, int=0, int=0) const =0</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>aa5d4b9453dc016af0597dd9357e238bd</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>af641470f5ebb00dd7632fd165245bd1c</anchor>
      <arglist>(Vector &amp;, int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>a2beae9dfda53b731baa541438dabe0d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>acdc2a5f12172d70643623e8e089b257a</anchor>
      <arglist>(const BaseImage *)</arglist>
    </member>
    <member kind="function">
      <type>const ImageType *</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>a401199f18ed6b1f69af388db91286450</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>a295e207d08a8b73e24fa7461ab3648c4</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>a1dc8bfa1145e3ffe5b68596d50f98449</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>ac8281ced5e36c555a789cdcb3173cd72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GenericExtrapolateImageFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>a74b1dfd5f7128491a2e1f4f489aff634</anchor>
      <arglist>(enum ExtrapolationMode, const TImage *=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GenericExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>a455b22910e2a627b2a82e0156ec7f8ce</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericExtrapolateImageFunction&lt; BaseImage &gt;</name>
    <filename>classmirtk_1_1GenericExtrapolateImageFunction.html</filename>
    <base>mirtk::ExtrapolateImageFunction</base>
    <member kind="typedef">
      <type>BaseImage</type>
      <name>ImageType</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>a2123eaddddaf78310963cc153ddeee6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImageType::RealType</type>
      <name>RealType</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>a5eb86672130110e0511a3f800225c98d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImageType::VoxelType</type>
      <name>VoxelType</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>a8a4ca0e97b1cba01c2b9066000240580</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>ade807709eae17a562da7818ff6d84565</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>ae4a0f7ae8291f968d86f72e5a11331b8</anchor>
      <arglist>(int, int, int=0, int=0) const=0</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>aa5d4b9453dc016af0597dd9357e238bd</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>af641470f5ebb00dd7632fd165245bd1c</anchor>
      <arglist>(Vector &amp;, int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>a2beae9dfda53b731baa541438dabe0d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>acdc2a5f12172d70643623e8e089b257a</anchor>
      <arglist>(const BaseImage *)</arglist>
    </member>
    <member kind="function">
      <type>const ImageType *</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>a401199f18ed6b1f69af388db91286450</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>a295e207d08a8b73e24fa7461ab3648c4</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>a1dc8bfa1145e3ffe5b68596d50f98449</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>ac8281ced5e36c555a789cdcb3173cd72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GenericExtrapolateImageFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>a74b1dfd5f7128491a2e1f4f489aff634</anchor>
      <arglist>(enum ExtrapolationMode, const BaseImage *=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GenericExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>a455b22910e2a627b2a82e0156ec7f8ce</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericFastCubicBSplineInterpolateImageFunction</name>
    <filename>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericInterpolateImageFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingInterval</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a1f0159e2e56b01dcda9400c322c3d9e9</anchor>
      <arglist>(double, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateJacobianInside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a7919288ac7ace5e9501cd56b4c16c8d7</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateJacobianOutside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a20d4f7c16839b1da3d488df0c09e0460</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericFastCubicBSplineInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>af8d3892487ac3b9bbb8406aa90ab35b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ab772ff21ae93e39903c4f92cfce4fb1b</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ab2ef67a374e9d9123bb11b83249cef7f</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a23a6c9afffd8970ec238c8698cf100c3</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a416f4360e8586461b406f2e18235dcfd</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>adb30059b4e906bd93fd680914df21a98</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a27c7e93ad1f7790c3577da0306b6063c</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ad549208e0ede1b9337e374bc887d8f7b</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a432e5b689ca84ec5cf666cb541540e1d</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a3eb7530b683b0c4c62bc18379e479811</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside2D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>af625de473720e9b3c1957cb03885f7ee</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside3D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a3daccac587b85de49774d0ce75c6582b</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside4D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a72fd77ca1318c1c078e3b812c4bd5b63</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ad4e3431f667a5f0e9f9ed1f9857245e5</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a42c8534be3a2f61fd35f6513b9f23847</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>aed39c10fca08eeaf0bb5f8eecb92043e</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ad54e10ea963397ac29dc555dd55763f5</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a3999eff8115c6e3afe8a87d0540ea9be</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a61faa75b13b38d54ef23ae28fd613277</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a9ba0c560ec556f1958f21d93fc49992f</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ab40aea8cb824ba82df1a82fcf24a1de9</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a02c81dd5237310965aa100407472a1e1</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a1a7e74fdbc5082314219442402dd8c45</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a0b2715c76dd389dbdfcec6dd57087db3</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>aa9935117ddf9ec7fea46d235c7a89fcb</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ab391b0786b1488943a6b7ea0cb33cf39</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>abf919f1c291607fa92bf56ea607e3fa7</anchor>
      <arglist>(Matrix &amp;, const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian2D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ade3ee8216c5f3925123e738ad3fda92d</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian2D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>aa5a0ec3d5a33f4d63570767030ee7aee</anchor>
      <arglist>(Matrix &amp;, const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian3D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a1546b77203490e4d8f50487ccbf49e62</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian3D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a086808a780d927ea8c06665e4583ac1d</anchor>
      <arglist>(Matrix &amp;, const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian4D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a0dfc2cc5db759344ae2fcda67adf0c55</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian4D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a936c98a883482633c5efe198f10f843f</anchor>
      <arglist>(Matrix &amp;, const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkAggregateMacro</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>adfde265b6226e7b2b3439d392332da18</anchor>
      <arglist>(CoefficientExtrapolator, InfiniteCoefficient)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ac2382a121d500a5646b8d9eb803bf08b</anchor>
      <arglist>(bool, UseInputCoefficients)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a97203bad7342ec8490fda84c122136eb</anchor>
      <arglist>(CoefficientImage, Coefficient)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a2a24ecc3d0fbf52d73abef5959764179</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericFastCubicBSplineInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a52d2f8006b3153a9742ce29e6ccaf8a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_s2</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a6480adfe0bcfe2b5b9127b1e15bb2cf7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericFastCubicBSplineInterpolateImageFunction2D</name>
    <filename>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction2D.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericFastCubicBSplineInterpolateImageFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericFastCubicBSplineInterpolateImageFunction2D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a68bfe68a60b753f715910e322c69b8c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>ac7b69d4957a713dbc5d41d9817342dde</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>abbe05390de3e21d7b378b852737e4aea</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>ae107333c11cb5b3dc06ae5a4bd2129fa</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>af30967b2b41c59b75128a5406b38d099</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>ad707f0f080528f9d5705a521a1c22475</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a388c23abe65bed9f221add58696ef08c</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>aa0797f4820803676557651a5140fa5e6</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>aafa3c244f1e7e81b34547263b77b6d84</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericFastCubicBSplineInterpolateImageFunction2D&lt; BaseImage &gt;</name>
    <filename>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction2D.html</filename>
    <base>GenericFastCubicBSplineInterpolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>GenericFastCubicBSplineInterpolateImageFunction2D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a68bfe68a60b753f715910e322c69b8c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>ac7b69d4957a713dbc5d41d9817342dde</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>abbe05390de3e21d7b378b852737e4aea</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>ae107333c11cb5b3dc06ae5a4bd2129fa</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>af30967b2b41c59b75128a5406b38d099</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>ad707f0f080528f9d5705a521a1c22475</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a388c23abe65bed9f221add58696ef08c</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>aa0797f4820803676557651a5140fa5e6</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>aafa3c244f1e7e81b34547263b77b6d84</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericFastCubicBSplineInterpolateImageFunction2D&lt; CPImage &gt;</name>
    <filename>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction2D.html</filename>
    <base>GenericFastCubicBSplineInterpolateImageFunction&lt; CPImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>GenericFastCubicBSplineInterpolateImageFunction2D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a68bfe68a60b753f715910e322c69b8c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>ac7b69d4957a713dbc5d41d9817342dde</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>abbe05390de3e21d7b378b852737e4aea</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>ae107333c11cb5b3dc06ae5a4bd2129fa</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>af30967b2b41c59b75128a5406b38d099</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>ad707f0f080528f9d5705a521a1c22475</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a388c23abe65bed9f221add58696ef08c</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>aa0797f4820803676557651a5140fa5e6</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>aafa3c244f1e7e81b34547263b77b6d84</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericFastCubicBSplineInterpolateImageFunction3D</name>
    <filename>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction3D.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericFastCubicBSplineInterpolateImageFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericFastCubicBSplineInterpolateImageFunction3D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a6ca167561c48ba2b795b0b374ed1e0f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>aee4963036c5909cc41a25d1afafef6eb</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a757481df7942f547b319934124123209</anchor>
      <arglist>(const TOtherImage *, double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a670f0e83d9a1ba73d8eb5305195f51d9</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a7cd0df5f1f3ee4d23ebbcee31999f154</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a8c8773d0f4260983c3d998ba87b5f48b</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a502eb4315cb946d880e69fb08629db5a</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>aeade367e48d9969937bba9b4c2077648</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>ab3c0b5647b21ece6460cc9a7c5a2b92e</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericFastCubicBSplineInterpolateImageFunction3D&lt; BaseImage &gt;</name>
    <filename>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction3D.html</filename>
    <base>GenericFastCubicBSplineInterpolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>GenericFastCubicBSplineInterpolateImageFunction3D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a6ca167561c48ba2b795b0b374ed1e0f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>aee4963036c5909cc41a25d1afafef6eb</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a757481df7942f547b319934124123209</anchor>
      <arglist>(const TOtherImage *, double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a670f0e83d9a1ba73d8eb5305195f51d9</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a7cd0df5f1f3ee4d23ebbcee31999f154</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a8c8773d0f4260983c3d998ba87b5f48b</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a502eb4315cb946d880e69fb08629db5a</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>aeade367e48d9969937bba9b4c2077648</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>ab3c0b5647b21ece6460cc9a7c5a2b92e</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericFastCubicBSplineInterpolateImageFunction3D&lt; CPImage &gt;</name>
    <filename>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction3D.html</filename>
    <base>GenericFastCubicBSplineInterpolateImageFunction&lt; CPImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>GenericFastCubicBSplineInterpolateImageFunction3D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a6ca167561c48ba2b795b0b374ed1e0f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>aee4963036c5909cc41a25d1afafef6eb</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a757481df7942f547b319934124123209</anchor>
      <arglist>(const TOtherImage *, double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a670f0e83d9a1ba73d8eb5305195f51d9</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a7cd0df5f1f3ee4d23ebbcee31999f154</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a8c8773d0f4260983c3d998ba87b5f48b</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a502eb4315cb946d880e69fb08629db5a</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>aeade367e48d9969937bba9b4c2077648</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>ab3c0b5647b21ece6460cc9a7c5a2b92e</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericFastCubicBSplineInterpolateImageFunction4D</name>
    <filename>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction4D.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericFastCubicBSplineInterpolateImageFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericFastCubicBSplineInterpolateImageFunction4D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>ad3ef5e3f0dc7990234a911b7d880a416</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a285553e608cc2c4e017db294192b7e83</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a44247e877cebd470e54e168bfb80b053</anchor>
      <arglist>(const TOtherImage *, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a8da49b2cabe0a6ecbf92f63fc8263155</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a2c49233cfb66e13c5cb3355a19b62b3a</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a7fa0fd1f959aa2a9e7b9cf21e88559a9</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a798705fa24c37d15b9ab4d9703695aa8</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a925c1d5b47e49216bf18250dff1e59bc</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a637fb4f6dfd36628dd70efc60123ec4d</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericFastCubicBSplineInterpolateImageFunction4D&lt; BaseImage &gt;</name>
    <filename>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction4D.html</filename>
    <base>GenericFastCubicBSplineInterpolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>GenericFastCubicBSplineInterpolateImageFunction4D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>ad3ef5e3f0dc7990234a911b7d880a416</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a285553e608cc2c4e017db294192b7e83</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a44247e877cebd470e54e168bfb80b053</anchor>
      <arglist>(const TOtherImage *, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a8da49b2cabe0a6ecbf92f63fc8263155</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a2c49233cfb66e13c5cb3355a19b62b3a</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a7fa0fd1f959aa2a9e7b9cf21e88559a9</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a798705fa24c37d15b9ab4d9703695aa8</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a925c1d5b47e49216bf18250dff1e59bc</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a637fb4f6dfd36628dd70efc60123ec4d</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericFastCubicBSplineInterpolateImageFunction4D&lt; CPImage &gt;</name>
    <filename>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction4D.html</filename>
    <base>GenericFastCubicBSplineInterpolateImageFunction&lt; CPImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>GenericFastCubicBSplineInterpolateImageFunction4D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>ad3ef5e3f0dc7990234a911b7d880a416</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a285553e608cc2c4e017db294192b7e83</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a44247e877cebd470e54e168bfb80b053</anchor>
      <arglist>(const TOtherImage *, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a8da49b2cabe0a6ecbf92f63fc8263155</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a2c49233cfb66e13c5cb3355a19b62b3a</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a7fa0fd1f959aa2a9e7b9cf21e88559a9</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a798705fa24c37d15b9ab4d9703695aa8</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a925c1d5b47e49216bf18250dff1e59bc</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a637fb4f6dfd36628dd70efc60123ec4d</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericFastCubicBSplineInterpolateImageFunction&lt; BaseImage &gt;</name>
    <filename>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</filename>
    <base>GenericInterpolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingInterval</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a1f0159e2e56b01dcda9400c322c3d9e9</anchor>
      <arglist>(double, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateJacobianInside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a7919288ac7ace5e9501cd56b4c16c8d7</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateJacobianOutside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a20d4f7c16839b1da3d488df0c09e0460</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericFastCubicBSplineInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>af8d3892487ac3b9bbb8406aa90ab35b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ab772ff21ae93e39903c4f92cfce4fb1b</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ab2ef67a374e9d9123bb11b83249cef7f</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a23a6c9afffd8970ec238c8698cf100c3</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a416f4360e8586461b406f2e18235dcfd</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>adb30059b4e906bd93fd680914df21a98</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a27c7e93ad1f7790c3577da0306b6063c</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ad549208e0ede1b9337e374bc887d8f7b</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a432e5b689ca84ec5cf666cb541540e1d</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a3eb7530b683b0c4c62bc18379e479811</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside2D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>af625de473720e9b3c1957cb03885f7ee</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside3D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a3daccac587b85de49774d0ce75c6582b</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside4D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a72fd77ca1318c1c078e3b812c4bd5b63</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ad4e3431f667a5f0e9f9ed1f9857245e5</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a42c8534be3a2f61fd35f6513b9f23847</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>aed39c10fca08eeaf0bb5f8eecb92043e</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ad54e10ea963397ac29dc555dd55763f5</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a3999eff8115c6e3afe8a87d0540ea9be</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a61faa75b13b38d54ef23ae28fd613277</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a9ba0c560ec556f1958f21d93fc49992f</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ab40aea8cb824ba82df1a82fcf24a1de9</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a02c81dd5237310965aa100407472a1e1</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a1a7e74fdbc5082314219442402dd8c45</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a0b2715c76dd389dbdfcec6dd57087db3</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>aa9935117ddf9ec7fea46d235c7a89fcb</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ab391b0786b1488943a6b7ea0cb33cf39</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>abf919f1c291607fa92bf56ea607e3fa7</anchor>
      <arglist>(Matrix &amp;, const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian2D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ade3ee8216c5f3925123e738ad3fda92d</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian2D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>aa5a0ec3d5a33f4d63570767030ee7aee</anchor>
      <arglist>(Matrix &amp;, const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian3D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a1546b77203490e4d8f50487ccbf49e62</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian3D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a086808a780d927ea8c06665e4583ac1d</anchor>
      <arglist>(Matrix &amp;, const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian4D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a0dfc2cc5db759344ae2fcda67adf0c55</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian4D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a936c98a883482633c5efe198f10f843f</anchor>
      <arglist>(Matrix &amp;, const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkAggregateMacro</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>adfde265b6226e7b2b3439d392332da18</anchor>
      <arglist>(CoefficientExtrapolator, InfiniteCoefficient)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ac2382a121d500a5646b8d9eb803bf08b</anchor>
      <arglist>(bool, UseInputCoefficients)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a97203bad7342ec8490fda84c122136eb</anchor>
      <arglist>(CoefficientImage, Coefficient)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a2a24ecc3d0fbf52d73abef5959764179</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericFastCubicBSplineInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a52d2f8006b3153a9742ce29e6ccaf8a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_s2</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a6480adfe0bcfe2b5b9127b1e15bb2cf7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericFastCubicBSplineInterpolateImageFunction&lt; CPImage &gt;</name>
    <filename>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</filename>
    <base>GenericInterpolateImageFunction&lt; CPImage &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingInterval</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a1f0159e2e56b01dcda9400c322c3d9e9</anchor>
      <arglist>(double, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateJacobianInside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a7919288ac7ace5e9501cd56b4c16c8d7</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateJacobianOutside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a20d4f7c16839b1da3d488df0c09e0460</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericFastCubicBSplineInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>af8d3892487ac3b9bbb8406aa90ab35b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ab772ff21ae93e39903c4f92cfce4fb1b</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ab2ef67a374e9d9123bb11b83249cef7f</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a23a6c9afffd8970ec238c8698cf100c3</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a416f4360e8586461b406f2e18235dcfd</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>adb30059b4e906bd93fd680914df21a98</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a27c7e93ad1f7790c3577da0306b6063c</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ad549208e0ede1b9337e374bc887d8f7b</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a432e5b689ca84ec5cf666cb541540e1d</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a3eb7530b683b0c4c62bc18379e479811</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside2D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>af625de473720e9b3c1957cb03885f7ee</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside3D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a3daccac587b85de49774d0ce75c6582b</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside4D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a72fd77ca1318c1c078e3b812c4bd5b63</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ad4e3431f667a5f0e9f9ed1f9857245e5</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a42c8534be3a2f61fd35f6513b9f23847</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>aed39c10fca08eeaf0bb5f8eecb92043e</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ad54e10ea963397ac29dc555dd55763f5</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a3999eff8115c6e3afe8a87d0540ea9be</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a61faa75b13b38d54ef23ae28fd613277</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a9ba0c560ec556f1958f21d93fc49992f</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ab40aea8cb824ba82df1a82fcf24a1de9</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a02c81dd5237310965aa100407472a1e1</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a1a7e74fdbc5082314219442402dd8c45</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a0b2715c76dd389dbdfcec6dd57087db3</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>aa9935117ddf9ec7fea46d235c7a89fcb</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ab391b0786b1488943a6b7ea0cb33cf39</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>abf919f1c291607fa92bf56ea607e3fa7</anchor>
      <arglist>(Matrix &amp;, const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian2D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ade3ee8216c5f3925123e738ad3fda92d</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian2D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>aa5a0ec3d5a33f4d63570767030ee7aee</anchor>
      <arglist>(Matrix &amp;, const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian3D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a1546b77203490e4d8f50487ccbf49e62</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian3D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a086808a780d927ea8c06665e4583ac1d</anchor>
      <arglist>(Matrix &amp;, const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian4D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a0dfc2cc5db759344ae2fcda67adf0c55</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian4D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a936c98a883482633c5efe198f10f843f</anchor>
      <arglist>(Matrix &amp;, const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkAggregateMacro</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>adfde265b6226e7b2b3439d392332da18</anchor>
      <arglist>(CoefficientExtrapolator, InfiniteCoefficient)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ac2382a121d500a5646b8d9eb803bf08b</anchor>
      <arglist>(bool, UseInputCoefficients)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a97203bad7342ec8490fda84c122136eb</anchor>
      <arglist>(CoefficientImage, Coefficient)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a2a24ecc3d0fbf52d73abef5959764179</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericFastCubicBSplineInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a52d2f8006b3153a9742ce29e6ccaf8a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_s2</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a6480adfe0bcfe2b5b9127b1e15bb2cf7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericFastLinearImageGradientFunction</name>
    <filename>classmirtk_1_1GenericFastLinearImageGradientFunction.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericImageGradientFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingInterval</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>ad42b56a83c5a0f660189bbcc2c8055f5</anchor>
      <arglist>(double, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericFastLinearImageGradientFunction</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>aeb624833f432a885fa1ea3d61985c830</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a5e886c219806e88b4a2ba296de3bd543</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>af9aa4f8460a53ca54149b0a809499f24</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>aa84d6cc743a904e8a426039f0eb7ff9a</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>acf352d4b1cf1af36e7e9580ec1e71b74</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a6e84f8327ac89356d7ed0932772dea0f</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a819c1b711ac629eebcc3a24376ec1be1</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a9791aae0ef166c8fc005091df3af030c</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>ab47b6be17cf8258ce15f5b9f8121e9e4</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a4e127a42001911bc9cffd036da3176f8</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>ae49c3db397c58144eefb79a151a15787</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a3389660875bac92a7c284e6cfd4b49df</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>ac7c887d8018a41dbb7a120d92dc7c6c6</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>aadc76518dc801a2ec327e322fef65690</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a0be0d50218d66430a697c49eaf104f4b</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a205493048528dbc2d3dfc70a521ad18a</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a5a9f692312f554c0fbe110a5122e88d3</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a5eb79ddfe262a8e623ca768117d40366</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a8fbc42bf910d5d56e5a0e8f97d1c2cc8</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>ad1af5c77d8a535d6312bd3b401785b66</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a3383cb3641e57be7c3865614e9ac5c73</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a875e78dfe19ce8c2245aa0dff0ef8b00</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericFastLinearImageGradientFunction</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a602b763d7dbef3cb68c90d33ecc0b627</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>ComputeWeights</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>afdfe1e10b21cf0c6befbd777eebbe185</anchor>
      <arglist>(double, Real[2])</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericFastLinearImageGradientFunction2D</name>
    <filename>classmirtk_1_1GenericFastLinearImageGradientFunction2D.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericFastLinearImageGradientFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericFastLinearImageGradientFunction2D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction2D.html</anchorfile>
      <anchor>aefcd6b1b80bfba50f3dba6eb224d8d2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction2D.html</anchorfile>
      <anchor>aa866408c61ea7bcd1721a0cae46dcf41</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction2D.html</anchorfile>
      <anchor>a4ee9271b74568f2d93d0709eb5c4be3e</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction2D.html</anchorfile>
      <anchor>a5c155f91b5a3088a12992128e3126724</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction2D.html</anchorfile>
      <anchor>a8f2943accddbc4a7a0df1bb70f5a869f</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction2D.html</anchorfile>
      <anchor>a53bf5f7dfe8c9e364d192811c2dc79e5</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction2D.html</anchorfile>
      <anchor>a94a20249a3b466cec665d8b3c21fa755</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction2D.html</anchorfile>
      <anchor>a7b58d42026163778f99cfa267e35d138</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction2D.html</anchorfile>
      <anchor>ab51be59301bdaf1bac3822941c06236d</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericFastLinearImageGradientFunction2D&lt; BaseImage &gt;</name>
    <filename>classmirtk_1_1GenericFastLinearImageGradientFunction2D.html</filename>
    <base>GenericFastLinearImageGradientFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>GenericFastLinearImageGradientFunction2D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction2D.html</anchorfile>
      <anchor>aefcd6b1b80bfba50f3dba6eb224d8d2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction2D.html</anchorfile>
      <anchor>aa866408c61ea7bcd1721a0cae46dcf41</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction2D.html</anchorfile>
      <anchor>a4ee9271b74568f2d93d0709eb5c4be3e</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction2D.html</anchorfile>
      <anchor>a5c155f91b5a3088a12992128e3126724</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction2D.html</anchorfile>
      <anchor>a8f2943accddbc4a7a0df1bb70f5a869f</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction2D.html</anchorfile>
      <anchor>a53bf5f7dfe8c9e364d192811c2dc79e5</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction2D.html</anchorfile>
      <anchor>a94a20249a3b466cec665d8b3c21fa755</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction2D.html</anchorfile>
      <anchor>a7b58d42026163778f99cfa267e35d138</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction2D.html</anchorfile>
      <anchor>ab51be59301bdaf1bac3822941c06236d</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericFastLinearImageGradientFunction3D</name>
    <filename>classmirtk_1_1GenericFastLinearImageGradientFunction3D.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericFastLinearImageGradientFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericFastLinearImageGradientFunction3D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction3D.html</anchorfile>
      <anchor>aab9fbcbd9c101dd4266d051d70a08d10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction3D.html</anchorfile>
      <anchor>ac0fef3975eb041709582f56211463a28</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction3D.html</anchorfile>
      <anchor>a0166e2b44938cfc6e96c6d67b6760518</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction3D.html</anchorfile>
      <anchor>aa322ed81aa510a226ef96a2383d2ed33</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction3D.html</anchorfile>
      <anchor>a39a10898d1160fc1efdca9b8e6b61c0c</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction3D.html</anchorfile>
      <anchor>a5e37c7dcaac34c252384cd516e73faee</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction3D.html</anchorfile>
      <anchor>aa3bd1a97de03ecd8f17b0b5795babf34</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction3D.html</anchorfile>
      <anchor>acc680df09b6f275154f1a8fa7db4bbe4</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction3D.html</anchorfile>
      <anchor>a160a7c36bfd42c16a868b13636229b21</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericFastLinearImageGradientFunction3D&lt; BaseImage &gt;</name>
    <filename>classmirtk_1_1GenericFastLinearImageGradientFunction3D.html</filename>
    <base>GenericFastLinearImageGradientFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>GenericFastLinearImageGradientFunction3D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction3D.html</anchorfile>
      <anchor>aab9fbcbd9c101dd4266d051d70a08d10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction3D.html</anchorfile>
      <anchor>ac0fef3975eb041709582f56211463a28</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction3D.html</anchorfile>
      <anchor>a0166e2b44938cfc6e96c6d67b6760518</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction3D.html</anchorfile>
      <anchor>aa322ed81aa510a226ef96a2383d2ed33</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction3D.html</anchorfile>
      <anchor>a39a10898d1160fc1efdca9b8e6b61c0c</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction3D.html</anchorfile>
      <anchor>a5e37c7dcaac34c252384cd516e73faee</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction3D.html</anchorfile>
      <anchor>aa3bd1a97de03ecd8f17b0b5795babf34</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction3D.html</anchorfile>
      <anchor>acc680df09b6f275154f1a8fa7db4bbe4</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction3D.html</anchorfile>
      <anchor>a160a7c36bfd42c16a868b13636229b21</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericFastLinearImageGradientFunction&lt; BaseImage &gt;</name>
    <filename>classmirtk_1_1GenericFastLinearImageGradientFunction.html</filename>
    <base>GenericImageGradientFunction&lt; BaseImage &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingInterval</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>ad42b56a83c5a0f660189bbcc2c8055f5</anchor>
      <arglist>(double, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericFastLinearImageGradientFunction</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>aeb624833f432a885fa1ea3d61985c830</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a5e886c219806e88b4a2ba296de3bd543</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>af9aa4f8460a53ca54149b0a809499f24</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>aa84d6cc743a904e8a426039f0eb7ff9a</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>acf352d4b1cf1af36e7e9580ec1e71b74</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a6e84f8327ac89356d7ed0932772dea0f</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a819c1b711ac629eebcc3a24376ec1be1</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a9791aae0ef166c8fc005091df3af030c</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>ab47b6be17cf8258ce15f5b9f8121e9e4</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a4e127a42001911bc9cffd036da3176f8</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>ae49c3db397c58144eefb79a151a15787</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a3389660875bac92a7c284e6cfd4b49df</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>ac7c887d8018a41dbb7a120d92dc7c6c6</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>aadc76518dc801a2ec327e322fef65690</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a0be0d50218d66430a697c49eaf104f4b</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a205493048528dbc2d3dfc70a521ad18a</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a5a9f692312f554c0fbe110a5122e88d3</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a5eb79ddfe262a8e623ca768117d40366</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a8fbc42bf910d5d56e5a0e8f97d1c2cc8</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>ad1af5c77d8a535d6312bd3b401785b66</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a3383cb3641e57be7c3865614e9ac5c73</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a875e78dfe19ce8c2245aa0dff0ef8b00</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericFastLinearImageGradientFunction</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a602b763d7dbef3cb68c90d33ecc0b627</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>ComputeWeights</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>afdfe1e10b21cf0c6befbd777eebbe185</anchor>
      <arglist>(double, Real[2])</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericFastLinearImageGradientFunction&lt; ImageType &gt;</name>
    <filename>classmirtk_1_1GenericFastLinearImageGradientFunction.html</filename>
    <base>GenericImageGradientFunction&lt; ImageType &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingInterval</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>ad42b56a83c5a0f660189bbcc2c8055f5</anchor>
      <arglist>(double, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericFastLinearImageGradientFunction</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>aeb624833f432a885fa1ea3d61985c830</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a5e886c219806e88b4a2ba296de3bd543</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>af9aa4f8460a53ca54149b0a809499f24</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>aa84d6cc743a904e8a426039f0eb7ff9a</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>acf352d4b1cf1af36e7e9580ec1e71b74</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a6e84f8327ac89356d7ed0932772dea0f</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a819c1b711ac629eebcc3a24376ec1be1</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a9791aae0ef166c8fc005091df3af030c</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>ab47b6be17cf8258ce15f5b9f8121e9e4</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a4e127a42001911bc9cffd036da3176f8</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>ae49c3db397c58144eefb79a151a15787</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a3389660875bac92a7c284e6cfd4b49df</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>ac7c887d8018a41dbb7a120d92dc7c6c6</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>aadc76518dc801a2ec327e322fef65690</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a0be0d50218d66430a697c49eaf104f4b</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a205493048528dbc2d3dfc70a521ad18a</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a5a9f692312f554c0fbe110a5122e88d3</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a5eb79ddfe262a8e623ca768117d40366</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a8fbc42bf910d5d56e5a0e8f97d1c2cc8</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>ad1af5c77d8a535d6312bd3b401785b66</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a3383cb3641e57be7c3865614e9ac5c73</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a875e78dfe19ce8c2245aa0dff0ef8b00</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericFastLinearImageGradientFunction</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a602b763d7dbef3cb68c90d33ecc0b627</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>ComputeWeights</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>afdfe1e10b21cf0c6befbd777eebbe185</anchor>
      <arglist>(double, Real[2])</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericGaussianInterpolateImageFunction</name>
    <filename>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericInterpolateImageFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>af11635e19e2847c9fa1c3085c484a53f</anchor>
      <arglist>(double, double, int &amp;, int &amp;, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a5972215b9a0f54b97fda773d3fbd4728</anchor>
      <arglist>(double, double, double, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>ad891fdca50bff26977a80c08ac91c5f9</anchor>
      <arglist>(double, double, double, double, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingInterval</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>aa0798304a057171d94f315cf0c0c60f4</anchor>
      <arglist>(double, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericGaussianInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>aebd5795badbb16fb6c057197bdeedbd5</anchor>
      <arglist>(double=1.0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a9d10753c34f24ab689f94533ba9d1707</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>aa0b274934cc1426d5cae3680714d0037</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>acc9394a5194864cf3ec92fbacbfcec14</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a2f5b44ba708db05221bba3c5df4e5123</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a3f2f16c45cba835a88d29a222a94fafc</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>af4825732b1cb6ba7425461eba0e92200</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>aa602a60aa2d27d7bad3355830c00b322</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>ac953d41ef8453af0e2cb7da5704cd605</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>ac4e68320a89c14d7164a28c30f7ea3f0</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a0a50d1f834cdb8173f1205caa896f908</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>af0767dec6637058cb8f1c7025df15077</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a50ea3d405d2829e8b6c3ab5eed8759a0</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a02e63602b60c0adc02d6eb98570bc1b0</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a02550e6d633c771489b30b16a45326a5</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a9705f95bf2d0ce5c45751c492e64fce4</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a8fd83617855788e0efc9bab99f28c208</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a97f22408fd49e8b22d414fef3c45aea2</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>ac1c61e9906e3d24a8e00a614968647cd</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a4aa213c65ef79bf5a415c1846d9e370c</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a3d2190b4a99d1ba727de4213e026d90a</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a2844dac6bc3dd0c7034bf0607b9733f8</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_dx</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a518fd89573720ab819367a564e43cecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_RadiusT</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>aef2b8413cd7609101a9c531a04482a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_RadiusX</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a21dc7671e77b3a890146f464bd3a9f6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_RadiusY</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>add9d798f985fd557181dd51e2dc031c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_RadiusZ</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a47593fe695fa42f059aed89235bb93ea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericGaussianInterpolateImageFunction2D</name>
    <filename>classmirtk_1_1GenericGaussianInterpolateImageFunction2D.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericGaussianInterpolateImageFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericGaussianInterpolateImageFunction2D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction2D.html</anchorfile>
      <anchor>a25d553b206aba22ddc43e86bac32daa8</anchor>
      <arglist>(double sigma=1.0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction2D.html</anchorfile>
      <anchor>a7499f65a50b09261e33277d716065434</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction2D.html</anchorfile>
      <anchor>aa1ece7b076dcc934aa15085400acd134</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction2D.html</anchorfile>
      <anchor>a9967942744ab773ae29a5fe2ccd91c80</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction2D.html</anchorfile>
      <anchor>ad132e4a581b449bbb8305ece6cb0f750</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction2D.html</anchorfile>
      <anchor>a872334549cc11f394d607d2325a675ec</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction2D.html</anchorfile>
      <anchor>a77647c09236e53d587c2fca474bb2248</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction2D.html</anchorfile>
      <anchor>a924e3d15fd5fa881582d1014858dee83</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction2D.html</anchorfile>
      <anchor>ab86648814777783b2a9e268ce91d48b1</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericGaussianInterpolateImageFunction2D&lt; BaseImage &gt;</name>
    <filename>classmirtk_1_1GenericGaussianInterpolateImageFunction2D.html</filename>
    <base>GenericGaussianInterpolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>GenericGaussianInterpolateImageFunction2D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction2D.html</anchorfile>
      <anchor>a25d553b206aba22ddc43e86bac32daa8</anchor>
      <arglist>(double sigma=1.0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction2D.html</anchorfile>
      <anchor>a7499f65a50b09261e33277d716065434</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction2D.html</anchorfile>
      <anchor>aa1ece7b076dcc934aa15085400acd134</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction2D.html</anchorfile>
      <anchor>a9967942744ab773ae29a5fe2ccd91c80</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction2D.html</anchorfile>
      <anchor>ad132e4a581b449bbb8305ece6cb0f750</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction2D.html</anchorfile>
      <anchor>a872334549cc11f394d607d2325a675ec</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction2D.html</anchorfile>
      <anchor>a77647c09236e53d587c2fca474bb2248</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction2D.html</anchorfile>
      <anchor>a924e3d15fd5fa881582d1014858dee83</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction2D.html</anchorfile>
      <anchor>ab86648814777783b2a9e268ce91d48b1</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericGaussianInterpolateImageFunction3D</name>
    <filename>classmirtk_1_1GenericGaussianInterpolateImageFunction3D.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericGaussianInterpolateImageFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericGaussianInterpolateImageFunction3D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction3D.html</anchorfile>
      <anchor>a1c248b99af3a9fdcc170738de7f4875b</anchor>
      <arglist>(double sigma=1.0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction3D.html</anchorfile>
      <anchor>afeebb70d66aae310a19d49f1a8b02fc0</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction3D.html</anchorfile>
      <anchor>a941e695454802d432d9a9fc78c8af8dc</anchor>
      <arglist>(const TOtherImage *, double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction3D.html</anchorfile>
      <anchor>a141ece5883f8fc1cccce171204429f65</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction3D.html</anchorfile>
      <anchor>aac1c20aa3881258f1a1075d21b24a24b</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction3D.html</anchorfile>
      <anchor>a792fd4b8c21b65c7e3b0d5ca38046c7a</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction3D.html</anchorfile>
      <anchor>a30cc4358c60d66bdef73374e107567f4</anchor>
      <arglist>(const TOtherImage *, double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction3D.html</anchorfile>
      <anchor>a3cb1f50331c626503bc9cec841d4265e</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction3D.html</anchorfile>
      <anchor>a4fa853b1067df357a580e6ec8ad9d971</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericGaussianInterpolateImageFunction3D&lt; BaseImage &gt;</name>
    <filename>classmirtk_1_1GenericGaussianInterpolateImageFunction3D.html</filename>
    <base>GenericGaussianInterpolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>GenericGaussianInterpolateImageFunction3D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction3D.html</anchorfile>
      <anchor>a1c248b99af3a9fdcc170738de7f4875b</anchor>
      <arglist>(double sigma=1.0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction3D.html</anchorfile>
      <anchor>afeebb70d66aae310a19d49f1a8b02fc0</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction3D.html</anchorfile>
      <anchor>a941e695454802d432d9a9fc78c8af8dc</anchor>
      <arglist>(const TOtherImage *, double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction3D.html</anchorfile>
      <anchor>a141ece5883f8fc1cccce171204429f65</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction3D.html</anchorfile>
      <anchor>aac1c20aa3881258f1a1075d21b24a24b</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction3D.html</anchorfile>
      <anchor>a792fd4b8c21b65c7e3b0d5ca38046c7a</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction3D.html</anchorfile>
      <anchor>a30cc4358c60d66bdef73374e107567f4</anchor>
      <arglist>(const TOtherImage *, double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction3D.html</anchorfile>
      <anchor>a3cb1f50331c626503bc9cec841d4265e</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction3D.html</anchorfile>
      <anchor>a4fa853b1067df357a580e6ec8ad9d971</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericGaussianInterpolateImageFunction4D</name>
    <filename>classmirtk_1_1GenericGaussianInterpolateImageFunction4D.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericGaussianInterpolateImageFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericGaussianInterpolateImageFunction4D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction4D.html</anchorfile>
      <anchor>ad3e1d870e337b498099e0b4c11bc911c</anchor>
      <arglist>(double sigma=1.0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction4D.html</anchorfile>
      <anchor>a40b007151c453bbe85ad21fc3290c03d</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction4D.html</anchorfile>
      <anchor>a8826ecb2e68a9ea11eac51063003ae85</anchor>
      <arglist>(const TOtherImage *, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction4D.html</anchorfile>
      <anchor>a8f836ca6ef029283ff328326cd062e80</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction4D.html</anchorfile>
      <anchor>a2e817b434cd9dd5fd665aec8034c331e</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction4D.html</anchorfile>
      <anchor>a0919351fff7c332b99d18c74d02e5a0a</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction4D.html</anchorfile>
      <anchor>ada6c8f8aedb2f0673f613b5ac97f03be</anchor>
      <arglist>(const TOtherImage *, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction4D.html</anchorfile>
      <anchor>a21eea2cce5feab27bda9665e74181f0d</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction4D.html</anchorfile>
      <anchor>a49b75728f5e81da3b885c20b5541e258</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericGaussianInterpolateImageFunction4D&lt; BaseImage &gt;</name>
    <filename>classmirtk_1_1GenericGaussianInterpolateImageFunction4D.html</filename>
    <base>GenericGaussianInterpolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>GenericGaussianInterpolateImageFunction4D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction4D.html</anchorfile>
      <anchor>ad3e1d870e337b498099e0b4c11bc911c</anchor>
      <arglist>(double sigma=1.0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction4D.html</anchorfile>
      <anchor>a40b007151c453bbe85ad21fc3290c03d</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction4D.html</anchorfile>
      <anchor>a8826ecb2e68a9ea11eac51063003ae85</anchor>
      <arglist>(const TOtherImage *, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction4D.html</anchorfile>
      <anchor>a8f836ca6ef029283ff328326cd062e80</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction4D.html</anchorfile>
      <anchor>a2e817b434cd9dd5fd665aec8034c331e</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction4D.html</anchorfile>
      <anchor>a0919351fff7c332b99d18c74d02e5a0a</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction4D.html</anchorfile>
      <anchor>ada6c8f8aedb2f0673f613b5ac97f03be</anchor>
      <arglist>(const TOtherImage *, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction4D.html</anchorfile>
      <anchor>a21eea2cce5feab27bda9665e74181f0d</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction4D.html</anchorfile>
      <anchor>a49b75728f5e81da3b885c20b5541e258</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericGaussianInterpolateImageFunction&lt; BaseImage &gt;</name>
    <filename>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</filename>
    <base>GenericInterpolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>af11635e19e2847c9fa1c3085c484a53f</anchor>
      <arglist>(double, double, int &amp;, int &amp;, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a5972215b9a0f54b97fda773d3fbd4728</anchor>
      <arglist>(double, double, double, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>ad891fdca50bff26977a80c08ac91c5f9</anchor>
      <arglist>(double, double, double, double, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingInterval</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>aa0798304a057171d94f315cf0c0c60f4</anchor>
      <arglist>(double, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericGaussianInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>aebd5795badbb16fb6c057197bdeedbd5</anchor>
      <arglist>(double=1.0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a9d10753c34f24ab689f94533ba9d1707</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>aa0b274934cc1426d5cae3680714d0037</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>acc9394a5194864cf3ec92fbacbfcec14</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a2f5b44ba708db05221bba3c5df4e5123</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a3f2f16c45cba835a88d29a222a94fafc</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>af4825732b1cb6ba7425461eba0e92200</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>aa602a60aa2d27d7bad3355830c00b322</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>ac953d41ef8453af0e2cb7da5704cd605</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>ac4e68320a89c14d7164a28c30f7ea3f0</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a0a50d1f834cdb8173f1205caa896f908</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>af0767dec6637058cb8f1c7025df15077</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a50ea3d405d2829e8b6c3ab5eed8759a0</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a02e63602b60c0adc02d6eb98570bc1b0</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a02550e6d633c771489b30b16a45326a5</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a9705f95bf2d0ce5c45751c492e64fce4</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a8fd83617855788e0efc9bab99f28c208</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a97f22408fd49e8b22d414fef3c45aea2</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>ac1c61e9906e3d24a8e00a614968647cd</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a4aa213c65ef79bf5a415c1846d9e370c</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a3d2190b4a99d1ba727de4213e026d90a</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a2844dac6bc3dd0c7034bf0607b9733f8</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_dx</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a518fd89573720ab819367a564e43cecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_RadiusT</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>aef2b8413cd7609101a9c531a04482a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_RadiusX</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a21dc7671e77b3a890146f464bd3a9f6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_RadiusY</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>add9d798f985fd557181dd51e2dc031c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_RadiusZ</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a47593fe695fa42f059aed89235bb93ea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericImage</name>
    <filename>classmirtk_1_1GenericImage.html</filename>
    <templarg>TVoxel</templarg>
    <base>mirtk::BaseImage</base>
    <member kind="typedef">
      <type>voxel_info&lt; ScalarType &gt;::RealType</type>
      <name>RealScalarType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afdfda4355104b4da07b05d8f29252e10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>voxel_info&lt; VoxelType &gt;::RealType</type>
      <name>RealType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a09dbec2268636b04aa16abafdaf9220b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>voxel_info&lt; VoxelType &gt;::ScalarType</type>
      <name>ScalarType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7aea0b35509e44c68b6e020636d60a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TVoxel</type>
      <name>VoxelType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a55a99adf761d77572a527a21cc372e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa82ebcacc1fae9b7a19b46b474731913</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BaseImage *</type>
      <name>Copy</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acf6a04d2d7bd3671f64b3638763f28ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af52cb4ad8aaaf44a8aa770eca74fe16d</anchor>
      <arglist>(const VoxelType *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a410229a08c619fae5aa519b931409153</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ad097e09589880dbb4034d91f0acefa14</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CropPad</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a747819222a44455523592665a56d4fbf</anchor>
      <arglist>(int margin=0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa10e4d965a0037827cbc692cee7282d1</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afbd0a3b1f357f43e019823e1090b93f4</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>addf9fb643b5b9c9a87c0e65a74f14ad4</anchor>
      <arglist>(int=0) const</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a10fe304a442f2ef1296a3ae265e16222</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af873ad2419fe41d778d45c8e85129a4f</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ad9d46dfaa14c31d052671f1e92f38d6c</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aeaab3c83332d510cc33d9757da6adb6e</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipYT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abd3ab9ed62d30464c0d42f73cfe2de06</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipYZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a57e0a0f8604497a1456cffa8a9e96127</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipZT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4894d798397b80ec36c2254ec5487226</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a118750dfb5ebd094b96dcbeeb813cd51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac0102c5d63d051c576c12efc3f073260</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9375aecd646973353434e1708d1a482f</anchor>
      <arglist>(int, int, int=1, int=1, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aee16def97204142dc963393c06de4dad</anchor>
      <arglist>(int, int, int, int, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a31edbc653fb6c1b988f66b1a979281db</anchor>
      <arglist>(const ImageAttributes &amp;, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6dd7ef3516cdfa041201a95e00a2c95d</anchor>
      <arglist>(const ImageAttributes &amp;, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac351b5a71c61e4fc9427c7005dee9465</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae7120d0d1573263d7362fc94c0511993</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a3682d26b021f75aa328b2b0f11020173</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac29847f1cdc609843392e9e9162e6d8f</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a94b4a28283f0dee0f39109b2e9556e64</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4c863bfab3c0103a5ab8f5431c05e3d7</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4bfc0bdcd763528f83bffa32d7db4d2c</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a83029368a40f49c4d3213e1718e01c15</anchor>
      <arglist>(Vector &amp;, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaab5c8c05d91f7d430a81fb4a48264aa</anchor>
      <arglist>(Vector &amp;, int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aad643794ba7086212b2f28c2487aec94</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4ef28e8492266470356c768f8b40cebf</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>GetAverage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a52a6375792cd5d272c20f4dced52ba91</anchor>
      <arglist>(int=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abf9e71af9c077932c75f6d019e8e40bb</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7e65e9e46e6b290e09ffc72188bac0d8</anchor>
      <arglist>(int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a44f27382851f5e12c7b27de8d7e91c06</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4f31ce7a8d59490a31125989658fa7e3</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetDataType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a168ee61bb4fc187136a9fae26056c917</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetDataTypeMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8bc7d2156321adb2242a014c9f2e8640</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetDataTypeMin</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aac767f97f9a1f77e55e42832abf80dca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetDataTypeSize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a780573a3084b9dbafb7a2b5a190bfdc3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa6def8f3546157eb4c7030eee953357f</anchor>
      <arglist>(int, int=-1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae8adc523c5971c67a7fcc755cc243aa6</anchor>
      <arglist>(GenericImage &amp;, int, int=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0d08b6db0ef93f2823863c0948f96a71</anchor>
      <arglist>(BaseImage *&amp;, int, int=-1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMaxPosition</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abb137b5432522ab67a2e4d59128bd973</anchor>
      <arglist>(Point &amp;, int=1, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4b22954ec673e1dc0c0fce41876d88d1</anchor>
      <arglist>(VoxelType &amp;, VoxelType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5f259e24198f43f5f5b5c36a491957b9</anchor>
      <arglist>(VoxelType &amp;, VoxelType &amp;, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae5245568d869b5a01f07ed7a1f9a78c8</anchor>
      <arglist>(VoxelType *, VoxelType *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa2cf3c6d470e024603a2ddd2c6d9e683</anchor>
      <arglist>(VoxelType *, VoxelType *, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMaxPad</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac9fa85710e8504ba0200f77bd6ab7476</anchor>
      <arglist>(VoxelType *, VoxelType *, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>GetPointerToVoxels</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a104db5b6f2ee2f4084a04872c8573e8b</anchor>
      <arglist>(int=0, int=0, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>GetPointerToVoxels</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a15b7ffcef7e56b684d2169979014a875</anchor>
      <arglist>(int=0, int=0, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac3ed57e94c462dfe3601cf7f66a445c2</anchor>
      <arglist>(int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0de61c4adca6157ff7b500f4d0d56911</anchor>
      <arglist>(GenericImage &amp;, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8251408aa84fb85b8583d208a184d819</anchor>
      <arglist>(BaseImage *&amp;, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac36175064977d4782a170149b9448977</anchor>
      <arglist>(int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6621082cdb165d9ed4794fdb4eb5d71b</anchor>
      <arglist>(GenericImage &amp;, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a84cdb7c8b51fd4a47763e62dbd575af5</anchor>
      <arglist>(BaseImage *&amp;, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abe7f8ef6bec99b4aa26044b092c2a736</anchor>
      <arglist>(int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a00e75bbca2e78eb11eec0aebee7cfe8f</anchor>
      <arglist>(GenericImage &amp;, int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a379c778e5af9bf81e3a41ecf6170ebfb</anchor>
      <arglist>(BaseImage *&amp;, int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>GetSD</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8543f89af05963eba7aa8a119435c891</anchor>
      <arglist>(int=1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GravityCenter</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a51f690a439ee530631e833af25f47829</anchor>
      <arglist>(Point &amp;, int=1, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae4d54c2ca77b26fde859983026d6a0b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af253119c9bfebded7fcf1851e8cb33cb</anchor>
      <arglist>(const ImageAttributes &amp;, int, VoxelType *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7c54e079d14ba29f5926d22d9df834d8</anchor>
      <arglist>(const ImageAttributes &amp;, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a65fecfa6503a5efabda0735d3e549e1e</anchor>
      <arglist>(const ImageAttributes &amp;, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a1fa24fb2c109a33e151963b82b99e070</anchor>
      <arglist>(int, int, int, int, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a32e241530add68b8c28c54332fe33de0</anchor>
      <arglist>(int, int, int=1, int=1, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>Mean</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a32cdc73f07c6dc8dbcbc490a2204e088</anchor>
      <arglist>(bool fg=true) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>N</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a496434256dc5192f2779d5f81d87b947</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8a36b56ce661f7f31434a0626e82132e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BinaryImage</type>
      <name>operator!=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a77c82ed325b1874d3a8c06223be89e42</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa7cb99b55c3a646c2ebdcf7917cde637</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4ad5e9c0c9ab34124f0e55d190ee301d</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a827c9b59c984acac4e022dc0106a934a</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>adf9c5c774348994f91cd124d9f0fcaba</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5a4b1e7a9bae33a42c4861f99e15f7a5</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a34d4670feb9061cb727fc272454ba6eb</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6f6fe7f8faf9828e71f1ccad698d7626</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9525714b6c6106e856bec1ee9fb1685e</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aed3c57d6751d0adcff1eb1b04d15b44b</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aef4b7a5c68842ec2daf53a279b364912</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a596668714940d32fb7bf58bac5937660</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ab9c8e9fff15b53e89dfa761a69511289</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a94a96350bb990f2e5ec7685edf89d569</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5c2857f420374992f4a46309db49240b</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afb2e42fab40de7e4fac80225404d84e3</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a66e58c4dccc96254b524f965dc7d6a89</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a527a2223374ee4bbde03375b0a238a1c</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a769c42188c12089b1cf304c810f14845</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae646992523114572c8f065e96b7166fd</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a39ffec97fd762491d870b485ad1d400e</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator&lt;</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a101b700326307e3a6408cfefe3ca92db</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator&lt;=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a53035485aaa44f15426f870559cd18b1</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a791283732c42afd117395d1a754c2ed4</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a3bb07963185796aae989ba8ddb879053</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7fae2d3a58fafd2e6bbf9fde503528df</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ab0f32514dcf52d8adccbd7ddfbc8ace5</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa24c879e08eb3a260f1ee25c81be8deb</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator&gt;</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a66a7440e7d716c4b52aaea4a8446c450</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator&gt;=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af7506bbcbcf11ca189b3076b50277bd9</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acca310957bfc1080c170ee74ded4d2f4</anchor>
      <arglist>(int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acd494c7039d4e01ebb50f28174ace41b</anchor>
      <arglist>(int, int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6d7409f3810cf37d28f1a6d54da389ad</anchor>
      <arglist>(int, int, int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a83bebf9102ff90bbe9909d3eea4f0203</anchor>
      <arglist>(int, int, int, int, VoxelType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a954e524a435eb076d754c25ec35ff70c</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a39d1b7a776221fe6194c09cccb0cf046</anchor>
      <arglist>(int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a95a1963f21b8cf5ce3ef8d522a2c9d97</anchor>
      <arglist>(int, int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a1ae9c02fea5c78cb0b08c70c09007b3a</anchor>
      <arglist>(int, int, int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aca43b3b19e9cae2713e75f77b79bc057</anchor>
      <arglist>(int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9850de321e58f0f5e7fad19a525d4a19</anchor>
      <arglist>(int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0a6b96f01802ce4979080a760349ad43</anchor>
      <arglist>(int, int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8e3e7e98e2125e6d67c863d0e0b885a8</anchor>
      <arglist>(int, int, int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutBackgroundValueAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6bb6d016f6ccea67282b860f568539f3</anchor>
      <arglist>(double, bool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaebc2118b033685d63b4de58474b9ef4</anchor>
      <arglist>(VoxelType, VoxelType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa316f5a21ab3ba5977cf392a090b6475</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a708ae3d97e7a8b7059b5829e9883ea74</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectX</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a066d214c4daf267324f4c2136a903599</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acdfb190a01078516fb0fba69a7890267</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa2c2e7f13fe7c798097d9d0f9d39e850</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abf8a6743897aff16f781f2ecd5abe2d8</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a78017bb91a3ce0432806c30b515032f1</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac883f262c6c2eb972fe3bd456fd254b9</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapYT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaa59b1fd9ff936b245cab7cc8358b876</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapYZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a65e4e2027b97364a89d2b44b23be7ec0</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapZT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af92bd0b1fd14208e4c4d75e20f5e59bf</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af4f220e0ce27c720f2e2fe8a65ef9818</anchor>
      <arglist>(const char *) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0296e4d2327ce9d8d472e8f9d3c123e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AllocateImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abe7dcb1a46f3a03139ddff0868904b6c</anchor>
      <arglist>(VoxelType *=NULL)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VoxelType *</type>
      <name>_data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0635297758e00bbb8fa1e88f8ae1d6f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_dataOwner</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8e9935f940685d83a3801206233308b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VoxelType ****</type>
      <name>_matrix</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af8b64b576c435cc9b2c45f32107186d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericImage&lt; BytePixel &gt;</name>
    <filename>classmirtk_1_1GenericImage.html</filename>
    <base>mirtk::BaseImage</base>
    <member kind="typedef">
      <type>voxel_info&lt; ScalarType &gt;::RealType</type>
      <name>RealScalarType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afdfda4355104b4da07b05d8f29252e10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>voxel_info&lt; VoxelType &gt;::RealType</type>
      <name>RealType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a09dbec2268636b04aa16abafdaf9220b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>voxel_info&lt; VoxelType &gt;::ScalarType</type>
      <name>ScalarType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7aea0b35509e44c68b6e020636d60a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BytePixel</type>
      <name>VoxelType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a55a99adf761d77572a527a21cc372e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa82ebcacc1fae9b7a19b46b474731913</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BaseImage *</type>
      <name>Copy</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acf6a04d2d7bd3671f64b3638763f28ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af52cb4ad8aaaf44a8aa770eca74fe16d</anchor>
      <arglist>(const VoxelType *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a410229a08c619fae5aa519b931409153</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ad097e09589880dbb4034d91f0acefa14</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CropPad</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a747819222a44455523592665a56d4fbf</anchor>
      <arglist>(int margin=0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa10e4d965a0037827cbc692cee7282d1</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afbd0a3b1f357f43e019823e1090b93f4</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>addf9fb643b5b9c9a87c0e65a74f14ad4</anchor>
      <arglist>(int=0) const</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a10fe304a442f2ef1296a3ae265e16222</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af873ad2419fe41d778d45c8e85129a4f</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ad9d46dfaa14c31d052671f1e92f38d6c</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aeaab3c83332d510cc33d9757da6adb6e</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipYT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abd3ab9ed62d30464c0d42f73cfe2de06</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipYZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a57e0a0f8604497a1456cffa8a9e96127</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipZT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4894d798397b80ec36c2254ec5487226</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a118750dfb5ebd094b96dcbeeb813cd51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac0102c5d63d051c576c12efc3f073260</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9375aecd646973353434e1708d1a482f</anchor>
      <arglist>(int, int, int=1, int=1, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aee16def97204142dc963393c06de4dad</anchor>
      <arglist>(int, int, int, int, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a31edbc653fb6c1b988f66b1a979281db</anchor>
      <arglist>(const ImageAttributes &amp;, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6dd7ef3516cdfa041201a95e00a2c95d</anchor>
      <arglist>(const ImageAttributes &amp;, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac351b5a71c61e4fc9427c7005dee9465</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae7120d0d1573263d7362fc94c0511993</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a3682d26b021f75aa328b2b0f11020173</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac29847f1cdc609843392e9e9162e6d8f</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a94b4a28283f0dee0f39109b2e9556e64</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4c863bfab3c0103a5ab8f5431c05e3d7</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4bfc0bdcd763528f83bffa32d7db4d2c</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a83029368a40f49c4d3213e1718e01c15</anchor>
      <arglist>(Vector &amp;, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaab5c8c05d91f7d430a81fb4a48264aa</anchor>
      <arglist>(Vector &amp;, int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aad643794ba7086212b2f28c2487aec94</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4ef28e8492266470356c768f8b40cebf</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>GetAverage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a52a6375792cd5d272c20f4dced52ba91</anchor>
      <arglist>(int=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abf9e71af9c077932c75f6d019e8e40bb</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7e65e9e46e6b290e09ffc72188bac0d8</anchor>
      <arglist>(int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a44f27382851f5e12c7b27de8d7e91c06</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4f31ce7a8d59490a31125989658fa7e3</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetDataType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a168ee61bb4fc187136a9fae26056c917</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetDataTypeMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8bc7d2156321adb2242a014c9f2e8640</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetDataTypeMin</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aac767f97f9a1f77e55e42832abf80dca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetDataTypeSize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a780573a3084b9dbafb7a2b5a190bfdc3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa6def8f3546157eb4c7030eee953357f</anchor>
      <arglist>(int, int=-1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae8adc523c5971c67a7fcc755cc243aa6</anchor>
      <arglist>(GenericImage &amp;, int, int=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0d08b6db0ef93f2823863c0948f96a71</anchor>
      <arglist>(BaseImage *&amp;, int, int=-1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMaxPosition</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abb137b5432522ab67a2e4d59128bd973</anchor>
      <arglist>(Point &amp;, int=1, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4b22954ec673e1dc0c0fce41876d88d1</anchor>
      <arglist>(VoxelType &amp;, VoxelType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5f259e24198f43f5f5b5c36a491957b9</anchor>
      <arglist>(VoxelType &amp;, VoxelType &amp;, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae5245568d869b5a01f07ed7a1f9a78c8</anchor>
      <arglist>(VoxelType *, VoxelType *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa2cf3c6d470e024603a2ddd2c6d9e683</anchor>
      <arglist>(VoxelType *, VoxelType *, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMaxPad</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac9fa85710e8504ba0200f77bd6ab7476</anchor>
      <arglist>(VoxelType *, VoxelType *, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>GetPointerToVoxels</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a104db5b6f2ee2f4084a04872c8573e8b</anchor>
      <arglist>(int=0, int=0, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>GetPointerToVoxels</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a15b7ffcef7e56b684d2169979014a875</anchor>
      <arglist>(int=0, int=0, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac3ed57e94c462dfe3601cf7f66a445c2</anchor>
      <arglist>(int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0de61c4adca6157ff7b500f4d0d56911</anchor>
      <arglist>(GenericImage &amp;, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8251408aa84fb85b8583d208a184d819</anchor>
      <arglist>(BaseImage *&amp;, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac36175064977d4782a170149b9448977</anchor>
      <arglist>(int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6621082cdb165d9ed4794fdb4eb5d71b</anchor>
      <arglist>(GenericImage &amp;, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a84cdb7c8b51fd4a47763e62dbd575af5</anchor>
      <arglist>(BaseImage *&amp;, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abe7f8ef6bec99b4aa26044b092c2a736</anchor>
      <arglist>(int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a00e75bbca2e78eb11eec0aebee7cfe8f</anchor>
      <arglist>(GenericImage &amp;, int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a379c778e5af9bf81e3a41ecf6170ebfb</anchor>
      <arglist>(BaseImage *&amp;, int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>GetSD</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8543f89af05963eba7aa8a119435c891</anchor>
      <arglist>(int=1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GravityCenter</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a51f690a439ee530631e833af25f47829</anchor>
      <arglist>(Point &amp;, int=1, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae4d54c2ca77b26fde859983026d6a0b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af253119c9bfebded7fcf1851e8cb33cb</anchor>
      <arglist>(const ImageAttributes &amp;, int, VoxelType *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7c54e079d14ba29f5926d22d9df834d8</anchor>
      <arglist>(const ImageAttributes &amp;, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a65fecfa6503a5efabda0735d3e549e1e</anchor>
      <arglist>(const ImageAttributes &amp;, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a1fa24fb2c109a33e151963b82b99e070</anchor>
      <arglist>(int, int, int, int, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a32e241530add68b8c28c54332fe33de0</anchor>
      <arglist>(int, int, int=1, int=1, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>Mean</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a32cdc73f07c6dc8dbcbc490a2204e088</anchor>
      <arglist>(bool fg=true) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>N</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a496434256dc5192f2779d5f81d87b947</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8a36b56ce661f7f31434a0626e82132e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BinaryImage</type>
      <name>operator!=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a77c82ed325b1874d3a8c06223be89e42</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa7cb99b55c3a646c2ebdcf7917cde637</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4ad5e9c0c9ab34124f0e55d190ee301d</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a827c9b59c984acac4e022dc0106a934a</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>adf9c5c774348994f91cd124d9f0fcaba</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5a4b1e7a9bae33a42c4861f99e15f7a5</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a34d4670feb9061cb727fc272454ba6eb</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6f6fe7f8faf9828e71f1ccad698d7626</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9525714b6c6106e856bec1ee9fb1685e</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aed3c57d6751d0adcff1eb1b04d15b44b</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aef4b7a5c68842ec2daf53a279b364912</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a596668714940d32fb7bf58bac5937660</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ab9c8e9fff15b53e89dfa761a69511289</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a94a96350bb990f2e5ec7685edf89d569</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5c2857f420374992f4a46309db49240b</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afb2e42fab40de7e4fac80225404d84e3</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a66e58c4dccc96254b524f965dc7d6a89</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a527a2223374ee4bbde03375b0a238a1c</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a769c42188c12089b1cf304c810f14845</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae646992523114572c8f065e96b7166fd</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a39ffec97fd762491d870b485ad1d400e</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator&lt;</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a101b700326307e3a6408cfefe3ca92db</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator&lt;=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a53035485aaa44f15426f870559cd18b1</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a791283732c42afd117395d1a754c2ed4</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a3bb07963185796aae989ba8ddb879053</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7fae2d3a58fafd2e6bbf9fde503528df</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ab0f32514dcf52d8adccbd7ddfbc8ace5</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa24c879e08eb3a260f1ee25c81be8deb</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator&gt;</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a66a7440e7d716c4b52aaea4a8446c450</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator&gt;=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af7506bbcbcf11ca189b3076b50277bd9</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acca310957bfc1080c170ee74ded4d2f4</anchor>
      <arglist>(int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acd494c7039d4e01ebb50f28174ace41b</anchor>
      <arglist>(int, int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6d7409f3810cf37d28f1a6d54da389ad</anchor>
      <arglist>(int, int, int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a83bebf9102ff90bbe9909d3eea4f0203</anchor>
      <arglist>(int, int, int, int, VoxelType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a954e524a435eb076d754c25ec35ff70c</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a39d1b7a776221fe6194c09cccb0cf046</anchor>
      <arglist>(int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a95a1963f21b8cf5ce3ef8d522a2c9d97</anchor>
      <arglist>(int, int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a1ae9c02fea5c78cb0b08c70c09007b3a</anchor>
      <arglist>(int, int, int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aca43b3b19e9cae2713e75f77b79bc057</anchor>
      <arglist>(int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9850de321e58f0f5e7fad19a525d4a19</anchor>
      <arglist>(int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0a6b96f01802ce4979080a760349ad43</anchor>
      <arglist>(int, int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8e3e7e98e2125e6d67c863d0e0b885a8</anchor>
      <arglist>(int, int, int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutBackgroundValueAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6bb6d016f6ccea67282b860f568539f3</anchor>
      <arglist>(double, bool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaebc2118b033685d63b4de58474b9ef4</anchor>
      <arglist>(VoxelType, VoxelType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa316f5a21ab3ba5977cf392a090b6475</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a708ae3d97e7a8b7059b5829e9883ea74</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectX</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a066d214c4daf267324f4c2136a903599</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acdfb190a01078516fb0fba69a7890267</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa2c2e7f13fe7c798097d9d0f9d39e850</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abf8a6743897aff16f781f2ecd5abe2d8</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a78017bb91a3ce0432806c30b515032f1</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac883f262c6c2eb972fe3bd456fd254b9</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapYT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaa59b1fd9ff936b245cab7cc8358b876</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapYZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a65e4e2027b97364a89d2b44b23be7ec0</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapZT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af92bd0b1fd14208e4c4d75e20f5e59bf</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af4f220e0ce27c720f2e2fe8a65ef9818</anchor>
      <arglist>(const char *) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0296e4d2327ce9d8d472e8f9d3c123e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AllocateImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abe7dcb1a46f3a03139ddff0868904b6c</anchor>
      <arglist>(VoxelType *=NULL)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VoxelType *</type>
      <name>_data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0635297758e00bbb8fa1e88f8ae1d6f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_dataOwner</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8e9935f940685d83a3801206233308b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VoxelType ****</type>
      <name>_matrix</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af8b64b576c435cc9b2c45f32107186d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericImage&lt; CPValue &gt;</name>
    <filename>classmirtk_1_1GenericImage.html</filename>
    <base>mirtk::BaseImage</base>
    <member kind="typedef">
      <type>voxel_info&lt; ScalarType &gt;::RealType</type>
      <name>RealScalarType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afdfda4355104b4da07b05d8f29252e10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>voxel_info&lt; VoxelType &gt;::RealType</type>
      <name>RealType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a09dbec2268636b04aa16abafdaf9220b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>voxel_info&lt; VoxelType &gt;::ScalarType</type>
      <name>ScalarType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7aea0b35509e44c68b6e020636d60a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CPValue</type>
      <name>VoxelType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a55a99adf761d77572a527a21cc372e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa82ebcacc1fae9b7a19b46b474731913</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BaseImage *</type>
      <name>Copy</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acf6a04d2d7bd3671f64b3638763f28ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af52cb4ad8aaaf44a8aa770eca74fe16d</anchor>
      <arglist>(const VoxelType *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a410229a08c619fae5aa519b931409153</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ad097e09589880dbb4034d91f0acefa14</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CropPad</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a747819222a44455523592665a56d4fbf</anchor>
      <arglist>(int margin=0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa10e4d965a0037827cbc692cee7282d1</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afbd0a3b1f357f43e019823e1090b93f4</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>addf9fb643b5b9c9a87c0e65a74f14ad4</anchor>
      <arglist>(int=0) const</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a10fe304a442f2ef1296a3ae265e16222</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af873ad2419fe41d778d45c8e85129a4f</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ad9d46dfaa14c31d052671f1e92f38d6c</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aeaab3c83332d510cc33d9757da6adb6e</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipYT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abd3ab9ed62d30464c0d42f73cfe2de06</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipYZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a57e0a0f8604497a1456cffa8a9e96127</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipZT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4894d798397b80ec36c2254ec5487226</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a118750dfb5ebd094b96dcbeeb813cd51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac0102c5d63d051c576c12efc3f073260</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9375aecd646973353434e1708d1a482f</anchor>
      <arglist>(int, int, int=1, int=1, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aee16def97204142dc963393c06de4dad</anchor>
      <arglist>(int, int, int, int, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a31edbc653fb6c1b988f66b1a979281db</anchor>
      <arglist>(const ImageAttributes &amp;, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6dd7ef3516cdfa041201a95e00a2c95d</anchor>
      <arglist>(const ImageAttributes &amp;, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac351b5a71c61e4fc9427c7005dee9465</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae7120d0d1573263d7362fc94c0511993</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a3682d26b021f75aa328b2b0f11020173</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac29847f1cdc609843392e9e9162e6d8f</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a94b4a28283f0dee0f39109b2e9556e64</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4c863bfab3c0103a5ab8f5431c05e3d7</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4bfc0bdcd763528f83bffa32d7db4d2c</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a83029368a40f49c4d3213e1718e01c15</anchor>
      <arglist>(Vector &amp;, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaab5c8c05d91f7d430a81fb4a48264aa</anchor>
      <arglist>(Vector &amp;, int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aad643794ba7086212b2f28c2487aec94</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4ef28e8492266470356c768f8b40cebf</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>GetAverage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a52a6375792cd5d272c20f4dced52ba91</anchor>
      <arglist>(int=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abf9e71af9c077932c75f6d019e8e40bb</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7e65e9e46e6b290e09ffc72188bac0d8</anchor>
      <arglist>(int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a44f27382851f5e12c7b27de8d7e91c06</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4f31ce7a8d59490a31125989658fa7e3</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetDataType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a168ee61bb4fc187136a9fae26056c917</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetDataTypeMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8bc7d2156321adb2242a014c9f2e8640</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetDataTypeMin</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aac767f97f9a1f77e55e42832abf80dca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetDataTypeSize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a780573a3084b9dbafb7a2b5a190bfdc3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa6def8f3546157eb4c7030eee953357f</anchor>
      <arglist>(int, int=-1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae8adc523c5971c67a7fcc755cc243aa6</anchor>
      <arglist>(GenericImage &amp;, int, int=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0d08b6db0ef93f2823863c0948f96a71</anchor>
      <arglist>(BaseImage *&amp;, int, int=-1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMaxPosition</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abb137b5432522ab67a2e4d59128bd973</anchor>
      <arglist>(Point &amp;, int=1, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4b22954ec673e1dc0c0fce41876d88d1</anchor>
      <arglist>(VoxelType &amp;, VoxelType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5f259e24198f43f5f5b5c36a491957b9</anchor>
      <arglist>(VoxelType &amp;, VoxelType &amp;, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae5245568d869b5a01f07ed7a1f9a78c8</anchor>
      <arglist>(VoxelType *, VoxelType *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa2cf3c6d470e024603a2ddd2c6d9e683</anchor>
      <arglist>(VoxelType *, VoxelType *, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMaxPad</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac9fa85710e8504ba0200f77bd6ab7476</anchor>
      <arglist>(VoxelType *, VoxelType *, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>GetPointerToVoxels</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a104db5b6f2ee2f4084a04872c8573e8b</anchor>
      <arglist>(int=0, int=0, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>GetPointerToVoxels</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a15b7ffcef7e56b684d2169979014a875</anchor>
      <arglist>(int=0, int=0, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac3ed57e94c462dfe3601cf7f66a445c2</anchor>
      <arglist>(int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0de61c4adca6157ff7b500f4d0d56911</anchor>
      <arglist>(GenericImage &amp;, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8251408aa84fb85b8583d208a184d819</anchor>
      <arglist>(BaseImage *&amp;, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac36175064977d4782a170149b9448977</anchor>
      <arglist>(int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6621082cdb165d9ed4794fdb4eb5d71b</anchor>
      <arglist>(GenericImage &amp;, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a84cdb7c8b51fd4a47763e62dbd575af5</anchor>
      <arglist>(BaseImage *&amp;, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abe7f8ef6bec99b4aa26044b092c2a736</anchor>
      <arglist>(int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a00e75bbca2e78eb11eec0aebee7cfe8f</anchor>
      <arglist>(GenericImage &amp;, int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a379c778e5af9bf81e3a41ecf6170ebfb</anchor>
      <arglist>(BaseImage *&amp;, int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>GetSD</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8543f89af05963eba7aa8a119435c891</anchor>
      <arglist>(int=1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GravityCenter</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a51f690a439ee530631e833af25f47829</anchor>
      <arglist>(Point &amp;, int=1, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae4d54c2ca77b26fde859983026d6a0b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af253119c9bfebded7fcf1851e8cb33cb</anchor>
      <arglist>(const ImageAttributes &amp;, int, VoxelType *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7c54e079d14ba29f5926d22d9df834d8</anchor>
      <arglist>(const ImageAttributes &amp;, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a65fecfa6503a5efabda0735d3e549e1e</anchor>
      <arglist>(const ImageAttributes &amp;, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a1fa24fb2c109a33e151963b82b99e070</anchor>
      <arglist>(int, int, int, int, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a32e241530add68b8c28c54332fe33de0</anchor>
      <arglist>(int, int, int=1, int=1, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>Mean</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a32cdc73f07c6dc8dbcbc490a2204e088</anchor>
      <arglist>(bool fg=true) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>N</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a496434256dc5192f2779d5f81d87b947</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8a36b56ce661f7f31434a0626e82132e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BinaryImage</type>
      <name>operator!=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a77c82ed325b1874d3a8c06223be89e42</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa7cb99b55c3a646c2ebdcf7917cde637</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4ad5e9c0c9ab34124f0e55d190ee301d</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a827c9b59c984acac4e022dc0106a934a</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>adf9c5c774348994f91cd124d9f0fcaba</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5a4b1e7a9bae33a42c4861f99e15f7a5</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a34d4670feb9061cb727fc272454ba6eb</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6f6fe7f8faf9828e71f1ccad698d7626</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9525714b6c6106e856bec1ee9fb1685e</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aed3c57d6751d0adcff1eb1b04d15b44b</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aef4b7a5c68842ec2daf53a279b364912</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a596668714940d32fb7bf58bac5937660</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ab9c8e9fff15b53e89dfa761a69511289</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a94a96350bb990f2e5ec7685edf89d569</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5c2857f420374992f4a46309db49240b</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afb2e42fab40de7e4fac80225404d84e3</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a66e58c4dccc96254b524f965dc7d6a89</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a527a2223374ee4bbde03375b0a238a1c</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a769c42188c12089b1cf304c810f14845</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae646992523114572c8f065e96b7166fd</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a39ffec97fd762491d870b485ad1d400e</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator&lt;</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a101b700326307e3a6408cfefe3ca92db</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator&lt;=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a53035485aaa44f15426f870559cd18b1</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a791283732c42afd117395d1a754c2ed4</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a3bb07963185796aae989ba8ddb879053</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7fae2d3a58fafd2e6bbf9fde503528df</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ab0f32514dcf52d8adccbd7ddfbc8ace5</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa24c879e08eb3a260f1ee25c81be8deb</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator&gt;</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a66a7440e7d716c4b52aaea4a8446c450</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator&gt;=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af7506bbcbcf11ca189b3076b50277bd9</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acca310957bfc1080c170ee74ded4d2f4</anchor>
      <arglist>(int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acd494c7039d4e01ebb50f28174ace41b</anchor>
      <arglist>(int, int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6d7409f3810cf37d28f1a6d54da389ad</anchor>
      <arglist>(int, int, int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a83bebf9102ff90bbe9909d3eea4f0203</anchor>
      <arglist>(int, int, int, int, VoxelType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a954e524a435eb076d754c25ec35ff70c</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a39d1b7a776221fe6194c09cccb0cf046</anchor>
      <arglist>(int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a95a1963f21b8cf5ce3ef8d522a2c9d97</anchor>
      <arglist>(int, int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a1ae9c02fea5c78cb0b08c70c09007b3a</anchor>
      <arglist>(int, int, int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aca43b3b19e9cae2713e75f77b79bc057</anchor>
      <arglist>(int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9850de321e58f0f5e7fad19a525d4a19</anchor>
      <arglist>(int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0a6b96f01802ce4979080a760349ad43</anchor>
      <arglist>(int, int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8e3e7e98e2125e6d67c863d0e0b885a8</anchor>
      <arglist>(int, int, int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutBackgroundValueAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6bb6d016f6ccea67282b860f568539f3</anchor>
      <arglist>(double, bool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaebc2118b033685d63b4de58474b9ef4</anchor>
      <arglist>(VoxelType, VoxelType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa316f5a21ab3ba5977cf392a090b6475</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a708ae3d97e7a8b7059b5829e9883ea74</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectX</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a066d214c4daf267324f4c2136a903599</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acdfb190a01078516fb0fba69a7890267</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa2c2e7f13fe7c798097d9d0f9d39e850</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abf8a6743897aff16f781f2ecd5abe2d8</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a78017bb91a3ce0432806c30b515032f1</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac883f262c6c2eb972fe3bd456fd254b9</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapYT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaa59b1fd9ff936b245cab7cc8358b876</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapYZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a65e4e2027b97364a89d2b44b23be7ec0</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapZT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af92bd0b1fd14208e4c4d75e20f5e59bf</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af4f220e0ce27c720f2e2fe8a65ef9818</anchor>
      <arglist>(const char *) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0296e4d2327ce9d8d472e8f9d3c123e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AllocateImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abe7dcb1a46f3a03139ddff0868904b6c</anchor>
      <arglist>(VoxelType *=NULL)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VoxelType *</type>
      <name>_data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0635297758e00bbb8fa1e88f8ae1d6f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_dataOwner</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8e9935f940685d83a3801206233308b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VoxelType ****</type>
      <name>_matrix</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af8b64b576c435cc9b2c45f32107186d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericImage&lt; double &gt;</name>
    <filename>classmirtk_1_1GenericImage.html</filename>
    <base>mirtk::BaseImage</base>
    <member kind="typedef">
      <type>voxel_info&lt; ScalarType &gt;::RealType</type>
      <name>RealScalarType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afdfda4355104b4da07b05d8f29252e10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>voxel_info&lt; VoxelType &gt;::RealType</type>
      <name>RealType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a09dbec2268636b04aa16abafdaf9220b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>voxel_info&lt; VoxelType &gt;::ScalarType</type>
      <name>ScalarType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7aea0b35509e44c68b6e020636d60a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>VoxelType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a55a99adf761d77572a527a21cc372e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa82ebcacc1fae9b7a19b46b474731913</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BaseImage *</type>
      <name>Copy</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acf6a04d2d7bd3671f64b3638763f28ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af52cb4ad8aaaf44a8aa770eca74fe16d</anchor>
      <arglist>(const VoxelType *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a410229a08c619fae5aa519b931409153</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ad097e09589880dbb4034d91f0acefa14</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CropPad</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a747819222a44455523592665a56d4fbf</anchor>
      <arglist>(int margin=0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa10e4d965a0037827cbc692cee7282d1</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afbd0a3b1f357f43e019823e1090b93f4</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>addf9fb643b5b9c9a87c0e65a74f14ad4</anchor>
      <arglist>(int=0) const</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a10fe304a442f2ef1296a3ae265e16222</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af873ad2419fe41d778d45c8e85129a4f</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ad9d46dfaa14c31d052671f1e92f38d6c</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aeaab3c83332d510cc33d9757da6adb6e</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipYT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abd3ab9ed62d30464c0d42f73cfe2de06</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipYZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a57e0a0f8604497a1456cffa8a9e96127</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipZT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4894d798397b80ec36c2254ec5487226</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a118750dfb5ebd094b96dcbeeb813cd51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac0102c5d63d051c576c12efc3f073260</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9375aecd646973353434e1708d1a482f</anchor>
      <arglist>(int, int, int=1, int=1, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aee16def97204142dc963393c06de4dad</anchor>
      <arglist>(int, int, int, int, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a31edbc653fb6c1b988f66b1a979281db</anchor>
      <arglist>(const ImageAttributes &amp;, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6dd7ef3516cdfa041201a95e00a2c95d</anchor>
      <arglist>(const ImageAttributes &amp;, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac351b5a71c61e4fc9427c7005dee9465</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae7120d0d1573263d7362fc94c0511993</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a3682d26b021f75aa328b2b0f11020173</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac29847f1cdc609843392e9e9162e6d8f</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a94b4a28283f0dee0f39109b2e9556e64</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4c863bfab3c0103a5ab8f5431c05e3d7</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4bfc0bdcd763528f83bffa32d7db4d2c</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a83029368a40f49c4d3213e1718e01c15</anchor>
      <arglist>(Vector &amp;, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaab5c8c05d91f7d430a81fb4a48264aa</anchor>
      <arglist>(Vector &amp;, int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aad643794ba7086212b2f28c2487aec94</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4ef28e8492266470356c768f8b40cebf</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>GetAverage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a52a6375792cd5d272c20f4dced52ba91</anchor>
      <arglist>(int=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abf9e71af9c077932c75f6d019e8e40bb</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7e65e9e46e6b290e09ffc72188bac0d8</anchor>
      <arglist>(int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a44f27382851f5e12c7b27de8d7e91c06</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4f31ce7a8d59490a31125989658fa7e3</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetDataType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a168ee61bb4fc187136a9fae26056c917</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetDataTypeMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8bc7d2156321adb2242a014c9f2e8640</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetDataTypeMin</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aac767f97f9a1f77e55e42832abf80dca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetDataTypeSize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a780573a3084b9dbafb7a2b5a190bfdc3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa6def8f3546157eb4c7030eee953357f</anchor>
      <arglist>(int, int=-1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae8adc523c5971c67a7fcc755cc243aa6</anchor>
      <arglist>(GenericImage &amp;, int, int=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0d08b6db0ef93f2823863c0948f96a71</anchor>
      <arglist>(BaseImage *&amp;, int, int=-1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMaxPosition</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abb137b5432522ab67a2e4d59128bd973</anchor>
      <arglist>(Point &amp;, int=1, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4b22954ec673e1dc0c0fce41876d88d1</anchor>
      <arglist>(VoxelType &amp;, VoxelType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5f259e24198f43f5f5b5c36a491957b9</anchor>
      <arglist>(VoxelType &amp;, VoxelType &amp;, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae5245568d869b5a01f07ed7a1f9a78c8</anchor>
      <arglist>(VoxelType *, VoxelType *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa2cf3c6d470e024603a2ddd2c6d9e683</anchor>
      <arglist>(VoxelType *, VoxelType *, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMaxPad</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac9fa85710e8504ba0200f77bd6ab7476</anchor>
      <arglist>(VoxelType *, VoxelType *, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>GetPointerToVoxels</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a104db5b6f2ee2f4084a04872c8573e8b</anchor>
      <arglist>(int=0, int=0, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>GetPointerToVoxels</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a15b7ffcef7e56b684d2169979014a875</anchor>
      <arglist>(int=0, int=0, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac3ed57e94c462dfe3601cf7f66a445c2</anchor>
      <arglist>(int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0de61c4adca6157ff7b500f4d0d56911</anchor>
      <arglist>(GenericImage &amp;, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8251408aa84fb85b8583d208a184d819</anchor>
      <arglist>(BaseImage *&amp;, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac36175064977d4782a170149b9448977</anchor>
      <arglist>(int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6621082cdb165d9ed4794fdb4eb5d71b</anchor>
      <arglist>(GenericImage &amp;, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a84cdb7c8b51fd4a47763e62dbd575af5</anchor>
      <arglist>(BaseImage *&amp;, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abe7f8ef6bec99b4aa26044b092c2a736</anchor>
      <arglist>(int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a00e75bbca2e78eb11eec0aebee7cfe8f</anchor>
      <arglist>(GenericImage &amp;, int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a379c778e5af9bf81e3a41ecf6170ebfb</anchor>
      <arglist>(BaseImage *&amp;, int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>GetSD</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8543f89af05963eba7aa8a119435c891</anchor>
      <arglist>(int=1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GravityCenter</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a51f690a439ee530631e833af25f47829</anchor>
      <arglist>(Point &amp;, int=1, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae4d54c2ca77b26fde859983026d6a0b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af253119c9bfebded7fcf1851e8cb33cb</anchor>
      <arglist>(const ImageAttributes &amp;, int, VoxelType *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7c54e079d14ba29f5926d22d9df834d8</anchor>
      <arglist>(const ImageAttributes &amp;, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a65fecfa6503a5efabda0735d3e549e1e</anchor>
      <arglist>(const ImageAttributes &amp;, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a1fa24fb2c109a33e151963b82b99e070</anchor>
      <arglist>(int, int, int, int, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a32e241530add68b8c28c54332fe33de0</anchor>
      <arglist>(int, int, int=1, int=1, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>Mean</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a32cdc73f07c6dc8dbcbc490a2204e088</anchor>
      <arglist>(bool fg=true) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>N</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a496434256dc5192f2779d5f81d87b947</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8a36b56ce661f7f31434a0626e82132e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BinaryImage</type>
      <name>operator!=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a77c82ed325b1874d3a8c06223be89e42</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa7cb99b55c3a646c2ebdcf7917cde637</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4ad5e9c0c9ab34124f0e55d190ee301d</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a827c9b59c984acac4e022dc0106a934a</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>adf9c5c774348994f91cd124d9f0fcaba</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5a4b1e7a9bae33a42c4861f99e15f7a5</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a34d4670feb9061cb727fc272454ba6eb</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6f6fe7f8faf9828e71f1ccad698d7626</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9525714b6c6106e856bec1ee9fb1685e</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aed3c57d6751d0adcff1eb1b04d15b44b</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aef4b7a5c68842ec2daf53a279b364912</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a596668714940d32fb7bf58bac5937660</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ab9c8e9fff15b53e89dfa761a69511289</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a94a96350bb990f2e5ec7685edf89d569</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5c2857f420374992f4a46309db49240b</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afb2e42fab40de7e4fac80225404d84e3</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a66e58c4dccc96254b524f965dc7d6a89</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a527a2223374ee4bbde03375b0a238a1c</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a769c42188c12089b1cf304c810f14845</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae646992523114572c8f065e96b7166fd</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a39ffec97fd762491d870b485ad1d400e</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator&lt;</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a101b700326307e3a6408cfefe3ca92db</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator&lt;=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a53035485aaa44f15426f870559cd18b1</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a791283732c42afd117395d1a754c2ed4</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a3bb07963185796aae989ba8ddb879053</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7fae2d3a58fafd2e6bbf9fde503528df</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ab0f32514dcf52d8adccbd7ddfbc8ace5</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa24c879e08eb3a260f1ee25c81be8deb</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator&gt;</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a66a7440e7d716c4b52aaea4a8446c450</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator&gt;=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af7506bbcbcf11ca189b3076b50277bd9</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acca310957bfc1080c170ee74ded4d2f4</anchor>
      <arglist>(int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acd494c7039d4e01ebb50f28174ace41b</anchor>
      <arglist>(int, int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6d7409f3810cf37d28f1a6d54da389ad</anchor>
      <arglist>(int, int, int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a83bebf9102ff90bbe9909d3eea4f0203</anchor>
      <arglist>(int, int, int, int, VoxelType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a954e524a435eb076d754c25ec35ff70c</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a39d1b7a776221fe6194c09cccb0cf046</anchor>
      <arglist>(int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a95a1963f21b8cf5ce3ef8d522a2c9d97</anchor>
      <arglist>(int, int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a1ae9c02fea5c78cb0b08c70c09007b3a</anchor>
      <arglist>(int, int, int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aca43b3b19e9cae2713e75f77b79bc057</anchor>
      <arglist>(int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9850de321e58f0f5e7fad19a525d4a19</anchor>
      <arglist>(int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0a6b96f01802ce4979080a760349ad43</anchor>
      <arglist>(int, int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8e3e7e98e2125e6d67c863d0e0b885a8</anchor>
      <arglist>(int, int, int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutBackgroundValueAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6bb6d016f6ccea67282b860f568539f3</anchor>
      <arglist>(double, bool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaebc2118b033685d63b4de58474b9ef4</anchor>
      <arglist>(VoxelType, VoxelType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa316f5a21ab3ba5977cf392a090b6475</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a708ae3d97e7a8b7059b5829e9883ea74</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectX</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a066d214c4daf267324f4c2136a903599</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acdfb190a01078516fb0fba69a7890267</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa2c2e7f13fe7c798097d9d0f9d39e850</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abf8a6743897aff16f781f2ecd5abe2d8</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a78017bb91a3ce0432806c30b515032f1</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac883f262c6c2eb972fe3bd456fd254b9</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapYT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaa59b1fd9ff936b245cab7cc8358b876</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapYZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a65e4e2027b97364a89d2b44b23be7ec0</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapZT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af92bd0b1fd14208e4c4d75e20f5e59bf</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af4f220e0ce27c720f2e2fe8a65ef9818</anchor>
      <arglist>(const char *) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0296e4d2327ce9d8d472e8f9d3c123e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AllocateImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abe7dcb1a46f3a03139ddff0868904b6c</anchor>
      <arglist>(VoxelType *=NULL)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VoxelType *</type>
      <name>_data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0635297758e00bbb8fa1e88f8ae1d6f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_dataOwner</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8e9935f940685d83a3801206233308b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VoxelType ****</type>
      <name>_matrix</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af8b64b576c435cc9b2c45f32107186d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericImage&lt; GreyPixel &gt;</name>
    <filename>classmirtk_1_1GenericImage.html</filename>
    <base>mirtk::BaseImage</base>
    <member kind="typedef">
      <type>voxel_info&lt; ScalarType &gt;::RealType</type>
      <name>RealScalarType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afdfda4355104b4da07b05d8f29252e10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>voxel_info&lt; VoxelType &gt;::RealType</type>
      <name>RealType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a09dbec2268636b04aa16abafdaf9220b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>voxel_info&lt; VoxelType &gt;::ScalarType</type>
      <name>ScalarType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7aea0b35509e44c68b6e020636d60a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GreyPixel</type>
      <name>VoxelType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a55a99adf761d77572a527a21cc372e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa82ebcacc1fae9b7a19b46b474731913</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BaseImage *</type>
      <name>Copy</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acf6a04d2d7bd3671f64b3638763f28ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af52cb4ad8aaaf44a8aa770eca74fe16d</anchor>
      <arglist>(const VoxelType *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a410229a08c619fae5aa519b931409153</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ad097e09589880dbb4034d91f0acefa14</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CropPad</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a747819222a44455523592665a56d4fbf</anchor>
      <arglist>(int margin=0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa10e4d965a0037827cbc692cee7282d1</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afbd0a3b1f357f43e019823e1090b93f4</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>addf9fb643b5b9c9a87c0e65a74f14ad4</anchor>
      <arglist>(int=0) const</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a10fe304a442f2ef1296a3ae265e16222</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af873ad2419fe41d778d45c8e85129a4f</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ad9d46dfaa14c31d052671f1e92f38d6c</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aeaab3c83332d510cc33d9757da6adb6e</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipYT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abd3ab9ed62d30464c0d42f73cfe2de06</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipYZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a57e0a0f8604497a1456cffa8a9e96127</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipZT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4894d798397b80ec36c2254ec5487226</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a118750dfb5ebd094b96dcbeeb813cd51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac0102c5d63d051c576c12efc3f073260</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9375aecd646973353434e1708d1a482f</anchor>
      <arglist>(int, int, int=1, int=1, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aee16def97204142dc963393c06de4dad</anchor>
      <arglist>(int, int, int, int, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a31edbc653fb6c1b988f66b1a979281db</anchor>
      <arglist>(const ImageAttributes &amp;, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6dd7ef3516cdfa041201a95e00a2c95d</anchor>
      <arglist>(const ImageAttributes &amp;, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac351b5a71c61e4fc9427c7005dee9465</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae7120d0d1573263d7362fc94c0511993</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a3682d26b021f75aa328b2b0f11020173</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac29847f1cdc609843392e9e9162e6d8f</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a94b4a28283f0dee0f39109b2e9556e64</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4c863bfab3c0103a5ab8f5431c05e3d7</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4bfc0bdcd763528f83bffa32d7db4d2c</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a83029368a40f49c4d3213e1718e01c15</anchor>
      <arglist>(Vector &amp;, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaab5c8c05d91f7d430a81fb4a48264aa</anchor>
      <arglist>(Vector &amp;, int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aad643794ba7086212b2f28c2487aec94</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4ef28e8492266470356c768f8b40cebf</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>GetAverage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a52a6375792cd5d272c20f4dced52ba91</anchor>
      <arglist>(int=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abf9e71af9c077932c75f6d019e8e40bb</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7e65e9e46e6b290e09ffc72188bac0d8</anchor>
      <arglist>(int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a44f27382851f5e12c7b27de8d7e91c06</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4f31ce7a8d59490a31125989658fa7e3</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetDataType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a168ee61bb4fc187136a9fae26056c917</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetDataTypeMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8bc7d2156321adb2242a014c9f2e8640</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetDataTypeMin</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aac767f97f9a1f77e55e42832abf80dca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetDataTypeSize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a780573a3084b9dbafb7a2b5a190bfdc3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa6def8f3546157eb4c7030eee953357f</anchor>
      <arglist>(int, int=-1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae8adc523c5971c67a7fcc755cc243aa6</anchor>
      <arglist>(GenericImage &amp;, int, int=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0d08b6db0ef93f2823863c0948f96a71</anchor>
      <arglist>(BaseImage *&amp;, int, int=-1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMaxPosition</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abb137b5432522ab67a2e4d59128bd973</anchor>
      <arglist>(Point &amp;, int=1, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4b22954ec673e1dc0c0fce41876d88d1</anchor>
      <arglist>(VoxelType &amp;, VoxelType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5f259e24198f43f5f5b5c36a491957b9</anchor>
      <arglist>(VoxelType &amp;, VoxelType &amp;, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae5245568d869b5a01f07ed7a1f9a78c8</anchor>
      <arglist>(VoxelType *, VoxelType *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa2cf3c6d470e024603a2ddd2c6d9e683</anchor>
      <arglist>(VoxelType *, VoxelType *, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMaxPad</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac9fa85710e8504ba0200f77bd6ab7476</anchor>
      <arglist>(VoxelType *, VoxelType *, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>GetPointerToVoxels</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a104db5b6f2ee2f4084a04872c8573e8b</anchor>
      <arglist>(int=0, int=0, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>GetPointerToVoxels</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a15b7ffcef7e56b684d2169979014a875</anchor>
      <arglist>(int=0, int=0, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac3ed57e94c462dfe3601cf7f66a445c2</anchor>
      <arglist>(int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0de61c4adca6157ff7b500f4d0d56911</anchor>
      <arglist>(GenericImage &amp;, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8251408aa84fb85b8583d208a184d819</anchor>
      <arglist>(BaseImage *&amp;, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac36175064977d4782a170149b9448977</anchor>
      <arglist>(int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6621082cdb165d9ed4794fdb4eb5d71b</anchor>
      <arglist>(GenericImage &amp;, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a84cdb7c8b51fd4a47763e62dbd575af5</anchor>
      <arglist>(BaseImage *&amp;, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abe7f8ef6bec99b4aa26044b092c2a736</anchor>
      <arglist>(int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a00e75bbca2e78eb11eec0aebee7cfe8f</anchor>
      <arglist>(GenericImage &amp;, int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a379c778e5af9bf81e3a41ecf6170ebfb</anchor>
      <arglist>(BaseImage *&amp;, int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>GetSD</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8543f89af05963eba7aa8a119435c891</anchor>
      <arglist>(int=1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GravityCenter</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a51f690a439ee530631e833af25f47829</anchor>
      <arglist>(Point &amp;, int=1, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae4d54c2ca77b26fde859983026d6a0b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af253119c9bfebded7fcf1851e8cb33cb</anchor>
      <arglist>(const ImageAttributes &amp;, int, VoxelType *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7c54e079d14ba29f5926d22d9df834d8</anchor>
      <arglist>(const ImageAttributes &amp;, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a65fecfa6503a5efabda0735d3e549e1e</anchor>
      <arglist>(const ImageAttributes &amp;, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a1fa24fb2c109a33e151963b82b99e070</anchor>
      <arglist>(int, int, int, int, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a32e241530add68b8c28c54332fe33de0</anchor>
      <arglist>(int, int, int=1, int=1, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>Mean</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a32cdc73f07c6dc8dbcbc490a2204e088</anchor>
      <arglist>(bool fg=true) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>N</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a496434256dc5192f2779d5f81d87b947</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8a36b56ce661f7f31434a0626e82132e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BinaryImage</type>
      <name>operator!=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a77c82ed325b1874d3a8c06223be89e42</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa7cb99b55c3a646c2ebdcf7917cde637</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4ad5e9c0c9ab34124f0e55d190ee301d</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a827c9b59c984acac4e022dc0106a934a</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>adf9c5c774348994f91cd124d9f0fcaba</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5a4b1e7a9bae33a42c4861f99e15f7a5</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a34d4670feb9061cb727fc272454ba6eb</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6f6fe7f8faf9828e71f1ccad698d7626</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9525714b6c6106e856bec1ee9fb1685e</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aed3c57d6751d0adcff1eb1b04d15b44b</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aef4b7a5c68842ec2daf53a279b364912</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a596668714940d32fb7bf58bac5937660</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ab9c8e9fff15b53e89dfa761a69511289</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a94a96350bb990f2e5ec7685edf89d569</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5c2857f420374992f4a46309db49240b</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afb2e42fab40de7e4fac80225404d84e3</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a66e58c4dccc96254b524f965dc7d6a89</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a527a2223374ee4bbde03375b0a238a1c</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a769c42188c12089b1cf304c810f14845</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae646992523114572c8f065e96b7166fd</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a39ffec97fd762491d870b485ad1d400e</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator&lt;</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a101b700326307e3a6408cfefe3ca92db</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator&lt;=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a53035485aaa44f15426f870559cd18b1</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a791283732c42afd117395d1a754c2ed4</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a3bb07963185796aae989ba8ddb879053</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7fae2d3a58fafd2e6bbf9fde503528df</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ab0f32514dcf52d8adccbd7ddfbc8ace5</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa24c879e08eb3a260f1ee25c81be8deb</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator&gt;</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a66a7440e7d716c4b52aaea4a8446c450</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator&gt;=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af7506bbcbcf11ca189b3076b50277bd9</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acca310957bfc1080c170ee74ded4d2f4</anchor>
      <arglist>(int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acd494c7039d4e01ebb50f28174ace41b</anchor>
      <arglist>(int, int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6d7409f3810cf37d28f1a6d54da389ad</anchor>
      <arglist>(int, int, int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a83bebf9102ff90bbe9909d3eea4f0203</anchor>
      <arglist>(int, int, int, int, VoxelType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a954e524a435eb076d754c25ec35ff70c</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a39d1b7a776221fe6194c09cccb0cf046</anchor>
      <arglist>(int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a95a1963f21b8cf5ce3ef8d522a2c9d97</anchor>
      <arglist>(int, int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a1ae9c02fea5c78cb0b08c70c09007b3a</anchor>
      <arglist>(int, int, int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aca43b3b19e9cae2713e75f77b79bc057</anchor>
      <arglist>(int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9850de321e58f0f5e7fad19a525d4a19</anchor>
      <arglist>(int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0a6b96f01802ce4979080a760349ad43</anchor>
      <arglist>(int, int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8e3e7e98e2125e6d67c863d0e0b885a8</anchor>
      <arglist>(int, int, int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutBackgroundValueAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6bb6d016f6ccea67282b860f568539f3</anchor>
      <arglist>(double, bool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaebc2118b033685d63b4de58474b9ef4</anchor>
      <arglist>(VoxelType, VoxelType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa316f5a21ab3ba5977cf392a090b6475</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a708ae3d97e7a8b7059b5829e9883ea74</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectX</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a066d214c4daf267324f4c2136a903599</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acdfb190a01078516fb0fba69a7890267</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa2c2e7f13fe7c798097d9d0f9d39e850</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abf8a6743897aff16f781f2ecd5abe2d8</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a78017bb91a3ce0432806c30b515032f1</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac883f262c6c2eb972fe3bd456fd254b9</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapYT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaa59b1fd9ff936b245cab7cc8358b876</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapYZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a65e4e2027b97364a89d2b44b23be7ec0</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapZT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af92bd0b1fd14208e4c4d75e20f5e59bf</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af4f220e0ce27c720f2e2fe8a65ef9818</anchor>
      <arglist>(const char *) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0296e4d2327ce9d8d472e8f9d3c123e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AllocateImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abe7dcb1a46f3a03139ddff0868904b6c</anchor>
      <arglist>(VoxelType *=NULL)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VoxelType *</type>
      <name>_data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0635297758e00bbb8fa1e88f8ae1d6f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_dataOwner</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8e9935f940685d83a3801206233308b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VoxelType ****</type>
      <name>_matrix</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af8b64b576c435cc9b2c45f32107186d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericImage&lt; int &gt;</name>
    <filename>classmirtk_1_1GenericImage.html</filename>
    <base>mirtk::BaseImage</base>
    <member kind="typedef">
      <type>voxel_info&lt; ScalarType &gt;::RealType</type>
      <name>RealScalarType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afdfda4355104b4da07b05d8f29252e10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>voxel_info&lt; VoxelType &gt;::RealType</type>
      <name>RealType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a09dbec2268636b04aa16abafdaf9220b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>voxel_info&lt; VoxelType &gt;::ScalarType</type>
      <name>ScalarType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7aea0b35509e44c68b6e020636d60a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>VoxelType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a55a99adf761d77572a527a21cc372e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa82ebcacc1fae9b7a19b46b474731913</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BaseImage *</type>
      <name>Copy</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acf6a04d2d7bd3671f64b3638763f28ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af52cb4ad8aaaf44a8aa770eca74fe16d</anchor>
      <arglist>(const VoxelType *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a410229a08c619fae5aa519b931409153</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ad097e09589880dbb4034d91f0acefa14</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CropPad</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a747819222a44455523592665a56d4fbf</anchor>
      <arglist>(int margin=0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa10e4d965a0037827cbc692cee7282d1</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afbd0a3b1f357f43e019823e1090b93f4</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>addf9fb643b5b9c9a87c0e65a74f14ad4</anchor>
      <arglist>(int=0) const</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a10fe304a442f2ef1296a3ae265e16222</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af873ad2419fe41d778d45c8e85129a4f</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ad9d46dfaa14c31d052671f1e92f38d6c</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aeaab3c83332d510cc33d9757da6adb6e</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipYT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abd3ab9ed62d30464c0d42f73cfe2de06</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipYZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a57e0a0f8604497a1456cffa8a9e96127</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipZT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4894d798397b80ec36c2254ec5487226</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a118750dfb5ebd094b96dcbeeb813cd51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac0102c5d63d051c576c12efc3f073260</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9375aecd646973353434e1708d1a482f</anchor>
      <arglist>(int, int, int=1, int=1, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aee16def97204142dc963393c06de4dad</anchor>
      <arglist>(int, int, int, int, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a31edbc653fb6c1b988f66b1a979281db</anchor>
      <arglist>(const ImageAttributes &amp;, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6dd7ef3516cdfa041201a95e00a2c95d</anchor>
      <arglist>(const ImageAttributes &amp;, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac351b5a71c61e4fc9427c7005dee9465</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae7120d0d1573263d7362fc94c0511993</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a3682d26b021f75aa328b2b0f11020173</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac29847f1cdc609843392e9e9162e6d8f</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a94b4a28283f0dee0f39109b2e9556e64</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4c863bfab3c0103a5ab8f5431c05e3d7</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4bfc0bdcd763528f83bffa32d7db4d2c</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a83029368a40f49c4d3213e1718e01c15</anchor>
      <arglist>(Vector &amp;, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaab5c8c05d91f7d430a81fb4a48264aa</anchor>
      <arglist>(Vector &amp;, int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aad643794ba7086212b2f28c2487aec94</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4ef28e8492266470356c768f8b40cebf</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>GetAverage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a52a6375792cd5d272c20f4dced52ba91</anchor>
      <arglist>(int=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abf9e71af9c077932c75f6d019e8e40bb</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7e65e9e46e6b290e09ffc72188bac0d8</anchor>
      <arglist>(int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a44f27382851f5e12c7b27de8d7e91c06</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4f31ce7a8d59490a31125989658fa7e3</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetDataType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a168ee61bb4fc187136a9fae26056c917</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetDataTypeMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8bc7d2156321adb2242a014c9f2e8640</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetDataTypeMin</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aac767f97f9a1f77e55e42832abf80dca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetDataTypeSize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a780573a3084b9dbafb7a2b5a190bfdc3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa6def8f3546157eb4c7030eee953357f</anchor>
      <arglist>(int, int=-1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae8adc523c5971c67a7fcc755cc243aa6</anchor>
      <arglist>(GenericImage &amp;, int, int=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0d08b6db0ef93f2823863c0948f96a71</anchor>
      <arglist>(BaseImage *&amp;, int, int=-1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMaxPosition</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abb137b5432522ab67a2e4d59128bd973</anchor>
      <arglist>(Point &amp;, int=1, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4b22954ec673e1dc0c0fce41876d88d1</anchor>
      <arglist>(VoxelType &amp;, VoxelType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5f259e24198f43f5f5b5c36a491957b9</anchor>
      <arglist>(VoxelType &amp;, VoxelType &amp;, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae5245568d869b5a01f07ed7a1f9a78c8</anchor>
      <arglist>(VoxelType *, VoxelType *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa2cf3c6d470e024603a2ddd2c6d9e683</anchor>
      <arglist>(VoxelType *, VoxelType *, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMaxPad</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac9fa85710e8504ba0200f77bd6ab7476</anchor>
      <arglist>(VoxelType *, VoxelType *, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>GetPointerToVoxels</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a104db5b6f2ee2f4084a04872c8573e8b</anchor>
      <arglist>(int=0, int=0, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>GetPointerToVoxels</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a15b7ffcef7e56b684d2169979014a875</anchor>
      <arglist>(int=0, int=0, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac3ed57e94c462dfe3601cf7f66a445c2</anchor>
      <arglist>(int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0de61c4adca6157ff7b500f4d0d56911</anchor>
      <arglist>(GenericImage &amp;, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8251408aa84fb85b8583d208a184d819</anchor>
      <arglist>(BaseImage *&amp;, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac36175064977d4782a170149b9448977</anchor>
      <arglist>(int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6621082cdb165d9ed4794fdb4eb5d71b</anchor>
      <arglist>(GenericImage &amp;, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a84cdb7c8b51fd4a47763e62dbd575af5</anchor>
      <arglist>(BaseImage *&amp;, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abe7f8ef6bec99b4aa26044b092c2a736</anchor>
      <arglist>(int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a00e75bbca2e78eb11eec0aebee7cfe8f</anchor>
      <arglist>(GenericImage &amp;, int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a379c778e5af9bf81e3a41ecf6170ebfb</anchor>
      <arglist>(BaseImage *&amp;, int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>GetSD</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8543f89af05963eba7aa8a119435c891</anchor>
      <arglist>(int=1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GravityCenter</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a51f690a439ee530631e833af25f47829</anchor>
      <arglist>(Point &amp;, int=1, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae4d54c2ca77b26fde859983026d6a0b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af253119c9bfebded7fcf1851e8cb33cb</anchor>
      <arglist>(const ImageAttributes &amp;, int, VoxelType *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7c54e079d14ba29f5926d22d9df834d8</anchor>
      <arglist>(const ImageAttributes &amp;, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a65fecfa6503a5efabda0735d3e549e1e</anchor>
      <arglist>(const ImageAttributes &amp;, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a1fa24fb2c109a33e151963b82b99e070</anchor>
      <arglist>(int, int, int, int, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a32e241530add68b8c28c54332fe33de0</anchor>
      <arglist>(int, int, int=1, int=1, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>Mean</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a32cdc73f07c6dc8dbcbc490a2204e088</anchor>
      <arglist>(bool fg=true) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>N</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a496434256dc5192f2779d5f81d87b947</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8a36b56ce661f7f31434a0626e82132e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BinaryImage</type>
      <name>operator!=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a77c82ed325b1874d3a8c06223be89e42</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa7cb99b55c3a646c2ebdcf7917cde637</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4ad5e9c0c9ab34124f0e55d190ee301d</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a827c9b59c984acac4e022dc0106a934a</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>adf9c5c774348994f91cd124d9f0fcaba</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5a4b1e7a9bae33a42c4861f99e15f7a5</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a34d4670feb9061cb727fc272454ba6eb</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6f6fe7f8faf9828e71f1ccad698d7626</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9525714b6c6106e856bec1ee9fb1685e</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aed3c57d6751d0adcff1eb1b04d15b44b</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aef4b7a5c68842ec2daf53a279b364912</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a596668714940d32fb7bf58bac5937660</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ab9c8e9fff15b53e89dfa761a69511289</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a94a96350bb990f2e5ec7685edf89d569</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5c2857f420374992f4a46309db49240b</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afb2e42fab40de7e4fac80225404d84e3</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a66e58c4dccc96254b524f965dc7d6a89</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a527a2223374ee4bbde03375b0a238a1c</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a769c42188c12089b1cf304c810f14845</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae646992523114572c8f065e96b7166fd</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a39ffec97fd762491d870b485ad1d400e</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator&lt;</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a101b700326307e3a6408cfefe3ca92db</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator&lt;=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a53035485aaa44f15426f870559cd18b1</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a791283732c42afd117395d1a754c2ed4</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a3bb07963185796aae989ba8ddb879053</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7fae2d3a58fafd2e6bbf9fde503528df</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ab0f32514dcf52d8adccbd7ddfbc8ace5</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa24c879e08eb3a260f1ee25c81be8deb</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator&gt;</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a66a7440e7d716c4b52aaea4a8446c450</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator&gt;=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af7506bbcbcf11ca189b3076b50277bd9</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acca310957bfc1080c170ee74ded4d2f4</anchor>
      <arglist>(int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acd494c7039d4e01ebb50f28174ace41b</anchor>
      <arglist>(int, int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6d7409f3810cf37d28f1a6d54da389ad</anchor>
      <arglist>(int, int, int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a83bebf9102ff90bbe9909d3eea4f0203</anchor>
      <arglist>(int, int, int, int, VoxelType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a954e524a435eb076d754c25ec35ff70c</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a39d1b7a776221fe6194c09cccb0cf046</anchor>
      <arglist>(int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a95a1963f21b8cf5ce3ef8d522a2c9d97</anchor>
      <arglist>(int, int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a1ae9c02fea5c78cb0b08c70c09007b3a</anchor>
      <arglist>(int, int, int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aca43b3b19e9cae2713e75f77b79bc057</anchor>
      <arglist>(int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9850de321e58f0f5e7fad19a525d4a19</anchor>
      <arglist>(int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0a6b96f01802ce4979080a760349ad43</anchor>
      <arglist>(int, int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8e3e7e98e2125e6d67c863d0e0b885a8</anchor>
      <arglist>(int, int, int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutBackgroundValueAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6bb6d016f6ccea67282b860f568539f3</anchor>
      <arglist>(double, bool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaebc2118b033685d63b4de58474b9ef4</anchor>
      <arglist>(VoxelType, VoxelType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa316f5a21ab3ba5977cf392a090b6475</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a708ae3d97e7a8b7059b5829e9883ea74</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectX</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a066d214c4daf267324f4c2136a903599</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acdfb190a01078516fb0fba69a7890267</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa2c2e7f13fe7c798097d9d0f9d39e850</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abf8a6743897aff16f781f2ecd5abe2d8</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a78017bb91a3ce0432806c30b515032f1</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac883f262c6c2eb972fe3bd456fd254b9</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapYT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaa59b1fd9ff936b245cab7cc8358b876</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapYZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a65e4e2027b97364a89d2b44b23be7ec0</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapZT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af92bd0b1fd14208e4c4d75e20f5e59bf</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af4f220e0ce27c720f2e2fe8a65ef9818</anchor>
      <arglist>(const char *) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0296e4d2327ce9d8d472e8f9d3c123e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AllocateImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abe7dcb1a46f3a03139ddff0868904b6c</anchor>
      <arglist>(VoxelType *=NULL)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VoxelType *</type>
      <name>_data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0635297758e00bbb8fa1e88f8ae1d6f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_dataOwner</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8e9935f940685d83a3801206233308b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VoxelType ****</type>
      <name>_matrix</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af8b64b576c435cc9b2c45f32107186d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericImage&lt; RealPixel &gt;</name>
    <filename>classmirtk_1_1GenericImage.html</filename>
    <base>mirtk::BaseImage</base>
    <member kind="typedef">
      <type>voxel_info&lt; ScalarType &gt;::RealType</type>
      <name>RealScalarType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afdfda4355104b4da07b05d8f29252e10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>voxel_info&lt; VoxelType &gt;::RealType</type>
      <name>RealType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a09dbec2268636b04aa16abafdaf9220b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>voxel_info&lt; VoxelType &gt;::ScalarType</type>
      <name>ScalarType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7aea0b35509e44c68b6e020636d60a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealPixel</type>
      <name>VoxelType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a55a99adf761d77572a527a21cc372e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa82ebcacc1fae9b7a19b46b474731913</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BaseImage *</type>
      <name>Copy</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acf6a04d2d7bd3671f64b3638763f28ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af52cb4ad8aaaf44a8aa770eca74fe16d</anchor>
      <arglist>(const VoxelType *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a410229a08c619fae5aa519b931409153</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ad097e09589880dbb4034d91f0acefa14</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CropPad</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a747819222a44455523592665a56d4fbf</anchor>
      <arglist>(int margin=0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa10e4d965a0037827cbc692cee7282d1</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afbd0a3b1f357f43e019823e1090b93f4</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>addf9fb643b5b9c9a87c0e65a74f14ad4</anchor>
      <arglist>(int=0) const</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a10fe304a442f2ef1296a3ae265e16222</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af873ad2419fe41d778d45c8e85129a4f</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ad9d46dfaa14c31d052671f1e92f38d6c</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aeaab3c83332d510cc33d9757da6adb6e</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipYT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abd3ab9ed62d30464c0d42f73cfe2de06</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipYZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a57e0a0f8604497a1456cffa8a9e96127</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipZT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4894d798397b80ec36c2254ec5487226</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a118750dfb5ebd094b96dcbeeb813cd51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac0102c5d63d051c576c12efc3f073260</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9375aecd646973353434e1708d1a482f</anchor>
      <arglist>(int, int, int=1, int=1, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aee16def97204142dc963393c06de4dad</anchor>
      <arglist>(int, int, int, int, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a31edbc653fb6c1b988f66b1a979281db</anchor>
      <arglist>(const ImageAttributes &amp;, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6dd7ef3516cdfa041201a95e00a2c95d</anchor>
      <arglist>(const ImageAttributes &amp;, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac351b5a71c61e4fc9427c7005dee9465</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae7120d0d1573263d7362fc94c0511993</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a3682d26b021f75aa328b2b0f11020173</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac29847f1cdc609843392e9e9162e6d8f</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a94b4a28283f0dee0f39109b2e9556e64</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4c863bfab3c0103a5ab8f5431c05e3d7</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4bfc0bdcd763528f83bffa32d7db4d2c</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a83029368a40f49c4d3213e1718e01c15</anchor>
      <arglist>(Vector &amp;, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaab5c8c05d91f7d430a81fb4a48264aa</anchor>
      <arglist>(Vector &amp;, int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aad643794ba7086212b2f28c2487aec94</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4ef28e8492266470356c768f8b40cebf</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>GetAverage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a52a6375792cd5d272c20f4dced52ba91</anchor>
      <arglist>(int=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abf9e71af9c077932c75f6d019e8e40bb</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7e65e9e46e6b290e09ffc72188bac0d8</anchor>
      <arglist>(int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a44f27382851f5e12c7b27de8d7e91c06</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4f31ce7a8d59490a31125989658fa7e3</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetDataType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a168ee61bb4fc187136a9fae26056c917</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetDataTypeMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8bc7d2156321adb2242a014c9f2e8640</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetDataTypeMin</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aac767f97f9a1f77e55e42832abf80dca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetDataTypeSize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a780573a3084b9dbafb7a2b5a190bfdc3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa6def8f3546157eb4c7030eee953357f</anchor>
      <arglist>(int, int=-1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae8adc523c5971c67a7fcc755cc243aa6</anchor>
      <arglist>(GenericImage &amp;, int, int=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0d08b6db0ef93f2823863c0948f96a71</anchor>
      <arglist>(BaseImage *&amp;, int, int=-1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMaxPosition</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abb137b5432522ab67a2e4d59128bd973</anchor>
      <arglist>(Point &amp;, int=1, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4b22954ec673e1dc0c0fce41876d88d1</anchor>
      <arglist>(VoxelType &amp;, VoxelType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5f259e24198f43f5f5b5c36a491957b9</anchor>
      <arglist>(VoxelType &amp;, VoxelType &amp;, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae5245568d869b5a01f07ed7a1f9a78c8</anchor>
      <arglist>(VoxelType *, VoxelType *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa2cf3c6d470e024603a2ddd2c6d9e683</anchor>
      <arglist>(VoxelType *, VoxelType *, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMaxPad</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac9fa85710e8504ba0200f77bd6ab7476</anchor>
      <arglist>(VoxelType *, VoxelType *, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>GetPointerToVoxels</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a104db5b6f2ee2f4084a04872c8573e8b</anchor>
      <arglist>(int=0, int=0, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>GetPointerToVoxels</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a15b7ffcef7e56b684d2169979014a875</anchor>
      <arglist>(int=0, int=0, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac3ed57e94c462dfe3601cf7f66a445c2</anchor>
      <arglist>(int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0de61c4adca6157ff7b500f4d0d56911</anchor>
      <arglist>(GenericImage &amp;, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8251408aa84fb85b8583d208a184d819</anchor>
      <arglist>(BaseImage *&amp;, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac36175064977d4782a170149b9448977</anchor>
      <arglist>(int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6621082cdb165d9ed4794fdb4eb5d71b</anchor>
      <arglist>(GenericImage &amp;, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a84cdb7c8b51fd4a47763e62dbd575af5</anchor>
      <arglist>(BaseImage *&amp;, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abe7f8ef6bec99b4aa26044b092c2a736</anchor>
      <arglist>(int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a00e75bbca2e78eb11eec0aebee7cfe8f</anchor>
      <arglist>(GenericImage &amp;, int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a379c778e5af9bf81e3a41ecf6170ebfb</anchor>
      <arglist>(BaseImage *&amp;, int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>GetSD</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8543f89af05963eba7aa8a119435c891</anchor>
      <arglist>(int=1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GravityCenter</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a51f690a439ee530631e833af25f47829</anchor>
      <arglist>(Point &amp;, int=1, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae4d54c2ca77b26fde859983026d6a0b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af253119c9bfebded7fcf1851e8cb33cb</anchor>
      <arglist>(const ImageAttributes &amp;, int, VoxelType *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7c54e079d14ba29f5926d22d9df834d8</anchor>
      <arglist>(const ImageAttributes &amp;, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a65fecfa6503a5efabda0735d3e549e1e</anchor>
      <arglist>(const ImageAttributes &amp;, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a1fa24fb2c109a33e151963b82b99e070</anchor>
      <arglist>(int, int, int, int, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a32e241530add68b8c28c54332fe33de0</anchor>
      <arglist>(int, int, int=1, int=1, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>Mean</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a32cdc73f07c6dc8dbcbc490a2204e088</anchor>
      <arglist>(bool fg=true) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>N</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a496434256dc5192f2779d5f81d87b947</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8a36b56ce661f7f31434a0626e82132e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BinaryImage</type>
      <name>operator!=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a77c82ed325b1874d3a8c06223be89e42</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa7cb99b55c3a646c2ebdcf7917cde637</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4ad5e9c0c9ab34124f0e55d190ee301d</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a827c9b59c984acac4e022dc0106a934a</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>adf9c5c774348994f91cd124d9f0fcaba</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5a4b1e7a9bae33a42c4861f99e15f7a5</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a34d4670feb9061cb727fc272454ba6eb</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6f6fe7f8faf9828e71f1ccad698d7626</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9525714b6c6106e856bec1ee9fb1685e</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aed3c57d6751d0adcff1eb1b04d15b44b</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aef4b7a5c68842ec2daf53a279b364912</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a596668714940d32fb7bf58bac5937660</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ab9c8e9fff15b53e89dfa761a69511289</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a94a96350bb990f2e5ec7685edf89d569</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5c2857f420374992f4a46309db49240b</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afb2e42fab40de7e4fac80225404d84e3</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a66e58c4dccc96254b524f965dc7d6a89</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a527a2223374ee4bbde03375b0a238a1c</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a769c42188c12089b1cf304c810f14845</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae646992523114572c8f065e96b7166fd</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a39ffec97fd762491d870b485ad1d400e</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator&lt;</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a101b700326307e3a6408cfefe3ca92db</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator&lt;=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a53035485aaa44f15426f870559cd18b1</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a791283732c42afd117395d1a754c2ed4</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a3bb07963185796aae989ba8ddb879053</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7fae2d3a58fafd2e6bbf9fde503528df</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ab0f32514dcf52d8adccbd7ddfbc8ace5</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa24c879e08eb3a260f1ee25c81be8deb</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator&gt;</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a66a7440e7d716c4b52aaea4a8446c450</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator&gt;=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af7506bbcbcf11ca189b3076b50277bd9</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acca310957bfc1080c170ee74ded4d2f4</anchor>
      <arglist>(int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acd494c7039d4e01ebb50f28174ace41b</anchor>
      <arglist>(int, int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6d7409f3810cf37d28f1a6d54da389ad</anchor>
      <arglist>(int, int, int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a83bebf9102ff90bbe9909d3eea4f0203</anchor>
      <arglist>(int, int, int, int, VoxelType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a954e524a435eb076d754c25ec35ff70c</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a39d1b7a776221fe6194c09cccb0cf046</anchor>
      <arglist>(int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a95a1963f21b8cf5ce3ef8d522a2c9d97</anchor>
      <arglist>(int, int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a1ae9c02fea5c78cb0b08c70c09007b3a</anchor>
      <arglist>(int, int, int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aca43b3b19e9cae2713e75f77b79bc057</anchor>
      <arglist>(int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9850de321e58f0f5e7fad19a525d4a19</anchor>
      <arglist>(int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0a6b96f01802ce4979080a760349ad43</anchor>
      <arglist>(int, int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8e3e7e98e2125e6d67c863d0e0b885a8</anchor>
      <arglist>(int, int, int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutBackgroundValueAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6bb6d016f6ccea67282b860f568539f3</anchor>
      <arglist>(double, bool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaebc2118b033685d63b4de58474b9ef4</anchor>
      <arglist>(VoxelType, VoxelType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa316f5a21ab3ba5977cf392a090b6475</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a708ae3d97e7a8b7059b5829e9883ea74</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectX</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a066d214c4daf267324f4c2136a903599</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acdfb190a01078516fb0fba69a7890267</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa2c2e7f13fe7c798097d9d0f9d39e850</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abf8a6743897aff16f781f2ecd5abe2d8</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a78017bb91a3ce0432806c30b515032f1</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac883f262c6c2eb972fe3bd456fd254b9</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapYT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaa59b1fd9ff936b245cab7cc8358b876</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapYZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a65e4e2027b97364a89d2b44b23be7ec0</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapZT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af92bd0b1fd14208e4c4d75e20f5e59bf</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af4f220e0ce27c720f2e2fe8a65ef9818</anchor>
      <arglist>(const char *) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0296e4d2327ce9d8d472e8f9d3c123e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AllocateImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abe7dcb1a46f3a03139ddff0868904b6c</anchor>
      <arglist>(VoxelType *=NULL)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VoxelType *</type>
      <name>_data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0635297758e00bbb8fa1e88f8ae1d6f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_dataOwner</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8e9935f940685d83a3801206233308b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VoxelType ****</type>
      <name>_matrix</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af8b64b576c435cc9b2c45f32107186d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericImage&lt; RealType &gt;</name>
    <filename>classmirtk_1_1GenericImage.html</filename>
    <base>mirtk::BaseImage</base>
    <member kind="typedef">
      <type>voxel_info&lt; ScalarType &gt;::RealType</type>
      <name>RealScalarType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afdfda4355104b4da07b05d8f29252e10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>voxel_info&lt; VoxelType &gt;::RealType</type>
      <name>RealType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a09dbec2268636b04aa16abafdaf9220b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>voxel_info&lt; VoxelType &gt;::ScalarType</type>
      <name>ScalarType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7aea0b35509e44c68b6e020636d60a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealType</type>
      <name>VoxelType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a55a99adf761d77572a527a21cc372e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa82ebcacc1fae9b7a19b46b474731913</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BaseImage *</type>
      <name>Copy</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acf6a04d2d7bd3671f64b3638763f28ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af52cb4ad8aaaf44a8aa770eca74fe16d</anchor>
      <arglist>(const VoxelType *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a410229a08c619fae5aa519b931409153</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ad097e09589880dbb4034d91f0acefa14</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CropPad</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a747819222a44455523592665a56d4fbf</anchor>
      <arglist>(int margin=0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa10e4d965a0037827cbc692cee7282d1</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afbd0a3b1f357f43e019823e1090b93f4</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>addf9fb643b5b9c9a87c0e65a74f14ad4</anchor>
      <arglist>(int=0) const</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a10fe304a442f2ef1296a3ae265e16222</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af873ad2419fe41d778d45c8e85129a4f</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ad9d46dfaa14c31d052671f1e92f38d6c</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aeaab3c83332d510cc33d9757da6adb6e</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipYT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abd3ab9ed62d30464c0d42f73cfe2de06</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipYZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a57e0a0f8604497a1456cffa8a9e96127</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipZT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4894d798397b80ec36c2254ec5487226</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a118750dfb5ebd094b96dcbeeb813cd51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac0102c5d63d051c576c12efc3f073260</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9375aecd646973353434e1708d1a482f</anchor>
      <arglist>(int, int, int=1, int=1, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aee16def97204142dc963393c06de4dad</anchor>
      <arglist>(int, int, int, int, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a31edbc653fb6c1b988f66b1a979281db</anchor>
      <arglist>(const ImageAttributes &amp;, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6dd7ef3516cdfa041201a95e00a2c95d</anchor>
      <arglist>(const ImageAttributes &amp;, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac351b5a71c61e4fc9427c7005dee9465</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae7120d0d1573263d7362fc94c0511993</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a3682d26b021f75aa328b2b0f11020173</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac29847f1cdc609843392e9e9162e6d8f</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a94b4a28283f0dee0f39109b2e9556e64</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4c863bfab3c0103a5ab8f5431c05e3d7</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4bfc0bdcd763528f83bffa32d7db4d2c</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a83029368a40f49c4d3213e1718e01c15</anchor>
      <arglist>(Vector &amp;, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaab5c8c05d91f7d430a81fb4a48264aa</anchor>
      <arglist>(Vector &amp;, int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aad643794ba7086212b2f28c2487aec94</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4ef28e8492266470356c768f8b40cebf</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>GetAverage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a52a6375792cd5d272c20f4dced52ba91</anchor>
      <arglist>(int=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abf9e71af9c077932c75f6d019e8e40bb</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7e65e9e46e6b290e09ffc72188bac0d8</anchor>
      <arglist>(int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a44f27382851f5e12c7b27de8d7e91c06</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4f31ce7a8d59490a31125989658fa7e3</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetDataType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a168ee61bb4fc187136a9fae26056c917</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetDataTypeMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8bc7d2156321adb2242a014c9f2e8640</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetDataTypeMin</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aac767f97f9a1f77e55e42832abf80dca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetDataTypeSize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a780573a3084b9dbafb7a2b5a190bfdc3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa6def8f3546157eb4c7030eee953357f</anchor>
      <arglist>(int, int=-1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae8adc523c5971c67a7fcc755cc243aa6</anchor>
      <arglist>(GenericImage &amp;, int, int=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0d08b6db0ef93f2823863c0948f96a71</anchor>
      <arglist>(BaseImage *&amp;, int, int=-1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMaxPosition</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abb137b5432522ab67a2e4d59128bd973</anchor>
      <arglist>(Point &amp;, int=1, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4b22954ec673e1dc0c0fce41876d88d1</anchor>
      <arglist>(VoxelType &amp;, VoxelType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5f259e24198f43f5f5b5c36a491957b9</anchor>
      <arglist>(VoxelType &amp;, VoxelType &amp;, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae5245568d869b5a01f07ed7a1f9a78c8</anchor>
      <arglist>(VoxelType *, VoxelType *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa2cf3c6d470e024603a2ddd2c6d9e683</anchor>
      <arglist>(VoxelType *, VoxelType *, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMaxPad</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac9fa85710e8504ba0200f77bd6ab7476</anchor>
      <arglist>(VoxelType *, VoxelType *, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>GetPointerToVoxels</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a104db5b6f2ee2f4084a04872c8573e8b</anchor>
      <arglist>(int=0, int=0, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>GetPointerToVoxels</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a15b7ffcef7e56b684d2169979014a875</anchor>
      <arglist>(int=0, int=0, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac3ed57e94c462dfe3601cf7f66a445c2</anchor>
      <arglist>(int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0de61c4adca6157ff7b500f4d0d56911</anchor>
      <arglist>(GenericImage &amp;, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8251408aa84fb85b8583d208a184d819</anchor>
      <arglist>(BaseImage *&amp;, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac36175064977d4782a170149b9448977</anchor>
      <arglist>(int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6621082cdb165d9ed4794fdb4eb5d71b</anchor>
      <arglist>(GenericImage &amp;, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a84cdb7c8b51fd4a47763e62dbd575af5</anchor>
      <arglist>(BaseImage *&amp;, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abe7f8ef6bec99b4aa26044b092c2a736</anchor>
      <arglist>(int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a00e75bbca2e78eb11eec0aebee7cfe8f</anchor>
      <arglist>(GenericImage &amp;, int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a379c778e5af9bf81e3a41ecf6170ebfb</anchor>
      <arglist>(BaseImage *&amp;, int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>GetSD</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8543f89af05963eba7aa8a119435c891</anchor>
      <arglist>(int=1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GravityCenter</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a51f690a439ee530631e833af25f47829</anchor>
      <arglist>(Point &amp;, int=1, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae4d54c2ca77b26fde859983026d6a0b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af253119c9bfebded7fcf1851e8cb33cb</anchor>
      <arglist>(const ImageAttributes &amp;, int, VoxelType *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7c54e079d14ba29f5926d22d9df834d8</anchor>
      <arglist>(const ImageAttributes &amp;, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a65fecfa6503a5efabda0735d3e549e1e</anchor>
      <arglist>(const ImageAttributes &amp;, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a1fa24fb2c109a33e151963b82b99e070</anchor>
      <arglist>(int, int, int, int, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a32e241530add68b8c28c54332fe33de0</anchor>
      <arglist>(int, int, int=1, int=1, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>Mean</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a32cdc73f07c6dc8dbcbc490a2204e088</anchor>
      <arglist>(bool fg=true) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>N</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a496434256dc5192f2779d5f81d87b947</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8a36b56ce661f7f31434a0626e82132e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BinaryImage</type>
      <name>operator!=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a77c82ed325b1874d3a8c06223be89e42</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa7cb99b55c3a646c2ebdcf7917cde637</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4ad5e9c0c9ab34124f0e55d190ee301d</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a827c9b59c984acac4e022dc0106a934a</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>adf9c5c774348994f91cd124d9f0fcaba</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5a4b1e7a9bae33a42c4861f99e15f7a5</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a34d4670feb9061cb727fc272454ba6eb</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6f6fe7f8faf9828e71f1ccad698d7626</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9525714b6c6106e856bec1ee9fb1685e</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aed3c57d6751d0adcff1eb1b04d15b44b</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aef4b7a5c68842ec2daf53a279b364912</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a596668714940d32fb7bf58bac5937660</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ab9c8e9fff15b53e89dfa761a69511289</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a94a96350bb990f2e5ec7685edf89d569</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5c2857f420374992f4a46309db49240b</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afb2e42fab40de7e4fac80225404d84e3</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a66e58c4dccc96254b524f965dc7d6a89</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a527a2223374ee4bbde03375b0a238a1c</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a769c42188c12089b1cf304c810f14845</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae646992523114572c8f065e96b7166fd</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a39ffec97fd762491d870b485ad1d400e</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator&lt;</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a101b700326307e3a6408cfefe3ca92db</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator&lt;=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a53035485aaa44f15426f870559cd18b1</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a791283732c42afd117395d1a754c2ed4</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a3bb07963185796aae989ba8ddb879053</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7fae2d3a58fafd2e6bbf9fde503528df</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ab0f32514dcf52d8adccbd7ddfbc8ace5</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa24c879e08eb3a260f1ee25c81be8deb</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator&gt;</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a66a7440e7d716c4b52aaea4a8446c450</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator&gt;=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af7506bbcbcf11ca189b3076b50277bd9</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acca310957bfc1080c170ee74ded4d2f4</anchor>
      <arglist>(int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acd494c7039d4e01ebb50f28174ace41b</anchor>
      <arglist>(int, int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6d7409f3810cf37d28f1a6d54da389ad</anchor>
      <arglist>(int, int, int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a83bebf9102ff90bbe9909d3eea4f0203</anchor>
      <arglist>(int, int, int, int, VoxelType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a954e524a435eb076d754c25ec35ff70c</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a39d1b7a776221fe6194c09cccb0cf046</anchor>
      <arglist>(int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a95a1963f21b8cf5ce3ef8d522a2c9d97</anchor>
      <arglist>(int, int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a1ae9c02fea5c78cb0b08c70c09007b3a</anchor>
      <arglist>(int, int, int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aca43b3b19e9cae2713e75f77b79bc057</anchor>
      <arglist>(int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9850de321e58f0f5e7fad19a525d4a19</anchor>
      <arglist>(int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0a6b96f01802ce4979080a760349ad43</anchor>
      <arglist>(int, int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8e3e7e98e2125e6d67c863d0e0b885a8</anchor>
      <arglist>(int, int, int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutBackgroundValueAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6bb6d016f6ccea67282b860f568539f3</anchor>
      <arglist>(double, bool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaebc2118b033685d63b4de58474b9ef4</anchor>
      <arglist>(VoxelType, VoxelType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa316f5a21ab3ba5977cf392a090b6475</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a708ae3d97e7a8b7059b5829e9883ea74</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectX</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a066d214c4daf267324f4c2136a903599</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acdfb190a01078516fb0fba69a7890267</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa2c2e7f13fe7c798097d9d0f9d39e850</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abf8a6743897aff16f781f2ecd5abe2d8</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a78017bb91a3ce0432806c30b515032f1</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac883f262c6c2eb972fe3bd456fd254b9</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapYT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaa59b1fd9ff936b245cab7cc8358b876</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapYZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a65e4e2027b97364a89d2b44b23be7ec0</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapZT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af92bd0b1fd14208e4c4d75e20f5e59bf</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af4f220e0ce27c720f2e2fe8a65ef9818</anchor>
      <arglist>(const char *) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0296e4d2327ce9d8d472e8f9d3c123e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AllocateImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abe7dcb1a46f3a03139ddff0868904b6c</anchor>
      <arglist>(VoxelType *=NULL)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VoxelType *</type>
      <name>_data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0635297758e00bbb8fa1e88f8ae1d6f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_dataOwner</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8e9935f940685d83a3801206233308b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VoxelType ****</type>
      <name>_matrix</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af8b64b576c435cc9b2c45f32107186d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericImage&lt; T1 &gt;</name>
    <filename>classmirtk_1_1GenericImage.html</filename>
    <base>mirtk::BaseImage</base>
    <member kind="typedef">
      <type>voxel_info&lt; ScalarType &gt;::RealType</type>
      <name>RealScalarType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afdfda4355104b4da07b05d8f29252e10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>voxel_info&lt; VoxelType &gt;::RealType</type>
      <name>RealType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a09dbec2268636b04aa16abafdaf9220b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>voxel_info&lt; VoxelType &gt;::ScalarType</type>
      <name>ScalarType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7aea0b35509e44c68b6e020636d60a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T1</type>
      <name>VoxelType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a55a99adf761d77572a527a21cc372e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa82ebcacc1fae9b7a19b46b474731913</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BaseImage *</type>
      <name>Copy</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acf6a04d2d7bd3671f64b3638763f28ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af52cb4ad8aaaf44a8aa770eca74fe16d</anchor>
      <arglist>(const VoxelType *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a410229a08c619fae5aa519b931409153</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ad097e09589880dbb4034d91f0acefa14</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CropPad</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a747819222a44455523592665a56d4fbf</anchor>
      <arglist>(int margin=0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa10e4d965a0037827cbc692cee7282d1</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afbd0a3b1f357f43e019823e1090b93f4</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>addf9fb643b5b9c9a87c0e65a74f14ad4</anchor>
      <arglist>(int=0) const</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a10fe304a442f2ef1296a3ae265e16222</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af873ad2419fe41d778d45c8e85129a4f</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ad9d46dfaa14c31d052671f1e92f38d6c</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aeaab3c83332d510cc33d9757da6adb6e</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipYT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abd3ab9ed62d30464c0d42f73cfe2de06</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipYZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a57e0a0f8604497a1456cffa8a9e96127</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipZT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4894d798397b80ec36c2254ec5487226</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a118750dfb5ebd094b96dcbeeb813cd51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac0102c5d63d051c576c12efc3f073260</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9375aecd646973353434e1708d1a482f</anchor>
      <arglist>(int, int, int=1, int=1, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aee16def97204142dc963393c06de4dad</anchor>
      <arglist>(int, int, int, int, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a31edbc653fb6c1b988f66b1a979281db</anchor>
      <arglist>(const ImageAttributes &amp;, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6dd7ef3516cdfa041201a95e00a2c95d</anchor>
      <arglist>(const ImageAttributes &amp;, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac351b5a71c61e4fc9427c7005dee9465</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae7120d0d1573263d7362fc94c0511993</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a3682d26b021f75aa328b2b0f11020173</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac29847f1cdc609843392e9e9162e6d8f</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a94b4a28283f0dee0f39109b2e9556e64</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4c863bfab3c0103a5ab8f5431c05e3d7</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4bfc0bdcd763528f83bffa32d7db4d2c</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a83029368a40f49c4d3213e1718e01c15</anchor>
      <arglist>(Vector &amp;, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaab5c8c05d91f7d430a81fb4a48264aa</anchor>
      <arglist>(Vector &amp;, int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aad643794ba7086212b2f28c2487aec94</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4ef28e8492266470356c768f8b40cebf</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>GetAverage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a52a6375792cd5d272c20f4dced52ba91</anchor>
      <arglist>(int=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abf9e71af9c077932c75f6d019e8e40bb</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7e65e9e46e6b290e09ffc72188bac0d8</anchor>
      <arglist>(int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a44f27382851f5e12c7b27de8d7e91c06</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4f31ce7a8d59490a31125989658fa7e3</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetDataType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a168ee61bb4fc187136a9fae26056c917</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetDataTypeMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8bc7d2156321adb2242a014c9f2e8640</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetDataTypeMin</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aac767f97f9a1f77e55e42832abf80dca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetDataTypeSize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a780573a3084b9dbafb7a2b5a190bfdc3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa6def8f3546157eb4c7030eee953357f</anchor>
      <arglist>(int, int=-1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae8adc523c5971c67a7fcc755cc243aa6</anchor>
      <arglist>(GenericImage &amp;, int, int=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0d08b6db0ef93f2823863c0948f96a71</anchor>
      <arglist>(BaseImage *&amp;, int, int=-1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMaxPosition</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abb137b5432522ab67a2e4d59128bd973</anchor>
      <arglist>(Point &amp;, int=1, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4b22954ec673e1dc0c0fce41876d88d1</anchor>
      <arglist>(VoxelType &amp;, VoxelType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5f259e24198f43f5f5b5c36a491957b9</anchor>
      <arglist>(VoxelType &amp;, VoxelType &amp;, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae5245568d869b5a01f07ed7a1f9a78c8</anchor>
      <arglist>(VoxelType *, VoxelType *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa2cf3c6d470e024603a2ddd2c6d9e683</anchor>
      <arglist>(VoxelType *, VoxelType *, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMaxPad</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac9fa85710e8504ba0200f77bd6ab7476</anchor>
      <arglist>(VoxelType *, VoxelType *, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>GetPointerToVoxels</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a104db5b6f2ee2f4084a04872c8573e8b</anchor>
      <arglist>(int=0, int=0, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>GetPointerToVoxels</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a15b7ffcef7e56b684d2169979014a875</anchor>
      <arglist>(int=0, int=0, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac3ed57e94c462dfe3601cf7f66a445c2</anchor>
      <arglist>(int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0de61c4adca6157ff7b500f4d0d56911</anchor>
      <arglist>(GenericImage &amp;, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8251408aa84fb85b8583d208a184d819</anchor>
      <arglist>(BaseImage *&amp;, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac36175064977d4782a170149b9448977</anchor>
      <arglist>(int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6621082cdb165d9ed4794fdb4eb5d71b</anchor>
      <arglist>(GenericImage &amp;, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a84cdb7c8b51fd4a47763e62dbd575af5</anchor>
      <arglist>(BaseImage *&amp;, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abe7f8ef6bec99b4aa26044b092c2a736</anchor>
      <arglist>(int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a00e75bbca2e78eb11eec0aebee7cfe8f</anchor>
      <arglist>(GenericImage &amp;, int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a379c778e5af9bf81e3a41ecf6170ebfb</anchor>
      <arglist>(BaseImage *&amp;, int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>GetSD</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8543f89af05963eba7aa8a119435c891</anchor>
      <arglist>(int=1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GravityCenter</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a51f690a439ee530631e833af25f47829</anchor>
      <arglist>(Point &amp;, int=1, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae4d54c2ca77b26fde859983026d6a0b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af253119c9bfebded7fcf1851e8cb33cb</anchor>
      <arglist>(const ImageAttributes &amp;, int, VoxelType *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7c54e079d14ba29f5926d22d9df834d8</anchor>
      <arglist>(const ImageAttributes &amp;, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a65fecfa6503a5efabda0735d3e549e1e</anchor>
      <arglist>(const ImageAttributes &amp;, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a1fa24fb2c109a33e151963b82b99e070</anchor>
      <arglist>(int, int, int, int, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a32e241530add68b8c28c54332fe33de0</anchor>
      <arglist>(int, int, int=1, int=1, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>Mean</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a32cdc73f07c6dc8dbcbc490a2204e088</anchor>
      <arglist>(bool fg=true) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>N</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a496434256dc5192f2779d5f81d87b947</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8a36b56ce661f7f31434a0626e82132e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BinaryImage</type>
      <name>operator!=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a77c82ed325b1874d3a8c06223be89e42</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa7cb99b55c3a646c2ebdcf7917cde637</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4ad5e9c0c9ab34124f0e55d190ee301d</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a827c9b59c984acac4e022dc0106a934a</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>adf9c5c774348994f91cd124d9f0fcaba</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5a4b1e7a9bae33a42c4861f99e15f7a5</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a34d4670feb9061cb727fc272454ba6eb</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6f6fe7f8faf9828e71f1ccad698d7626</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9525714b6c6106e856bec1ee9fb1685e</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aed3c57d6751d0adcff1eb1b04d15b44b</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aef4b7a5c68842ec2daf53a279b364912</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a596668714940d32fb7bf58bac5937660</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ab9c8e9fff15b53e89dfa761a69511289</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a94a96350bb990f2e5ec7685edf89d569</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5c2857f420374992f4a46309db49240b</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afb2e42fab40de7e4fac80225404d84e3</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a66e58c4dccc96254b524f965dc7d6a89</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a527a2223374ee4bbde03375b0a238a1c</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a769c42188c12089b1cf304c810f14845</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae646992523114572c8f065e96b7166fd</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a39ffec97fd762491d870b485ad1d400e</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator&lt;</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a101b700326307e3a6408cfefe3ca92db</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator&lt;=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a53035485aaa44f15426f870559cd18b1</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a791283732c42afd117395d1a754c2ed4</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a3bb07963185796aae989ba8ddb879053</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7fae2d3a58fafd2e6bbf9fde503528df</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ab0f32514dcf52d8adccbd7ddfbc8ace5</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa24c879e08eb3a260f1ee25c81be8deb</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator&gt;</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a66a7440e7d716c4b52aaea4a8446c450</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator&gt;=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af7506bbcbcf11ca189b3076b50277bd9</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acca310957bfc1080c170ee74ded4d2f4</anchor>
      <arglist>(int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acd494c7039d4e01ebb50f28174ace41b</anchor>
      <arglist>(int, int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6d7409f3810cf37d28f1a6d54da389ad</anchor>
      <arglist>(int, int, int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a83bebf9102ff90bbe9909d3eea4f0203</anchor>
      <arglist>(int, int, int, int, VoxelType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a954e524a435eb076d754c25ec35ff70c</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a39d1b7a776221fe6194c09cccb0cf046</anchor>
      <arglist>(int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a95a1963f21b8cf5ce3ef8d522a2c9d97</anchor>
      <arglist>(int, int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a1ae9c02fea5c78cb0b08c70c09007b3a</anchor>
      <arglist>(int, int, int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aca43b3b19e9cae2713e75f77b79bc057</anchor>
      <arglist>(int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9850de321e58f0f5e7fad19a525d4a19</anchor>
      <arglist>(int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0a6b96f01802ce4979080a760349ad43</anchor>
      <arglist>(int, int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8e3e7e98e2125e6d67c863d0e0b885a8</anchor>
      <arglist>(int, int, int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutBackgroundValueAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6bb6d016f6ccea67282b860f568539f3</anchor>
      <arglist>(double, bool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaebc2118b033685d63b4de58474b9ef4</anchor>
      <arglist>(VoxelType, VoxelType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa316f5a21ab3ba5977cf392a090b6475</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a708ae3d97e7a8b7059b5829e9883ea74</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectX</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a066d214c4daf267324f4c2136a903599</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acdfb190a01078516fb0fba69a7890267</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa2c2e7f13fe7c798097d9d0f9d39e850</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abf8a6743897aff16f781f2ecd5abe2d8</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a78017bb91a3ce0432806c30b515032f1</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac883f262c6c2eb972fe3bd456fd254b9</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapYT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaa59b1fd9ff936b245cab7cc8358b876</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapYZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a65e4e2027b97364a89d2b44b23be7ec0</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapZT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af92bd0b1fd14208e4c4d75e20f5e59bf</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af4f220e0ce27c720f2e2fe8a65ef9818</anchor>
      <arglist>(const char *) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0296e4d2327ce9d8d472e8f9d3c123e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AllocateImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abe7dcb1a46f3a03139ddff0868904b6c</anchor>
      <arglist>(VoxelType *=NULL)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VoxelType *</type>
      <name>_data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0635297758e00bbb8fa1e88f8ae1d6f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_dataOwner</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8e9935f940685d83a3801206233308b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VoxelType ****</type>
      <name>_matrix</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af8b64b576c435cc9b2c45f32107186d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericImage&lt; T2 &gt;</name>
    <filename>classmirtk_1_1GenericImage.html</filename>
    <base>mirtk::BaseImage</base>
    <member kind="typedef">
      <type>voxel_info&lt; ScalarType &gt;::RealType</type>
      <name>RealScalarType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afdfda4355104b4da07b05d8f29252e10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>voxel_info&lt; VoxelType &gt;::RealType</type>
      <name>RealType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a09dbec2268636b04aa16abafdaf9220b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>voxel_info&lt; VoxelType &gt;::ScalarType</type>
      <name>ScalarType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7aea0b35509e44c68b6e020636d60a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T2</type>
      <name>VoxelType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a55a99adf761d77572a527a21cc372e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa82ebcacc1fae9b7a19b46b474731913</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BaseImage *</type>
      <name>Copy</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acf6a04d2d7bd3671f64b3638763f28ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af52cb4ad8aaaf44a8aa770eca74fe16d</anchor>
      <arglist>(const VoxelType *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a410229a08c619fae5aa519b931409153</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ad097e09589880dbb4034d91f0acefa14</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CropPad</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a747819222a44455523592665a56d4fbf</anchor>
      <arglist>(int margin=0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa10e4d965a0037827cbc692cee7282d1</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afbd0a3b1f357f43e019823e1090b93f4</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>addf9fb643b5b9c9a87c0e65a74f14ad4</anchor>
      <arglist>(int=0) const</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a10fe304a442f2ef1296a3ae265e16222</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af873ad2419fe41d778d45c8e85129a4f</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ad9d46dfaa14c31d052671f1e92f38d6c</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aeaab3c83332d510cc33d9757da6adb6e</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipYT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abd3ab9ed62d30464c0d42f73cfe2de06</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipYZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a57e0a0f8604497a1456cffa8a9e96127</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipZT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4894d798397b80ec36c2254ec5487226</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a118750dfb5ebd094b96dcbeeb813cd51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac0102c5d63d051c576c12efc3f073260</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9375aecd646973353434e1708d1a482f</anchor>
      <arglist>(int, int, int=1, int=1, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aee16def97204142dc963393c06de4dad</anchor>
      <arglist>(int, int, int, int, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a31edbc653fb6c1b988f66b1a979281db</anchor>
      <arglist>(const ImageAttributes &amp;, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6dd7ef3516cdfa041201a95e00a2c95d</anchor>
      <arglist>(const ImageAttributes &amp;, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac351b5a71c61e4fc9427c7005dee9465</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae7120d0d1573263d7362fc94c0511993</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a3682d26b021f75aa328b2b0f11020173</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac29847f1cdc609843392e9e9162e6d8f</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a94b4a28283f0dee0f39109b2e9556e64</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4c863bfab3c0103a5ab8f5431c05e3d7</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4bfc0bdcd763528f83bffa32d7db4d2c</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a83029368a40f49c4d3213e1718e01c15</anchor>
      <arglist>(Vector &amp;, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaab5c8c05d91f7d430a81fb4a48264aa</anchor>
      <arglist>(Vector &amp;, int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aad643794ba7086212b2f28c2487aec94</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4ef28e8492266470356c768f8b40cebf</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>GetAverage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a52a6375792cd5d272c20f4dced52ba91</anchor>
      <arglist>(int=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abf9e71af9c077932c75f6d019e8e40bb</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7e65e9e46e6b290e09ffc72188bac0d8</anchor>
      <arglist>(int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a44f27382851f5e12c7b27de8d7e91c06</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4f31ce7a8d59490a31125989658fa7e3</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetDataType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a168ee61bb4fc187136a9fae26056c917</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetDataTypeMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8bc7d2156321adb2242a014c9f2e8640</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetDataTypeMin</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aac767f97f9a1f77e55e42832abf80dca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetDataTypeSize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a780573a3084b9dbafb7a2b5a190bfdc3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa6def8f3546157eb4c7030eee953357f</anchor>
      <arglist>(int, int=-1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae8adc523c5971c67a7fcc755cc243aa6</anchor>
      <arglist>(GenericImage &amp;, int, int=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0d08b6db0ef93f2823863c0948f96a71</anchor>
      <arglist>(BaseImage *&amp;, int, int=-1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMaxPosition</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abb137b5432522ab67a2e4d59128bd973</anchor>
      <arglist>(Point &amp;, int=1, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4b22954ec673e1dc0c0fce41876d88d1</anchor>
      <arglist>(VoxelType &amp;, VoxelType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5f259e24198f43f5f5b5c36a491957b9</anchor>
      <arglist>(VoxelType &amp;, VoxelType &amp;, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae5245568d869b5a01f07ed7a1f9a78c8</anchor>
      <arglist>(VoxelType *, VoxelType *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa2cf3c6d470e024603a2ddd2c6d9e683</anchor>
      <arglist>(VoxelType *, VoxelType *, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMaxPad</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac9fa85710e8504ba0200f77bd6ab7476</anchor>
      <arglist>(VoxelType *, VoxelType *, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>GetPointerToVoxels</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a104db5b6f2ee2f4084a04872c8573e8b</anchor>
      <arglist>(int=0, int=0, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>GetPointerToVoxels</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a15b7ffcef7e56b684d2169979014a875</anchor>
      <arglist>(int=0, int=0, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac3ed57e94c462dfe3601cf7f66a445c2</anchor>
      <arglist>(int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0de61c4adca6157ff7b500f4d0d56911</anchor>
      <arglist>(GenericImage &amp;, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8251408aa84fb85b8583d208a184d819</anchor>
      <arglist>(BaseImage *&amp;, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac36175064977d4782a170149b9448977</anchor>
      <arglist>(int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6621082cdb165d9ed4794fdb4eb5d71b</anchor>
      <arglist>(GenericImage &amp;, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a84cdb7c8b51fd4a47763e62dbd575af5</anchor>
      <arglist>(BaseImage *&amp;, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abe7f8ef6bec99b4aa26044b092c2a736</anchor>
      <arglist>(int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a00e75bbca2e78eb11eec0aebee7cfe8f</anchor>
      <arglist>(GenericImage &amp;, int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a379c778e5af9bf81e3a41ecf6170ebfb</anchor>
      <arglist>(BaseImage *&amp;, int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>GetSD</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8543f89af05963eba7aa8a119435c891</anchor>
      <arglist>(int=1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GravityCenter</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a51f690a439ee530631e833af25f47829</anchor>
      <arglist>(Point &amp;, int=1, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae4d54c2ca77b26fde859983026d6a0b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af253119c9bfebded7fcf1851e8cb33cb</anchor>
      <arglist>(const ImageAttributes &amp;, int, VoxelType *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7c54e079d14ba29f5926d22d9df834d8</anchor>
      <arglist>(const ImageAttributes &amp;, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a65fecfa6503a5efabda0735d3e549e1e</anchor>
      <arglist>(const ImageAttributes &amp;, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a1fa24fb2c109a33e151963b82b99e070</anchor>
      <arglist>(int, int, int, int, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a32e241530add68b8c28c54332fe33de0</anchor>
      <arglist>(int, int, int=1, int=1, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>Mean</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a32cdc73f07c6dc8dbcbc490a2204e088</anchor>
      <arglist>(bool fg=true) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>N</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a496434256dc5192f2779d5f81d87b947</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8a36b56ce661f7f31434a0626e82132e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BinaryImage</type>
      <name>operator!=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a77c82ed325b1874d3a8c06223be89e42</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa7cb99b55c3a646c2ebdcf7917cde637</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4ad5e9c0c9ab34124f0e55d190ee301d</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a827c9b59c984acac4e022dc0106a934a</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>adf9c5c774348994f91cd124d9f0fcaba</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5a4b1e7a9bae33a42c4861f99e15f7a5</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a34d4670feb9061cb727fc272454ba6eb</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6f6fe7f8faf9828e71f1ccad698d7626</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9525714b6c6106e856bec1ee9fb1685e</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aed3c57d6751d0adcff1eb1b04d15b44b</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aef4b7a5c68842ec2daf53a279b364912</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a596668714940d32fb7bf58bac5937660</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ab9c8e9fff15b53e89dfa761a69511289</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a94a96350bb990f2e5ec7685edf89d569</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5c2857f420374992f4a46309db49240b</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afb2e42fab40de7e4fac80225404d84e3</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a66e58c4dccc96254b524f965dc7d6a89</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a527a2223374ee4bbde03375b0a238a1c</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a769c42188c12089b1cf304c810f14845</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae646992523114572c8f065e96b7166fd</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a39ffec97fd762491d870b485ad1d400e</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator&lt;</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a101b700326307e3a6408cfefe3ca92db</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator&lt;=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a53035485aaa44f15426f870559cd18b1</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a791283732c42afd117395d1a754c2ed4</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a3bb07963185796aae989ba8ddb879053</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7fae2d3a58fafd2e6bbf9fde503528df</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ab0f32514dcf52d8adccbd7ddfbc8ace5</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa24c879e08eb3a260f1ee25c81be8deb</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator&gt;</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a66a7440e7d716c4b52aaea4a8446c450</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator&gt;=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af7506bbcbcf11ca189b3076b50277bd9</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acca310957bfc1080c170ee74ded4d2f4</anchor>
      <arglist>(int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acd494c7039d4e01ebb50f28174ace41b</anchor>
      <arglist>(int, int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6d7409f3810cf37d28f1a6d54da389ad</anchor>
      <arglist>(int, int, int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a83bebf9102ff90bbe9909d3eea4f0203</anchor>
      <arglist>(int, int, int, int, VoxelType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a954e524a435eb076d754c25ec35ff70c</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a39d1b7a776221fe6194c09cccb0cf046</anchor>
      <arglist>(int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a95a1963f21b8cf5ce3ef8d522a2c9d97</anchor>
      <arglist>(int, int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a1ae9c02fea5c78cb0b08c70c09007b3a</anchor>
      <arglist>(int, int, int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aca43b3b19e9cae2713e75f77b79bc057</anchor>
      <arglist>(int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9850de321e58f0f5e7fad19a525d4a19</anchor>
      <arglist>(int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0a6b96f01802ce4979080a760349ad43</anchor>
      <arglist>(int, int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8e3e7e98e2125e6d67c863d0e0b885a8</anchor>
      <arglist>(int, int, int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutBackgroundValueAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6bb6d016f6ccea67282b860f568539f3</anchor>
      <arglist>(double, bool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaebc2118b033685d63b4de58474b9ef4</anchor>
      <arglist>(VoxelType, VoxelType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa316f5a21ab3ba5977cf392a090b6475</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a708ae3d97e7a8b7059b5829e9883ea74</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectX</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a066d214c4daf267324f4c2136a903599</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acdfb190a01078516fb0fba69a7890267</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa2c2e7f13fe7c798097d9d0f9d39e850</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abf8a6743897aff16f781f2ecd5abe2d8</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a78017bb91a3ce0432806c30b515032f1</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac883f262c6c2eb972fe3bd456fd254b9</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapYT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaa59b1fd9ff936b245cab7cc8358b876</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapYZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a65e4e2027b97364a89d2b44b23be7ec0</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapZT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af92bd0b1fd14208e4c4d75e20f5e59bf</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af4f220e0ce27c720f2e2fe8a65ef9818</anchor>
      <arglist>(const char *) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0296e4d2327ce9d8d472e8f9d3c123e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AllocateImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abe7dcb1a46f3a03139ddff0868904b6c</anchor>
      <arglist>(VoxelType *=NULL)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VoxelType *</type>
      <name>_data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0635297758e00bbb8fa1e88f8ae1d6f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_dataOwner</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8e9935f940685d83a3801206233308b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VoxelType ****</type>
      <name>_matrix</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af8b64b576c435cc9b2c45f32107186d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericImage&lt; T3 &gt;</name>
    <filename>classmirtk_1_1GenericImage.html</filename>
    <base>mirtk::BaseImage</base>
    <member kind="typedef">
      <type>voxel_info&lt; ScalarType &gt;::RealType</type>
      <name>RealScalarType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afdfda4355104b4da07b05d8f29252e10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>voxel_info&lt; VoxelType &gt;::RealType</type>
      <name>RealType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a09dbec2268636b04aa16abafdaf9220b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>voxel_info&lt; VoxelType &gt;::ScalarType</type>
      <name>ScalarType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7aea0b35509e44c68b6e020636d60a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T3</type>
      <name>VoxelType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a55a99adf761d77572a527a21cc372e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa82ebcacc1fae9b7a19b46b474731913</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BaseImage *</type>
      <name>Copy</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acf6a04d2d7bd3671f64b3638763f28ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af52cb4ad8aaaf44a8aa770eca74fe16d</anchor>
      <arglist>(const VoxelType *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a410229a08c619fae5aa519b931409153</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ad097e09589880dbb4034d91f0acefa14</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CropPad</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a747819222a44455523592665a56d4fbf</anchor>
      <arglist>(int margin=0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa10e4d965a0037827cbc692cee7282d1</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afbd0a3b1f357f43e019823e1090b93f4</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>addf9fb643b5b9c9a87c0e65a74f14ad4</anchor>
      <arglist>(int=0) const</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a10fe304a442f2ef1296a3ae265e16222</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af873ad2419fe41d778d45c8e85129a4f</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ad9d46dfaa14c31d052671f1e92f38d6c</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aeaab3c83332d510cc33d9757da6adb6e</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipYT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abd3ab9ed62d30464c0d42f73cfe2de06</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipYZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a57e0a0f8604497a1456cffa8a9e96127</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipZT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4894d798397b80ec36c2254ec5487226</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a118750dfb5ebd094b96dcbeeb813cd51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac0102c5d63d051c576c12efc3f073260</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9375aecd646973353434e1708d1a482f</anchor>
      <arglist>(int, int, int=1, int=1, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aee16def97204142dc963393c06de4dad</anchor>
      <arglist>(int, int, int, int, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a31edbc653fb6c1b988f66b1a979281db</anchor>
      <arglist>(const ImageAttributes &amp;, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6dd7ef3516cdfa041201a95e00a2c95d</anchor>
      <arglist>(const ImageAttributes &amp;, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac351b5a71c61e4fc9427c7005dee9465</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae7120d0d1573263d7362fc94c0511993</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a3682d26b021f75aa328b2b0f11020173</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac29847f1cdc609843392e9e9162e6d8f</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a94b4a28283f0dee0f39109b2e9556e64</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4c863bfab3c0103a5ab8f5431c05e3d7</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4bfc0bdcd763528f83bffa32d7db4d2c</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a83029368a40f49c4d3213e1718e01c15</anchor>
      <arglist>(Vector &amp;, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaab5c8c05d91f7d430a81fb4a48264aa</anchor>
      <arglist>(Vector &amp;, int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aad643794ba7086212b2f28c2487aec94</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4ef28e8492266470356c768f8b40cebf</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>GetAverage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a52a6375792cd5d272c20f4dced52ba91</anchor>
      <arglist>(int=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abf9e71af9c077932c75f6d019e8e40bb</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7e65e9e46e6b290e09ffc72188bac0d8</anchor>
      <arglist>(int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a44f27382851f5e12c7b27de8d7e91c06</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4f31ce7a8d59490a31125989658fa7e3</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetDataType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a168ee61bb4fc187136a9fae26056c917</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetDataTypeMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8bc7d2156321adb2242a014c9f2e8640</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetDataTypeMin</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aac767f97f9a1f77e55e42832abf80dca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetDataTypeSize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a780573a3084b9dbafb7a2b5a190bfdc3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa6def8f3546157eb4c7030eee953357f</anchor>
      <arglist>(int, int=-1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae8adc523c5971c67a7fcc755cc243aa6</anchor>
      <arglist>(GenericImage &amp;, int, int=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0d08b6db0ef93f2823863c0948f96a71</anchor>
      <arglist>(BaseImage *&amp;, int, int=-1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMaxPosition</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abb137b5432522ab67a2e4d59128bd973</anchor>
      <arglist>(Point &amp;, int=1, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4b22954ec673e1dc0c0fce41876d88d1</anchor>
      <arglist>(VoxelType &amp;, VoxelType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5f259e24198f43f5f5b5c36a491957b9</anchor>
      <arglist>(VoxelType &amp;, VoxelType &amp;, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae5245568d869b5a01f07ed7a1f9a78c8</anchor>
      <arglist>(VoxelType *, VoxelType *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa2cf3c6d470e024603a2ddd2c6d9e683</anchor>
      <arglist>(VoxelType *, VoxelType *, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMaxPad</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac9fa85710e8504ba0200f77bd6ab7476</anchor>
      <arglist>(VoxelType *, VoxelType *, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>GetPointerToVoxels</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a104db5b6f2ee2f4084a04872c8573e8b</anchor>
      <arglist>(int=0, int=0, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>GetPointerToVoxels</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a15b7ffcef7e56b684d2169979014a875</anchor>
      <arglist>(int=0, int=0, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac3ed57e94c462dfe3601cf7f66a445c2</anchor>
      <arglist>(int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0de61c4adca6157ff7b500f4d0d56911</anchor>
      <arglist>(GenericImage &amp;, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8251408aa84fb85b8583d208a184d819</anchor>
      <arglist>(BaseImage *&amp;, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac36175064977d4782a170149b9448977</anchor>
      <arglist>(int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6621082cdb165d9ed4794fdb4eb5d71b</anchor>
      <arglist>(GenericImage &amp;, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a84cdb7c8b51fd4a47763e62dbd575af5</anchor>
      <arglist>(BaseImage *&amp;, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abe7f8ef6bec99b4aa26044b092c2a736</anchor>
      <arglist>(int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a00e75bbca2e78eb11eec0aebee7cfe8f</anchor>
      <arglist>(GenericImage &amp;, int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a379c778e5af9bf81e3a41ecf6170ebfb</anchor>
      <arglist>(BaseImage *&amp;, int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>GetSD</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8543f89af05963eba7aa8a119435c891</anchor>
      <arglist>(int=1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GravityCenter</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a51f690a439ee530631e833af25f47829</anchor>
      <arglist>(Point &amp;, int=1, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae4d54c2ca77b26fde859983026d6a0b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af253119c9bfebded7fcf1851e8cb33cb</anchor>
      <arglist>(const ImageAttributes &amp;, int, VoxelType *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7c54e079d14ba29f5926d22d9df834d8</anchor>
      <arglist>(const ImageAttributes &amp;, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a65fecfa6503a5efabda0735d3e549e1e</anchor>
      <arglist>(const ImageAttributes &amp;, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a1fa24fb2c109a33e151963b82b99e070</anchor>
      <arglist>(int, int, int, int, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a32e241530add68b8c28c54332fe33de0</anchor>
      <arglist>(int, int, int=1, int=1, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>Mean</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a32cdc73f07c6dc8dbcbc490a2204e088</anchor>
      <arglist>(bool fg=true) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>N</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a496434256dc5192f2779d5f81d87b947</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8a36b56ce661f7f31434a0626e82132e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BinaryImage</type>
      <name>operator!=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a77c82ed325b1874d3a8c06223be89e42</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa7cb99b55c3a646c2ebdcf7917cde637</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4ad5e9c0c9ab34124f0e55d190ee301d</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a827c9b59c984acac4e022dc0106a934a</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>adf9c5c774348994f91cd124d9f0fcaba</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5a4b1e7a9bae33a42c4861f99e15f7a5</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a34d4670feb9061cb727fc272454ba6eb</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6f6fe7f8faf9828e71f1ccad698d7626</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9525714b6c6106e856bec1ee9fb1685e</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aed3c57d6751d0adcff1eb1b04d15b44b</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aef4b7a5c68842ec2daf53a279b364912</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a596668714940d32fb7bf58bac5937660</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ab9c8e9fff15b53e89dfa761a69511289</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a94a96350bb990f2e5ec7685edf89d569</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5c2857f420374992f4a46309db49240b</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afb2e42fab40de7e4fac80225404d84e3</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a66e58c4dccc96254b524f965dc7d6a89</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a527a2223374ee4bbde03375b0a238a1c</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a769c42188c12089b1cf304c810f14845</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae646992523114572c8f065e96b7166fd</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a39ffec97fd762491d870b485ad1d400e</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator&lt;</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a101b700326307e3a6408cfefe3ca92db</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator&lt;=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a53035485aaa44f15426f870559cd18b1</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a791283732c42afd117395d1a754c2ed4</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a3bb07963185796aae989ba8ddb879053</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7fae2d3a58fafd2e6bbf9fde503528df</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ab0f32514dcf52d8adccbd7ddfbc8ace5</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa24c879e08eb3a260f1ee25c81be8deb</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator&gt;</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a66a7440e7d716c4b52aaea4a8446c450</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator&gt;=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af7506bbcbcf11ca189b3076b50277bd9</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acca310957bfc1080c170ee74ded4d2f4</anchor>
      <arglist>(int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acd494c7039d4e01ebb50f28174ace41b</anchor>
      <arglist>(int, int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6d7409f3810cf37d28f1a6d54da389ad</anchor>
      <arglist>(int, int, int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a83bebf9102ff90bbe9909d3eea4f0203</anchor>
      <arglist>(int, int, int, int, VoxelType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a954e524a435eb076d754c25ec35ff70c</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a39d1b7a776221fe6194c09cccb0cf046</anchor>
      <arglist>(int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a95a1963f21b8cf5ce3ef8d522a2c9d97</anchor>
      <arglist>(int, int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a1ae9c02fea5c78cb0b08c70c09007b3a</anchor>
      <arglist>(int, int, int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aca43b3b19e9cae2713e75f77b79bc057</anchor>
      <arglist>(int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9850de321e58f0f5e7fad19a525d4a19</anchor>
      <arglist>(int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0a6b96f01802ce4979080a760349ad43</anchor>
      <arglist>(int, int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8e3e7e98e2125e6d67c863d0e0b885a8</anchor>
      <arglist>(int, int, int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutBackgroundValueAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6bb6d016f6ccea67282b860f568539f3</anchor>
      <arglist>(double, bool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaebc2118b033685d63b4de58474b9ef4</anchor>
      <arglist>(VoxelType, VoxelType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa316f5a21ab3ba5977cf392a090b6475</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a708ae3d97e7a8b7059b5829e9883ea74</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectX</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a066d214c4daf267324f4c2136a903599</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acdfb190a01078516fb0fba69a7890267</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa2c2e7f13fe7c798097d9d0f9d39e850</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abf8a6743897aff16f781f2ecd5abe2d8</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a78017bb91a3ce0432806c30b515032f1</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac883f262c6c2eb972fe3bd456fd254b9</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapYT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaa59b1fd9ff936b245cab7cc8358b876</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapYZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a65e4e2027b97364a89d2b44b23be7ec0</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapZT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af92bd0b1fd14208e4c4d75e20f5e59bf</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af4f220e0ce27c720f2e2fe8a65ef9818</anchor>
      <arglist>(const char *) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0296e4d2327ce9d8d472e8f9d3c123e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AllocateImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abe7dcb1a46f3a03139ddff0868904b6c</anchor>
      <arglist>(VoxelType *=NULL)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VoxelType *</type>
      <name>_data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0635297758e00bbb8fa1e88f8ae1d6f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_dataOwner</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8e9935f940685d83a3801206233308b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VoxelType ****</type>
      <name>_matrix</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af8b64b576c435cc9b2c45f32107186d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericImage&lt; T4 &gt;</name>
    <filename>classmirtk_1_1GenericImage.html</filename>
    <base>mirtk::BaseImage</base>
    <member kind="typedef">
      <type>voxel_info&lt; ScalarType &gt;::RealType</type>
      <name>RealScalarType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afdfda4355104b4da07b05d8f29252e10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>voxel_info&lt; VoxelType &gt;::RealType</type>
      <name>RealType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a09dbec2268636b04aa16abafdaf9220b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>voxel_info&lt; VoxelType &gt;::ScalarType</type>
      <name>ScalarType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7aea0b35509e44c68b6e020636d60a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T4</type>
      <name>VoxelType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a55a99adf761d77572a527a21cc372e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa82ebcacc1fae9b7a19b46b474731913</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BaseImage *</type>
      <name>Copy</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acf6a04d2d7bd3671f64b3638763f28ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af52cb4ad8aaaf44a8aa770eca74fe16d</anchor>
      <arglist>(const VoxelType *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a410229a08c619fae5aa519b931409153</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ad097e09589880dbb4034d91f0acefa14</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CropPad</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a747819222a44455523592665a56d4fbf</anchor>
      <arglist>(int margin=0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa10e4d965a0037827cbc692cee7282d1</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afbd0a3b1f357f43e019823e1090b93f4</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>addf9fb643b5b9c9a87c0e65a74f14ad4</anchor>
      <arglist>(int=0) const</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a10fe304a442f2ef1296a3ae265e16222</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af873ad2419fe41d778d45c8e85129a4f</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ad9d46dfaa14c31d052671f1e92f38d6c</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aeaab3c83332d510cc33d9757da6adb6e</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipYT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abd3ab9ed62d30464c0d42f73cfe2de06</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipYZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a57e0a0f8604497a1456cffa8a9e96127</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipZT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4894d798397b80ec36c2254ec5487226</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a118750dfb5ebd094b96dcbeeb813cd51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac0102c5d63d051c576c12efc3f073260</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9375aecd646973353434e1708d1a482f</anchor>
      <arglist>(int, int, int=1, int=1, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aee16def97204142dc963393c06de4dad</anchor>
      <arglist>(int, int, int, int, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a31edbc653fb6c1b988f66b1a979281db</anchor>
      <arglist>(const ImageAttributes &amp;, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6dd7ef3516cdfa041201a95e00a2c95d</anchor>
      <arglist>(const ImageAttributes &amp;, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac351b5a71c61e4fc9427c7005dee9465</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae7120d0d1573263d7362fc94c0511993</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a3682d26b021f75aa328b2b0f11020173</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac29847f1cdc609843392e9e9162e6d8f</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a94b4a28283f0dee0f39109b2e9556e64</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4c863bfab3c0103a5ab8f5431c05e3d7</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4bfc0bdcd763528f83bffa32d7db4d2c</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a83029368a40f49c4d3213e1718e01c15</anchor>
      <arglist>(Vector &amp;, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaab5c8c05d91f7d430a81fb4a48264aa</anchor>
      <arglist>(Vector &amp;, int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aad643794ba7086212b2f28c2487aec94</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4ef28e8492266470356c768f8b40cebf</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>GetAverage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a52a6375792cd5d272c20f4dced52ba91</anchor>
      <arglist>(int=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abf9e71af9c077932c75f6d019e8e40bb</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7e65e9e46e6b290e09ffc72188bac0d8</anchor>
      <arglist>(int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a44f27382851f5e12c7b27de8d7e91c06</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4f31ce7a8d59490a31125989658fa7e3</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetDataType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a168ee61bb4fc187136a9fae26056c917</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetDataTypeMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8bc7d2156321adb2242a014c9f2e8640</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetDataTypeMin</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aac767f97f9a1f77e55e42832abf80dca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetDataTypeSize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a780573a3084b9dbafb7a2b5a190bfdc3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa6def8f3546157eb4c7030eee953357f</anchor>
      <arglist>(int, int=-1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae8adc523c5971c67a7fcc755cc243aa6</anchor>
      <arglist>(GenericImage &amp;, int, int=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0d08b6db0ef93f2823863c0948f96a71</anchor>
      <arglist>(BaseImage *&amp;, int, int=-1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMaxPosition</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abb137b5432522ab67a2e4d59128bd973</anchor>
      <arglist>(Point &amp;, int=1, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4b22954ec673e1dc0c0fce41876d88d1</anchor>
      <arglist>(VoxelType &amp;, VoxelType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5f259e24198f43f5f5b5c36a491957b9</anchor>
      <arglist>(VoxelType &amp;, VoxelType &amp;, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae5245568d869b5a01f07ed7a1f9a78c8</anchor>
      <arglist>(VoxelType *, VoxelType *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa2cf3c6d470e024603a2ddd2c6d9e683</anchor>
      <arglist>(VoxelType *, VoxelType *, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMaxPad</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac9fa85710e8504ba0200f77bd6ab7476</anchor>
      <arglist>(VoxelType *, VoxelType *, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>GetPointerToVoxels</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a104db5b6f2ee2f4084a04872c8573e8b</anchor>
      <arglist>(int=0, int=0, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>GetPointerToVoxels</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a15b7ffcef7e56b684d2169979014a875</anchor>
      <arglist>(int=0, int=0, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac3ed57e94c462dfe3601cf7f66a445c2</anchor>
      <arglist>(int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0de61c4adca6157ff7b500f4d0d56911</anchor>
      <arglist>(GenericImage &amp;, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8251408aa84fb85b8583d208a184d819</anchor>
      <arglist>(BaseImage *&amp;, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac36175064977d4782a170149b9448977</anchor>
      <arglist>(int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6621082cdb165d9ed4794fdb4eb5d71b</anchor>
      <arglist>(GenericImage &amp;, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a84cdb7c8b51fd4a47763e62dbd575af5</anchor>
      <arglist>(BaseImage *&amp;, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abe7f8ef6bec99b4aa26044b092c2a736</anchor>
      <arglist>(int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a00e75bbca2e78eb11eec0aebee7cfe8f</anchor>
      <arglist>(GenericImage &amp;, int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a379c778e5af9bf81e3a41ecf6170ebfb</anchor>
      <arglist>(BaseImage *&amp;, int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>GetSD</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8543f89af05963eba7aa8a119435c891</anchor>
      <arglist>(int=1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GravityCenter</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a51f690a439ee530631e833af25f47829</anchor>
      <arglist>(Point &amp;, int=1, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae4d54c2ca77b26fde859983026d6a0b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af253119c9bfebded7fcf1851e8cb33cb</anchor>
      <arglist>(const ImageAttributes &amp;, int, VoxelType *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7c54e079d14ba29f5926d22d9df834d8</anchor>
      <arglist>(const ImageAttributes &amp;, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a65fecfa6503a5efabda0735d3e549e1e</anchor>
      <arglist>(const ImageAttributes &amp;, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a1fa24fb2c109a33e151963b82b99e070</anchor>
      <arglist>(int, int, int, int, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a32e241530add68b8c28c54332fe33de0</anchor>
      <arglist>(int, int, int=1, int=1, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>Mean</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a32cdc73f07c6dc8dbcbc490a2204e088</anchor>
      <arglist>(bool fg=true) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>N</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a496434256dc5192f2779d5f81d87b947</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8a36b56ce661f7f31434a0626e82132e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BinaryImage</type>
      <name>operator!=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a77c82ed325b1874d3a8c06223be89e42</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa7cb99b55c3a646c2ebdcf7917cde637</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4ad5e9c0c9ab34124f0e55d190ee301d</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a827c9b59c984acac4e022dc0106a934a</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>adf9c5c774348994f91cd124d9f0fcaba</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5a4b1e7a9bae33a42c4861f99e15f7a5</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a34d4670feb9061cb727fc272454ba6eb</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6f6fe7f8faf9828e71f1ccad698d7626</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9525714b6c6106e856bec1ee9fb1685e</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aed3c57d6751d0adcff1eb1b04d15b44b</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aef4b7a5c68842ec2daf53a279b364912</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a596668714940d32fb7bf58bac5937660</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ab9c8e9fff15b53e89dfa761a69511289</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a94a96350bb990f2e5ec7685edf89d569</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5c2857f420374992f4a46309db49240b</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afb2e42fab40de7e4fac80225404d84e3</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a66e58c4dccc96254b524f965dc7d6a89</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a527a2223374ee4bbde03375b0a238a1c</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a769c42188c12089b1cf304c810f14845</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae646992523114572c8f065e96b7166fd</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a39ffec97fd762491d870b485ad1d400e</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator&lt;</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a101b700326307e3a6408cfefe3ca92db</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator&lt;=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a53035485aaa44f15426f870559cd18b1</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a791283732c42afd117395d1a754c2ed4</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a3bb07963185796aae989ba8ddb879053</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7fae2d3a58fafd2e6bbf9fde503528df</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ab0f32514dcf52d8adccbd7ddfbc8ace5</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa24c879e08eb3a260f1ee25c81be8deb</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator&gt;</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a66a7440e7d716c4b52aaea4a8446c450</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator&gt;=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af7506bbcbcf11ca189b3076b50277bd9</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acca310957bfc1080c170ee74ded4d2f4</anchor>
      <arglist>(int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acd494c7039d4e01ebb50f28174ace41b</anchor>
      <arglist>(int, int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6d7409f3810cf37d28f1a6d54da389ad</anchor>
      <arglist>(int, int, int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a83bebf9102ff90bbe9909d3eea4f0203</anchor>
      <arglist>(int, int, int, int, VoxelType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a954e524a435eb076d754c25ec35ff70c</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a39d1b7a776221fe6194c09cccb0cf046</anchor>
      <arglist>(int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a95a1963f21b8cf5ce3ef8d522a2c9d97</anchor>
      <arglist>(int, int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a1ae9c02fea5c78cb0b08c70c09007b3a</anchor>
      <arglist>(int, int, int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aca43b3b19e9cae2713e75f77b79bc057</anchor>
      <arglist>(int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9850de321e58f0f5e7fad19a525d4a19</anchor>
      <arglist>(int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0a6b96f01802ce4979080a760349ad43</anchor>
      <arglist>(int, int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8e3e7e98e2125e6d67c863d0e0b885a8</anchor>
      <arglist>(int, int, int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutBackgroundValueAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6bb6d016f6ccea67282b860f568539f3</anchor>
      <arglist>(double, bool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaebc2118b033685d63b4de58474b9ef4</anchor>
      <arglist>(VoxelType, VoxelType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa316f5a21ab3ba5977cf392a090b6475</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a708ae3d97e7a8b7059b5829e9883ea74</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectX</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a066d214c4daf267324f4c2136a903599</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acdfb190a01078516fb0fba69a7890267</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa2c2e7f13fe7c798097d9d0f9d39e850</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abf8a6743897aff16f781f2ecd5abe2d8</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a78017bb91a3ce0432806c30b515032f1</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac883f262c6c2eb972fe3bd456fd254b9</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapYT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaa59b1fd9ff936b245cab7cc8358b876</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapYZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a65e4e2027b97364a89d2b44b23be7ec0</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapZT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af92bd0b1fd14208e4c4d75e20f5e59bf</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af4f220e0ce27c720f2e2fe8a65ef9818</anchor>
      <arglist>(const char *) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0296e4d2327ce9d8d472e8f9d3c123e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AllocateImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abe7dcb1a46f3a03139ddff0868904b6c</anchor>
      <arglist>(VoxelType *=NULL)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VoxelType *</type>
      <name>_data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0635297758e00bbb8fa1e88f8ae1d6f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_dataOwner</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8e9935f940685d83a3801206233308b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VoxelType ****</type>
      <name>_matrix</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af8b64b576c435cc9b2c45f32107186d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericImage&lt; T5 &gt;</name>
    <filename>classmirtk_1_1GenericImage.html</filename>
    <base>mirtk::BaseImage</base>
    <member kind="typedef">
      <type>voxel_info&lt; ScalarType &gt;::RealType</type>
      <name>RealScalarType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afdfda4355104b4da07b05d8f29252e10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>voxel_info&lt; VoxelType &gt;::RealType</type>
      <name>RealType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a09dbec2268636b04aa16abafdaf9220b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>voxel_info&lt; VoxelType &gt;::ScalarType</type>
      <name>ScalarType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7aea0b35509e44c68b6e020636d60a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T5</type>
      <name>VoxelType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a55a99adf761d77572a527a21cc372e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa82ebcacc1fae9b7a19b46b474731913</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BaseImage *</type>
      <name>Copy</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acf6a04d2d7bd3671f64b3638763f28ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af52cb4ad8aaaf44a8aa770eca74fe16d</anchor>
      <arglist>(const VoxelType *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a410229a08c619fae5aa519b931409153</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ad097e09589880dbb4034d91f0acefa14</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CropPad</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a747819222a44455523592665a56d4fbf</anchor>
      <arglist>(int margin=0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa10e4d965a0037827cbc692cee7282d1</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afbd0a3b1f357f43e019823e1090b93f4</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>addf9fb643b5b9c9a87c0e65a74f14ad4</anchor>
      <arglist>(int=0) const</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a10fe304a442f2ef1296a3ae265e16222</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af873ad2419fe41d778d45c8e85129a4f</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ad9d46dfaa14c31d052671f1e92f38d6c</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aeaab3c83332d510cc33d9757da6adb6e</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipYT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abd3ab9ed62d30464c0d42f73cfe2de06</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipYZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a57e0a0f8604497a1456cffa8a9e96127</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipZT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4894d798397b80ec36c2254ec5487226</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a118750dfb5ebd094b96dcbeeb813cd51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac0102c5d63d051c576c12efc3f073260</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9375aecd646973353434e1708d1a482f</anchor>
      <arglist>(int, int, int=1, int=1, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aee16def97204142dc963393c06de4dad</anchor>
      <arglist>(int, int, int, int, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a31edbc653fb6c1b988f66b1a979281db</anchor>
      <arglist>(const ImageAttributes &amp;, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6dd7ef3516cdfa041201a95e00a2c95d</anchor>
      <arglist>(const ImageAttributes &amp;, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac351b5a71c61e4fc9427c7005dee9465</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae7120d0d1573263d7362fc94c0511993</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a3682d26b021f75aa328b2b0f11020173</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac29847f1cdc609843392e9e9162e6d8f</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a94b4a28283f0dee0f39109b2e9556e64</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4c863bfab3c0103a5ab8f5431c05e3d7</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4bfc0bdcd763528f83bffa32d7db4d2c</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a83029368a40f49c4d3213e1718e01c15</anchor>
      <arglist>(Vector &amp;, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaab5c8c05d91f7d430a81fb4a48264aa</anchor>
      <arglist>(Vector &amp;, int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aad643794ba7086212b2f28c2487aec94</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4ef28e8492266470356c768f8b40cebf</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>GetAverage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a52a6375792cd5d272c20f4dced52ba91</anchor>
      <arglist>(int=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abf9e71af9c077932c75f6d019e8e40bb</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7e65e9e46e6b290e09ffc72188bac0d8</anchor>
      <arglist>(int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a44f27382851f5e12c7b27de8d7e91c06</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4f31ce7a8d59490a31125989658fa7e3</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetDataType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a168ee61bb4fc187136a9fae26056c917</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetDataTypeMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8bc7d2156321adb2242a014c9f2e8640</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetDataTypeMin</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aac767f97f9a1f77e55e42832abf80dca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetDataTypeSize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a780573a3084b9dbafb7a2b5a190bfdc3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa6def8f3546157eb4c7030eee953357f</anchor>
      <arglist>(int, int=-1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae8adc523c5971c67a7fcc755cc243aa6</anchor>
      <arglist>(GenericImage &amp;, int, int=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0d08b6db0ef93f2823863c0948f96a71</anchor>
      <arglist>(BaseImage *&amp;, int, int=-1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMaxPosition</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abb137b5432522ab67a2e4d59128bd973</anchor>
      <arglist>(Point &amp;, int=1, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4b22954ec673e1dc0c0fce41876d88d1</anchor>
      <arglist>(VoxelType &amp;, VoxelType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5f259e24198f43f5f5b5c36a491957b9</anchor>
      <arglist>(VoxelType &amp;, VoxelType &amp;, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae5245568d869b5a01f07ed7a1f9a78c8</anchor>
      <arglist>(VoxelType *, VoxelType *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa2cf3c6d470e024603a2ddd2c6d9e683</anchor>
      <arglist>(VoxelType *, VoxelType *, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMaxPad</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac9fa85710e8504ba0200f77bd6ab7476</anchor>
      <arglist>(VoxelType *, VoxelType *, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>GetPointerToVoxels</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a104db5b6f2ee2f4084a04872c8573e8b</anchor>
      <arglist>(int=0, int=0, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>GetPointerToVoxels</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a15b7ffcef7e56b684d2169979014a875</anchor>
      <arglist>(int=0, int=0, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac3ed57e94c462dfe3601cf7f66a445c2</anchor>
      <arglist>(int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0de61c4adca6157ff7b500f4d0d56911</anchor>
      <arglist>(GenericImage &amp;, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8251408aa84fb85b8583d208a184d819</anchor>
      <arglist>(BaseImage *&amp;, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac36175064977d4782a170149b9448977</anchor>
      <arglist>(int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6621082cdb165d9ed4794fdb4eb5d71b</anchor>
      <arglist>(GenericImage &amp;, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a84cdb7c8b51fd4a47763e62dbd575af5</anchor>
      <arglist>(BaseImage *&amp;, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abe7f8ef6bec99b4aa26044b092c2a736</anchor>
      <arglist>(int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a00e75bbca2e78eb11eec0aebee7cfe8f</anchor>
      <arglist>(GenericImage &amp;, int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a379c778e5af9bf81e3a41ecf6170ebfb</anchor>
      <arglist>(BaseImage *&amp;, int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>GetSD</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8543f89af05963eba7aa8a119435c891</anchor>
      <arglist>(int=1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GravityCenter</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a51f690a439ee530631e833af25f47829</anchor>
      <arglist>(Point &amp;, int=1, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae4d54c2ca77b26fde859983026d6a0b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af253119c9bfebded7fcf1851e8cb33cb</anchor>
      <arglist>(const ImageAttributes &amp;, int, VoxelType *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7c54e079d14ba29f5926d22d9df834d8</anchor>
      <arglist>(const ImageAttributes &amp;, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a65fecfa6503a5efabda0735d3e549e1e</anchor>
      <arglist>(const ImageAttributes &amp;, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a1fa24fb2c109a33e151963b82b99e070</anchor>
      <arglist>(int, int, int, int, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a32e241530add68b8c28c54332fe33de0</anchor>
      <arglist>(int, int, int=1, int=1, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>Mean</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a32cdc73f07c6dc8dbcbc490a2204e088</anchor>
      <arglist>(bool fg=true) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>N</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a496434256dc5192f2779d5f81d87b947</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8a36b56ce661f7f31434a0626e82132e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BinaryImage</type>
      <name>operator!=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a77c82ed325b1874d3a8c06223be89e42</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa7cb99b55c3a646c2ebdcf7917cde637</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4ad5e9c0c9ab34124f0e55d190ee301d</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a827c9b59c984acac4e022dc0106a934a</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>adf9c5c774348994f91cd124d9f0fcaba</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5a4b1e7a9bae33a42c4861f99e15f7a5</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a34d4670feb9061cb727fc272454ba6eb</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6f6fe7f8faf9828e71f1ccad698d7626</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9525714b6c6106e856bec1ee9fb1685e</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aed3c57d6751d0adcff1eb1b04d15b44b</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aef4b7a5c68842ec2daf53a279b364912</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a596668714940d32fb7bf58bac5937660</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ab9c8e9fff15b53e89dfa761a69511289</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a94a96350bb990f2e5ec7685edf89d569</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5c2857f420374992f4a46309db49240b</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afb2e42fab40de7e4fac80225404d84e3</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a66e58c4dccc96254b524f965dc7d6a89</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a527a2223374ee4bbde03375b0a238a1c</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a769c42188c12089b1cf304c810f14845</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae646992523114572c8f065e96b7166fd</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a39ffec97fd762491d870b485ad1d400e</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator&lt;</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a101b700326307e3a6408cfefe3ca92db</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator&lt;=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a53035485aaa44f15426f870559cd18b1</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a791283732c42afd117395d1a754c2ed4</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a3bb07963185796aae989ba8ddb879053</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7fae2d3a58fafd2e6bbf9fde503528df</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ab0f32514dcf52d8adccbd7ddfbc8ace5</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa24c879e08eb3a260f1ee25c81be8deb</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator&gt;</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a66a7440e7d716c4b52aaea4a8446c450</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator&gt;=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af7506bbcbcf11ca189b3076b50277bd9</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acca310957bfc1080c170ee74ded4d2f4</anchor>
      <arglist>(int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acd494c7039d4e01ebb50f28174ace41b</anchor>
      <arglist>(int, int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6d7409f3810cf37d28f1a6d54da389ad</anchor>
      <arglist>(int, int, int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a83bebf9102ff90bbe9909d3eea4f0203</anchor>
      <arglist>(int, int, int, int, VoxelType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a954e524a435eb076d754c25ec35ff70c</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a39d1b7a776221fe6194c09cccb0cf046</anchor>
      <arglist>(int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a95a1963f21b8cf5ce3ef8d522a2c9d97</anchor>
      <arglist>(int, int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a1ae9c02fea5c78cb0b08c70c09007b3a</anchor>
      <arglist>(int, int, int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aca43b3b19e9cae2713e75f77b79bc057</anchor>
      <arglist>(int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9850de321e58f0f5e7fad19a525d4a19</anchor>
      <arglist>(int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0a6b96f01802ce4979080a760349ad43</anchor>
      <arglist>(int, int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8e3e7e98e2125e6d67c863d0e0b885a8</anchor>
      <arglist>(int, int, int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutBackgroundValueAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6bb6d016f6ccea67282b860f568539f3</anchor>
      <arglist>(double, bool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaebc2118b033685d63b4de58474b9ef4</anchor>
      <arglist>(VoxelType, VoxelType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa316f5a21ab3ba5977cf392a090b6475</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a708ae3d97e7a8b7059b5829e9883ea74</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectX</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a066d214c4daf267324f4c2136a903599</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acdfb190a01078516fb0fba69a7890267</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa2c2e7f13fe7c798097d9d0f9d39e850</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abf8a6743897aff16f781f2ecd5abe2d8</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a78017bb91a3ce0432806c30b515032f1</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac883f262c6c2eb972fe3bd456fd254b9</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapYT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaa59b1fd9ff936b245cab7cc8358b876</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapYZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a65e4e2027b97364a89d2b44b23be7ec0</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapZT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af92bd0b1fd14208e4c4d75e20f5e59bf</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af4f220e0ce27c720f2e2fe8a65ef9818</anchor>
      <arglist>(const char *) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0296e4d2327ce9d8d472e8f9d3c123e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AllocateImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abe7dcb1a46f3a03139ddff0868904b6c</anchor>
      <arglist>(VoxelType *=NULL)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VoxelType *</type>
      <name>_data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0635297758e00bbb8fa1e88f8ae1d6f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_dataOwner</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8e9935f940685d83a3801206233308b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VoxelType ****</type>
      <name>_matrix</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af8b64b576c435cc9b2c45f32107186d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericImage&lt; T6 &gt;</name>
    <filename>classmirtk_1_1GenericImage.html</filename>
    <base>mirtk::BaseImage</base>
    <member kind="typedef">
      <type>voxel_info&lt; ScalarType &gt;::RealType</type>
      <name>RealScalarType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afdfda4355104b4da07b05d8f29252e10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>voxel_info&lt; VoxelType &gt;::RealType</type>
      <name>RealType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a09dbec2268636b04aa16abafdaf9220b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>voxel_info&lt; VoxelType &gt;::ScalarType</type>
      <name>ScalarType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7aea0b35509e44c68b6e020636d60a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T6</type>
      <name>VoxelType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a55a99adf761d77572a527a21cc372e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa82ebcacc1fae9b7a19b46b474731913</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BaseImage *</type>
      <name>Copy</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acf6a04d2d7bd3671f64b3638763f28ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af52cb4ad8aaaf44a8aa770eca74fe16d</anchor>
      <arglist>(const VoxelType *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a410229a08c619fae5aa519b931409153</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ad097e09589880dbb4034d91f0acefa14</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CropPad</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a747819222a44455523592665a56d4fbf</anchor>
      <arglist>(int margin=0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa10e4d965a0037827cbc692cee7282d1</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afbd0a3b1f357f43e019823e1090b93f4</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>addf9fb643b5b9c9a87c0e65a74f14ad4</anchor>
      <arglist>(int=0) const</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a10fe304a442f2ef1296a3ae265e16222</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af873ad2419fe41d778d45c8e85129a4f</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ad9d46dfaa14c31d052671f1e92f38d6c</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aeaab3c83332d510cc33d9757da6adb6e</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipYT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abd3ab9ed62d30464c0d42f73cfe2de06</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipYZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a57e0a0f8604497a1456cffa8a9e96127</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipZT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4894d798397b80ec36c2254ec5487226</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a118750dfb5ebd094b96dcbeeb813cd51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac0102c5d63d051c576c12efc3f073260</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9375aecd646973353434e1708d1a482f</anchor>
      <arglist>(int, int, int=1, int=1, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aee16def97204142dc963393c06de4dad</anchor>
      <arglist>(int, int, int, int, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a31edbc653fb6c1b988f66b1a979281db</anchor>
      <arglist>(const ImageAttributes &amp;, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6dd7ef3516cdfa041201a95e00a2c95d</anchor>
      <arglist>(const ImageAttributes &amp;, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac351b5a71c61e4fc9427c7005dee9465</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae7120d0d1573263d7362fc94c0511993</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a3682d26b021f75aa328b2b0f11020173</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac29847f1cdc609843392e9e9162e6d8f</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a94b4a28283f0dee0f39109b2e9556e64</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4c863bfab3c0103a5ab8f5431c05e3d7</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4bfc0bdcd763528f83bffa32d7db4d2c</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a83029368a40f49c4d3213e1718e01c15</anchor>
      <arglist>(Vector &amp;, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaab5c8c05d91f7d430a81fb4a48264aa</anchor>
      <arglist>(Vector &amp;, int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aad643794ba7086212b2f28c2487aec94</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4ef28e8492266470356c768f8b40cebf</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>GetAverage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a52a6375792cd5d272c20f4dced52ba91</anchor>
      <arglist>(int=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abf9e71af9c077932c75f6d019e8e40bb</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7e65e9e46e6b290e09ffc72188bac0d8</anchor>
      <arglist>(int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a44f27382851f5e12c7b27de8d7e91c06</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4f31ce7a8d59490a31125989658fa7e3</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetDataType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a168ee61bb4fc187136a9fae26056c917</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetDataTypeMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8bc7d2156321adb2242a014c9f2e8640</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetDataTypeMin</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aac767f97f9a1f77e55e42832abf80dca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetDataTypeSize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a780573a3084b9dbafb7a2b5a190bfdc3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa6def8f3546157eb4c7030eee953357f</anchor>
      <arglist>(int, int=-1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae8adc523c5971c67a7fcc755cc243aa6</anchor>
      <arglist>(GenericImage &amp;, int, int=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0d08b6db0ef93f2823863c0948f96a71</anchor>
      <arglist>(BaseImage *&amp;, int, int=-1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMaxPosition</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abb137b5432522ab67a2e4d59128bd973</anchor>
      <arglist>(Point &amp;, int=1, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4b22954ec673e1dc0c0fce41876d88d1</anchor>
      <arglist>(VoxelType &amp;, VoxelType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5f259e24198f43f5f5b5c36a491957b9</anchor>
      <arglist>(VoxelType &amp;, VoxelType &amp;, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae5245568d869b5a01f07ed7a1f9a78c8</anchor>
      <arglist>(VoxelType *, VoxelType *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa2cf3c6d470e024603a2ddd2c6d9e683</anchor>
      <arglist>(VoxelType *, VoxelType *, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMaxPad</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac9fa85710e8504ba0200f77bd6ab7476</anchor>
      <arglist>(VoxelType *, VoxelType *, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>GetPointerToVoxels</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a104db5b6f2ee2f4084a04872c8573e8b</anchor>
      <arglist>(int=0, int=0, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>GetPointerToVoxels</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a15b7ffcef7e56b684d2169979014a875</anchor>
      <arglist>(int=0, int=0, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac3ed57e94c462dfe3601cf7f66a445c2</anchor>
      <arglist>(int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0de61c4adca6157ff7b500f4d0d56911</anchor>
      <arglist>(GenericImage &amp;, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8251408aa84fb85b8583d208a184d819</anchor>
      <arglist>(BaseImage *&amp;, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac36175064977d4782a170149b9448977</anchor>
      <arglist>(int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6621082cdb165d9ed4794fdb4eb5d71b</anchor>
      <arglist>(GenericImage &amp;, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a84cdb7c8b51fd4a47763e62dbd575af5</anchor>
      <arglist>(BaseImage *&amp;, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abe7f8ef6bec99b4aa26044b092c2a736</anchor>
      <arglist>(int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a00e75bbca2e78eb11eec0aebee7cfe8f</anchor>
      <arglist>(GenericImage &amp;, int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a379c778e5af9bf81e3a41ecf6170ebfb</anchor>
      <arglist>(BaseImage *&amp;, int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>GetSD</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8543f89af05963eba7aa8a119435c891</anchor>
      <arglist>(int=1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GravityCenter</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a51f690a439ee530631e833af25f47829</anchor>
      <arglist>(Point &amp;, int=1, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae4d54c2ca77b26fde859983026d6a0b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af253119c9bfebded7fcf1851e8cb33cb</anchor>
      <arglist>(const ImageAttributes &amp;, int, VoxelType *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7c54e079d14ba29f5926d22d9df834d8</anchor>
      <arglist>(const ImageAttributes &amp;, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a65fecfa6503a5efabda0735d3e549e1e</anchor>
      <arglist>(const ImageAttributes &amp;, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a1fa24fb2c109a33e151963b82b99e070</anchor>
      <arglist>(int, int, int, int, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a32e241530add68b8c28c54332fe33de0</anchor>
      <arglist>(int, int, int=1, int=1, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>Mean</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a32cdc73f07c6dc8dbcbc490a2204e088</anchor>
      <arglist>(bool fg=true) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>N</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a496434256dc5192f2779d5f81d87b947</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8a36b56ce661f7f31434a0626e82132e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BinaryImage</type>
      <name>operator!=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a77c82ed325b1874d3a8c06223be89e42</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa7cb99b55c3a646c2ebdcf7917cde637</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4ad5e9c0c9ab34124f0e55d190ee301d</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a827c9b59c984acac4e022dc0106a934a</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>adf9c5c774348994f91cd124d9f0fcaba</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5a4b1e7a9bae33a42c4861f99e15f7a5</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a34d4670feb9061cb727fc272454ba6eb</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6f6fe7f8faf9828e71f1ccad698d7626</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9525714b6c6106e856bec1ee9fb1685e</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aed3c57d6751d0adcff1eb1b04d15b44b</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aef4b7a5c68842ec2daf53a279b364912</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a596668714940d32fb7bf58bac5937660</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ab9c8e9fff15b53e89dfa761a69511289</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a94a96350bb990f2e5ec7685edf89d569</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5c2857f420374992f4a46309db49240b</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afb2e42fab40de7e4fac80225404d84e3</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a66e58c4dccc96254b524f965dc7d6a89</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a527a2223374ee4bbde03375b0a238a1c</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a769c42188c12089b1cf304c810f14845</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae646992523114572c8f065e96b7166fd</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a39ffec97fd762491d870b485ad1d400e</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator&lt;</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a101b700326307e3a6408cfefe3ca92db</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator&lt;=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a53035485aaa44f15426f870559cd18b1</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a791283732c42afd117395d1a754c2ed4</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a3bb07963185796aae989ba8ddb879053</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7fae2d3a58fafd2e6bbf9fde503528df</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ab0f32514dcf52d8adccbd7ddfbc8ace5</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa24c879e08eb3a260f1ee25c81be8deb</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator&gt;</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a66a7440e7d716c4b52aaea4a8446c450</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator&gt;=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af7506bbcbcf11ca189b3076b50277bd9</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acca310957bfc1080c170ee74ded4d2f4</anchor>
      <arglist>(int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acd494c7039d4e01ebb50f28174ace41b</anchor>
      <arglist>(int, int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6d7409f3810cf37d28f1a6d54da389ad</anchor>
      <arglist>(int, int, int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a83bebf9102ff90bbe9909d3eea4f0203</anchor>
      <arglist>(int, int, int, int, VoxelType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a954e524a435eb076d754c25ec35ff70c</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a39d1b7a776221fe6194c09cccb0cf046</anchor>
      <arglist>(int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a95a1963f21b8cf5ce3ef8d522a2c9d97</anchor>
      <arglist>(int, int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a1ae9c02fea5c78cb0b08c70c09007b3a</anchor>
      <arglist>(int, int, int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aca43b3b19e9cae2713e75f77b79bc057</anchor>
      <arglist>(int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9850de321e58f0f5e7fad19a525d4a19</anchor>
      <arglist>(int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0a6b96f01802ce4979080a760349ad43</anchor>
      <arglist>(int, int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8e3e7e98e2125e6d67c863d0e0b885a8</anchor>
      <arglist>(int, int, int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutBackgroundValueAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6bb6d016f6ccea67282b860f568539f3</anchor>
      <arglist>(double, bool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaebc2118b033685d63b4de58474b9ef4</anchor>
      <arglist>(VoxelType, VoxelType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa316f5a21ab3ba5977cf392a090b6475</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a708ae3d97e7a8b7059b5829e9883ea74</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectX</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a066d214c4daf267324f4c2136a903599</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acdfb190a01078516fb0fba69a7890267</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa2c2e7f13fe7c798097d9d0f9d39e850</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abf8a6743897aff16f781f2ecd5abe2d8</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a78017bb91a3ce0432806c30b515032f1</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac883f262c6c2eb972fe3bd456fd254b9</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapYT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaa59b1fd9ff936b245cab7cc8358b876</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapYZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a65e4e2027b97364a89d2b44b23be7ec0</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapZT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af92bd0b1fd14208e4c4d75e20f5e59bf</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af4f220e0ce27c720f2e2fe8a65ef9818</anchor>
      <arglist>(const char *) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0296e4d2327ce9d8d472e8f9d3c123e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AllocateImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abe7dcb1a46f3a03139ddff0868904b6c</anchor>
      <arglist>(VoxelType *=NULL)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VoxelType *</type>
      <name>_data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0635297758e00bbb8fa1e88f8ae1d6f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_dataOwner</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8e9935f940685d83a3801206233308b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VoxelType ****</type>
      <name>_matrix</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af8b64b576c435cc9b2c45f32107186d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericImage&lt; T7 &gt;</name>
    <filename>classmirtk_1_1GenericImage.html</filename>
    <base>mirtk::BaseImage</base>
    <member kind="typedef">
      <type>voxel_info&lt; ScalarType &gt;::RealType</type>
      <name>RealScalarType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afdfda4355104b4da07b05d8f29252e10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>voxel_info&lt; VoxelType &gt;::RealType</type>
      <name>RealType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a09dbec2268636b04aa16abafdaf9220b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>voxel_info&lt; VoxelType &gt;::ScalarType</type>
      <name>ScalarType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7aea0b35509e44c68b6e020636d60a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T7</type>
      <name>VoxelType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a55a99adf761d77572a527a21cc372e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa82ebcacc1fae9b7a19b46b474731913</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BaseImage *</type>
      <name>Copy</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acf6a04d2d7bd3671f64b3638763f28ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af52cb4ad8aaaf44a8aa770eca74fe16d</anchor>
      <arglist>(const VoxelType *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a410229a08c619fae5aa519b931409153</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ad097e09589880dbb4034d91f0acefa14</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CropPad</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a747819222a44455523592665a56d4fbf</anchor>
      <arglist>(int margin=0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa10e4d965a0037827cbc692cee7282d1</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afbd0a3b1f357f43e019823e1090b93f4</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>addf9fb643b5b9c9a87c0e65a74f14ad4</anchor>
      <arglist>(int=0) const</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a10fe304a442f2ef1296a3ae265e16222</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af873ad2419fe41d778d45c8e85129a4f</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ad9d46dfaa14c31d052671f1e92f38d6c</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aeaab3c83332d510cc33d9757da6adb6e</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipYT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abd3ab9ed62d30464c0d42f73cfe2de06</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipYZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a57e0a0f8604497a1456cffa8a9e96127</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipZT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4894d798397b80ec36c2254ec5487226</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a118750dfb5ebd094b96dcbeeb813cd51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac0102c5d63d051c576c12efc3f073260</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9375aecd646973353434e1708d1a482f</anchor>
      <arglist>(int, int, int=1, int=1, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aee16def97204142dc963393c06de4dad</anchor>
      <arglist>(int, int, int, int, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a31edbc653fb6c1b988f66b1a979281db</anchor>
      <arglist>(const ImageAttributes &amp;, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6dd7ef3516cdfa041201a95e00a2c95d</anchor>
      <arglist>(const ImageAttributes &amp;, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac351b5a71c61e4fc9427c7005dee9465</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae7120d0d1573263d7362fc94c0511993</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a3682d26b021f75aa328b2b0f11020173</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac29847f1cdc609843392e9e9162e6d8f</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a94b4a28283f0dee0f39109b2e9556e64</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4c863bfab3c0103a5ab8f5431c05e3d7</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4bfc0bdcd763528f83bffa32d7db4d2c</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a83029368a40f49c4d3213e1718e01c15</anchor>
      <arglist>(Vector &amp;, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaab5c8c05d91f7d430a81fb4a48264aa</anchor>
      <arglist>(Vector &amp;, int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aad643794ba7086212b2f28c2487aec94</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4ef28e8492266470356c768f8b40cebf</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>GetAverage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a52a6375792cd5d272c20f4dced52ba91</anchor>
      <arglist>(int=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abf9e71af9c077932c75f6d019e8e40bb</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7e65e9e46e6b290e09ffc72188bac0d8</anchor>
      <arglist>(int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a44f27382851f5e12c7b27de8d7e91c06</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4f31ce7a8d59490a31125989658fa7e3</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetDataType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a168ee61bb4fc187136a9fae26056c917</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetDataTypeMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8bc7d2156321adb2242a014c9f2e8640</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetDataTypeMin</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aac767f97f9a1f77e55e42832abf80dca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetDataTypeSize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a780573a3084b9dbafb7a2b5a190bfdc3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa6def8f3546157eb4c7030eee953357f</anchor>
      <arglist>(int, int=-1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae8adc523c5971c67a7fcc755cc243aa6</anchor>
      <arglist>(GenericImage &amp;, int, int=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0d08b6db0ef93f2823863c0948f96a71</anchor>
      <arglist>(BaseImage *&amp;, int, int=-1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMaxPosition</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abb137b5432522ab67a2e4d59128bd973</anchor>
      <arglist>(Point &amp;, int=1, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4b22954ec673e1dc0c0fce41876d88d1</anchor>
      <arglist>(VoxelType &amp;, VoxelType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5f259e24198f43f5f5b5c36a491957b9</anchor>
      <arglist>(VoxelType &amp;, VoxelType &amp;, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae5245568d869b5a01f07ed7a1f9a78c8</anchor>
      <arglist>(VoxelType *, VoxelType *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa2cf3c6d470e024603a2ddd2c6d9e683</anchor>
      <arglist>(VoxelType *, VoxelType *, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMaxPad</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac9fa85710e8504ba0200f77bd6ab7476</anchor>
      <arglist>(VoxelType *, VoxelType *, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>GetPointerToVoxels</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a104db5b6f2ee2f4084a04872c8573e8b</anchor>
      <arglist>(int=0, int=0, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>GetPointerToVoxels</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a15b7ffcef7e56b684d2169979014a875</anchor>
      <arglist>(int=0, int=0, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac3ed57e94c462dfe3601cf7f66a445c2</anchor>
      <arglist>(int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0de61c4adca6157ff7b500f4d0d56911</anchor>
      <arglist>(GenericImage &amp;, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8251408aa84fb85b8583d208a184d819</anchor>
      <arglist>(BaseImage *&amp;, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac36175064977d4782a170149b9448977</anchor>
      <arglist>(int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6621082cdb165d9ed4794fdb4eb5d71b</anchor>
      <arglist>(GenericImage &amp;, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a84cdb7c8b51fd4a47763e62dbd575af5</anchor>
      <arglist>(BaseImage *&amp;, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abe7f8ef6bec99b4aa26044b092c2a736</anchor>
      <arglist>(int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a00e75bbca2e78eb11eec0aebee7cfe8f</anchor>
      <arglist>(GenericImage &amp;, int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a379c778e5af9bf81e3a41ecf6170ebfb</anchor>
      <arglist>(BaseImage *&amp;, int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>GetSD</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8543f89af05963eba7aa8a119435c891</anchor>
      <arglist>(int=1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GravityCenter</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a51f690a439ee530631e833af25f47829</anchor>
      <arglist>(Point &amp;, int=1, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae4d54c2ca77b26fde859983026d6a0b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af253119c9bfebded7fcf1851e8cb33cb</anchor>
      <arglist>(const ImageAttributes &amp;, int, VoxelType *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7c54e079d14ba29f5926d22d9df834d8</anchor>
      <arglist>(const ImageAttributes &amp;, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a65fecfa6503a5efabda0735d3e549e1e</anchor>
      <arglist>(const ImageAttributes &amp;, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a1fa24fb2c109a33e151963b82b99e070</anchor>
      <arglist>(int, int, int, int, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a32e241530add68b8c28c54332fe33de0</anchor>
      <arglist>(int, int, int=1, int=1, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>Mean</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a32cdc73f07c6dc8dbcbc490a2204e088</anchor>
      <arglist>(bool fg=true) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>N</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a496434256dc5192f2779d5f81d87b947</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8a36b56ce661f7f31434a0626e82132e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BinaryImage</type>
      <name>operator!=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a77c82ed325b1874d3a8c06223be89e42</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa7cb99b55c3a646c2ebdcf7917cde637</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4ad5e9c0c9ab34124f0e55d190ee301d</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a827c9b59c984acac4e022dc0106a934a</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>adf9c5c774348994f91cd124d9f0fcaba</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5a4b1e7a9bae33a42c4861f99e15f7a5</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a34d4670feb9061cb727fc272454ba6eb</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6f6fe7f8faf9828e71f1ccad698d7626</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9525714b6c6106e856bec1ee9fb1685e</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aed3c57d6751d0adcff1eb1b04d15b44b</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aef4b7a5c68842ec2daf53a279b364912</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a596668714940d32fb7bf58bac5937660</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ab9c8e9fff15b53e89dfa761a69511289</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a94a96350bb990f2e5ec7685edf89d569</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5c2857f420374992f4a46309db49240b</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afb2e42fab40de7e4fac80225404d84e3</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a66e58c4dccc96254b524f965dc7d6a89</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a527a2223374ee4bbde03375b0a238a1c</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a769c42188c12089b1cf304c810f14845</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae646992523114572c8f065e96b7166fd</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a39ffec97fd762491d870b485ad1d400e</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator&lt;</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a101b700326307e3a6408cfefe3ca92db</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator&lt;=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a53035485aaa44f15426f870559cd18b1</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a791283732c42afd117395d1a754c2ed4</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a3bb07963185796aae989ba8ddb879053</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7fae2d3a58fafd2e6bbf9fde503528df</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ab0f32514dcf52d8adccbd7ddfbc8ace5</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa24c879e08eb3a260f1ee25c81be8deb</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator&gt;</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a66a7440e7d716c4b52aaea4a8446c450</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator&gt;=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af7506bbcbcf11ca189b3076b50277bd9</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acca310957bfc1080c170ee74ded4d2f4</anchor>
      <arglist>(int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acd494c7039d4e01ebb50f28174ace41b</anchor>
      <arglist>(int, int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6d7409f3810cf37d28f1a6d54da389ad</anchor>
      <arglist>(int, int, int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a83bebf9102ff90bbe9909d3eea4f0203</anchor>
      <arglist>(int, int, int, int, VoxelType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a954e524a435eb076d754c25ec35ff70c</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a39d1b7a776221fe6194c09cccb0cf046</anchor>
      <arglist>(int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a95a1963f21b8cf5ce3ef8d522a2c9d97</anchor>
      <arglist>(int, int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a1ae9c02fea5c78cb0b08c70c09007b3a</anchor>
      <arglist>(int, int, int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aca43b3b19e9cae2713e75f77b79bc057</anchor>
      <arglist>(int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9850de321e58f0f5e7fad19a525d4a19</anchor>
      <arglist>(int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0a6b96f01802ce4979080a760349ad43</anchor>
      <arglist>(int, int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8e3e7e98e2125e6d67c863d0e0b885a8</anchor>
      <arglist>(int, int, int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutBackgroundValueAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6bb6d016f6ccea67282b860f568539f3</anchor>
      <arglist>(double, bool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaebc2118b033685d63b4de58474b9ef4</anchor>
      <arglist>(VoxelType, VoxelType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa316f5a21ab3ba5977cf392a090b6475</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a708ae3d97e7a8b7059b5829e9883ea74</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectX</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a066d214c4daf267324f4c2136a903599</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acdfb190a01078516fb0fba69a7890267</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa2c2e7f13fe7c798097d9d0f9d39e850</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abf8a6743897aff16f781f2ecd5abe2d8</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a78017bb91a3ce0432806c30b515032f1</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac883f262c6c2eb972fe3bd456fd254b9</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapYT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaa59b1fd9ff936b245cab7cc8358b876</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapYZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a65e4e2027b97364a89d2b44b23be7ec0</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapZT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af92bd0b1fd14208e4c4d75e20f5e59bf</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af4f220e0ce27c720f2e2fe8a65ef9818</anchor>
      <arglist>(const char *) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0296e4d2327ce9d8d472e8f9d3c123e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AllocateImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abe7dcb1a46f3a03139ddff0868904b6c</anchor>
      <arglist>(VoxelType *=NULL)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VoxelType *</type>
      <name>_data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0635297758e00bbb8fa1e88f8ae1d6f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_dataOwner</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8e9935f940685d83a3801206233308b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VoxelType ****</type>
      <name>_matrix</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af8b64b576c435cc9b2c45f32107186d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericImage&lt; T8 &gt;</name>
    <filename>classmirtk_1_1GenericImage.html</filename>
    <base>mirtk::BaseImage</base>
    <member kind="typedef">
      <type>voxel_info&lt; ScalarType &gt;::RealType</type>
      <name>RealScalarType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afdfda4355104b4da07b05d8f29252e10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>voxel_info&lt; VoxelType &gt;::RealType</type>
      <name>RealType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a09dbec2268636b04aa16abafdaf9220b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>voxel_info&lt; VoxelType &gt;::ScalarType</type>
      <name>ScalarType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7aea0b35509e44c68b6e020636d60a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T8</type>
      <name>VoxelType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a55a99adf761d77572a527a21cc372e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa82ebcacc1fae9b7a19b46b474731913</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BaseImage *</type>
      <name>Copy</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acf6a04d2d7bd3671f64b3638763f28ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af52cb4ad8aaaf44a8aa770eca74fe16d</anchor>
      <arglist>(const VoxelType *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a410229a08c619fae5aa519b931409153</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ad097e09589880dbb4034d91f0acefa14</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CropPad</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a747819222a44455523592665a56d4fbf</anchor>
      <arglist>(int margin=0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa10e4d965a0037827cbc692cee7282d1</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afbd0a3b1f357f43e019823e1090b93f4</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>addf9fb643b5b9c9a87c0e65a74f14ad4</anchor>
      <arglist>(int=0) const</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a10fe304a442f2ef1296a3ae265e16222</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af873ad2419fe41d778d45c8e85129a4f</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ad9d46dfaa14c31d052671f1e92f38d6c</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aeaab3c83332d510cc33d9757da6adb6e</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipYT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abd3ab9ed62d30464c0d42f73cfe2de06</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipYZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a57e0a0f8604497a1456cffa8a9e96127</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipZT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4894d798397b80ec36c2254ec5487226</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a118750dfb5ebd094b96dcbeeb813cd51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac0102c5d63d051c576c12efc3f073260</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9375aecd646973353434e1708d1a482f</anchor>
      <arglist>(int, int, int=1, int=1, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aee16def97204142dc963393c06de4dad</anchor>
      <arglist>(int, int, int, int, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a31edbc653fb6c1b988f66b1a979281db</anchor>
      <arglist>(const ImageAttributes &amp;, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6dd7ef3516cdfa041201a95e00a2c95d</anchor>
      <arglist>(const ImageAttributes &amp;, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac351b5a71c61e4fc9427c7005dee9465</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae7120d0d1573263d7362fc94c0511993</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a3682d26b021f75aa328b2b0f11020173</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac29847f1cdc609843392e9e9162e6d8f</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a94b4a28283f0dee0f39109b2e9556e64</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4c863bfab3c0103a5ab8f5431c05e3d7</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4bfc0bdcd763528f83bffa32d7db4d2c</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a83029368a40f49c4d3213e1718e01c15</anchor>
      <arglist>(Vector &amp;, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaab5c8c05d91f7d430a81fb4a48264aa</anchor>
      <arglist>(Vector &amp;, int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aad643794ba7086212b2f28c2487aec94</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4ef28e8492266470356c768f8b40cebf</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>GetAverage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a52a6375792cd5d272c20f4dced52ba91</anchor>
      <arglist>(int=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abf9e71af9c077932c75f6d019e8e40bb</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7e65e9e46e6b290e09ffc72188bac0d8</anchor>
      <arglist>(int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a44f27382851f5e12c7b27de8d7e91c06</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4f31ce7a8d59490a31125989658fa7e3</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetDataType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a168ee61bb4fc187136a9fae26056c917</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetDataTypeMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8bc7d2156321adb2242a014c9f2e8640</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetDataTypeMin</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aac767f97f9a1f77e55e42832abf80dca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetDataTypeSize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a780573a3084b9dbafb7a2b5a190bfdc3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa6def8f3546157eb4c7030eee953357f</anchor>
      <arglist>(int, int=-1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae8adc523c5971c67a7fcc755cc243aa6</anchor>
      <arglist>(GenericImage &amp;, int, int=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0d08b6db0ef93f2823863c0948f96a71</anchor>
      <arglist>(BaseImage *&amp;, int, int=-1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMaxPosition</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abb137b5432522ab67a2e4d59128bd973</anchor>
      <arglist>(Point &amp;, int=1, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4b22954ec673e1dc0c0fce41876d88d1</anchor>
      <arglist>(VoxelType &amp;, VoxelType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5f259e24198f43f5f5b5c36a491957b9</anchor>
      <arglist>(VoxelType &amp;, VoxelType &amp;, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae5245568d869b5a01f07ed7a1f9a78c8</anchor>
      <arglist>(VoxelType *, VoxelType *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa2cf3c6d470e024603a2ddd2c6d9e683</anchor>
      <arglist>(VoxelType *, VoxelType *, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMaxPad</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac9fa85710e8504ba0200f77bd6ab7476</anchor>
      <arglist>(VoxelType *, VoxelType *, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>GetPointerToVoxels</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a104db5b6f2ee2f4084a04872c8573e8b</anchor>
      <arglist>(int=0, int=0, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>GetPointerToVoxels</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a15b7ffcef7e56b684d2169979014a875</anchor>
      <arglist>(int=0, int=0, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac3ed57e94c462dfe3601cf7f66a445c2</anchor>
      <arglist>(int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0de61c4adca6157ff7b500f4d0d56911</anchor>
      <arglist>(GenericImage &amp;, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8251408aa84fb85b8583d208a184d819</anchor>
      <arglist>(BaseImage *&amp;, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac36175064977d4782a170149b9448977</anchor>
      <arglist>(int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6621082cdb165d9ed4794fdb4eb5d71b</anchor>
      <arglist>(GenericImage &amp;, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a84cdb7c8b51fd4a47763e62dbd575af5</anchor>
      <arglist>(BaseImage *&amp;, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abe7f8ef6bec99b4aa26044b092c2a736</anchor>
      <arglist>(int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a00e75bbca2e78eb11eec0aebee7cfe8f</anchor>
      <arglist>(GenericImage &amp;, int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a379c778e5af9bf81e3a41ecf6170ebfb</anchor>
      <arglist>(BaseImage *&amp;, int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>GetSD</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8543f89af05963eba7aa8a119435c891</anchor>
      <arglist>(int=1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GravityCenter</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a51f690a439ee530631e833af25f47829</anchor>
      <arglist>(Point &amp;, int=1, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae4d54c2ca77b26fde859983026d6a0b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af253119c9bfebded7fcf1851e8cb33cb</anchor>
      <arglist>(const ImageAttributes &amp;, int, VoxelType *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7c54e079d14ba29f5926d22d9df834d8</anchor>
      <arglist>(const ImageAttributes &amp;, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a65fecfa6503a5efabda0735d3e549e1e</anchor>
      <arglist>(const ImageAttributes &amp;, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a1fa24fb2c109a33e151963b82b99e070</anchor>
      <arglist>(int, int, int, int, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a32e241530add68b8c28c54332fe33de0</anchor>
      <arglist>(int, int, int=1, int=1, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>Mean</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a32cdc73f07c6dc8dbcbc490a2204e088</anchor>
      <arglist>(bool fg=true) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>N</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a496434256dc5192f2779d5f81d87b947</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8a36b56ce661f7f31434a0626e82132e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BinaryImage</type>
      <name>operator!=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a77c82ed325b1874d3a8c06223be89e42</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa7cb99b55c3a646c2ebdcf7917cde637</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4ad5e9c0c9ab34124f0e55d190ee301d</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a827c9b59c984acac4e022dc0106a934a</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>adf9c5c774348994f91cd124d9f0fcaba</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5a4b1e7a9bae33a42c4861f99e15f7a5</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a34d4670feb9061cb727fc272454ba6eb</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6f6fe7f8faf9828e71f1ccad698d7626</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9525714b6c6106e856bec1ee9fb1685e</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aed3c57d6751d0adcff1eb1b04d15b44b</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aef4b7a5c68842ec2daf53a279b364912</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a596668714940d32fb7bf58bac5937660</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ab9c8e9fff15b53e89dfa761a69511289</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a94a96350bb990f2e5ec7685edf89d569</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5c2857f420374992f4a46309db49240b</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afb2e42fab40de7e4fac80225404d84e3</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a66e58c4dccc96254b524f965dc7d6a89</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a527a2223374ee4bbde03375b0a238a1c</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a769c42188c12089b1cf304c810f14845</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae646992523114572c8f065e96b7166fd</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a39ffec97fd762491d870b485ad1d400e</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator&lt;</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a101b700326307e3a6408cfefe3ca92db</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator&lt;=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a53035485aaa44f15426f870559cd18b1</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a791283732c42afd117395d1a754c2ed4</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a3bb07963185796aae989ba8ddb879053</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7fae2d3a58fafd2e6bbf9fde503528df</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ab0f32514dcf52d8adccbd7ddfbc8ace5</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa24c879e08eb3a260f1ee25c81be8deb</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator&gt;</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a66a7440e7d716c4b52aaea4a8446c450</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator&gt;=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af7506bbcbcf11ca189b3076b50277bd9</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acca310957bfc1080c170ee74ded4d2f4</anchor>
      <arglist>(int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acd494c7039d4e01ebb50f28174ace41b</anchor>
      <arglist>(int, int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6d7409f3810cf37d28f1a6d54da389ad</anchor>
      <arglist>(int, int, int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a83bebf9102ff90bbe9909d3eea4f0203</anchor>
      <arglist>(int, int, int, int, VoxelType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a954e524a435eb076d754c25ec35ff70c</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a39d1b7a776221fe6194c09cccb0cf046</anchor>
      <arglist>(int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a95a1963f21b8cf5ce3ef8d522a2c9d97</anchor>
      <arglist>(int, int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a1ae9c02fea5c78cb0b08c70c09007b3a</anchor>
      <arglist>(int, int, int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aca43b3b19e9cae2713e75f77b79bc057</anchor>
      <arglist>(int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9850de321e58f0f5e7fad19a525d4a19</anchor>
      <arglist>(int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0a6b96f01802ce4979080a760349ad43</anchor>
      <arglist>(int, int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8e3e7e98e2125e6d67c863d0e0b885a8</anchor>
      <arglist>(int, int, int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutBackgroundValueAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6bb6d016f6ccea67282b860f568539f3</anchor>
      <arglist>(double, bool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaebc2118b033685d63b4de58474b9ef4</anchor>
      <arglist>(VoxelType, VoxelType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa316f5a21ab3ba5977cf392a090b6475</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a708ae3d97e7a8b7059b5829e9883ea74</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectX</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a066d214c4daf267324f4c2136a903599</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acdfb190a01078516fb0fba69a7890267</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa2c2e7f13fe7c798097d9d0f9d39e850</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abf8a6743897aff16f781f2ecd5abe2d8</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a78017bb91a3ce0432806c30b515032f1</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac883f262c6c2eb972fe3bd456fd254b9</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapYT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaa59b1fd9ff936b245cab7cc8358b876</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapYZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a65e4e2027b97364a89d2b44b23be7ec0</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapZT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af92bd0b1fd14208e4c4d75e20f5e59bf</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af4f220e0ce27c720f2e2fe8a65ef9818</anchor>
      <arglist>(const char *) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0296e4d2327ce9d8d472e8f9d3c123e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AllocateImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abe7dcb1a46f3a03139ddff0868904b6c</anchor>
      <arglist>(VoxelType *=NULL)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VoxelType *</type>
      <name>_data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0635297758e00bbb8fa1e88f8ae1d6f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_dataOwner</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8e9935f940685d83a3801206233308b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VoxelType ****</type>
      <name>_matrix</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af8b64b576c435cc9b2c45f32107186d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericImage&lt; T9 &gt;</name>
    <filename>classmirtk_1_1GenericImage.html</filename>
    <base>mirtk::BaseImage</base>
    <member kind="typedef">
      <type>voxel_info&lt; ScalarType &gt;::RealType</type>
      <name>RealScalarType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afdfda4355104b4da07b05d8f29252e10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>voxel_info&lt; VoxelType &gt;::RealType</type>
      <name>RealType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a09dbec2268636b04aa16abafdaf9220b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>voxel_info&lt; VoxelType &gt;::ScalarType</type>
      <name>ScalarType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7aea0b35509e44c68b6e020636d60a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T9</type>
      <name>VoxelType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a55a99adf761d77572a527a21cc372e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa82ebcacc1fae9b7a19b46b474731913</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BaseImage *</type>
      <name>Copy</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acf6a04d2d7bd3671f64b3638763f28ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af52cb4ad8aaaf44a8aa770eca74fe16d</anchor>
      <arglist>(const VoxelType *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a410229a08c619fae5aa519b931409153</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ad097e09589880dbb4034d91f0acefa14</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CropPad</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a747819222a44455523592665a56d4fbf</anchor>
      <arglist>(int margin=0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa10e4d965a0037827cbc692cee7282d1</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afbd0a3b1f357f43e019823e1090b93f4</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>addf9fb643b5b9c9a87c0e65a74f14ad4</anchor>
      <arglist>(int=0) const</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a10fe304a442f2ef1296a3ae265e16222</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af873ad2419fe41d778d45c8e85129a4f</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ad9d46dfaa14c31d052671f1e92f38d6c</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aeaab3c83332d510cc33d9757da6adb6e</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipYT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abd3ab9ed62d30464c0d42f73cfe2de06</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipYZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a57e0a0f8604497a1456cffa8a9e96127</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipZT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4894d798397b80ec36c2254ec5487226</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a118750dfb5ebd094b96dcbeeb813cd51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac0102c5d63d051c576c12efc3f073260</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9375aecd646973353434e1708d1a482f</anchor>
      <arglist>(int, int, int=1, int=1, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aee16def97204142dc963393c06de4dad</anchor>
      <arglist>(int, int, int, int, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a31edbc653fb6c1b988f66b1a979281db</anchor>
      <arglist>(const ImageAttributes &amp;, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6dd7ef3516cdfa041201a95e00a2c95d</anchor>
      <arglist>(const ImageAttributes &amp;, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac351b5a71c61e4fc9427c7005dee9465</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae7120d0d1573263d7362fc94c0511993</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a3682d26b021f75aa328b2b0f11020173</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac29847f1cdc609843392e9e9162e6d8f</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a94b4a28283f0dee0f39109b2e9556e64</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4c863bfab3c0103a5ab8f5431c05e3d7</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4bfc0bdcd763528f83bffa32d7db4d2c</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a83029368a40f49c4d3213e1718e01c15</anchor>
      <arglist>(Vector &amp;, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaab5c8c05d91f7d430a81fb4a48264aa</anchor>
      <arglist>(Vector &amp;, int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aad643794ba7086212b2f28c2487aec94</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4ef28e8492266470356c768f8b40cebf</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>GetAverage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a52a6375792cd5d272c20f4dced52ba91</anchor>
      <arglist>(int=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abf9e71af9c077932c75f6d019e8e40bb</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7e65e9e46e6b290e09ffc72188bac0d8</anchor>
      <arglist>(int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a44f27382851f5e12c7b27de8d7e91c06</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4f31ce7a8d59490a31125989658fa7e3</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetDataType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a168ee61bb4fc187136a9fae26056c917</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetDataTypeMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8bc7d2156321adb2242a014c9f2e8640</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetDataTypeMin</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aac767f97f9a1f77e55e42832abf80dca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetDataTypeSize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a780573a3084b9dbafb7a2b5a190bfdc3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa6def8f3546157eb4c7030eee953357f</anchor>
      <arglist>(int, int=-1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae8adc523c5971c67a7fcc755cc243aa6</anchor>
      <arglist>(GenericImage &amp;, int, int=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0d08b6db0ef93f2823863c0948f96a71</anchor>
      <arglist>(BaseImage *&amp;, int, int=-1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMaxPosition</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abb137b5432522ab67a2e4d59128bd973</anchor>
      <arglist>(Point &amp;, int=1, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4b22954ec673e1dc0c0fce41876d88d1</anchor>
      <arglist>(VoxelType &amp;, VoxelType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5f259e24198f43f5f5b5c36a491957b9</anchor>
      <arglist>(VoxelType &amp;, VoxelType &amp;, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae5245568d869b5a01f07ed7a1f9a78c8</anchor>
      <arglist>(VoxelType *, VoxelType *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa2cf3c6d470e024603a2ddd2c6d9e683</anchor>
      <arglist>(VoxelType *, VoxelType *, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMaxPad</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac9fa85710e8504ba0200f77bd6ab7476</anchor>
      <arglist>(VoxelType *, VoxelType *, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>GetPointerToVoxels</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a104db5b6f2ee2f4084a04872c8573e8b</anchor>
      <arglist>(int=0, int=0, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>GetPointerToVoxels</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a15b7ffcef7e56b684d2169979014a875</anchor>
      <arglist>(int=0, int=0, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac3ed57e94c462dfe3601cf7f66a445c2</anchor>
      <arglist>(int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0de61c4adca6157ff7b500f4d0d56911</anchor>
      <arglist>(GenericImage &amp;, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8251408aa84fb85b8583d208a184d819</anchor>
      <arglist>(BaseImage *&amp;, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac36175064977d4782a170149b9448977</anchor>
      <arglist>(int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6621082cdb165d9ed4794fdb4eb5d71b</anchor>
      <arglist>(GenericImage &amp;, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a84cdb7c8b51fd4a47763e62dbd575af5</anchor>
      <arglist>(BaseImage *&amp;, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abe7f8ef6bec99b4aa26044b092c2a736</anchor>
      <arglist>(int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a00e75bbca2e78eb11eec0aebee7cfe8f</anchor>
      <arglist>(GenericImage &amp;, int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a379c778e5af9bf81e3a41ecf6170ebfb</anchor>
      <arglist>(BaseImage *&amp;, int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>GetSD</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8543f89af05963eba7aa8a119435c891</anchor>
      <arglist>(int=1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GravityCenter</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a51f690a439ee530631e833af25f47829</anchor>
      <arglist>(Point &amp;, int=1, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae4d54c2ca77b26fde859983026d6a0b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af253119c9bfebded7fcf1851e8cb33cb</anchor>
      <arglist>(const ImageAttributes &amp;, int, VoxelType *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7c54e079d14ba29f5926d22d9df834d8</anchor>
      <arglist>(const ImageAttributes &amp;, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a65fecfa6503a5efabda0735d3e549e1e</anchor>
      <arglist>(const ImageAttributes &amp;, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a1fa24fb2c109a33e151963b82b99e070</anchor>
      <arglist>(int, int, int, int, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a32e241530add68b8c28c54332fe33de0</anchor>
      <arglist>(int, int, int=1, int=1, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>Mean</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a32cdc73f07c6dc8dbcbc490a2204e088</anchor>
      <arglist>(bool fg=true) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>N</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a496434256dc5192f2779d5f81d87b947</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8a36b56ce661f7f31434a0626e82132e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BinaryImage</type>
      <name>operator!=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a77c82ed325b1874d3a8c06223be89e42</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa7cb99b55c3a646c2ebdcf7917cde637</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4ad5e9c0c9ab34124f0e55d190ee301d</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a827c9b59c984acac4e022dc0106a934a</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>adf9c5c774348994f91cd124d9f0fcaba</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5a4b1e7a9bae33a42c4861f99e15f7a5</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a34d4670feb9061cb727fc272454ba6eb</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6f6fe7f8faf9828e71f1ccad698d7626</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9525714b6c6106e856bec1ee9fb1685e</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aed3c57d6751d0adcff1eb1b04d15b44b</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aef4b7a5c68842ec2daf53a279b364912</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a596668714940d32fb7bf58bac5937660</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ab9c8e9fff15b53e89dfa761a69511289</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a94a96350bb990f2e5ec7685edf89d569</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5c2857f420374992f4a46309db49240b</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afb2e42fab40de7e4fac80225404d84e3</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a66e58c4dccc96254b524f965dc7d6a89</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a527a2223374ee4bbde03375b0a238a1c</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a769c42188c12089b1cf304c810f14845</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae646992523114572c8f065e96b7166fd</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a39ffec97fd762491d870b485ad1d400e</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator&lt;</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a101b700326307e3a6408cfefe3ca92db</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator&lt;=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a53035485aaa44f15426f870559cd18b1</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a791283732c42afd117395d1a754c2ed4</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a3bb07963185796aae989ba8ddb879053</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7fae2d3a58fafd2e6bbf9fde503528df</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ab0f32514dcf52d8adccbd7ddfbc8ace5</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa24c879e08eb3a260f1ee25c81be8deb</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator&gt;</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a66a7440e7d716c4b52aaea4a8446c450</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator&gt;=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af7506bbcbcf11ca189b3076b50277bd9</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acca310957bfc1080c170ee74ded4d2f4</anchor>
      <arglist>(int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acd494c7039d4e01ebb50f28174ace41b</anchor>
      <arglist>(int, int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6d7409f3810cf37d28f1a6d54da389ad</anchor>
      <arglist>(int, int, int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a83bebf9102ff90bbe9909d3eea4f0203</anchor>
      <arglist>(int, int, int, int, VoxelType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a954e524a435eb076d754c25ec35ff70c</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a39d1b7a776221fe6194c09cccb0cf046</anchor>
      <arglist>(int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a95a1963f21b8cf5ce3ef8d522a2c9d97</anchor>
      <arglist>(int, int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a1ae9c02fea5c78cb0b08c70c09007b3a</anchor>
      <arglist>(int, int, int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aca43b3b19e9cae2713e75f77b79bc057</anchor>
      <arglist>(int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9850de321e58f0f5e7fad19a525d4a19</anchor>
      <arglist>(int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0a6b96f01802ce4979080a760349ad43</anchor>
      <arglist>(int, int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8e3e7e98e2125e6d67c863d0e0b885a8</anchor>
      <arglist>(int, int, int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutBackgroundValueAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6bb6d016f6ccea67282b860f568539f3</anchor>
      <arglist>(double, bool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaebc2118b033685d63b4de58474b9ef4</anchor>
      <arglist>(VoxelType, VoxelType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa316f5a21ab3ba5977cf392a090b6475</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a708ae3d97e7a8b7059b5829e9883ea74</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectX</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a066d214c4daf267324f4c2136a903599</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acdfb190a01078516fb0fba69a7890267</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa2c2e7f13fe7c798097d9d0f9d39e850</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abf8a6743897aff16f781f2ecd5abe2d8</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a78017bb91a3ce0432806c30b515032f1</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac883f262c6c2eb972fe3bd456fd254b9</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapYT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaa59b1fd9ff936b245cab7cc8358b876</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapYZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a65e4e2027b97364a89d2b44b23be7ec0</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapZT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af92bd0b1fd14208e4c4d75e20f5e59bf</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af4f220e0ce27c720f2e2fe8a65ef9818</anchor>
      <arglist>(const char *) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0296e4d2327ce9d8d472e8f9d3c123e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AllocateImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abe7dcb1a46f3a03139ddff0868904b6c</anchor>
      <arglist>(VoxelType *=NULL)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VoxelType *</type>
      <name>_data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0635297758e00bbb8fa1e88f8ae1d6f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_dataOwner</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8e9935f940685d83a3801206233308b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VoxelType ****</type>
      <name>_matrix</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af8b64b576c435cc9b2c45f32107186d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericImage&lt; TData &gt;</name>
    <filename>classmirtk_1_1GenericImage.html</filename>
    <base>mirtk::BaseImage</base>
    <member kind="typedef">
      <type>voxel_info&lt; ScalarType &gt;::RealType</type>
      <name>RealScalarType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afdfda4355104b4da07b05d8f29252e10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>voxel_info&lt; VoxelType &gt;::RealType</type>
      <name>RealType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a09dbec2268636b04aa16abafdaf9220b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>voxel_info&lt; VoxelType &gt;::ScalarType</type>
      <name>ScalarType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7aea0b35509e44c68b6e020636d60a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TData</type>
      <name>VoxelType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a55a99adf761d77572a527a21cc372e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa82ebcacc1fae9b7a19b46b474731913</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BaseImage *</type>
      <name>Copy</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acf6a04d2d7bd3671f64b3638763f28ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af52cb4ad8aaaf44a8aa770eca74fe16d</anchor>
      <arglist>(const VoxelType *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a410229a08c619fae5aa519b931409153</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ad097e09589880dbb4034d91f0acefa14</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CropPad</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a747819222a44455523592665a56d4fbf</anchor>
      <arglist>(int margin=0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa10e4d965a0037827cbc692cee7282d1</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afbd0a3b1f357f43e019823e1090b93f4</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>addf9fb643b5b9c9a87c0e65a74f14ad4</anchor>
      <arglist>(int=0) const</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a10fe304a442f2ef1296a3ae265e16222</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af873ad2419fe41d778d45c8e85129a4f</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ad9d46dfaa14c31d052671f1e92f38d6c</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aeaab3c83332d510cc33d9757da6adb6e</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipYT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abd3ab9ed62d30464c0d42f73cfe2de06</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipYZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a57e0a0f8604497a1456cffa8a9e96127</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipZT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4894d798397b80ec36c2254ec5487226</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a118750dfb5ebd094b96dcbeeb813cd51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac0102c5d63d051c576c12efc3f073260</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9375aecd646973353434e1708d1a482f</anchor>
      <arglist>(int, int, int=1, int=1, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aee16def97204142dc963393c06de4dad</anchor>
      <arglist>(int, int, int, int, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a31edbc653fb6c1b988f66b1a979281db</anchor>
      <arglist>(const ImageAttributes &amp;, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6dd7ef3516cdfa041201a95e00a2c95d</anchor>
      <arglist>(const ImageAttributes &amp;, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac351b5a71c61e4fc9427c7005dee9465</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae7120d0d1573263d7362fc94c0511993</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a3682d26b021f75aa328b2b0f11020173</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac29847f1cdc609843392e9e9162e6d8f</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a94b4a28283f0dee0f39109b2e9556e64</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4c863bfab3c0103a5ab8f5431c05e3d7</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4bfc0bdcd763528f83bffa32d7db4d2c</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a83029368a40f49c4d3213e1718e01c15</anchor>
      <arglist>(Vector &amp;, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaab5c8c05d91f7d430a81fb4a48264aa</anchor>
      <arglist>(Vector &amp;, int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aad643794ba7086212b2f28c2487aec94</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4ef28e8492266470356c768f8b40cebf</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>GetAverage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a52a6375792cd5d272c20f4dced52ba91</anchor>
      <arglist>(int=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abf9e71af9c077932c75f6d019e8e40bb</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7e65e9e46e6b290e09ffc72188bac0d8</anchor>
      <arglist>(int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a44f27382851f5e12c7b27de8d7e91c06</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4f31ce7a8d59490a31125989658fa7e3</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetDataType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a168ee61bb4fc187136a9fae26056c917</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetDataTypeMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8bc7d2156321adb2242a014c9f2e8640</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetDataTypeMin</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aac767f97f9a1f77e55e42832abf80dca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetDataTypeSize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a780573a3084b9dbafb7a2b5a190bfdc3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa6def8f3546157eb4c7030eee953357f</anchor>
      <arglist>(int, int=-1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae8adc523c5971c67a7fcc755cc243aa6</anchor>
      <arglist>(GenericImage &amp;, int, int=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0d08b6db0ef93f2823863c0948f96a71</anchor>
      <arglist>(BaseImage *&amp;, int, int=-1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMaxPosition</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abb137b5432522ab67a2e4d59128bd973</anchor>
      <arglist>(Point &amp;, int=1, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4b22954ec673e1dc0c0fce41876d88d1</anchor>
      <arglist>(VoxelType &amp;, VoxelType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5f259e24198f43f5f5b5c36a491957b9</anchor>
      <arglist>(VoxelType &amp;, VoxelType &amp;, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae5245568d869b5a01f07ed7a1f9a78c8</anchor>
      <arglist>(VoxelType *, VoxelType *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa2cf3c6d470e024603a2ddd2c6d9e683</anchor>
      <arglist>(VoxelType *, VoxelType *, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMaxPad</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac9fa85710e8504ba0200f77bd6ab7476</anchor>
      <arglist>(VoxelType *, VoxelType *, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>GetPointerToVoxels</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a104db5b6f2ee2f4084a04872c8573e8b</anchor>
      <arglist>(int=0, int=0, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>GetPointerToVoxels</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a15b7ffcef7e56b684d2169979014a875</anchor>
      <arglist>(int=0, int=0, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac3ed57e94c462dfe3601cf7f66a445c2</anchor>
      <arglist>(int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0de61c4adca6157ff7b500f4d0d56911</anchor>
      <arglist>(GenericImage &amp;, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8251408aa84fb85b8583d208a184d819</anchor>
      <arglist>(BaseImage *&amp;, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac36175064977d4782a170149b9448977</anchor>
      <arglist>(int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6621082cdb165d9ed4794fdb4eb5d71b</anchor>
      <arglist>(GenericImage &amp;, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a84cdb7c8b51fd4a47763e62dbd575af5</anchor>
      <arglist>(BaseImage *&amp;, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abe7f8ef6bec99b4aa26044b092c2a736</anchor>
      <arglist>(int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a00e75bbca2e78eb11eec0aebee7cfe8f</anchor>
      <arglist>(GenericImage &amp;, int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a379c778e5af9bf81e3a41ecf6170ebfb</anchor>
      <arglist>(BaseImage *&amp;, int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>GetSD</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8543f89af05963eba7aa8a119435c891</anchor>
      <arglist>(int=1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GravityCenter</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a51f690a439ee530631e833af25f47829</anchor>
      <arglist>(Point &amp;, int=1, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae4d54c2ca77b26fde859983026d6a0b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af253119c9bfebded7fcf1851e8cb33cb</anchor>
      <arglist>(const ImageAttributes &amp;, int, VoxelType *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7c54e079d14ba29f5926d22d9df834d8</anchor>
      <arglist>(const ImageAttributes &amp;, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a65fecfa6503a5efabda0735d3e549e1e</anchor>
      <arglist>(const ImageAttributes &amp;, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a1fa24fb2c109a33e151963b82b99e070</anchor>
      <arglist>(int, int, int, int, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a32e241530add68b8c28c54332fe33de0</anchor>
      <arglist>(int, int, int=1, int=1, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>Mean</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a32cdc73f07c6dc8dbcbc490a2204e088</anchor>
      <arglist>(bool fg=true) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>N</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a496434256dc5192f2779d5f81d87b947</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8a36b56ce661f7f31434a0626e82132e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BinaryImage</type>
      <name>operator!=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a77c82ed325b1874d3a8c06223be89e42</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa7cb99b55c3a646c2ebdcf7917cde637</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4ad5e9c0c9ab34124f0e55d190ee301d</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a827c9b59c984acac4e022dc0106a934a</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>adf9c5c774348994f91cd124d9f0fcaba</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5a4b1e7a9bae33a42c4861f99e15f7a5</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a34d4670feb9061cb727fc272454ba6eb</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6f6fe7f8faf9828e71f1ccad698d7626</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9525714b6c6106e856bec1ee9fb1685e</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aed3c57d6751d0adcff1eb1b04d15b44b</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aef4b7a5c68842ec2daf53a279b364912</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a596668714940d32fb7bf58bac5937660</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ab9c8e9fff15b53e89dfa761a69511289</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a94a96350bb990f2e5ec7685edf89d569</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5c2857f420374992f4a46309db49240b</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afb2e42fab40de7e4fac80225404d84e3</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a66e58c4dccc96254b524f965dc7d6a89</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a527a2223374ee4bbde03375b0a238a1c</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a769c42188c12089b1cf304c810f14845</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae646992523114572c8f065e96b7166fd</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a39ffec97fd762491d870b485ad1d400e</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator&lt;</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a101b700326307e3a6408cfefe3ca92db</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator&lt;=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a53035485aaa44f15426f870559cd18b1</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a791283732c42afd117395d1a754c2ed4</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a3bb07963185796aae989ba8ddb879053</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7fae2d3a58fafd2e6bbf9fde503528df</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ab0f32514dcf52d8adccbd7ddfbc8ace5</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa24c879e08eb3a260f1ee25c81be8deb</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator&gt;</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a66a7440e7d716c4b52aaea4a8446c450</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator&gt;=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af7506bbcbcf11ca189b3076b50277bd9</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acca310957bfc1080c170ee74ded4d2f4</anchor>
      <arglist>(int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acd494c7039d4e01ebb50f28174ace41b</anchor>
      <arglist>(int, int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6d7409f3810cf37d28f1a6d54da389ad</anchor>
      <arglist>(int, int, int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a83bebf9102ff90bbe9909d3eea4f0203</anchor>
      <arglist>(int, int, int, int, VoxelType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a954e524a435eb076d754c25ec35ff70c</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a39d1b7a776221fe6194c09cccb0cf046</anchor>
      <arglist>(int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a95a1963f21b8cf5ce3ef8d522a2c9d97</anchor>
      <arglist>(int, int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a1ae9c02fea5c78cb0b08c70c09007b3a</anchor>
      <arglist>(int, int, int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aca43b3b19e9cae2713e75f77b79bc057</anchor>
      <arglist>(int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9850de321e58f0f5e7fad19a525d4a19</anchor>
      <arglist>(int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0a6b96f01802ce4979080a760349ad43</anchor>
      <arglist>(int, int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8e3e7e98e2125e6d67c863d0e0b885a8</anchor>
      <arglist>(int, int, int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutBackgroundValueAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6bb6d016f6ccea67282b860f568539f3</anchor>
      <arglist>(double, bool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaebc2118b033685d63b4de58474b9ef4</anchor>
      <arglist>(VoxelType, VoxelType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa316f5a21ab3ba5977cf392a090b6475</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a708ae3d97e7a8b7059b5829e9883ea74</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectX</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a066d214c4daf267324f4c2136a903599</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acdfb190a01078516fb0fba69a7890267</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa2c2e7f13fe7c798097d9d0f9d39e850</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abf8a6743897aff16f781f2ecd5abe2d8</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a78017bb91a3ce0432806c30b515032f1</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac883f262c6c2eb972fe3bd456fd254b9</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapYT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaa59b1fd9ff936b245cab7cc8358b876</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapYZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a65e4e2027b97364a89d2b44b23be7ec0</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapZT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af92bd0b1fd14208e4c4d75e20f5e59bf</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af4f220e0ce27c720f2e2fe8a65ef9818</anchor>
      <arglist>(const char *) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0296e4d2327ce9d8d472e8f9d3c123e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AllocateImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abe7dcb1a46f3a03139ddff0868904b6c</anchor>
      <arglist>(VoxelType *=NULL)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VoxelType *</type>
      <name>_data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0635297758e00bbb8fa1e88f8ae1d6f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_dataOwner</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8e9935f940685d83a3801206233308b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VoxelType ****</type>
      <name>_matrix</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af8b64b576c435cc9b2c45f32107186d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericImage&lt; TReal &gt;</name>
    <filename>classmirtk_1_1GenericImage.html</filename>
    <base>mirtk::BaseImage</base>
    <member kind="typedef">
      <type>voxel_info&lt; ScalarType &gt;::RealType</type>
      <name>RealScalarType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afdfda4355104b4da07b05d8f29252e10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>voxel_info&lt; VoxelType &gt;::RealType</type>
      <name>RealType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a09dbec2268636b04aa16abafdaf9220b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>voxel_info&lt; VoxelType &gt;::ScalarType</type>
      <name>ScalarType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7aea0b35509e44c68b6e020636d60a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TReal</type>
      <name>VoxelType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a55a99adf761d77572a527a21cc372e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa82ebcacc1fae9b7a19b46b474731913</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BaseImage *</type>
      <name>Copy</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acf6a04d2d7bd3671f64b3638763f28ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af52cb4ad8aaaf44a8aa770eca74fe16d</anchor>
      <arglist>(const VoxelType *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a410229a08c619fae5aa519b931409153</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ad097e09589880dbb4034d91f0acefa14</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CropPad</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a747819222a44455523592665a56d4fbf</anchor>
      <arglist>(int margin=0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa10e4d965a0037827cbc692cee7282d1</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afbd0a3b1f357f43e019823e1090b93f4</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>addf9fb643b5b9c9a87c0e65a74f14ad4</anchor>
      <arglist>(int=0) const</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a10fe304a442f2ef1296a3ae265e16222</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af873ad2419fe41d778d45c8e85129a4f</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ad9d46dfaa14c31d052671f1e92f38d6c</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aeaab3c83332d510cc33d9757da6adb6e</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipYT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abd3ab9ed62d30464c0d42f73cfe2de06</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipYZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a57e0a0f8604497a1456cffa8a9e96127</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipZT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4894d798397b80ec36c2254ec5487226</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a118750dfb5ebd094b96dcbeeb813cd51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac0102c5d63d051c576c12efc3f073260</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9375aecd646973353434e1708d1a482f</anchor>
      <arglist>(int, int, int=1, int=1, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aee16def97204142dc963393c06de4dad</anchor>
      <arglist>(int, int, int, int, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a31edbc653fb6c1b988f66b1a979281db</anchor>
      <arglist>(const ImageAttributes &amp;, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6dd7ef3516cdfa041201a95e00a2c95d</anchor>
      <arglist>(const ImageAttributes &amp;, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac351b5a71c61e4fc9427c7005dee9465</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae7120d0d1573263d7362fc94c0511993</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a3682d26b021f75aa328b2b0f11020173</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac29847f1cdc609843392e9e9162e6d8f</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a94b4a28283f0dee0f39109b2e9556e64</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4c863bfab3c0103a5ab8f5431c05e3d7</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4bfc0bdcd763528f83bffa32d7db4d2c</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a83029368a40f49c4d3213e1718e01c15</anchor>
      <arglist>(Vector &amp;, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaab5c8c05d91f7d430a81fb4a48264aa</anchor>
      <arglist>(Vector &amp;, int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aad643794ba7086212b2f28c2487aec94</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4ef28e8492266470356c768f8b40cebf</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>GetAverage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a52a6375792cd5d272c20f4dced52ba91</anchor>
      <arglist>(int=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abf9e71af9c077932c75f6d019e8e40bb</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7e65e9e46e6b290e09ffc72188bac0d8</anchor>
      <arglist>(int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a44f27382851f5e12c7b27de8d7e91c06</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4f31ce7a8d59490a31125989658fa7e3</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetDataType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a168ee61bb4fc187136a9fae26056c917</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetDataTypeMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8bc7d2156321adb2242a014c9f2e8640</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetDataTypeMin</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aac767f97f9a1f77e55e42832abf80dca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetDataTypeSize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a780573a3084b9dbafb7a2b5a190bfdc3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa6def8f3546157eb4c7030eee953357f</anchor>
      <arglist>(int, int=-1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae8adc523c5971c67a7fcc755cc243aa6</anchor>
      <arglist>(GenericImage &amp;, int, int=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0d08b6db0ef93f2823863c0948f96a71</anchor>
      <arglist>(BaseImage *&amp;, int, int=-1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMaxPosition</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abb137b5432522ab67a2e4d59128bd973</anchor>
      <arglist>(Point &amp;, int=1, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4b22954ec673e1dc0c0fce41876d88d1</anchor>
      <arglist>(VoxelType &amp;, VoxelType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5f259e24198f43f5f5b5c36a491957b9</anchor>
      <arglist>(VoxelType &amp;, VoxelType &amp;, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae5245568d869b5a01f07ed7a1f9a78c8</anchor>
      <arglist>(VoxelType *, VoxelType *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa2cf3c6d470e024603a2ddd2c6d9e683</anchor>
      <arglist>(VoxelType *, VoxelType *, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMaxPad</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac9fa85710e8504ba0200f77bd6ab7476</anchor>
      <arglist>(VoxelType *, VoxelType *, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>GetPointerToVoxels</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a104db5b6f2ee2f4084a04872c8573e8b</anchor>
      <arglist>(int=0, int=0, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>GetPointerToVoxels</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a15b7ffcef7e56b684d2169979014a875</anchor>
      <arglist>(int=0, int=0, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac3ed57e94c462dfe3601cf7f66a445c2</anchor>
      <arglist>(int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0de61c4adca6157ff7b500f4d0d56911</anchor>
      <arglist>(GenericImage &amp;, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8251408aa84fb85b8583d208a184d819</anchor>
      <arglist>(BaseImage *&amp;, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac36175064977d4782a170149b9448977</anchor>
      <arglist>(int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6621082cdb165d9ed4794fdb4eb5d71b</anchor>
      <arglist>(GenericImage &amp;, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a84cdb7c8b51fd4a47763e62dbd575af5</anchor>
      <arglist>(BaseImage *&amp;, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abe7f8ef6bec99b4aa26044b092c2a736</anchor>
      <arglist>(int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a00e75bbca2e78eb11eec0aebee7cfe8f</anchor>
      <arglist>(GenericImage &amp;, int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a379c778e5af9bf81e3a41ecf6170ebfb</anchor>
      <arglist>(BaseImage *&amp;, int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>GetSD</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8543f89af05963eba7aa8a119435c891</anchor>
      <arglist>(int=1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GravityCenter</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a51f690a439ee530631e833af25f47829</anchor>
      <arglist>(Point &amp;, int=1, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae4d54c2ca77b26fde859983026d6a0b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af253119c9bfebded7fcf1851e8cb33cb</anchor>
      <arglist>(const ImageAttributes &amp;, int, VoxelType *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7c54e079d14ba29f5926d22d9df834d8</anchor>
      <arglist>(const ImageAttributes &amp;, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a65fecfa6503a5efabda0735d3e549e1e</anchor>
      <arglist>(const ImageAttributes &amp;, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a1fa24fb2c109a33e151963b82b99e070</anchor>
      <arglist>(int, int, int, int, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a32e241530add68b8c28c54332fe33de0</anchor>
      <arglist>(int, int, int=1, int=1, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>Mean</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a32cdc73f07c6dc8dbcbc490a2204e088</anchor>
      <arglist>(bool fg=true) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>N</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a496434256dc5192f2779d5f81d87b947</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8a36b56ce661f7f31434a0626e82132e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BinaryImage</type>
      <name>operator!=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a77c82ed325b1874d3a8c06223be89e42</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa7cb99b55c3a646c2ebdcf7917cde637</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4ad5e9c0c9ab34124f0e55d190ee301d</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a827c9b59c984acac4e022dc0106a934a</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>adf9c5c774348994f91cd124d9f0fcaba</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5a4b1e7a9bae33a42c4861f99e15f7a5</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a34d4670feb9061cb727fc272454ba6eb</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6f6fe7f8faf9828e71f1ccad698d7626</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9525714b6c6106e856bec1ee9fb1685e</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aed3c57d6751d0adcff1eb1b04d15b44b</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aef4b7a5c68842ec2daf53a279b364912</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a596668714940d32fb7bf58bac5937660</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ab9c8e9fff15b53e89dfa761a69511289</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a94a96350bb990f2e5ec7685edf89d569</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5c2857f420374992f4a46309db49240b</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afb2e42fab40de7e4fac80225404d84e3</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a66e58c4dccc96254b524f965dc7d6a89</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a527a2223374ee4bbde03375b0a238a1c</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a769c42188c12089b1cf304c810f14845</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae646992523114572c8f065e96b7166fd</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a39ffec97fd762491d870b485ad1d400e</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator&lt;</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a101b700326307e3a6408cfefe3ca92db</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator&lt;=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a53035485aaa44f15426f870559cd18b1</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a791283732c42afd117395d1a754c2ed4</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a3bb07963185796aae989ba8ddb879053</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7fae2d3a58fafd2e6bbf9fde503528df</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ab0f32514dcf52d8adccbd7ddfbc8ace5</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa24c879e08eb3a260f1ee25c81be8deb</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator&gt;</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a66a7440e7d716c4b52aaea4a8446c450</anchor>
      <arglist>(VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator&gt;=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af7506bbcbcf11ca189b3076b50277bd9</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acca310957bfc1080c170ee74ded4d2f4</anchor>
      <arglist>(int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acd494c7039d4e01ebb50f28174ace41b</anchor>
      <arglist>(int, int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6d7409f3810cf37d28f1a6d54da389ad</anchor>
      <arglist>(int, int, int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a83bebf9102ff90bbe9909d3eea4f0203</anchor>
      <arglist>(int, int, int, int, VoxelType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a954e524a435eb076d754c25ec35ff70c</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a39d1b7a776221fe6194c09cccb0cf046</anchor>
      <arglist>(int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a95a1963f21b8cf5ce3ef8d522a2c9d97</anchor>
      <arglist>(int, int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a1ae9c02fea5c78cb0b08c70c09007b3a</anchor>
      <arglist>(int, int, int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aca43b3b19e9cae2713e75f77b79bc057</anchor>
      <arglist>(int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9850de321e58f0f5e7fad19a525d4a19</anchor>
      <arglist>(int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0a6b96f01802ce4979080a760349ad43</anchor>
      <arglist>(int, int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8e3e7e98e2125e6d67c863d0e0b885a8</anchor>
      <arglist>(int, int, int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutBackgroundValueAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6bb6d016f6ccea67282b860f568539f3</anchor>
      <arglist>(double, bool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaebc2118b033685d63b4de58474b9ef4</anchor>
      <arglist>(VoxelType, VoxelType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa316f5a21ab3ba5977cf392a090b6475</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a708ae3d97e7a8b7059b5829e9883ea74</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectX</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a066d214c4daf267324f4c2136a903599</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acdfb190a01078516fb0fba69a7890267</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa2c2e7f13fe7c798097d9d0f9d39e850</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abf8a6743897aff16f781f2ecd5abe2d8</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a78017bb91a3ce0432806c30b515032f1</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac883f262c6c2eb972fe3bd456fd254b9</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapYT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaa59b1fd9ff936b245cab7cc8358b876</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapYZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a65e4e2027b97364a89d2b44b23be7ec0</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapZT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af92bd0b1fd14208e4c4d75e20f5e59bf</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af4f220e0ce27c720f2e2fe8a65ef9818</anchor>
      <arglist>(const char *) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0296e4d2327ce9d8d472e8f9d3c123e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AllocateImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abe7dcb1a46f3a03139ddff0868904b6c</anchor>
      <arglist>(VoxelType *=NULL)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VoxelType *</type>
      <name>_data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0635297758e00bbb8fa1e88f8ae1d6f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_dataOwner</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8e9935f940685d83a3801206233308b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VoxelType ****</type>
      <name>_matrix</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af8b64b576c435cc9b2c45f32107186d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericImageGradientFunction</name>
    <filename>classmirtk_1_1GenericImageGradientFunction.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::ImageGradientFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Extrapolator</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>ac448fe7ac352b7f2a612b55eb50012ba</anchor>
      <arglist>(ExtrapolateImageFunction *, bool=false)</arglist>
    </member>
    <member kind="function">
      <type>ExtrapolatorType *</type>
      <name>Extrapolator</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>a12fb9a728b809c9b9c331723555e2bdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ExtrapolatorType *</type>
      <name>Extrapolator</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>a882798c8559e7a9cfa549edc0be34090</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>a709c39e2659ab503d3d92def28805899</anchor>
      <arglist>(bool coeff=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>a0a916f8a71539e086c4160fbd943cd9d</anchor>
      <arglist>(const BaseImage *)</arglist>
    </member>
    <member kind="function">
      <type>const ImageType *</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>ab77b90d235bdc17eea718946156cab14</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ExtrapolateImageFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>a9a5dc899bfe4001d9a78127343144b7d</anchor>
      <arglist>(enum ExtrapolationMode, const BaseImage *=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericImageGradientFunction</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>a19c738073d95cc7a27febedaddd9e380</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GenericImageGradientFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>adb78f00058dc579a5e20ef1e113ca411</anchor>
      <arglist>(enum InterpolationMode, const TImage *=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GenericImageGradientFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>a6a254877d1e0e4ec9c92b8dc2ee8d475</anchor>
      <arglist>(enum InterpolationMode, enum ExtrapolationMode, const TImage *=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GenericImageGradientFunction</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>a7dfd33fce8d4577776d20e58e712631e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericImageGradientFunction&lt; BaseImage &gt;</name>
    <filename>classmirtk_1_1GenericImageGradientFunction.html</filename>
    <base>mirtk::ImageGradientFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Extrapolator</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>ac448fe7ac352b7f2a612b55eb50012ba</anchor>
      <arglist>(ExtrapolateImageFunction *, bool=false)</arglist>
    </member>
    <member kind="function">
      <type>ExtrapolatorType *</type>
      <name>Extrapolator</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>a12fb9a728b809c9b9c331723555e2bdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ExtrapolatorType *</type>
      <name>Extrapolator</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>a882798c8559e7a9cfa549edc0be34090</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>a709c39e2659ab503d3d92def28805899</anchor>
      <arglist>(bool coeff=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>a0a916f8a71539e086c4160fbd943cd9d</anchor>
      <arglist>(const BaseImage *)</arglist>
    </member>
    <member kind="function">
      <type>const ImageType *</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>ab77b90d235bdc17eea718946156cab14</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ExtrapolateImageFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>a9a5dc899bfe4001d9a78127343144b7d</anchor>
      <arglist>(enum ExtrapolationMode, const BaseImage *=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericImageGradientFunction</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>a19c738073d95cc7a27febedaddd9e380</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GenericImageGradientFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>adb78f00058dc579a5e20ef1e113ca411</anchor>
      <arglist>(enum InterpolationMode, const BaseImage *=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GenericImageGradientFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>a6a254877d1e0e4ec9c92b8dc2ee8d475</anchor>
      <arglist>(enum InterpolationMode, enum ExtrapolationMode, const BaseImage *=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GenericImageGradientFunction</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>a7dfd33fce8d4577776d20e58e712631e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericImageGradientFunction&lt; ImageType &gt;</name>
    <filename>classmirtk_1_1GenericImageGradientFunction.html</filename>
    <base>mirtk::ImageGradientFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Extrapolator</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>ac448fe7ac352b7f2a612b55eb50012ba</anchor>
      <arglist>(ExtrapolateImageFunction *, bool=false)</arglist>
    </member>
    <member kind="function">
      <type>ExtrapolatorType *</type>
      <name>Extrapolator</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>a12fb9a728b809c9b9c331723555e2bdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ExtrapolatorType *</type>
      <name>Extrapolator</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>a882798c8559e7a9cfa549edc0be34090</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>a709c39e2659ab503d3d92def28805899</anchor>
      <arglist>(bool coeff=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>a0a916f8a71539e086c4160fbd943cd9d</anchor>
      <arglist>(const BaseImage *)</arglist>
    </member>
    <member kind="function">
      <type>const ImageType *</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>ab77b90d235bdc17eea718946156cab14</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ExtrapolateImageFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>a9a5dc899bfe4001d9a78127343144b7d</anchor>
      <arglist>(enum ExtrapolationMode, const BaseImage *=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericImageGradientFunction</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>a19c738073d95cc7a27febedaddd9e380</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GenericImageGradientFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>adb78f00058dc579a5e20ef1e113ca411</anchor>
      <arglist>(enum InterpolationMode, const ImageType *=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GenericImageGradientFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>a6a254877d1e0e4ec9c92b8dc2ee8d475</anchor>
      <arglist>(enum InterpolationMode, enum ExtrapolationMode, const ImageType *=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GenericImageGradientFunction</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>a7dfd33fce8d4577776d20e58e712631e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericImageIterator</name>
    <filename>classmirtk_1_1GenericImageIterator.html</filename>
    <templarg></templarg>
    <base>mirtk::ImageIterator</base>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Current</name>
      <anchorfile>classmirtk_1_1GenericImageIterator.html</anchorfile>
      <anchor>a0c720af69f837af9662e87c3f4b72f08</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Current</name>
      <anchorfile>classmirtk_1_1GenericImageIterator.html</anchorfile>
      <anchor>a10221d6f880b9d84c943bfaa7bb9adbf</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImageIterator</name>
      <anchorfile>classmirtk_1_1GenericImageIterator.html</anchorfile>
      <anchor>a240052514491112b062a48fb230b5f06</anchor>
      <arglist>(const ImageAttributes &amp;, VoxelType *=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImageIterator</name>
      <anchorfile>classmirtk_1_1GenericImageIterator.html</anchorfile>
      <anchor>ada1c23a6a94adf7455d8edef04267011</anchor>
      <arglist>(GenericImage&lt; VoxelType &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImageIterator</name>
      <anchorfile>classmirtk_1_1GenericImageIterator.html</anchorfile>
      <anchor>a3c63a17c34546700c6f19fb7f8607f7c</anchor>
      <arglist>(GenericImage&lt; VoxelType &gt; *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImageIterator</name>
      <anchorfile>classmirtk_1_1GenericImageIterator.html</anchorfile>
      <anchor>a044b6d08d838e8a13127ed72910d746b</anchor>
      <arglist>(const ConstImageIterator &amp;)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Next</name>
      <anchorfile>classmirtk_1_1GenericImageIterator.html</anchorfile>
      <anchor>a6a95caf321ef8c30395ce215678dd86c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Next</name>
      <anchorfile>classmirtk_1_1GenericImageIterator.html</anchorfile>
      <anchor>a076206b2898d955207c47456ff3bec1b</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>GenericImageIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImageIterator.html</anchorfile>
      <anchor>ad7129ece33abfd2231fd77c22f94cb6a</anchor>
      <arglist>(const GenericImageIterator &amp;)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType &amp;</type>
      <name>Value</name>
      <anchorfile>classmirtk_1_1GenericImageIterator.html</anchorfile>
      <anchor>afedc458be81acaa8f18b7e5caadc57e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType &amp;</type>
      <name>Value</name>
      <anchorfile>classmirtk_1_1GenericImageIterator.html</anchorfile>
      <anchor>a98d8a637ca22a5ab5eb165492868591a</anchor>
      <arglist>(int t) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ValueAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImageIterator.html</anchorfile>
      <anchor>ab47e94c2e1e7722bef023b7941c99040</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ValueAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImageIterator.html</anchorfile>
      <anchor>ae362522b1e733bb563de5b449049bbfe</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GenericImageIterator</name>
      <anchorfile>classmirtk_1_1GenericImageIterator.html</anchorfile>
      <anchor>a3b264ab48adb63cab65cf0a9d262413c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericInterpolateImageFunction</name>
    <filename>classmirtk_1_1GenericInterpolateImageFunction.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::InterpolateImageFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>EvaluateInside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>abdb0124cfcc1cfe28eccc5d8e23a130a</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateInside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a47bb9330e6033483cec9701b8213b0b9</anchor>
      <arglist>(double *, double, double, double=0, int=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateInside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a7c3edfa31e0e55c6d33e2509a09ca9dd</anchor>
      <arglist>(Vector &amp;, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>EvaluateOutside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a68dcb2d341a72cee8c32bfd7934cbd4e</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateOutside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a6a86aabf78897aaa769feaf5d3f741cd</anchor>
      <arglist>(double *, double, double, double=0, int=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateOutside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a1ad8eabab5c7f79764af1d99ac31a122</anchor>
      <arglist>(Vector &amp;, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>EvaluateWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a4e42db576b5f130d90642b1c80fce76f</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a16f1838e8925685dd45639c3e90a43aa</anchor>
      <arglist>(double *, double, double, double=0, int=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>aaec6892c32faa9d7ab5c5b2b652057db</anchor>
      <arglist>(Vector &amp;, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>EvaluateWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>aa770c35132144c65b932627343f68f38</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>af4bacbacadaf51ee79ba4525690fbcd1</anchor>
      <arglist>(double *, double, double, double=0, int=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a84807dc4f6302b350c03fa37ea02df55</anchor>
      <arglist>(Vector &amp;, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Extrapolator</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a0c25e76e00c32396aaf8eb67660c03be</anchor>
      <arglist>(ExtrapolateImageFunction *, bool=false)</arglist>
    </member>
    <member kind="function">
      <type>ExtrapolatorType *</type>
      <name>Extrapolator</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a2f0c9ce790e16ae4547f5b246dbfddb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ExtrapolatorType *</type>
      <name>Extrapolator</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a778ae78bb177f06fa5040e0759330b6e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a45c1c463438e3761d2b43d6fbba3671d</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>ab0f26534a351ca1d52ce97516d72789a</anchor>
      <arglist>(double, double, double=0, double=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a525c841a9f9ff6c6f726dc56a8f735ad</anchor>
      <arglist>(double, double, double=0, double=0) const =0</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a14d1d015f6d299464f813f8281917aa5</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a9fbb4778429ddc928d2ec4aef9797a36</anchor>
      <arglist>(double, double, double=0, double=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>af48408abe646870b4b1ddf5f7a59f06f</anchor>
      <arglist>(double, double, double=0, double=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a1bb8a15511bea147030867fb0beb90cc</anchor>
      <arglist>(bool coeff=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>ac5586fec12bd46c7de04d2dbf8fbdfcd</anchor>
      <arglist>(const BaseImage *)</arglist>
    </member>
    <member kind="function">
      <type>const ImageType *</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a1baea9f7104a4fcbf25dc1d1e3515b93</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ExtrapolateImageFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a62658af272b80089502a28bd6e526e30</anchor>
      <arglist>(enum ExtrapolationMode, const BaseImage *=NULL)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>ab1fa15ed6cbda756d0a5fc30a0dc2103</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a02c31f2212c25738e79e939fe5e8c33b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GenericInterpolateImageFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a83b7ea5b272283a0d19ccb3faf95a971</anchor>
      <arglist>(enum InterpolationMode=Interpolation_Default, const TImage *=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GenericInterpolateImageFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a230de238ee3f30caee7361365c75a7e5</anchor>
      <arglist>(enum InterpolationMode, enum ExtrapolationMode, const TImage *=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GenericInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a9330db1c2ec340317ac12ea3b64de193</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericInterpolateImageFunction&lt; BaseImage &gt;</name>
    <filename>classmirtk_1_1GenericInterpolateImageFunction.html</filename>
    <base>mirtk::InterpolateImageFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>EvaluateInside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>abdb0124cfcc1cfe28eccc5d8e23a130a</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateInside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a47bb9330e6033483cec9701b8213b0b9</anchor>
      <arglist>(double *, double, double, double=0, int=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateInside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a7c3edfa31e0e55c6d33e2509a09ca9dd</anchor>
      <arglist>(Vector &amp;, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>EvaluateOutside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a68dcb2d341a72cee8c32bfd7934cbd4e</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateOutside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a6a86aabf78897aaa769feaf5d3f741cd</anchor>
      <arglist>(double *, double, double, double=0, int=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateOutside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a1ad8eabab5c7f79764af1d99ac31a122</anchor>
      <arglist>(Vector &amp;, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>EvaluateWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a4e42db576b5f130d90642b1c80fce76f</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a16f1838e8925685dd45639c3e90a43aa</anchor>
      <arglist>(double *, double, double, double=0, int=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>aaec6892c32faa9d7ab5c5b2b652057db</anchor>
      <arglist>(Vector &amp;, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>EvaluateWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>aa770c35132144c65b932627343f68f38</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>af4bacbacadaf51ee79ba4525690fbcd1</anchor>
      <arglist>(double *, double, double, double=0, int=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a84807dc4f6302b350c03fa37ea02df55</anchor>
      <arglist>(Vector &amp;, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Extrapolator</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a0c25e76e00c32396aaf8eb67660c03be</anchor>
      <arglist>(ExtrapolateImageFunction *, bool=false)</arglist>
    </member>
    <member kind="function">
      <type>ExtrapolatorType *</type>
      <name>Extrapolator</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a2f0c9ce790e16ae4547f5b246dbfddb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ExtrapolatorType *</type>
      <name>Extrapolator</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a778ae78bb177f06fa5040e0759330b6e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a45c1c463438e3761d2b43d6fbba3671d</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>ab0f26534a351ca1d52ce97516d72789a</anchor>
      <arglist>(double, double, double=0, double=0) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a525c841a9f9ff6c6f726dc56a8f735ad</anchor>
      <arglist>(double, double, double=0, double=0) const=0</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a14d1d015f6d299464f813f8281917aa5</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a9fbb4778429ddc928d2ec4aef9797a36</anchor>
      <arglist>(double, double, double=0, double=0) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>af48408abe646870b4b1ddf5f7a59f06f</anchor>
      <arglist>(double, double, double=0, double=0) const=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a1bb8a15511bea147030867fb0beb90cc</anchor>
      <arglist>(bool coeff=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>ac5586fec12bd46c7de04d2dbf8fbdfcd</anchor>
      <arglist>(const BaseImage *)</arglist>
    </member>
    <member kind="function">
      <type>const ImageType *</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a1baea9f7104a4fcbf25dc1d1e3515b93</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ExtrapolateImageFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a62658af272b80089502a28bd6e526e30</anchor>
      <arglist>(enum ExtrapolationMode, const BaseImage *=NULL)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>ab1fa15ed6cbda756d0a5fc30a0dc2103</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a02c31f2212c25738e79e939fe5e8c33b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GenericInterpolateImageFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a83b7ea5b272283a0d19ccb3faf95a971</anchor>
      <arglist>(enum InterpolationMode=Interpolation_Default, const BaseImage *=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GenericInterpolateImageFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a230de238ee3f30caee7361365c75a7e5</anchor>
      <arglist>(enum InterpolationMode, enum ExtrapolationMode, const BaseImage *=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GenericInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a9330db1c2ec340317ac12ea3b64de193</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericInterpolateImageFunction&lt; CPImage &gt;</name>
    <filename>classmirtk_1_1GenericInterpolateImageFunction.html</filename>
    <base>mirtk::InterpolateImageFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>EvaluateInside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>abdb0124cfcc1cfe28eccc5d8e23a130a</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateInside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a47bb9330e6033483cec9701b8213b0b9</anchor>
      <arglist>(double *, double, double, double=0, int=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateInside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a7c3edfa31e0e55c6d33e2509a09ca9dd</anchor>
      <arglist>(Vector &amp;, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>EvaluateOutside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a68dcb2d341a72cee8c32bfd7934cbd4e</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateOutside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a6a86aabf78897aaa769feaf5d3f741cd</anchor>
      <arglist>(double *, double, double, double=0, int=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateOutside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a1ad8eabab5c7f79764af1d99ac31a122</anchor>
      <arglist>(Vector &amp;, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>EvaluateWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a4e42db576b5f130d90642b1c80fce76f</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a16f1838e8925685dd45639c3e90a43aa</anchor>
      <arglist>(double *, double, double, double=0, int=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>aaec6892c32faa9d7ab5c5b2b652057db</anchor>
      <arglist>(Vector &amp;, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>EvaluateWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>aa770c35132144c65b932627343f68f38</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>af4bacbacadaf51ee79ba4525690fbcd1</anchor>
      <arglist>(double *, double, double, double=0, int=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a84807dc4f6302b350c03fa37ea02df55</anchor>
      <arglist>(Vector &amp;, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Extrapolator</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a0c25e76e00c32396aaf8eb67660c03be</anchor>
      <arglist>(ExtrapolateImageFunction *, bool=false)</arglist>
    </member>
    <member kind="function">
      <type>ExtrapolatorType *</type>
      <name>Extrapolator</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a2f0c9ce790e16ae4547f5b246dbfddb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ExtrapolatorType *</type>
      <name>Extrapolator</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a778ae78bb177f06fa5040e0759330b6e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a45c1c463438e3761d2b43d6fbba3671d</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>ab0f26534a351ca1d52ce97516d72789a</anchor>
      <arglist>(double, double, double=0, double=0) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a525c841a9f9ff6c6f726dc56a8f735ad</anchor>
      <arglist>(double, double, double=0, double=0) const=0</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a14d1d015f6d299464f813f8281917aa5</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a9fbb4778429ddc928d2ec4aef9797a36</anchor>
      <arglist>(double, double, double=0, double=0) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>af48408abe646870b4b1ddf5f7a59f06f</anchor>
      <arglist>(double, double, double=0, double=0) const=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a1bb8a15511bea147030867fb0beb90cc</anchor>
      <arglist>(bool coeff=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>ac5586fec12bd46c7de04d2dbf8fbdfcd</anchor>
      <arglist>(const BaseImage *)</arglist>
    </member>
    <member kind="function">
      <type>const ImageType *</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a1baea9f7104a4fcbf25dc1d1e3515b93</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ExtrapolateImageFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a62658af272b80089502a28bd6e526e30</anchor>
      <arglist>(enum ExtrapolationMode, const BaseImage *=NULL)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>ab1fa15ed6cbda756d0a5fc30a0dc2103</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a02c31f2212c25738e79e939fe5e8c33b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GenericInterpolateImageFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a83b7ea5b272283a0d19ccb3faf95a971</anchor>
      <arglist>(enum InterpolationMode=Interpolation_Default, const CPImage *=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GenericInterpolateImageFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a230de238ee3f30caee7361365c75a7e5</anchor>
      <arglist>(enum InterpolationMode, enum ExtrapolationMode, const CPImage *=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GenericInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a9330db1c2ec340317ac12ea3b64de193</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericInterpolateImageFunction&lt; ImageType &gt;</name>
    <filename>classmirtk_1_1GenericInterpolateImageFunction.html</filename>
    <base>mirtk::InterpolateImageFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>EvaluateInside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>abdb0124cfcc1cfe28eccc5d8e23a130a</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateInside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a47bb9330e6033483cec9701b8213b0b9</anchor>
      <arglist>(double *, double, double, double=0, int=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateInside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a7c3edfa31e0e55c6d33e2509a09ca9dd</anchor>
      <arglist>(Vector &amp;, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>EvaluateOutside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a68dcb2d341a72cee8c32bfd7934cbd4e</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateOutside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a6a86aabf78897aaa769feaf5d3f741cd</anchor>
      <arglist>(double *, double, double, double=0, int=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateOutside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a1ad8eabab5c7f79764af1d99ac31a122</anchor>
      <arglist>(Vector &amp;, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>EvaluateWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a4e42db576b5f130d90642b1c80fce76f</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a16f1838e8925685dd45639c3e90a43aa</anchor>
      <arglist>(double *, double, double, double=0, int=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>aaec6892c32faa9d7ab5c5b2b652057db</anchor>
      <arglist>(Vector &amp;, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>EvaluateWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>aa770c35132144c65b932627343f68f38</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>af4bacbacadaf51ee79ba4525690fbcd1</anchor>
      <arglist>(double *, double, double, double=0, int=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a84807dc4f6302b350c03fa37ea02df55</anchor>
      <arglist>(Vector &amp;, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Extrapolator</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a0c25e76e00c32396aaf8eb67660c03be</anchor>
      <arglist>(ExtrapolateImageFunction *, bool=false)</arglist>
    </member>
    <member kind="function">
      <type>ExtrapolatorType *</type>
      <name>Extrapolator</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a2f0c9ce790e16ae4547f5b246dbfddb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ExtrapolatorType *</type>
      <name>Extrapolator</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a778ae78bb177f06fa5040e0759330b6e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a45c1c463438e3761d2b43d6fbba3671d</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>ab0f26534a351ca1d52ce97516d72789a</anchor>
      <arglist>(double, double, double=0, double=0) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a525c841a9f9ff6c6f726dc56a8f735ad</anchor>
      <arglist>(double, double, double=0, double=0) const=0</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a14d1d015f6d299464f813f8281917aa5</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a9fbb4778429ddc928d2ec4aef9797a36</anchor>
      <arglist>(double, double, double=0, double=0) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>af48408abe646870b4b1ddf5f7a59f06f</anchor>
      <arglist>(double, double, double=0, double=0) const=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a1bb8a15511bea147030867fb0beb90cc</anchor>
      <arglist>(bool coeff=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>ac5586fec12bd46c7de04d2dbf8fbdfcd</anchor>
      <arglist>(const BaseImage *)</arglist>
    </member>
    <member kind="function">
      <type>const ImageType *</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a1baea9f7104a4fcbf25dc1d1e3515b93</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ExtrapolateImageFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a62658af272b80089502a28bd6e526e30</anchor>
      <arglist>(enum ExtrapolationMode, const BaseImage *=NULL)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>ab1fa15ed6cbda756d0a5fc30a0dc2103</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a02c31f2212c25738e79e939fe5e8c33b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GenericInterpolateImageFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a83b7ea5b272283a0d19ccb3faf95a971</anchor>
      <arglist>(enum InterpolationMode=Interpolation_Default, const ImageType *=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GenericInterpolateImageFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a230de238ee3f30caee7361365c75a7e5</anchor>
      <arglist>(enum InterpolationMode, enum ExtrapolationMode, const ImageType *=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GenericInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a9330db1c2ec340317ac12ea3b64de193</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericLinearImageGradientFunction</name>
    <filename>classmirtk_1_1GenericLinearImageGradientFunction.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericImageGradientFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingInterval</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction.html</anchorfile>
      <anchor>a76f8dac434ea84523e760d09c3b19f9c</anchor>
      <arglist>(double, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericLinearImageGradientFunction</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction.html</anchorfile>
      <anchor>a5b25b05a8fa9ebe7833689e98c5b0e2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction.html</anchorfile>
      <anchor>afc66a4cc5e268da4e0c212036f8972a8</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetInside2D</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction.html</anchorfile>
      <anchor>ae5ede705f812a3a97d08dd3518e30570</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetInside3D</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction.html</anchorfile>
      <anchor>ae82f9c9d3a379731a63e9440ccb306c9</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction.html</anchorfile>
      <anchor>aa37f350a44e5c4456f0d9b3d7cbbbb39</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction.html</anchorfile>
      <anchor>a2fded47eca7c4487baf631092d43aa68</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPaddingInside2D</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction.html</anchorfile>
      <anchor>a552258a58339c4d46d506a8fc59f8a09</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPaddingInside3D</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction.html</anchorfile>
      <anchor>a595be4f5b58778f1a042af9e52bcf897</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction.html</anchorfile>
      <anchor>af83756813f15873fc14ad4cb23bae0ac</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction.html</anchorfile>
      <anchor>ac93a33233b516c9b612634fd3bf6b606</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericLinearImageGradientFunction</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction.html</anchorfile>
      <anchor>ad3024865da4ad1e0af5df242663a19b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GenericLinearInterpolateImageFunction&lt; TImage &gt;</type>
      <name>_ContinuousImage</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction.html</anchorfile>
      <anchor>aef382e80d52c3e4d44516831bc00e7ed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericLinearImageGradientFunction2D</name>
    <filename>classmirtk_1_1GenericLinearImageGradientFunction2D.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericLinearImageGradientFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericLinearImageGradientFunction2D</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction2D.html</anchorfile>
      <anchor>ae7cc605b5f6a6c62a67981d06380ad6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction2D.html</anchorfile>
      <anchor>a18e81aad3f458ed3e9f5c23f92eb0dd1</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction2D.html</anchorfile>
      <anchor>af960319999c8e3bf8c73568d7edb5950</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericLinearImageGradientFunction2D&lt; BaseImage &gt;</name>
    <filename>classmirtk_1_1GenericLinearImageGradientFunction2D.html</filename>
    <base>GenericLinearImageGradientFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>GenericLinearImageGradientFunction2D</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction2D.html</anchorfile>
      <anchor>ae7cc605b5f6a6c62a67981d06380ad6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction2D.html</anchorfile>
      <anchor>a18e81aad3f458ed3e9f5c23f92eb0dd1</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction2D.html</anchorfile>
      <anchor>af960319999c8e3bf8c73568d7edb5950</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericLinearImageGradientFunction3D</name>
    <filename>classmirtk_1_1GenericLinearImageGradientFunction3D.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericLinearImageGradientFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericLinearImageGradientFunction3D</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction3D.html</anchorfile>
      <anchor>a8451afee2dc3333956fadc36c8a1b1de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction3D.html</anchorfile>
      <anchor>ac2c63914d07809f13445c78fc22d063c</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction3D.html</anchorfile>
      <anchor>ab304ee49a94bf9e776fb6cb47b879c66</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericLinearImageGradientFunction3D&lt; BaseImage &gt;</name>
    <filename>classmirtk_1_1GenericLinearImageGradientFunction3D.html</filename>
    <base>GenericLinearImageGradientFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>GenericLinearImageGradientFunction3D</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction3D.html</anchorfile>
      <anchor>a8451afee2dc3333956fadc36c8a1b1de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction3D.html</anchorfile>
      <anchor>ac2c63914d07809f13445c78fc22d063c</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction3D.html</anchorfile>
      <anchor>ab304ee49a94bf9e776fb6cb47b879c66</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericLinearImageGradientFunction&lt; BaseImage &gt;</name>
    <filename>classmirtk_1_1GenericLinearImageGradientFunction.html</filename>
    <base>GenericImageGradientFunction&lt; BaseImage &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingInterval</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction.html</anchorfile>
      <anchor>a76f8dac434ea84523e760d09c3b19f9c</anchor>
      <arglist>(double, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericLinearImageGradientFunction</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction.html</anchorfile>
      <anchor>a5b25b05a8fa9ebe7833689e98c5b0e2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction.html</anchorfile>
      <anchor>afc66a4cc5e268da4e0c212036f8972a8</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetInside2D</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction.html</anchorfile>
      <anchor>ae5ede705f812a3a97d08dd3518e30570</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetInside3D</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction.html</anchorfile>
      <anchor>ae82f9c9d3a379731a63e9440ccb306c9</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction.html</anchorfile>
      <anchor>aa37f350a44e5c4456f0d9b3d7cbbbb39</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction.html</anchorfile>
      <anchor>a2fded47eca7c4487baf631092d43aa68</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPaddingInside2D</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction.html</anchorfile>
      <anchor>a552258a58339c4d46d506a8fc59f8a09</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPaddingInside3D</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction.html</anchorfile>
      <anchor>a595be4f5b58778f1a042af9e52bcf897</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction.html</anchorfile>
      <anchor>af83756813f15873fc14ad4cb23bae0ac</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction.html</anchorfile>
      <anchor>ac93a33233b516c9b612634fd3bf6b606</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericLinearImageGradientFunction</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction.html</anchorfile>
      <anchor>ad3024865da4ad1e0af5df242663a19b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GenericLinearInterpolateImageFunction&lt; BaseImage &gt;</type>
      <name>_ContinuousImage</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction.html</anchorfile>
      <anchor>aef382e80d52c3e4d44516831bc00e7ed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericLinearInterpolateImageFunction</name>
    <filename>classmirtk_1_1GenericLinearInterpolateImageFunction.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericInterpolateImageFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingInterval</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a364530b7539265f64bdcb5e6e110aa97</anchor>
      <arglist>(double, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateJacobianInside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>af424b29517ec6a4430ef36fa0b7968ed</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateJacobianOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>ab24ee616ee9b69c219ac286fc4c9f83f</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateJacobianWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a4b4be5512b4352a22244175c5dcd1302</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateJacobianWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>ac21ebd9ab5d8c70e7b1a52243a4c0434</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericLinearInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a5040a98cdd16e4fcb27b35649cda99d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a644d32a0154462623d397a4f2468d7db</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a05bd84f6e39f10f96e4cc74aefbfdde2</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>af287e0caa26ce40b2835c1dee9935d94</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a32a8771a9d2bec618a8986d0bbbb0c78</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>aa248f3155e49a95d2030704661f45c00</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>ac98cc3cc9eebcb89a2d5e5fe045d61bd</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>ab0d188e6d64c162b34e72f77666a4aed</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a7d7b6ac0d928440f062099e61aad96a6</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a0b190726a2f0ac2fdfaf62b64d2d2751</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GenericLinearInterpolateImageFunction&lt; BaseImage &gt;::VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a23deac3c47079497de3811cb928025a9</anchor>
      <arglist>(double x, double y, double z, double t) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside2D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>ab2205ede9bd008225fe68394031caa03</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside3D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a3391abe2d0de60a3068412360a5e25ea</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside4D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>ae22e625bfb5b904efae970b3d9997b54</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a2cf5ca4173c660942cc7b3f54da70701</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>ae40932c44b3a6d3479b7fb416b8759b7</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a2f11d6c80b9932a9bef46b9b6e82e31b</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a70a0bd670fe719f104b69fdada5244cf</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a38ecd3660d4d540b354b6b40c943f8b4</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a7a9b195ca70bce7c636046c95d5c3b58</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>acc4342d99d342021721de0872bebe7f7</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a95b34107964d32c2fd5ca47008503fc5</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a195940027fdc72e459d63e72d6a2c46f</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>aeb6181b9f4342a3e531a3764b7ee563c</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>acec2d08432cc833c368fce5a06ea67ea</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a15df003416197ba2c4a2410a8ad237e3</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>ac717352328b4852bf77b21f4f50b7a06</anchor>
      <arglist>(Matrix &amp;, double, double, double=0., double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>abd8c2c1910ab98efd03bbb7c078e0170</anchor>
      <arglist>(Matrix &amp;, const TOtherImage *, double, double, double=0., double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian2D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a9d97c4c43a9bafa5ffb672d61a3e5711</anchor>
      <arglist>(Matrix &amp;, double, double, double=0., double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian2D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>afd11eb2acba26882db263a2e7214b142</anchor>
      <arglist>(Matrix &amp;, const TOtherImage *, double, double, double=0., double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian3D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a4a47b1f04fea703a2e201bcde088f3a6</anchor>
      <arglist>(Matrix &amp;, double, double, double=0., double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian3D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a93647873b06d8a5db3f9b8599325402f</anchor>
      <arglist>(Matrix &amp;, const TOtherImage *, double, double, double=0., double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian4D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a42c7d8cc23bd959771e770f9b0d5b331</anchor>
      <arglist>(Matrix &amp;, double, double, double=0., double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian4D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a9d65588505624e2f87d9390758962eef</anchor>
      <arglist>(Matrix &amp;, const TOtherImage *, double, double, double=0., double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>JacobianWithPadding</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a72b628cf6afa04d7db99f4fb0b193f28</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>JacobianWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a063d697fb748becfc8f89366c946f2be</anchor>
      <arglist>(Matrix &amp;, double, double, double=0., double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>JacobianWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>ae00114b3c243c37973329c13c554ce62</anchor>
      <arglist>(Matrix &amp;, double, double, double=0., double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>JacobianWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>aec75aaa0c824b1a66c9df599cdc257c3</anchor>
      <arglist>(Matrix &amp;, double, double, double=0., double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericLinearInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>afe0463e1f4324ce69b5387a81d038a2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>ComputeWeights</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a1af82ec0ecc2c37fac54a16aa27248ad</anchor>
      <arglist>(double, Real[2])</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericLinearInterpolateImageFunction2D</name>
    <filename>classmirtk_1_1GenericLinearInterpolateImageFunction2D.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericLinearInterpolateImageFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericLinearInterpolateImageFunction2D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction2D.html</anchorfile>
      <anchor>a144bcd54f3d26b27d7a0ac5782c5c237</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction2D.html</anchorfile>
      <anchor>a3d237a8554d606ad32f7a93b0d8052ef</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction2D.html</anchorfile>
      <anchor>a6ab231a74c3512d9012dae1c1d557e18</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction2D.html</anchorfile>
      <anchor>ada8e6b0315a1f03a0196ca9c749bafbf</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction2D.html</anchorfile>
      <anchor>a134d8fca8578e369f96d60e9568a8fa9</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction2D.html</anchorfile>
      <anchor>a86a09ffcd63f4d17b81b87c0fe34593e</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction2D.html</anchorfile>
      <anchor>a7af354562d614684d24cd5e255e8efb3</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction2D.html</anchorfile>
      <anchor>a8f6184721141d25d47e98a5b35f2f7c1</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction2D.html</anchorfile>
      <anchor>ac855e985906c37e8504c9e57180276e8</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericLinearInterpolateImageFunction2D&lt; BaseImage &gt;</name>
    <filename>classmirtk_1_1GenericLinearInterpolateImageFunction2D.html</filename>
    <base>GenericLinearInterpolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>GenericLinearInterpolateImageFunction2D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction2D.html</anchorfile>
      <anchor>a144bcd54f3d26b27d7a0ac5782c5c237</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction2D.html</anchorfile>
      <anchor>a3d237a8554d606ad32f7a93b0d8052ef</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction2D.html</anchorfile>
      <anchor>a6ab231a74c3512d9012dae1c1d557e18</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction2D.html</anchorfile>
      <anchor>ada8e6b0315a1f03a0196ca9c749bafbf</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction2D.html</anchorfile>
      <anchor>a134d8fca8578e369f96d60e9568a8fa9</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction2D.html</anchorfile>
      <anchor>a86a09ffcd63f4d17b81b87c0fe34593e</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction2D.html</anchorfile>
      <anchor>a7af354562d614684d24cd5e255e8efb3</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction2D.html</anchorfile>
      <anchor>a8f6184721141d25d47e98a5b35f2f7c1</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction2D.html</anchorfile>
      <anchor>ac855e985906c37e8504c9e57180276e8</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericLinearInterpolateImageFunction3D</name>
    <filename>classmirtk_1_1GenericLinearInterpolateImageFunction3D.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericLinearInterpolateImageFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericLinearInterpolateImageFunction3D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction3D.html</anchorfile>
      <anchor>ad201627be31bb02600b103ee568c439b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction3D.html</anchorfile>
      <anchor>ade0c1c9d6ba14079499a87d3815d5b92</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction3D.html</anchorfile>
      <anchor>a253b591434490190214218c36b91121e</anchor>
      <arglist>(const TOtherImage *, double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction3D.html</anchorfile>
      <anchor>addd01ded6e0cb5839c2f0c3e2606b470</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction3D.html</anchorfile>
      <anchor>a63f2359421dc0d78d2ee440fa8ca32b4</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction3D.html</anchorfile>
      <anchor>aa8b4341b954e8ec72b06fb58fcad411f</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction3D.html</anchorfile>
      <anchor>aeba750190d1df53d5fd07ea08901f5dc</anchor>
      <arglist>(const TOtherImage *, double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction3D.html</anchorfile>
      <anchor>a1b26cf7c095c449650f33fe0d1660371</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction3D.html</anchorfile>
      <anchor>aab584e20ddfe8fb83447a9ebfc3f690c</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericLinearInterpolateImageFunction3D&lt; BaseImage &gt;</name>
    <filename>classmirtk_1_1GenericLinearInterpolateImageFunction3D.html</filename>
    <base>GenericLinearInterpolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>GenericLinearInterpolateImageFunction3D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction3D.html</anchorfile>
      <anchor>ad201627be31bb02600b103ee568c439b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction3D.html</anchorfile>
      <anchor>ade0c1c9d6ba14079499a87d3815d5b92</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction3D.html</anchorfile>
      <anchor>a253b591434490190214218c36b91121e</anchor>
      <arglist>(const TOtherImage *, double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction3D.html</anchorfile>
      <anchor>addd01ded6e0cb5839c2f0c3e2606b470</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction3D.html</anchorfile>
      <anchor>a63f2359421dc0d78d2ee440fa8ca32b4</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction3D.html</anchorfile>
      <anchor>aa8b4341b954e8ec72b06fb58fcad411f</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction3D.html</anchorfile>
      <anchor>aeba750190d1df53d5fd07ea08901f5dc</anchor>
      <arglist>(const TOtherImage *, double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction3D.html</anchorfile>
      <anchor>a1b26cf7c095c449650f33fe0d1660371</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction3D.html</anchorfile>
      <anchor>aab584e20ddfe8fb83447a9ebfc3f690c</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericLinearInterpolateImageFunction4D</name>
    <filename>classmirtk_1_1GenericLinearInterpolateImageFunction4D.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericLinearInterpolateImageFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericLinearInterpolateImageFunction4D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction4D.html</anchorfile>
      <anchor>a836755ecfa0b515c9962e5694cb934b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction4D.html</anchorfile>
      <anchor>a7ff96258575b640b8667e77c5f903c82</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction4D.html</anchorfile>
      <anchor>a87baec2988183a87e78b5f0d60f6a67b</anchor>
      <arglist>(const TOtherImage *, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction4D.html</anchorfile>
      <anchor>a07ce0e9c7aee0132a33479980ac4e4cd</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction4D.html</anchorfile>
      <anchor>a53a9c87073d6e2446c868809d0fb78c7</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction4D.html</anchorfile>
      <anchor>a7cf7bffca60ef80b599cd0c185b74b8d</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction4D.html</anchorfile>
      <anchor>a22629863f967a5bb1e9a85e903417bb4</anchor>
      <arglist>(const TOtherImage *, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction4D.html</anchorfile>
      <anchor>a3d1d518cd213d22a540f658e964ef4f5</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction4D.html</anchorfile>
      <anchor>a98b4ca99564ae54faffbb85790078d21</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericLinearInterpolateImageFunction4D&lt; BaseImage &gt;</name>
    <filename>classmirtk_1_1GenericLinearInterpolateImageFunction4D.html</filename>
    <base>GenericLinearInterpolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>GenericLinearInterpolateImageFunction4D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction4D.html</anchorfile>
      <anchor>a836755ecfa0b515c9962e5694cb934b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction4D.html</anchorfile>
      <anchor>a7ff96258575b640b8667e77c5f903c82</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction4D.html</anchorfile>
      <anchor>a87baec2988183a87e78b5f0d60f6a67b</anchor>
      <arglist>(const TOtherImage *, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction4D.html</anchorfile>
      <anchor>a07ce0e9c7aee0132a33479980ac4e4cd</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction4D.html</anchorfile>
      <anchor>a53a9c87073d6e2446c868809d0fb78c7</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction4D.html</anchorfile>
      <anchor>a7cf7bffca60ef80b599cd0c185b74b8d</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction4D.html</anchorfile>
      <anchor>a22629863f967a5bb1e9a85e903417bb4</anchor>
      <arglist>(const TOtherImage *, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction4D.html</anchorfile>
      <anchor>a3d1d518cd213d22a540f658e964ef4f5</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction4D.html</anchorfile>
      <anchor>a98b4ca99564ae54faffbb85790078d21</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericLinearInterpolateImageFunction4D&lt; CPImage &gt;</name>
    <filename>classmirtk_1_1GenericLinearInterpolateImageFunction4D.html</filename>
    <base>GenericLinearInterpolateImageFunction&lt; CPImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>GenericLinearInterpolateImageFunction4D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction4D.html</anchorfile>
      <anchor>a836755ecfa0b515c9962e5694cb934b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction4D.html</anchorfile>
      <anchor>a7ff96258575b640b8667e77c5f903c82</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction4D.html</anchorfile>
      <anchor>a87baec2988183a87e78b5f0d60f6a67b</anchor>
      <arglist>(const TOtherImage *, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction4D.html</anchorfile>
      <anchor>a07ce0e9c7aee0132a33479980ac4e4cd</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction4D.html</anchorfile>
      <anchor>a53a9c87073d6e2446c868809d0fb78c7</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction4D.html</anchorfile>
      <anchor>a7cf7bffca60ef80b599cd0c185b74b8d</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction4D.html</anchorfile>
      <anchor>a22629863f967a5bb1e9a85e903417bb4</anchor>
      <arglist>(const TOtherImage *, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction4D.html</anchorfile>
      <anchor>a3d1d518cd213d22a540f658e964ef4f5</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction4D.html</anchorfile>
      <anchor>a98b4ca99564ae54faffbb85790078d21</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericLinearInterpolateImageFunction&lt; BaseImage &gt;</name>
    <filename>classmirtk_1_1GenericLinearInterpolateImageFunction.html</filename>
    <base>GenericInterpolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingInterval</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a364530b7539265f64bdcb5e6e110aa97</anchor>
      <arglist>(double, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateJacobianInside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>af424b29517ec6a4430ef36fa0b7968ed</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateJacobianOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>ab24ee616ee9b69c219ac286fc4c9f83f</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateJacobianWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a4b4be5512b4352a22244175c5dcd1302</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateJacobianWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>ac21ebd9ab5d8c70e7b1a52243a4c0434</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericLinearInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a5040a98cdd16e4fcb27b35649cda99d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a644d32a0154462623d397a4f2468d7db</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a05bd84f6e39f10f96e4cc74aefbfdde2</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>af287e0caa26ce40b2835c1dee9935d94</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a32a8771a9d2bec618a8986d0bbbb0c78</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>aa248f3155e49a95d2030704661f45c00</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>ac98cc3cc9eebcb89a2d5e5fe045d61bd</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>ab0d188e6d64c162b34e72f77666a4aed</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a7d7b6ac0d928440f062099e61aad96a6</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a0b190726a2f0ac2fdfaf62b64d2d2751</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GenericLinearInterpolateImageFunction&lt; BaseImage &gt;::VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a23deac3c47079497de3811cb928025a9</anchor>
      <arglist>(double x, double y, double z, double t) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside2D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>ab2205ede9bd008225fe68394031caa03</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside3D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a3391abe2d0de60a3068412360a5e25ea</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside4D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>ae22e625bfb5b904efae970b3d9997b54</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a2cf5ca4173c660942cc7b3f54da70701</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>ae40932c44b3a6d3479b7fb416b8759b7</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a2f11d6c80b9932a9bef46b9b6e82e31b</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a70a0bd670fe719f104b69fdada5244cf</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a38ecd3660d4d540b354b6b40c943f8b4</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a7a9b195ca70bce7c636046c95d5c3b58</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>acc4342d99d342021721de0872bebe7f7</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a95b34107964d32c2fd5ca47008503fc5</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a195940027fdc72e459d63e72d6a2c46f</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>aeb6181b9f4342a3e531a3764b7ee563c</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>acec2d08432cc833c368fce5a06ea67ea</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a15df003416197ba2c4a2410a8ad237e3</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>ac717352328b4852bf77b21f4f50b7a06</anchor>
      <arglist>(Matrix &amp;, double, double, double=0., double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>abd8c2c1910ab98efd03bbb7c078e0170</anchor>
      <arglist>(Matrix &amp;, const TOtherImage *, double, double, double=0., double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian2D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a9d97c4c43a9bafa5ffb672d61a3e5711</anchor>
      <arglist>(Matrix &amp;, double, double, double=0., double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian2D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>afd11eb2acba26882db263a2e7214b142</anchor>
      <arglist>(Matrix &amp;, const TOtherImage *, double, double, double=0., double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian3D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a4a47b1f04fea703a2e201bcde088f3a6</anchor>
      <arglist>(Matrix &amp;, double, double, double=0., double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian3D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a93647873b06d8a5db3f9b8599325402f</anchor>
      <arglist>(Matrix &amp;, const TOtherImage *, double, double, double=0., double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian4D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a42c7d8cc23bd959771e770f9b0d5b331</anchor>
      <arglist>(Matrix &amp;, double, double, double=0., double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian4D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a9d65588505624e2f87d9390758962eef</anchor>
      <arglist>(Matrix &amp;, const TOtherImage *, double, double, double=0., double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>JacobianWithPadding</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a72b628cf6afa04d7db99f4fb0b193f28</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>JacobianWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a063d697fb748becfc8f89366c946f2be</anchor>
      <arglist>(Matrix &amp;, double, double, double=0., double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>JacobianWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>ae00114b3c243c37973329c13c554ce62</anchor>
      <arglist>(Matrix &amp;, double, double, double=0., double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>JacobianWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>aec75aaa0c824b1a66c9df599cdc257c3</anchor>
      <arglist>(Matrix &amp;, double, double, double=0., double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericLinearInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>afe0463e1f4324ce69b5387a81d038a2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>ComputeWeights</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a1af82ec0ecc2c37fac54a16aa27248ad</anchor>
      <arglist>(double, Real[2])</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericLinearInterpolateImageFunction&lt; CPImage &gt;</name>
    <filename>classmirtk_1_1GenericLinearInterpolateImageFunction.html</filename>
    <base>GenericInterpolateImageFunction&lt; CPImage &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingInterval</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a364530b7539265f64bdcb5e6e110aa97</anchor>
      <arglist>(double, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateJacobianInside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>af424b29517ec6a4430ef36fa0b7968ed</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateJacobianOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>ab24ee616ee9b69c219ac286fc4c9f83f</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateJacobianWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a4b4be5512b4352a22244175c5dcd1302</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateJacobianWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>ac21ebd9ab5d8c70e7b1a52243a4c0434</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericLinearInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a5040a98cdd16e4fcb27b35649cda99d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a644d32a0154462623d397a4f2468d7db</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a05bd84f6e39f10f96e4cc74aefbfdde2</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>af287e0caa26ce40b2835c1dee9935d94</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a32a8771a9d2bec618a8986d0bbbb0c78</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>aa248f3155e49a95d2030704661f45c00</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>ac98cc3cc9eebcb89a2d5e5fe045d61bd</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>ab0d188e6d64c162b34e72f77666a4aed</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a7d7b6ac0d928440f062099e61aad96a6</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a0b190726a2f0ac2fdfaf62b64d2d2751</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GenericLinearInterpolateImageFunction&lt; BaseImage &gt;::VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a23deac3c47079497de3811cb928025a9</anchor>
      <arglist>(double x, double y, double z, double t) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside2D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>ab2205ede9bd008225fe68394031caa03</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside3D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a3391abe2d0de60a3068412360a5e25ea</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside4D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>ae22e625bfb5b904efae970b3d9997b54</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a2cf5ca4173c660942cc7b3f54da70701</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>ae40932c44b3a6d3479b7fb416b8759b7</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a2f11d6c80b9932a9bef46b9b6e82e31b</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a70a0bd670fe719f104b69fdada5244cf</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a38ecd3660d4d540b354b6b40c943f8b4</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a7a9b195ca70bce7c636046c95d5c3b58</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>acc4342d99d342021721de0872bebe7f7</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a95b34107964d32c2fd5ca47008503fc5</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a195940027fdc72e459d63e72d6a2c46f</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>aeb6181b9f4342a3e531a3764b7ee563c</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>acec2d08432cc833c368fce5a06ea67ea</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a15df003416197ba2c4a2410a8ad237e3</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>ac717352328b4852bf77b21f4f50b7a06</anchor>
      <arglist>(Matrix &amp;, double, double, double=0., double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>abd8c2c1910ab98efd03bbb7c078e0170</anchor>
      <arglist>(Matrix &amp;, const TOtherImage *, double, double, double=0., double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian2D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a9d97c4c43a9bafa5ffb672d61a3e5711</anchor>
      <arglist>(Matrix &amp;, double, double, double=0., double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian2D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>afd11eb2acba26882db263a2e7214b142</anchor>
      <arglist>(Matrix &amp;, const TOtherImage *, double, double, double=0., double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian3D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a4a47b1f04fea703a2e201bcde088f3a6</anchor>
      <arglist>(Matrix &amp;, double, double, double=0., double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian3D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a93647873b06d8a5db3f9b8599325402f</anchor>
      <arglist>(Matrix &amp;, const TOtherImage *, double, double, double=0., double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian4D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a42c7d8cc23bd959771e770f9b0d5b331</anchor>
      <arglist>(Matrix &amp;, double, double, double=0., double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian4D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a9d65588505624e2f87d9390758962eef</anchor>
      <arglist>(Matrix &amp;, const TOtherImage *, double, double, double=0., double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>JacobianWithPadding</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a72b628cf6afa04d7db99f4fb0b193f28</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>JacobianWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a063d697fb748becfc8f89366c946f2be</anchor>
      <arglist>(Matrix &amp;, double, double, double=0., double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>JacobianWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>ae00114b3c243c37973329c13c554ce62</anchor>
      <arglist>(Matrix &amp;, double, double, double=0., double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>JacobianWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>aec75aaa0c824b1a66c9df599cdc257c3</anchor>
      <arglist>(Matrix &amp;, double, double, double=0., double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericLinearInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>afe0463e1f4324ce69b5387a81d038a2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>ComputeWeights</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a1af82ec0ecc2c37fac54a16aa27248ad</anchor>
      <arglist>(double, Real[2])</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericLinearInterpolateImageFunction&lt; ImageType &gt;</name>
    <filename>classmirtk_1_1GenericLinearInterpolateImageFunction.html</filename>
    <base>GenericInterpolateImageFunction&lt; ImageType &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingInterval</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a364530b7539265f64bdcb5e6e110aa97</anchor>
      <arglist>(double, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateJacobianInside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>af424b29517ec6a4430ef36fa0b7968ed</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateJacobianOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>ab24ee616ee9b69c219ac286fc4c9f83f</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateJacobianWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a4b4be5512b4352a22244175c5dcd1302</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateJacobianWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>ac21ebd9ab5d8c70e7b1a52243a4c0434</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericLinearInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a5040a98cdd16e4fcb27b35649cda99d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a644d32a0154462623d397a4f2468d7db</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a05bd84f6e39f10f96e4cc74aefbfdde2</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>af287e0caa26ce40b2835c1dee9935d94</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a32a8771a9d2bec618a8986d0bbbb0c78</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>aa248f3155e49a95d2030704661f45c00</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>ac98cc3cc9eebcb89a2d5e5fe045d61bd</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>ab0d188e6d64c162b34e72f77666a4aed</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a7d7b6ac0d928440f062099e61aad96a6</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a0b190726a2f0ac2fdfaf62b64d2d2751</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GenericLinearInterpolateImageFunction&lt; BaseImage &gt;::VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a23deac3c47079497de3811cb928025a9</anchor>
      <arglist>(double x, double y, double z, double t) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside2D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>ab2205ede9bd008225fe68394031caa03</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside3D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a3391abe2d0de60a3068412360a5e25ea</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside4D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>ae22e625bfb5b904efae970b3d9997b54</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a2cf5ca4173c660942cc7b3f54da70701</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>ae40932c44b3a6d3479b7fb416b8759b7</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a2f11d6c80b9932a9bef46b9b6e82e31b</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a70a0bd670fe719f104b69fdada5244cf</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a38ecd3660d4d540b354b6b40c943f8b4</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a7a9b195ca70bce7c636046c95d5c3b58</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>acc4342d99d342021721de0872bebe7f7</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a95b34107964d32c2fd5ca47008503fc5</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a195940027fdc72e459d63e72d6a2c46f</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>aeb6181b9f4342a3e531a3764b7ee563c</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>acec2d08432cc833c368fce5a06ea67ea</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a15df003416197ba2c4a2410a8ad237e3</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>ac717352328b4852bf77b21f4f50b7a06</anchor>
      <arglist>(Matrix &amp;, double, double, double=0., double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>abd8c2c1910ab98efd03bbb7c078e0170</anchor>
      <arglist>(Matrix &amp;, const TOtherImage *, double, double, double=0., double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian2D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a9d97c4c43a9bafa5ffb672d61a3e5711</anchor>
      <arglist>(Matrix &amp;, double, double, double=0., double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian2D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>afd11eb2acba26882db263a2e7214b142</anchor>
      <arglist>(Matrix &amp;, const TOtherImage *, double, double, double=0., double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian3D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a4a47b1f04fea703a2e201bcde088f3a6</anchor>
      <arglist>(Matrix &amp;, double, double, double=0., double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian3D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a93647873b06d8a5db3f9b8599325402f</anchor>
      <arglist>(Matrix &amp;, const TOtherImage *, double, double, double=0., double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian4D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a42c7d8cc23bd959771e770f9b0d5b331</anchor>
      <arglist>(Matrix &amp;, double, double, double=0., double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian4D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a9d65588505624e2f87d9390758962eef</anchor>
      <arglist>(Matrix &amp;, const TOtherImage *, double, double, double=0., double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>JacobianWithPadding</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a72b628cf6afa04d7db99f4fb0b193f28</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>JacobianWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a063d697fb748becfc8f89366c946f2be</anchor>
      <arglist>(Matrix &amp;, double, double, double=0., double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>JacobianWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>ae00114b3c243c37973329c13c554ce62</anchor>
      <arglist>(Matrix &amp;, double, double, double=0., double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>JacobianWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>aec75aaa0c824b1a66c9df599cdc257c3</anchor>
      <arglist>(Matrix &amp;, double, double, double=0., double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericLinearInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>afe0463e1f4324ce69b5387a81d038a2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>ComputeWeights</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a1af82ec0ecc2c37fac54a16aa27248ad</anchor>
      <arglist>(double, Real[2])</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericMirrorExtrapolateImageFunction</name>
    <filename>classmirtk_1_1GenericMirrorExtrapolateImageFunction.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::IndexExtrapolateImageFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericMirrorExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericMirrorExtrapolateImageFunction.html</anchorfile>
      <anchor>ae57d891938041c93ba532e6bcba03ac9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>TransformIndex</name>
      <anchorfile>classmirtk_1_1GenericMirrorExtrapolateImageFunction.html</anchorfile>
      <anchor>ad94d4c0a313c5e56d40595d038cda4b9</anchor>
      <arglist>(int &amp;index, int max) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericMirrorExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericMirrorExtrapolateImageFunction.html</anchorfile>
      <anchor>af18263a6b0fe90a8afcba48219537485</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Apply</name>
      <anchorfile>classmirtk_1_1GenericMirrorExtrapolateImageFunction.html</anchorfile>
      <anchor>afc91b084028ef7b4b40fe02c8b02095f</anchor>
      <arglist>(int &amp;index, int max)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericMirrorExtrapolateImageFunction&lt; BaseImage &gt;</name>
    <filename>classmirtk_1_1GenericMirrorExtrapolateImageFunction.html</filename>
    <base>IndexExtrapolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>GenericMirrorExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericMirrorExtrapolateImageFunction.html</anchorfile>
      <anchor>ae57d891938041c93ba532e6bcba03ac9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>TransformIndex</name>
      <anchorfile>classmirtk_1_1GenericMirrorExtrapolateImageFunction.html</anchorfile>
      <anchor>ad94d4c0a313c5e56d40595d038cda4b9</anchor>
      <arglist>(int &amp;index, int max) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericMirrorExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericMirrorExtrapolateImageFunction.html</anchorfile>
      <anchor>af18263a6b0fe90a8afcba48219537485</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Apply</name>
      <anchorfile>classmirtk_1_1GenericMirrorExtrapolateImageFunction.html</anchorfile>
      <anchor>afc91b084028ef7b4b40fe02c8b02095f</anchor>
      <arglist>(int &amp;index, int max)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericNearestNeighborExtrapolateImageFunction</name>
    <filename>classmirtk_1_1GenericNearestNeighborExtrapolateImageFunction.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::IndexExtrapolateImageFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericNearestNeighborExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborExtrapolateImageFunction.html</anchorfile>
      <anchor>aabae47b07144c71ce8af1f81f386140a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>TransformIndex</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborExtrapolateImageFunction.html</anchorfile>
      <anchor>a841bf747409a296a564b5fb30fddc1fb</anchor>
      <arglist>(int &amp;index, int max) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericNearestNeighborExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborExtrapolateImageFunction.html</anchorfile>
      <anchor>ab81109984812efd0910ae4719d9e36ed</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericNearestNeighborExtrapolateImageFunction&lt; BaseImage &gt;</name>
    <filename>classmirtk_1_1GenericNearestNeighborExtrapolateImageFunction.html</filename>
    <base>IndexExtrapolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>GenericNearestNeighborExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborExtrapolateImageFunction.html</anchorfile>
      <anchor>aabae47b07144c71ce8af1f81f386140a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>TransformIndex</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborExtrapolateImageFunction.html</anchorfile>
      <anchor>a841bf747409a296a564b5fb30fddc1fb</anchor>
      <arglist>(int &amp;index, int max) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericNearestNeighborExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborExtrapolateImageFunction.html</anchorfile>
      <anchor>ab81109984812efd0910ae4719d9e36ed</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericNearestNeighborInterpolateImageFunction</name>
    <filename>classmirtk_1_1GenericNearestNeighborInterpolateImageFunction.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericInterpolateImageFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingInterval</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborInterpolateImageFunction.html</anchorfile>
      <anchor>ad8571f7c38078a9737cc384eb9777771</anchor>
      <arglist>(double, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericNearestNeighborInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborInterpolateImageFunction.html</anchorfile>
      <anchor>a20d73d2c0de3cf89e5c37daca66052af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborInterpolateImageFunction.html</anchorfile>
      <anchor>a0ace429fea18ea8dc9745cdf0f1e51e3</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborInterpolateImageFunction.html</anchorfile>
      <anchor>aef74efa79228219400f7c1cda441836b</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborInterpolateImageFunction.html</anchorfile>
      <anchor>a2c3c74da62a985ec10d68b3ebe1729cd</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborInterpolateImageFunction.html</anchorfile>
      <anchor>ad9db020998cadd85684f54d3317dd936</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborInterpolateImageFunction.html</anchorfile>
      <anchor>a5e7b51a4e67b7646e9e391022f8accd2</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborInterpolateImageFunction.html</anchorfile>
      <anchor>afdc72e910aa84c4e2e783ca660ca0587</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborInterpolateImageFunction.html</anchorfile>
      <anchor>a29a5ee8d2fd18dbb6c2f49518b27ebcc</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborInterpolateImageFunction.html</anchorfile>
      <anchor>afaa3a3cce112f971c749cb470efdad08</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericNearestNeighborInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborInterpolateImageFunction.html</anchorfile>
      <anchor>a1174ebadd9becd4195cbaefb302a5670</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericNearestNeighborInterpolateImageFunction&lt; BaseImage &gt;</name>
    <filename>classmirtk_1_1GenericNearestNeighborInterpolateImageFunction.html</filename>
    <base>GenericInterpolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingInterval</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborInterpolateImageFunction.html</anchorfile>
      <anchor>ad8571f7c38078a9737cc384eb9777771</anchor>
      <arglist>(double, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericNearestNeighborInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborInterpolateImageFunction.html</anchorfile>
      <anchor>a20d73d2c0de3cf89e5c37daca66052af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborInterpolateImageFunction.html</anchorfile>
      <anchor>a0ace429fea18ea8dc9745cdf0f1e51e3</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborInterpolateImageFunction.html</anchorfile>
      <anchor>aef74efa79228219400f7c1cda441836b</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborInterpolateImageFunction.html</anchorfile>
      <anchor>a2c3c74da62a985ec10d68b3ebe1729cd</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborInterpolateImageFunction.html</anchorfile>
      <anchor>ad9db020998cadd85684f54d3317dd936</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborInterpolateImageFunction.html</anchorfile>
      <anchor>a5e7b51a4e67b7646e9e391022f8accd2</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborInterpolateImageFunction.html</anchorfile>
      <anchor>afdc72e910aa84c4e2e783ca660ca0587</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborInterpolateImageFunction.html</anchorfile>
      <anchor>a29a5ee8d2fd18dbb6c2f49518b27ebcc</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborInterpolateImageFunction.html</anchorfile>
      <anchor>afaa3a3cce112f971c749cb470efdad08</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericNearestNeighborInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborInterpolateImageFunction.html</anchorfile>
      <anchor>a1174ebadd9becd4195cbaefb302a5670</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericRegistrationDebugger</name>
    <filename>classmirtk_1_1GenericRegistrationDebugger.html</filename>
    <base>mirtk::Observer</base>
    <member kind="function">
      <type></type>
      <name>GenericRegistrationDebugger</name>
      <anchorfile>classmirtk_1_1GenericRegistrationDebugger.html</anchorfile>
      <anchor>a32b41dd75270c711a94dca20d4fac1e7</anchor>
      <arglist>(const char *=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>HandleEvent</name>
      <anchorfile>classmirtk_1_1GenericRegistrationDebugger.html</anchorfile>
      <anchor>a008d628559f78777c8cd41b8d978b1cd</anchor>
      <arglist>(Observable *, Event, const void *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GenericRegistrationDebugger</name>
      <anchorfile>classmirtk_1_1GenericRegistrationDebugger.html</anchorfile>
      <anchor>a73234960aedce6d6b7cd8ecba077e8e7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericRegistrationFilter</name>
    <filename>classmirtk_1_1GenericRegistrationFilter.html</filename>
    <base>mirtk::RegistrationFilter</base>
    <class kind="struct">mirtk::GenericRegistrationFilter::ConstraintInfo</class>
    <class kind="struct">mirtk::GenericRegistrationFilter::DisplacementInfo</class>
    <class kind="struct">mirtk::GenericRegistrationFilter::ImageSimilarityInfo</class>
    <class kind="struct">mirtk::GenericRegistrationFilter::PointSetConstraintInfo</class>
    <class kind="struct">mirtk::GenericRegistrationFilter::PointSetDistanceInfo</class>
    <class kind="struct">mirtk::GenericRegistrationFilter::PointSetOutputInfo</class>
    <class kind="struct">mirtk::GenericRegistrationFilter::TransformationInfo</class>
    <member kind="typedef">
      <type>RegisteredImage::DisplacementImageType</type>
      <name>DisplacementImageType</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a5939171112f756dd6f98ebd24076b846</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Array&lt; ResampledImageType &gt;</type>
      <name>ResampledImageList</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a45587ecfabaa1e33fe7d666e126d02da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RegisteredImage::InputImageType</type>
      <name>ResampledImageType</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a3bfd7bbba7389772d52bafe4412acb36</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ResampledImageType::VoxelType</type>
      <name>VoxelType</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>aa072bf1dfc64726179b87e37c8de5721</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddInput</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>ab2615c4271b5e93e6a279d1cd5f5a0cf</anchor>
      <arglist>(const BaseImage *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddInput</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>af6e54f40a68a963517769ee07b3dcfa0</anchor>
      <arglist>(vtkPointSet *, double=.0)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>BackgroundValue</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a8cc1ce9951e4848c19dd10b370132ac9</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a443caffeba82751d4ba74c539f3c0735</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ExtrapolationMode</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a53b9ecd637ec53b03089acf6cc20d976</anchor>
      <arglist>(enum ExtrapolationMode)</arglist>
    </member>
    <member kind="function">
      <type>enum ExtrapolationMode</type>
      <name>ExtrapolationMode</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>ad775aa531e237b08634823694818e32a</anchor>
      <arglist>(int=-1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ExtrapolationMode</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a123436971c2c0e72b2cc0946cb631099</anchor>
      <arglist>(int, enum ExtrapolationMode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericRegistrationFilter</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>ab85a8e6e876ec53ea9240a05dfe81404</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GuessParameter</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a47fa6734c70c0583936b637289ebafc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>afe2f24063066e2c72f2af8a3fa8219f8</anchor>
      <arglist>(const BaseImage *, const BaseImage *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>aa2a6d8162ce11cee0bdd6f5ce6c35b1d</anchor>
      <arglist>(int, const BaseImage **)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a002f390ee4e91966109d7eb3a444e04a</anchor>
      <arglist>(int, const GenericImage&lt; TVoxel &gt; **)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a915261a919aa991495411b5a477f2785</anchor>
      <arglist>(vtkPointSet *, vtkPointSet *, double=.0, double=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a696108fada2f06de38019d995cc329db</anchor>
      <arglist>(int, vtkPointSet **, double *=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InterpolationMode</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>ae64e073c28ed1b21a0d3c0ececf6116b</anchor>
      <arglist>(enum InterpolationMode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InterpolationMode</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>ad900db275683a5d3302e85a69ed695b2</anchor>
      <arglist>(int, enum InterpolationMode)</arglist>
    </member>
    <member kind="function">
      <type>enum InterpolationMode</type>
      <name>InterpolationMode</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a6f443b5bf7b6dc1ce329e3f436f239ba</anchor>
      <arglist>(int=-1) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsFixedImage</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a2f3a0bcd03ca569d7e59ba9b61095417</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsFixedPointSet</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>acd6a45328eaf47017a7e6b3ed82e9920</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsMovingImage</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>ad3b0fad9f5d61962aed39b141a13c9ce</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsMovingPointSet</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>af61bcc829585aac0b24d946f84568f81</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSourceImage</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>ae50b76c42378d2de3c795fafd904f1a2</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSourcePointSet</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a6010f00c6a8216068c3cffcb76dba3e2</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsTargetImage</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a6ae24ff458f3c15190ec55aa6d5dbd68</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsTargetPointSet</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a2468a77e9eedea2a0624c1f7d456c75e</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Transformation *</type>
      <name>MakeInitialGuess</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>ac38549dff63f25bd7a73f75d9463f978</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a6a16c5f451493170623338c57dc7a2ee</anchor>
      <arglist>(const Transformation, InitialGuess)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a7efd678813e64601195e24fd25046e40</anchor>
      <arglist>(const Transformation, TargetTransformation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a50865a53c6cab455d072537ba04d17cf</anchor>
      <arglist>(BinaryImage, Domain)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a999e698656a461968f6332579b7cf723</anchor>
      <arglist>(int, NumberOfLevels)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a48da648634039d67e865fb455fb97a75</anchor>
      <arglist>(int, FinalLevel)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a307c7ff906da6a4b590f01e9f172c7c1</anchor>
      <arglist>(MFFDMode, MultiLevelMode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>ae52ce31829cc55c5ccdb6023fccf36bf</anchor>
      <arglist>(Array&lt; enum TransformationModel &gt;, TransformationModel)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>aaf74d034d65ab490bdf0c59f4fa7242c</anchor>
      <arglist>(enum InterpolationMode, DefaultInterpolationMode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>af9bc5de398654c9c8ce47a25e128d3db</anchor>
      <arglist>(enum ExtrapolationMode, DefaultExtrapolationMode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a36db7b261c4c71c90c6587da58d683de</anchor>
      <arglist>(double, MaxRescaledIntensity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>ad9eb6d8688d8b038d2727fe8e06e10da</anchor>
      <arglist>(bool, PrecomputeDerivatives)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>abfe72fea19fb6ae5980a98eafdeaf960</anchor>
      <arglist>(enum SimilarityMeasure, SimilarityMeasure)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a36c0c2eb7f9653853314192b80ec9349</anchor>
      <arglist>(enum PointSetDistanceMeasure, PointSetDistanceMeasure)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a6e61895b2acc655774430e4a09e1345a</anchor>
      <arglist>(enum OptimizationMethod, OptimizationMethod)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a82ae5a222b33b43f712bc56cad4a9988</anchor>
      <arglist>(bool, NormalizeWeights)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a799ca2b7f962aac9502760f27da9a309</anchor>
      <arglist>(string, TargetTransformationErrorName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a2012ffbf17c71cff724d4fefd43a51dc</anchor>
      <arglist>(double, TargetTransformationErrorWeight)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>aa1b59673b09aecfdd2d5166a864ec6ef</anchor>
      <arglist>(bool, MergeGlobalAndLocalTransformation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a3834a2b5007744821b66512d51f1aae9</anchor>
      <arglist>(bool, RegisterX)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a032b2fb566bc95ea2bcd5766ba931b5c</anchor>
      <arglist>(bool, RegisterY)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a8b2b7845aa3b2d41695e51a18ce058f7</anchor>
      <arglist>(bool, RegisterZ)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>ad70387075d6266c2d90c91ac164ad33e</anchor>
      <arglist>(bool, DirichletBoundaryCondition)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a8698a87c23039f4dfb9ecd0ac418c6d8</anchor>
      <arglist>(bool, AdaptiveRemeshing)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfImages</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a8b9e1f7e022901c1d642ef1ac18325bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfPointSets</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a6342f386b442088510c70c11a5b3fc58</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfRequiredImages</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>ac17f798665c5fb33065215e05d680ca3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfRequiredPointSets</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a9b5a5f6243ee1484ec12eee4482c15d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a26267dc50afaa0192890b6d5499a5de0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a02df7dc51490545ae9e5ca5f36bbd100</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ParseEnergyFormula</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a49d2e2db5658feb7ad444626e4d28919</anchor>
      <arglist>(int=-1, int=-1, int=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a4cbdd21ab4d8dc9a3ef01da2e57d0a54</anchor>
      <arglist>(istream &amp;, bool=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Reset</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a6819781f67fe998a907d743d2c312973</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a4c7817786faf232810703fec9b6317da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>acca0c64b89e6a1f2e0054067a963caf5</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a6e4b7f402be4e81c323b232ad19b9725</anchor>
      <arglist>(const char *, const char *, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>TransformationModel</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a3a0edfd08df833f3ea0ed2b5e83631f4</anchor>
      <arglist>(enum TransformationModel)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a881c2ae44cc1158eeab1436659de38f3</anchor>
      <arglist>(const char *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericRegistrationFilter</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a8cdae63405ae6053d13f930688e02276</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AddImageSimilarityTerm</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a55fb3171d0ebd752cdb7a48c71d5a3a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AddPenaltyTerm</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a32cb7af2bc0298f89553e5c9a9aa2f11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AddPointSetConstraintTerm</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a34260161c5d0c8a976a4e444933a619c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AddPointSetDistanceTerm</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a59815dc0a49d6044cfe58881b065b760</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>ApplyInitialGuess</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>ac9facc98bbdb71c71d5551692f3d5c7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>AtFinalLevel</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a38f14e01359dd39ea4990c5c6d35e3e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>AtInitialLevel</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a801eb1007b8f2426554d554d1f00d786</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Vector3D&lt; double &gt;</type>
      <name>AverageOutputResolution</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a40910e39bf9be757303ee87dd1dc70c7</anchor>
      <arglist>(int=-1) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a4b2e4af960a7d5e38cc1b6e68095c7de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual struct ImageAttributes</type>
      <name>ImageAttributes</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a43b03b1ff0ba7dcb0dd4471e2742ba85</anchor>
      <arglist>(int, int=-1) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a45a042c4e4f4f8f91d9ee9e00da13b6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>InitializeEnergy</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a257999d1618a50a1757d015de1dd5264</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>InitializeOptimizer</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a415acd5f33f38c75ed4d0a4230bc3729</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>InitializeOutput</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>aae9bf9af0b49aa85b1386ae06b4a3846</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>InitializePointSets</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a2fea686c6d28976b9b9e918d3ea081d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>InitializePyramid</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>ad17c68cf291ee09f2acdc8dd60251e13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>InitializeStatus</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a53f0de70c2a5445b2638394466bd1c6e</anchor>
      <arglist>(HomogeneousTransformation *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>InitializeStatus</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a3f79742f2bb7fd80da02d7cd5fe18f32</anchor>
      <arglist>(FreeFormTransformation *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>InitializeStatus</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>afa3fd24bee75fb8c1b85c6550bb426b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>InitializeTransformation</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a0d3fde4b050a9fa2492c68a2a1266782</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>MultiResolutionOptimization</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>add5df6421640ccde72b1fa36bfbbf500</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>NumberOfFrames</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a95b15ee5e9a2e1cf4bf594a33b6b6ad8</anchor>
      <arglist>(double *=NULL, double *=NULL, double *=NULL) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>RegisteredPointSet *</type>
      <name>OutputPointSet</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a65dea2145d8b12b26c6a72e6fbc94464</anchor>
      <arglist>(int, double, TransformationInfo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Transformation *</type>
      <name>OutputTransformation</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a469b15ff33d70e176ded96321c8f4ec3</anchor>
      <arglist>(TransformationInfo)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>PreUpdateCallback</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a5428e85d2f745f32406c736090ad6100</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual struct ImageAttributes</type>
      <name>RegistrationDomain</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a1995693bfe1cf46604169648659d2d9e</anchor>
      <arglist>(int=-1) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>SetInputOf</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a26c5889bd9d00a0445692f1e6413a836</anchor>
      <arglist>(RegisteredImage *, const struct ImageAttributes &amp;, int, TransformationInfo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual enum TransformationType</type>
      <name>TransformationType</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a03b476da81410ea3770168edaaf6c95e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; double &gt;</type>
      <name>_Background</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a5da23abd38aba76df95d9a72dd10fd3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; double &gt;</type>
      <name>_Blurring</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a89f2ad7a0a8b85aeeb0f8fec0828bfe1</anchor>
      <arglist>[MAX_NO_RESOLUTIONS]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_Centering</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a08623e49169c9a69a9e92557953cb923</anchor>
      <arglist>[MAX_NO_RESOLUTIONS]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; Point &gt;</type>
      <name>_Centroid</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>af5c5c907be96536df0e63f4ef3ce64ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; ConstraintInfo &gt;</type>
      <name>_ConstraintInfo</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a07579a8b80ce1aaa96238da1d1fbc3a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_CropPadFFD</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a3d8140309aa3d0b8cf89b8e7930db9fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_CropPadImages</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a367947211550529aa46b6d6f87deef56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_CurrentLevel</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a8858308ffd3764741e43d141c3a85329</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>enum TransformationModel</type>
      <name>_CurrentModel</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>aad6c6b6076726e69d5803b20730ce28c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_DefaultBackground</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>ac01de5f2ca5d877568159b0d1e079981</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; DisplacementInfo &gt;</type>
      <name>_DisplacementInfo</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>ae282353d25f021d7152a7e0cb910a6af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_DownsampleWithPadding</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a0989c5214b30e59d3e8b47d369fcb851</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RegistrationEnergy</type>
      <name>_Energy</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a72f0a851496bf354c8dab9db5e3b7719</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>string</type>
      <name>_EnergyFormula</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>aba6588e350bef9fd1250e487eb4921d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EventDelegate</type>
      <name>_EventDelegate</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>af7aa171ee22e4a31c8d84c73e13686de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; enum ExtrapolationMode &gt;</type>
      <name>_ExtrapolationMode</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>adabec0a872a2c96a802881c9be21b52f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; ResampledImageList &gt;</type>
      <name>_Image</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a4fa2ca54042d1d876859ca1f29739c86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; ImageSimilarityInfo &gt;</type>
      <name>_ImageSimilarityInfo</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a13882c128c1f40859bc5ea1f394a8c38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; const BaseImage * &gt;</type>
      <name>_Input</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a15f626051027f65f27d5606ff664e875</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; enum InterpolationMode &gt;</type>
      <name>_InterpolationMode</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>aa2cc227ea2ed070a8e267307aef6ccfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; BinaryImage * &gt;</type>
      <name>_Mask</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>aeb9675e1149ada09a1bb901e702e2cf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_MaxControlPointSpacing</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a073529e076a1f208bacaf6d6a2ece312</anchor>
      <arglist>[MAX_NO_RESOLUTIONS][4]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; double &gt;</type>
      <name>_MaxEdgeLength</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a1ffc5f6f8d605e2d6371890ec3e53d4d</anchor>
      <arglist>[MAX_NO_RESOLUTIONS]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_MinControlPointSpacing</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a3428c7f08143c7fa4f010be916c98747</anchor>
      <arglist>[MAX_NO_RESOLUTIONS][4]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; double &gt;</type>
      <name>_MinEdgeLength</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a4658f2a76c310dedb1e6d8617fc40695</anchor>
      <arglist>[MAX_NO_RESOLUTIONS]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LocalOptimizer *</type>
      <name>_Optimizer</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a2d5b36b2287dd4125263735ba9742634</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParameterList</type>
      <name>_Parameter</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a015f3709451ca0ba3e7d4b7b69067bf2</anchor>
      <arglist>[MAX_NO_RESOLUTIONS]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; Array&lt; void * &gt; &gt;</type>
      <name>_PointSet</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a7205f870307ba81962a443cad4056063</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; PointSetConstraintInfo &gt;</type>
      <name>_PointSetConstraintInfo</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>aaa723ffd0f5612410986e88244747672</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; PointSetDistanceInfo &gt;</type>
      <name>_PointSetDistanceInfo</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>adf4f50ceef7b2cb5197ad0434fda5b41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; void * &gt;</type>
      <name>_PointSetInput</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>ad10940a1ae6af9484420151a83dada69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; void * &gt;</type>
      <name>_PointSetOutput</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>acb4ea9e9cf79a4613198f89f41e3a741</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; PointSetOutputInfo &gt;</type>
      <name>_PointSetOutputInfo</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a004f8335523d96903526c12fa2b0be77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; double &gt;</type>
      <name>_PointSetTime</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>ada6f0165d6460129ef49e9d4cc70d684</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RegistrationEnergy::PreUpdateFunctionType</type>
      <name>_PreUpdateDelegate</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a61cd1b47fb98bb6d980bbdbadc78c84c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>struct ImageAttributes</type>
      <name>_RegistrationDomain</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a88d78e6d094fec9bbd01fd23d65b5378</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; Vector3D&lt; double &gt; &gt;</type>
      <name>_Resolution</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>add448af465fc51373d8f9d30448d6fba</anchor>
      <arglist>[MAX_NO_RESOLUTIONS]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point</type>
      <name>_SourceOffset</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>adbc36447c4e2de5cce25dadf1436733e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_Subdivide</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>ad52e2058a56f1aea7cdf37430dd4883a</anchor>
      <arglist>[MAX_NO_RESOLUTIONS][4]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point</type>
      <name>_TargetOffset</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>ae83f38d4c65e82ec8ac7762ef2db1751</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Transformation *</type>
      <name>_Transformation</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>aee6d465f1e90d984cfcde4bbf2d2f49e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; TransformationInfo &gt;</type>
      <name>_TransformationInfo</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a55370199244d1e742c4bc8ce7228b9e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; Transformation * &gt;</type>
      <name>_TransformationInstance</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a3f13de84de4168bea3e0fb1534c23a7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_UseGaussianResolutionPyramid</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>ac91d7ffc615d3e5f1bf4accd3b0b621b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericRegistrationLogger</name>
    <filename>classmirtk_1_1GenericRegistrationLogger.html</filename>
    <base>mirtk::Observer</base>
    <member kind="function">
      <type></type>
      <name>GenericRegistrationLogger</name>
      <anchorfile>classmirtk_1_1GenericRegistrationLogger.html</anchorfile>
      <anchor>ada116a2cb5facc909ff4c1eb966c98b3</anchor>
      <arglist>(ostream *=&amp;cout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>HandleEvent</name>
      <anchorfile>classmirtk_1_1GenericRegistrationLogger.html</anchorfile>
      <anchor>a4e2f2baaa94cec26f5f6f76c209823f8</anchor>
      <arglist>(Observable *, Event, const void *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GenericRegistrationLogger</name>
      <anchorfile>classmirtk_1_1GenericRegistrationLogger.html</anchorfile>
      <anchor>a4b9ecdd5be22cb030549be80c3080de5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericRepeatExtrapolateImageFunction</name>
    <filename>classmirtk_1_1GenericRepeatExtrapolateImageFunction.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::IndexExtrapolateImageFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericRepeatExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericRepeatExtrapolateImageFunction.html</anchorfile>
      <anchor>a0730ec007ba4e824c0cfd826fd5ed714</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>TransformIndex</name>
      <anchorfile>classmirtk_1_1GenericRepeatExtrapolateImageFunction.html</anchorfile>
      <anchor>acbdccaa9e0d67859ad4cc1311d987fe0</anchor>
      <arglist>(int &amp;index, int max) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericRepeatExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericRepeatExtrapolateImageFunction.html</anchorfile>
      <anchor>acddc01b690d3840df5e32002af08766b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Apply</name>
      <anchorfile>classmirtk_1_1GenericRepeatExtrapolateImageFunction.html</anchorfile>
      <anchor>af3aed13f0f9b58871824b967b7a2b4e9</anchor>
      <arglist>(int &amp;index, int max)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Apply</name>
      <anchorfile>classmirtk_1_1GenericRepeatExtrapolateImageFunction.html</anchorfile>
      <anchor>ae2d280ef564ede3e0ff408cbe001eba9</anchor>
      <arglist>(double &amp;cindex, int max)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericRepeatExtrapolateImageFunction&lt; BaseImage &gt;</name>
    <filename>classmirtk_1_1GenericRepeatExtrapolateImageFunction.html</filename>
    <base>IndexExtrapolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>GenericRepeatExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericRepeatExtrapolateImageFunction.html</anchorfile>
      <anchor>a0730ec007ba4e824c0cfd826fd5ed714</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>TransformIndex</name>
      <anchorfile>classmirtk_1_1GenericRepeatExtrapolateImageFunction.html</anchorfile>
      <anchor>acbdccaa9e0d67859ad4cc1311d987fe0</anchor>
      <arglist>(int &amp;index, int max) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericRepeatExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericRepeatExtrapolateImageFunction.html</anchorfile>
      <anchor>acddc01b690d3840df5e32002af08766b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Apply</name>
      <anchorfile>classmirtk_1_1GenericRepeatExtrapolateImageFunction.html</anchorfile>
      <anchor>af3aed13f0f9b58871824b967b7a2b4e9</anchor>
      <arglist>(int &amp;index, int max)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Apply</name>
      <anchorfile>classmirtk_1_1GenericRepeatExtrapolateImageFunction.html</anchorfile>
      <anchor>ae2d280ef564ede3e0ff408cbe001eba9</anchor>
      <arglist>(double &amp;cindex, int max)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericSincInterpolateImageFunction</name>
    <filename>classmirtk_1_1GenericSincInterpolateImageFunction.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericInterpolateImageFunction</base>
    <member kind="typedef">
      <type>Sinc&lt; Real &gt;</type>
      <name>Kernel</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>adec693f02718893e6853ab4793d79735</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingInterval</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a53fc95f225a8cc1f1bce9f3a1d7f1f92</anchor>
      <arglist>(double, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericSincInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>aeefbeb6fdbef74cad4945f359bf2c622</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>ae24e4a3a77cbc33047ad1613391466b0</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a837cc6a60f59175e5a96bc3685b290f7</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a3a348ee80c20cc6734b39f620ca41812</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a64438157365400fd71e32d92f82f4ca9</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>aeb51a2a47cd4c0d597fa559ca311572d</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a2c2ea0c735f3419644bf90fc40b9c63a</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>aae7647f1f382d4e32c2e34a172f980d8</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a0a10dfc00d27fa3276943eb861626f50</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a2b43b2871457ff503f74da1a7b3450f6</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a64cefe88a6aa59e2a8578b49ec7620ee</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a6ed65ec18cb7b37c998f7e9aacaf00c3</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a91f361b81b3c3454176d8b38a70b9ce4</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a15aa30ffd7a3d3e314fc5aea805be67c</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a58832b1d8472ce29457ee8ae434e7020</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a895ed7b8fd54d112a82c295dc57df9e7</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>adb1b31a7700abe029d536784b98cb337</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a37969ab673947196aa8056b0f7ce38a7</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>ae98e623b7abfd8a23f093f3b8dce5a21</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a3abf242a94ca910671542b8661994a72</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a2a9622d645d2673b6ec753747aad8e21</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a398270d0b1c13f726279f5aff660aff4</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>af41e9e7f1bdfe330cf29c1352ae043c9</anchor>
      <arglist>(double, Epsilon)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericSincInterpolateImageFunction2D</name>
    <filename>classmirtk_1_1GenericSincInterpolateImageFunction2D.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericSincInterpolateImageFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericSincInterpolateImageFunction2D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction2D.html</anchorfile>
      <anchor>aa81402ec3fa9df5a763c150d8f65722b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction2D.html</anchorfile>
      <anchor>a4e3b7d1056d033991a274fe0a14b2205</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction2D.html</anchorfile>
      <anchor>a93d7ed930d76216bae12dc0e7f1bf78b</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction2D.html</anchorfile>
      <anchor>a924f5cf6e05fa17b711c11a4c3b57b74</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction2D.html</anchorfile>
      <anchor>ab19e9e7cbbdd913e2121fd7961a51743</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction2D.html</anchorfile>
      <anchor>a3e7e5919990cd4dc51fce4cc78ef7c76</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction2D.html</anchorfile>
      <anchor>aa3a95ec5485db011b4a6e1a16c56c7fa</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction2D.html</anchorfile>
      <anchor>ae5f657e27463f30a83382c7ddd86c874</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction2D.html</anchorfile>
      <anchor>a710a643cf2f89d2c548740ad8348f4e2</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericSincInterpolateImageFunction2D&lt; BaseImage &gt;</name>
    <filename>classmirtk_1_1GenericSincInterpolateImageFunction2D.html</filename>
    <base>GenericSincInterpolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>GenericSincInterpolateImageFunction2D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction2D.html</anchorfile>
      <anchor>aa81402ec3fa9df5a763c150d8f65722b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction2D.html</anchorfile>
      <anchor>a4e3b7d1056d033991a274fe0a14b2205</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction2D.html</anchorfile>
      <anchor>a93d7ed930d76216bae12dc0e7f1bf78b</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction2D.html</anchorfile>
      <anchor>a924f5cf6e05fa17b711c11a4c3b57b74</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction2D.html</anchorfile>
      <anchor>ab19e9e7cbbdd913e2121fd7961a51743</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction2D.html</anchorfile>
      <anchor>a3e7e5919990cd4dc51fce4cc78ef7c76</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction2D.html</anchorfile>
      <anchor>aa3a95ec5485db011b4a6e1a16c56c7fa</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction2D.html</anchorfile>
      <anchor>ae5f657e27463f30a83382c7ddd86c874</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction2D.html</anchorfile>
      <anchor>a710a643cf2f89d2c548740ad8348f4e2</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericSincInterpolateImageFunction3D</name>
    <filename>classmirtk_1_1GenericSincInterpolateImageFunction3D.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericSincInterpolateImageFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericSincInterpolateImageFunction3D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction3D.html</anchorfile>
      <anchor>a517debf34f0a492a016be0e9010c68a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction3D.html</anchorfile>
      <anchor>a1f584e2a73c17bf0798dd23012ed170a</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction3D.html</anchorfile>
      <anchor>ac41051aecb41650f629ed7476e7d50cf</anchor>
      <arglist>(const TOtherImage *, double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction3D.html</anchorfile>
      <anchor>acdc2fbea7d3f3900171cd67eaa02a3e0</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction3D.html</anchorfile>
      <anchor>a2fc9100de1e4e08d7a3b52e2e72762d6</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction3D.html</anchorfile>
      <anchor>aa528da2b09948bc01859c2c1dcf46472</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction3D.html</anchorfile>
      <anchor>a0111cba3461f4bc6dd1418f0e7ab0ebb</anchor>
      <arglist>(const TOtherImage *, double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction3D.html</anchorfile>
      <anchor>a49cd8481e2d28342b31c4e350b2016ae</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction3D.html</anchorfile>
      <anchor>a933114be389eb7fcdbfd1a86a8e63027</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericSincInterpolateImageFunction3D&lt; BaseImage &gt;</name>
    <filename>classmirtk_1_1GenericSincInterpolateImageFunction3D.html</filename>
    <base>GenericSincInterpolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>GenericSincInterpolateImageFunction3D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction3D.html</anchorfile>
      <anchor>a517debf34f0a492a016be0e9010c68a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction3D.html</anchorfile>
      <anchor>a1f584e2a73c17bf0798dd23012ed170a</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction3D.html</anchorfile>
      <anchor>ac41051aecb41650f629ed7476e7d50cf</anchor>
      <arglist>(const TOtherImage *, double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction3D.html</anchorfile>
      <anchor>acdc2fbea7d3f3900171cd67eaa02a3e0</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction3D.html</anchorfile>
      <anchor>a2fc9100de1e4e08d7a3b52e2e72762d6</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction3D.html</anchorfile>
      <anchor>aa528da2b09948bc01859c2c1dcf46472</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction3D.html</anchorfile>
      <anchor>a0111cba3461f4bc6dd1418f0e7ab0ebb</anchor>
      <arglist>(const TOtherImage *, double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction3D.html</anchorfile>
      <anchor>a49cd8481e2d28342b31c4e350b2016ae</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction3D.html</anchorfile>
      <anchor>a933114be389eb7fcdbfd1a86a8e63027</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericSincInterpolateImageFunction4D</name>
    <filename>classmirtk_1_1GenericSincInterpolateImageFunction4D.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericSincInterpolateImageFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericSincInterpolateImageFunction4D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction4D.html</anchorfile>
      <anchor>ab80b584c4f5a77243a91e8af8b6f4e78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction4D.html</anchorfile>
      <anchor>a809d911c77c6ea5ce8033c283680f453</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction4D.html</anchorfile>
      <anchor>a6abd22cffd93e3eb69020e5dbf0c76d5</anchor>
      <arglist>(const TOtherImage *, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction4D.html</anchorfile>
      <anchor>a1fff996bdeecc8df9408313773c5112d</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction4D.html</anchorfile>
      <anchor>a4ca4f1e5a6a589774e15d11fa3ccffc3</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction4D.html</anchorfile>
      <anchor>ae77380dce3d8ce862eea54c2a5d150e8</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction4D.html</anchorfile>
      <anchor>a1958f97dd5b2a75e8fc4002645866932</anchor>
      <arglist>(const TOtherImage *, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction4D.html</anchorfile>
      <anchor>ac19c5b289d5a2db29e2b2f081ca4e85e</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction4D.html</anchorfile>
      <anchor>a71eedfa24498921b94f9afaae3f2bb3a</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericSincInterpolateImageFunction4D&lt; BaseImage &gt;</name>
    <filename>classmirtk_1_1GenericSincInterpolateImageFunction4D.html</filename>
    <base>GenericSincInterpolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>GenericSincInterpolateImageFunction4D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction4D.html</anchorfile>
      <anchor>ab80b584c4f5a77243a91e8af8b6f4e78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction4D.html</anchorfile>
      <anchor>a809d911c77c6ea5ce8033c283680f453</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction4D.html</anchorfile>
      <anchor>a6abd22cffd93e3eb69020e5dbf0c76d5</anchor>
      <arglist>(const TOtherImage *, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction4D.html</anchorfile>
      <anchor>a1fff996bdeecc8df9408313773c5112d</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction4D.html</anchorfile>
      <anchor>a4ca4f1e5a6a589774e15d11fa3ccffc3</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction4D.html</anchorfile>
      <anchor>ae77380dce3d8ce862eea54c2a5d150e8</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction4D.html</anchorfile>
      <anchor>a1958f97dd5b2a75e8fc4002645866932</anchor>
      <arglist>(const TOtherImage *, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction4D.html</anchorfile>
      <anchor>ac19c5b289d5a2db29e2b2f081ca4e85e</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction4D.html</anchorfile>
      <anchor>a71eedfa24498921b94f9afaae3f2bb3a</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericSincInterpolateImageFunction&lt; BaseImage &gt;</name>
    <filename>classmirtk_1_1GenericSincInterpolateImageFunction.html</filename>
    <base>GenericInterpolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="typedef">
      <type>Sinc&lt; Real &gt;</type>
      <name>Kernel</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>adec693f02718893e6853ab4793d79735</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingInterval</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a53fc95f225a8cc1f1bce9f3a1d7f1f92</anchor>
      <arglist>(double, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericSincInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>aeefbeb6fdbef74cad4945f359bf2c622</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>ae24e4a3a77cbc33047ad1613391466b0</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a837cc6a60f59175e5a96bc3685b290f7</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a3a348ee80c20cc6734b39f620ca41812</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a64438157365400fd71e32d92f82f4ca9</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>aeb51a2a47cd4c0d597fa559ca311572d</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a2c2ea0c735f3419644bf90fc40b9c63a</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>aae7647f1f382d4e32c2e34a172f980d8</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a0a10dfc00d27fa3276943eb861626f50</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a2b43b2871457ff503f74da1a7b3450f6</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a64cefe88a6aa59e2a8578b49ec7620ee</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a6ed65ec18cb7b37c998f7e9aacaf00c3</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a91f361b81b3c3454176d8b38a70b9ce4</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a15aa30ffd7a3d3e314fc5aea805be67c</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a58832b1d8472ce29457ee8ae434e7020</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a895ed7b8fd54d112a82c295dc57df9e7</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>adb1b31a7700abe029d536784b98cb337</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a37969ab673947196aa8056b0f7ce38a7</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>ae98e623b7abfd8a23f093f3b8dce5a21</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a3abf242a94ca910671542b8661994a72</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a2a9622d645d2673b6ec753747aad8e21</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a398270d0b1c13f726279f5aff660aff4</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>af41e9e7f1bdfe330cf29c1352ae043c9</anchor>
      <arglist>(double, Epsilon)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericSparseMatrix</name>
    <filename>classmirtk_1_1GenericSparseMatrix.html</filename>
    <templarg>TEntry</templarg>
    <base>mirtk::Object</base>
    <member kind="typedef">
      <type>Array&lt; Entry &gt;</type>
      <name>Entries</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>ad8f3d86aea04fbc2a39795fe46637a4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Pair&lt; int, TEntry &gt;</type>
      <name>Entry</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a2b061953a85a2b047c02c97e6fcd2922</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TEntry</type>
      <name>EntryType</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>ad8daecd8b5240942033b8f3b3a1c05ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>StorageLayout</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a6dd1f0cede7b141fa994dddf1436b5b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a7abd49b2b63e86d3eb7e35b62f68bcdd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearIndex</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>afff824ea0deb0d05bd0eac7aa9843880</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Col</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>af12fb2917e57faa2eef61bc0ce80ccf7</anchor>
      <arglist>(int, Entries &amp;, bool=false)</arglist>
    </member>
    <member kind="function">
      <type>Entries</type>
      <name>Col</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a5a1ce73e66f26136aeff3abe01500df9</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ColNNZ</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>af61ad02f25686e618bcf5480029cbd04</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>EntryType</type>
      <name>ColSum</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a2b58c45c1c9aa291cd8e8d6712300c38</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Column</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>aae691e81aa15949002a1ceb42571c4ed</anchor>
      <arglist>(int, Entries &amp;, bool=false)</arglist>
    </member>
    <member kind="function">
      <type>Entries</type>
      <name>Column</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>ad161d0ec00d8210fd2ecfbec8ec43c88</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>EntryType</type>
      <name>ColumnSum</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>acf8cc8fc1a9ffc39ec9488db01d6f258</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>Diag</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>aaab1a1dd29f6ee25a8d98938cbfaead8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Diag</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a34f6a92909aa0a5b865bd432f2c557bd</anchor>
      <arglist>(const Vector &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Diag</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a59f18f0d7c3392046cb74fa4d992b7a5</anchor>
      <arglist>(TEntry d)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Eigenvalues</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a0aca8d99d46a01cf169368e7906487fc</anchor>
      <arglist>(Vector &amp;v, int k, const char *sigma=&quot;LM&quot;, int p=0, double tol=.0, int maxit=0, Vector *v0=NULL) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Eigenvectors</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a01d77527b08be0087336126eb519a5cf</anchor>
      <arglist>(Matrix &amp;E, int k, const char *sigma=&quot;LM&quot;, int p=0, double tol=.0, int maxit=0, Vector *v0=NULL) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Eigenvectors</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a72268f70c9a68092b05964e47b5d954c</anchor>
      <arglist>(Matrix &amp;E, Vector &amp;v, int k, const char *sigma=&quot;LM&quot;, int p=0, double tol=.0, int maxit=0, Vector *v0=NULL) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericSparseMatrix</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>acdc70a479d25dc3128df16f1da152da1</anchor>
      <arglist>(StorageLayout=CCS)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericSparseMatrix</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a78af354b1ca414d33b104e4212cd0e21</anchor>
      <arglist>(int, int=0, StorageLayout=CCS)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericSparseMatrix</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>acd1cee9604d2c7c3fc958392eaeec9c5</anchor>
      <arglist>(int, int, int, StorageLayout=CCS)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericSparseMatrix</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a377c08d09b0c368835c3dbf6221d8a59</anchor>
      <arglist>(const GenericSparseMatrix&lt; TOtherEntry &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>EntryType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>af0ccdb342b5c625d210b60ed8cdaa3c8</anchor>
      <arglist>(int, int=-1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetCol</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a3fc59a953da807ea0a6129dae465fdd5</anchor>
      <arglist>(int, Entries &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetColumn</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a2730aafdf7bbdb6e638114e57e0f9472</anchor>
      <arglist>(int, Entries &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetDiag</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>aacd2ce0562b2c7e87b504a81cbfc3eb7</anchor>
      <arglist>(Vector &amp;d) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetRawData</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>ad8e8c67146b293978fd41c4893ee4737</anchor>
      <arglist>(int *&amp;, int *&amp;, TEntry *&amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRow</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>af3935ab80fbc545ca662b0e259c8842b</anchor>
      <arglist>(int, Entries &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Index</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a96110e8090bad42c8262ab128f1ae15c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a8aa80ad270c1339866a86a33875c1c14</anchor>
      <arglist>(int, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a5067c5d51dc54e2da9d96856c803d5bd</anchor>
      <arglist>(int, int, Array&lt; Entries &gt; &amp;, bool=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a49ac3120f0d2a468c124bd7fa767e4fa</anchor>
      <arglist>(int, int, Entries [], bool=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSymmetric</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a5ba810130a5370c58632ab186e6d7de8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Layout</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a4cb02b5e3c2f7f659346dd1ec04ff364</anchor>
      <arglist>(StorageLayout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MakeSymmetric</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a3cf9bff747b6516ec3767af54bb9c8a7</anchor>
      <arglist>(bool extent=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a5ec58e1852f9bb5372380040c33482ab</anchor>
      <arglist>(int, Size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a7a8d4c3e6afd5b96ad89b0ad1542764f</anchor>
      <arglist>(int, MaxNumberOfUnusedEntries)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a2acbd3dac538a6db5da3cf72ebc4fbd4</anchor>
      <arglist>(enum StorageLayout, Layout)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a8b13abd855644698b4a8088e1f09c613</anchor>
      <arglist>(int, Rows)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a4116690befe8531c88eb3002ef57cd5c</anchor>
      <arglist>(int, Cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a784b08520654453a43561ca5cf1855de</anchor>
      <arglist>(int, NNZ)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MultAv</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a74fc4becf222486163a9e7389a3f1241</anchor>
      <arglist>(EntryType [], EntryType []) const</arglist>
    </member>
    <member kind="function">
      <type>EntryType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a2da8f978cd5922263df9dba2955a7e49</anchor>
      <arglist>(int, int=-1)</arglist>
    </member>
    <member kind="function">
      <type>GenericSparseMatrix</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a866766546ecc52f037291e5009d30aff</anchor>
      <arglist>(EntryType) const</arglist>
    </member>
    <member kind="function">
      <type>GenericSparseMatrix &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>ad256011495a2ee67f3aa46518110fa70</anchor>
      <arglist>(EntryType)</arglist>
    </member>
    <member kind="function">
      <type>GenericSparseMatrix</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a8bfc1f6a2c59cc9443a6000f797d3d2e</anchor>
      <arglist>(EntryType) const</arglist>
    </member>
    <member kind="function">
      <type>GenericSparseMatrix &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a83e1e1122cd5023859a966f7f997cdde</anchor>
      <arglist>(EntryType)</arglist>
    </member>
    <member kind="function">
      <type>GenericSparseMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a683b63878e88997aa5719e9418ce2672</anchor>
      <arglist>(const GenericSparseMatrix&lt; TOtherEntry &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a914edc41c9f14fd46a3995ff8d4ddffb</anchor>
      <arglist>(int, int, EntryType)</arglist>
    </member>
    <member kind="function">
      <type>TEntry *</type>
      <name>RawPointer</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a463bd76c158f88d218e6665e0a674190</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function">
      <type>const TEntry *</type>
      <name>RawPointer</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>ac4399391b9fff380e88acf9e9e57def9</anchor>
      <arglist>(int=0) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ReadMAT</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a6e772311a90ebd7e7937494b2c8f06f4</anchor>
      <arglist>(const char *, const char *=&quot;A&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveZeros</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>ae5e117b7ddb2d1f6d24fcec27f2036e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reserve</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a2cba15218c56e3a2aaeab2a183f4439b</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Row</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a340b90c967b76513dfafe08f81c4065a</anchor>
      <arglist>(int, Entries &amp;, bool=false)</arglist>
    </member>
    <member kind="function">
      <type>Entries</type>
      <name>Row</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a6ebc5eab82202e6b31796c11584b3fa3</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>RowNNZ</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a3030a69a28c21010396bf3203173ca7a</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>EntryType</type>
      <name>RowSum</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>ae1e2f678a437bd7c40a405d8e357b7d6</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>GenericSparseMatrix &amp;</type>
      <name>ScaleCol</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a5c6200a360c853e613ab75c541c74327</anchor>
      <arglist>(int, EntryType)</arglist>
    </member>
    <member kind="function">
      <type>GenericSparseMatrix &amp;</type>
      <name>ScaleColumn</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>ac9332516f897919ae472b96e94e7395c</anchor>
      <arglist>(int, EntryType)</arglist>
    </member>
    <member kind="function">
      <type>GenericSparseMatrix &amp;</type>
      <name>ScaleRow</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a2ff276de5a28c329fdedcd4e65df21b0</anchor>
      <arglist>(int, EntryType)</arglist>
    </member>
    <member kind="function">
      <type>GenericSparseMatrix</type>
      <name>Sub</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>aad8ed7c0adfe2e114445a6202db37b79</anchor>
      <arglist>(int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Sub</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a4e6a455d692fd7bc225e0efa9db22594</anchor>
      <arglist>(int, int, const GenericSparseMatrix &amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SubNNZ</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a07b2a998a720bdcbe2bbb1e25125ec36</anchor>
      <arglist>(int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Transpose</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>aea1f1c647aa34d0628ab3186b26a7d2e</anchor>
      <arglist>(bool keep_layout=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteMAT</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>ad52d21f0c09de6189685ef277d5de548</anchor>
      <arglist>(const char *, const char *=&quot;A&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WriteMFile</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a395f45f2651199231948727e84b563b2</anchor>
      <arglist>(const char *, const char *=&quot;A&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Zero</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a4f6e977a7d62499146b0a5d0346830d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericSparseMatrix</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a27646d408a30fcb5db1747788fc55988</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CheckEntries</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a7803f19794321bfdc46f99e5a5f63f92</anchor>
      <arglist>(Entries &amp;) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CopyAttributes</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a1b25525b53e55a0491be67c86e0375f0</anchor>
      <arglist>(const GenericSparseMatrix&lt; TOtherEntry &gt; &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int *</type>
      <name>_Col</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a8c204a21a95563c47374dd0cc131aaa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EntryType *</type>
      <name>_Data</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a6e2509b792d5ed200e6558bb666d6f36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; int &gt; *</type>
      <name>_Index</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>ad6f531b061e0991ae2804cae06bc2112</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int *</type>
      <name>_Row</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a5bbea4a2edde46995a4573e872cdcd73</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericSparseMatrix&lt; int &gt;</name>
    <filename>classmirtk_1_1GenericSparseMatrix.html</filename>
    <base>mirtk::Object</base>
    <member kind="typedef">
      <type>Array&lt; Entry &gt;</type>
      <name>Entries</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>ad8f3d86aea04fbc2a39795fe46637a4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Pair&lt; int, int &gt;</type>
      <name>Entry</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a2b061953a85a2b047c02c97e6fcd2922</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>EntryType</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>ad8daecd8b5240942033b8f3b3a1c05ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>StorageLayout</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a6dd1f0cede7b141fa994dddf1436b5b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a7abd49b2b63e86d3eb7e35b62f68bcdd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearIndex</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>afff824ea0deb0d05bd0eac7aa9843880</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Col</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>af12fb2917e57faa2eef61bc0ce80ccf7</anchor>
      <arglist>(int, Entries &amp;, bool=false)</arglist>
    </member>
    <member kind="function">
      <type>Entries</type>
      <name>Col</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a5a1ce73e66f26136aeff3abe01500df9</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ColNNZ</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>af61ad02f25686e618bcf5480029cbd04</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>EntryType</type>
      <name>ColSum</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a2b58c45c1c9aa291cd8e8d6712300c38</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Column</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>aae691e81aa15949002a1ceb42571c4ed</anchor>
      <arglist>(int, Entries &amp;, bool=false)</arglist>
    </member>
    <member kind="function">
      <type>Entries</type>
      <name>Column</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>ad161d0ec00d8210fd2ecfbec8ec43c88</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>EntryType</type>
      <name>ColumnSum</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>acf8cc8fc1a9ffc39ec9488db01d6f258</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>Diag</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>aaab1a1dd29f6ee25a8d98938cbfaead8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Diag</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a34f6a92909aa0a5b865bd432f2c557bd</anchor>
      <arglist>(const Vector &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Diag</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a59f18f0d7c3392046cb74fa4d992b7a5</anchor>
      <arglist>(int d)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Eigenvalues</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a0aca8d99d46a01cf169368e7906487fc</anchor>
      <arglist>(Vector &amp;v, int k, const char *sigma=&quot;LM&quot;, int p=0, double tol=.0, int maxit=0, Vector *v0=NULL) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Eigenvectors</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a01d77527b08be0087336126eb519a5cf</anchor>
      <arglist>(Matrix &amp;E, int k, const char *sigma=&quot;LM&quot;, int p=0, double tol=.0, int maxit=0, Vector *v0=NULL) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Eigenvectors</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a72268f70c9a68092b05964e47b5d954c</anchor>
      <arglist>(Matrix &amp;E, Vector &amp;v, int k, const char *sigma=&quot;LM&quot;, int p=0, double tol=.0, int maxit=0, Vector *v0=NULL) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericSparseMatrix</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>acdc70a479d25dc3128df16f1da152da1</anchor>
      <arglist>(StorageLayout=CCS)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericSparseMatrix</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a78af354b1ca414d33b104e4212cd0e21</anchor>
      <arglist>(int, int=0, StorageLayout=CCS)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericSparseMatrix</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>acd1cee9604d2c7c3fc958392eaeec9c5</anchor>
      <arglist>(int, int, int, StorageLayout=CCS)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericSparseMatrix</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a377c08d09b0c368835c3dbf6221d8a59</anchor>
      <arglist>(const GenericSparseMatrix&lt; TOtherEntry &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>EntryType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>af0ccdb342b5c625d210b60ed8cdaa3c8</anchor>
      <arglist>(int, int=-1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetCol</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a3fc59a953da807ea0a6129dae465fdd5</anchor>
      <arglist>(int, Entries &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetColumn</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a2730aafdf7bbdb6e638114e57e0f9472</anchor>
      <arglist>(int, Entries &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetDiag</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>aacd2ce0562b2c7e87b504a81cbfc3eb7</anchor>
      <arglist>(Vector &amp;d) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetRawData</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>ad8e8c67146b293978fd41c4893ee4737</anchor>
      <arglist>(int *&amp;, int *&amp;, int *&amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRow</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>af3935ab80fbc545ca662b0e259c8842b</anchor>
      <arglist>(int, Entries &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Index</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a96110e8090bad42c8262ab128f1ae15c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a8aa80ad270c1339866a86a33875c1c14</anchor>
      <arglist>(int, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a5067c5d51dc54e2da9d96856c803d5bd</anchor>
      <arglist>(int, int, Array&lt; Entries &gt; &amp;, bool=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a49ac3120f0d2a468c124bd7fa767e4fa</anchor>
      <arglist>(int, int, Entries [], bool=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSymmetric</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a5ba810130a5370c58632ab186e6d7de8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Layout</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a4cb02b5e3c2f7f659346dd1ec04ff364</anchor>
      <arglist>(StorageLayout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MakeSymmetric</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a3cf9bff747b6516ec3767af54bb9c8a7</anchor>
      <arglist>(bool extent=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a5ec58e1852f9bb5372380040c33482ab</anchor>
      <arglist>(int, Size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a7a8d4c3e6afd5b96ad89b0ad1542764f</anchor>
      <arglist>(int, MaxNumberOfUnusedEntries)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a2acbd3dac538a6db5da3cf72ebc4fbd4</anchor>
      <arglist>(enum StorageLayout, Layout)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a8b13abd855644698b4a8088e1f09c613</anchor>
      <arglist>(int, Rows)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a4116690befe8531c88eb3002ef57cd5c</anchor>
      <arglist>(int, Cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a784b08520654453a43561ca5cf1855de</anchor>
      <arglist>(int, NNZ)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MultAv</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a74fc4becf222486163a9e7389a3f1241</anchor>
      <arglist>(EntryType [], EntryType []) const</arglist>
    </member>
    <member kind="function">
      <type>EntryType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a2da8f978cd5922263df9dba2955a7e49</anchor>
      <arglist>(int, int=-1)</arglist>
    </member>
    <member kind="function">
      <type>GenericSparseMatrix</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a866766546ecc52f037291e5009d30aff</anchor>
      <arglist>(EntryType) const</arglist>
    </member>
    <member kind="function">
      <type>GenericSparseMatrix &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>ad256011495a2ee67f3aa46518110fa70</anchor>
      <arglist>(EntryType)</arglist>
    </member>
    <member kind="function">
      <type>GenericSparseMatrix</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a8bfc1f6a2c59cc9443a6000f797d3d2e</anchor>
      <arglist>(EntryType) const</arglist>
    </member>
    <member kind="function">
      <type>GenericSparseMatrix &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a83e1e1122cd5023859a966f7f997cdde</anchor>
      <arglist>(EntryType)</arglist>
    </member>
    <member kind="function">
      <type>GenericSparseMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a683b63878e88997aa5719e9418ce2672</anchor>
      <arglist>(const GenericSparseMatrix&lt; TOtherEntry &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a914edc41c9f14fd46a3995ff8d4ddffb</anchor>
      <arglist>(int, int, EntryType)</arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>RawPointer</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a463bd76c158f88d218e6665e0a674190</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function">
      <type>const int *</type>
      <name>RawPointer</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>ac4399391b9fff380e88acf9e9e57def9</anchor>
      <arglist>(int=0) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ReadMAT</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a6e772311a90ebd7e7937494b2c8f06f4</anchor>
      <arglist>(const char *, const char *=&quot;A&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveZeros</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>ae5e117b7ddb2d1f6d24fcec27f2036e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reserve</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a2cba15218c56e3a2aaeab2a183f4439b</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Row</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a340b90c967b76513dfafe08f81c4065a</anchor>
      <arglist>(int, Entries &amp;, bool=false)</arglist>
    </member>
    <member kind="function">
      <type>Entries</type>
      <name>Row</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a6ebc5eab82202e6b31796c11584b3fa3</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>RowNNZ</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a3030a69a28c21010396bf3203173ca7a</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>EntryType</type>
      <name>RowSum</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>ae1e2f678a437bd7c40a405d8e357b7d6</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>GenericSparseMatrix &amp;</type>
      <name>ScaleCol</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a5c6200a360c853e613ab75c541c74327</anchor>
      <arglist>(int, EntryType)</arglist>
    </member>
    <member kind="function">
      <type>GenericSparseMatrix &amp;</type>
      <name>ScaleColumn</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>ac9332516f897919ae472b96e94e7395c</anchor>
      <arglist>(int, EntryType)</arglist>
    </member>
    <member kind="function">
      <type>GenericSparseMatrix &amp;</type>
      <name>ScaleRow</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a2ff276de5a28c329fdedcd4e65df21b0</anchor>
      <arglist>(int, EntryType)</arglist>
    </member>
    <member kind="function">
      <type>GenericSparseMatrix</type>
      <name>Sub</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>aad8ed7c0adfe2e114445a6202db37b79</anchor>
      <arglist>(int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Sub</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a4e6a455d692fd7bc225e0efa9db22594</anchor>
      <arglist>(int, int, const GenericSparseMatrix &amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SubNNZ</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a07b2a998a720bdcbe2bbb1e25125ec36</anchor>
      <arglist>(int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Transpose</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>aea1f1c647aa34d0628ab3186b26a7d2e</anchor>
      <arglist>(bool keep_layout=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteMAT</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>ad52d21f0c09de6189685ef277d5de548</anchor>
      <arglist>(const char *, const char *=&quot;A&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WriteMFile</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a395f45f2651199231948727e84b563b2</anchor>
      <arglist>(const char *, const char *=&quot;A&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Zero</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a4f6e977a7d62499146b0a5d0346830d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericSparseMatrix</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a27646d408a30fcb5db1747788fc55988</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CheckEntries</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a7803f19794321bfdc46f99e5a5f63f92</anchor>
      <arglist>(Entries &amp;) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CopyAttributes</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a1b25525b53e55a0491be67c86e0375f0</anchor>
      <arglist>(const GenericSparseMatrix&lt; TOtherEntry &gt; &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int *</type>
      <name>_Col</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a8c204a21a95563c47374dd0cc131aaa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EntryType *</type>
      <name>_Data</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a6e2509b792d5ed200e6558bb666d6f36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; int &gt; *</type>
      <name>_Index</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>ad6f531b061e0991ae2804cae06bc2112</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int *</type>
      <name>_Row</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a5bbea4a2edde46995a4573e872cdcd73</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::UnaryVoxelFunction::GetMax</name>
    <filename>structmirtk_1_1UnaryVoxelFunction_1_1GetMax.html</filename>
    <base>mirtk::VoxelReduction</base>
  </compound>
  <compound kind="struct">
    <name>mirtk::UnaryVoxelFunction::GetMin</name>
    <filename>structmirtk_1_1UnaryVoxelFunction_1_1GetMin.html</filename>
    <base>mirtk::VoxelReduction</base>
  </compound>
  <compound kind="struct">
    <name>mirtk::UnaryVoxelFunction::GetMinMax</name>
    <filename>structmirtk_1_1UnaryVoxelFunction_1_1GetMinMax.html</filename>
    <base>mirtk::VoxelReduction</base>
  </compound>
  <compound kind="class">
    <name>mirtk::GIPLImageReader</name>
    <filename>classmirtk_1_1GIPLImageReader.html</filename>
    <base>mirtk::ImageReader</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CanRead</name>
      <anchorfile>classmirtk_1_1GIPLImageReader.html</anchorfile>
      <anchor>adde12e4488ffe872c0e270030b31fb45</anchor>
      <arglist>(const char *) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>CheckHeader</name>
      <anchorfile>classmirtk_1_1GIPLImageReader.html</anchorfile>
      <anchor>a55899e2813f59e2a751fbf6d6c10d2ad</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>ReadHeader</name>
      <anchorfile>classmirtk_1_1GIPLImageReader.html</anchorfile>
      <anchor>ae69911e48a1f46af90d1c5fd3c4e5ce5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GIPLImageWriter</name>
    <filename>classmirtk_1_1GIPLImageWriter.html</filename>
    <base>mirtk::ImageWriter</base>
    <member kind="function" static="yes">
      <type>static Array&lt; string &gt;</type>
      <name>Extensions</name>
      <anchorfile>classmirtk_1_1GIPLImageWriter.html</anchorfile>
      <anchor>a8070ee75e3728e21a9031800418054ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GIPLImageWriter.html</anchorfile>
      <anchor>a09853f1940b09b708c4fc00b109d0bf4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GradientDescent</name>
    <filename>classmirtk_1_1GradientDescent.html</filename>
    <base>mirtk::LocalOptimizer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Function</name>
      <anchorfile>classmirtk_1_1GradientDescent.html</anchorfile>
      <anchor>a243ae010a911ef983615f282534931e6</anchor>
      <arglist>(ObjectiveFunction *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GradientDescent</name>
      <anchorfile>classmirtk_1_1GradientDescent.html</anchorfile>
      <anchor>a90d668de3ffd52a3827d46fb9e438225</anchor>
      <arglist>(ObjectiveFunction *=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GradientDescent</name>
      <anchorfile>classmirtk_1_1GradientDescent.html</anchorfile>
      <anchor>a3a9fdac856a77a33c216e4dd39c65efc</anchor>
      <arglist>(const GradientDescent &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GradientDescent.html</anchorfile>
      <anchor>a72aa0c2725f59af3ac129e10c8a7433e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LineSearch</name>
      <anchorfile>classmirtk_1_1GradientDescent.html</anchorfile>
      <anchor>a441961b061385a488920349e23036ed5</anchor>
      <arglist>(class LineSearch *, bool=false)</arglist>
    </member>
    <member kind="function">
      <type>GradientDescent &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GradientDescent.html</anchorfile>
      <anchor>add07f2b69e2a6ef8bb0dcb4899aef0c3</anchor>
      <arglist>(const GradientDescent &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1GradientDescent.html</anchorfile>
      <anchor>a4cf00cb8c88b74942b7e7ee96b314e27</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1GradientDescent.html</anchorfile>
      <anchor>a3b7a484ea34ebf711572b0f7b1537176</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1GradientDescent.html</anchorfile>
      <anchor>a62e237df9498c4362ec8095a240200db</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GradientDescent</name>
      <anchorfile>classmirtk_1_1GradientDescent.html</anchorfile>
      <anchor>a994545f24bef599f90f399f2a1ae75d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1GradientDescent.html</anchorfile>
      <anchor>a773d1c420b686b0302e7ccde4cf06227</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Gradient</name>
      <anchorfile>classmirtk_1_1GradientDescent.html</anchorfile>
      <anchor>a363e850e2bab5f5f4da85edfadc37996</anchor>
      <arglist>(double *, double=.0, bool *=NULL)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool *</type>
      <name>_AllowSignChange</name>
      <anchorfile>classmirtk_1_1GradientDescent.html</anchorfile>
      <anchor>a60cca4be89b862eae5d315c2cd6d1993</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>_Gradient</name>
      <anchorfile>classmirtk_1_1GradientDescent.html</anchorfile>
      <anchor>a15a9b4aad8ec76c5ea8a1174a3516674</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GradientFieldSimilarity</name>
    <filename>classmirtk_1_1GradientFieldSimilarity.html</filename>
    <base>mirtk::ImageSimilarity</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1GradientFieldSimilarity.html</anchorfile>
      <anchor>a4b39b2e2ac6f8ec3f30c21f98a0280e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1GradientFieldSimilarity.html</anchorfile>
      <anchor>a614d70cca723fc4e7386eef11d7fffed</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GradientFieldSimilarity</name>
      <anchorfile>classmirtk_1_1GradientFieldSimilarity.html</anchorfile>
      <anchor>a52ba874b4f4ef05b2bd7b22dfb1d0985</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GradientFieldSimilarity</name>
      <anchorfile>classmirtk_1_1GradientFieldSimilarity.html</anchorfile>
      <anchor>ae7a311858b47fe3d15a785c5dcea8c23</anchor>
      <arglist>(const GradientFieldSimilarity &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>InitializeInput</name>
      <anchorfile>classmirtk_1_1GradientFieldSimilarity.html</anchorfile>
      <anchor>a946390970241b6a713ce08867d375ed3</anchor>
      <arglist>(const ImageAttributes &amp;domain)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>MultiplyByImageHessian</name>
      <anchorfile>classmirtk_1_1GradientFieldSimilarity.html</anchorfile>
      <anchor>a16639e73227374b416f1e39488786765</anchor>
      <arglist>(const RegisteredImage *image, GradientImageType *gradient)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1GradientFieldSimilarity.html</anchorfile>
      <anchor>a6476dae87f30a6d18b4e9136eb1ce46e</anchor>
      <arglist>(const RegisteredImage *image, GradientImageType *np_gradient, double *gradient, double weight)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ReorientGradient</name>
      <anchorfile>classmirtk_1_1GradientFieldSimilarity.html</anchorfile>
      <anchor>a2b8fd2c8d0c750adcb6f720acff2048f</anchor>
      <arglist>(RegisteredImage *, bool=false)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1GradientFieldSimilarity.html</anchorfile>
      <anchor>a55684411379e06f5c19955bc97b078ff</anchor>
      <arglist>(bool=true)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~GradientFieldSimilarity</name>
      <anchorfile>classmirtk_1_1GradientFieldSimilarity.html</anchorfile>
      <anchor>ac5b57c6c69aa82961b33ed15be49cd4c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GradientImageFilter</name>
    <filename>classmirtk_1_1GradientImageFilter.html</filename>
    <templarg></templarg>
    <base>mirtk::ImageToImage</base>
    <member kind="enumeration">
      <type></type>
      <name>GradientType</name>
      <anchorfile>classmirtk_1_1GradientImageFilter.html</anchorfile>
      <anchor>a1224d78a14fc6f98091a0e5b2f969ff9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GradientImageFilter</name>
      <anchorfile>classmirtk_1_1GradientImageFilter.html</anchorfile>
      <anchor>ae43978b9bb79676a0abed6bd49891fd7</anchor>
      <arglist>(GradientType type=GRADIENT_MAGNITUDE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1GradientImageFilter.html</anchorfile>
      <anchor>a4312eba9e784264c678ac024a1d59368</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1GradientImageFilter.html</anchorfile>
      <anchor>ab481d41dafd9a1e62caeed4050509a29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GradientImageFilter.html</anchorfile>
      <anchor>aff5978864ff4680e039ff465951d9b05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GradientImageFilter.html</anchorfile>
      <anchor>af56034586856440ce29df8d2b25476ec</anchor>
      <arglist>(GradientType, Type)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GradientImageFilter.html</anchorfile>
      <anchor>a49015f04d1db31aeb3e590039d19d05a</anchor>
      <arglist>(bool, UseVoxelSize)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GradientImageFilter.html</anchorfile>
      <anchor>af842b0560824aaf5ca96bc2029ea3971</anchor>
      <arglist>(bool, UseOrientation)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GradientImageFilter.html</anchorfile>
      <anchor>a19f54ee75e4f2ebe1db203f643de8fff</anchor>
      <arglist>(double, PaddingValue)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::select::GreaterOrEqual</name>
    <filename>classmirtk_1_1data_1_1select_1_1GreaterOrEqual.html</filename>
    <base>mirtk::data::SelectionCriterium</base>
    <member kind="function">
      <type></type>
      <name>GreaterOrEqual</name>
      <anchorfile>classmirtk_1_1data_1_1select_1_1GreaterOrEqual.html</anchorfile>
      <anchor>af104fd3953601027e3acb0d54113bad6</anchor>
      <arglist>(double threshold)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Select</name>
      <anchorfile>classmirtk_1_1data_1_1select_1_1GreaterOrEqual.html</anchorfile>
      <anchor>a3b7f3f9d158983bacd97986b7210f2d4</anchor>
      <arglist>(double value) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::select::GreaterThan</name>
    <filename>classmirtk_1_1data_1_1select_1_1GreaterThan.html</filename>
    <base>mirtk::data::SelectionCriterium</base>
    <member kind="function">
      <type></type>
      <name>GreaterThan</name>
      <anchorfile>classmirtk_1_1data_1_1select_1_1GreaterThan.html</anchorfile>
      <anchor>a0bbcac8c8186db6a6677ae0ec1dd6de7</anchor>
      <arglist>(double threshold)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Select</name>
      <anchorfile>classmirtk_1_1data_1_1select_1_1GreaterThan.html</anchorfile>
      <anchor>a7de37ac97bd8a3afd0a3834626e8e8dd</anchor>
      <arglist>(double value) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::HarmonicSurfaceMapper</name>
    <filename>classmirtk_1_1HarmonicSurfaceMapper.html</filename>
    <base>mirtk::SymmetricWeightsSurfaceMapper</base>
    <member kind="function">
      <type></type>
      <name>HarmonicSurfaceMapper</name>
      <anchorfile>classmirtk_1_1HarmonicSurfaceMapper.html</anchorfile>
      <anchor>a5272582b35ad8f0203bfd94294ac1da7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HarmonicSurfaceMapper</name>
      <anchorfile>classmirtk_1_1HarmonicSurfaceMapper.html</anchorfile>
      <anchor>acdd393aabf169513274f2cf5e11bca3b</anchor>
      <arglist>(const HarmonicSurfaceMapper &amp;)</arglist>
    </member>
    <member kind="function">
      <type>HarmonicSurfaceMapper &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1HarmonicSurfaceMapper.html</anchorfile>
      <anchor>a3432b120fc11176cc124c2c051af4408</anchor>
      <arglist>(const HarmonicSurfaceMapper &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HarmonicSurfaceMapper</name>
      <anchorfile>classmirtk_1_1HarmonicSurfaceMapper.html</anchorfile>
      <anchor>a09f173a68f3d8abcad630e77d5b33b96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Weight</name>
      <anchorfile>classmirtk_1_1HarmonicSurfaceMapper.html</anchorfile>
      <anchor>adc20e84a2e89f3a031a08cdb5610b102</anchor>
      <arglist>(int i, int j) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::HarmonicTetrahedralMeshMapper</name>
    <filename>classmirtk_1_1HarmonicTetrahedralMeshMapper.html</filename>
    <base>mirtk::LinearTetrahedralMeshMapper</base>
    <member kind="function">
      <type></type>
      <name>HarmonicTetrahedralMeshMapper</name>
      <anchorfile>classmirtk_1_1HarmonicTetrahedralMeshMapper.html</anchorfile>
      <anchor>a67a011e9b531652fa9387d4e7d13ca59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HarmonicTetrahedralMeshMapper</name>
      <anchorfile>classmirtk_1_1HarmonicTetrahedralMeshMapper.html</anchorfile>
      <anchor>a6e17d002334b4eb30746e2e78f5b0d8e</anchor>
      <arglist>(const HarmonicTetrahedralMeshMapper &amp;)</arglist>
    </member>
    <member kind="function">
      <type>HarmonicTetrahedralMeshMapper &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1HarmonicTetrahedralMeshMapper.html</anchorfile>
      <anchor>a45ce77755d8c6965e79a47c6cbfa5617</anchor>
      <arglist>(const HarmonicTetrahedralMeshMapper &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HarmonicTetrahedralMeshMapper</name>
      <anchorfile>classmirtk_1_1HarmonicTetrahedralMeshMapper.html</anchorfile>
      <anchor>a91c72e9644bbbbfe7c42d3e8884118a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Matrix3x3</type>
      <name>GetWeight</name>
      <anchorfile>classmirtk_1_1HarmonicTetrahedralMeshMapper.html</anchorfile>
      <anchor>aa487c70fabf1c15e0d28a6fa3b249dd8</anchor>
      <arglist>(vtkIdType cellId, const double v0[3], const double v1[3], const double v2[3], const double v3[3], double volume) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; mirtk::EnergyMeasure &gt;</name>
    <filename>structstd_1_1hash_3_01mirtk_1_1EnergyMeasure_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; mirtk::Event &gt;</name>
    <filename>structstd_1_1hash_3_01mirtk_1_1Event_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; mirtk::OptimizationMethod &gt;</name>
    <filename>structstd_1_1hash_3_01mirtk_1_1OptimizationMethod_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>mirtk::HashImage</name>
    <filename>classmirtk_1_1HashImage.html</filename>
    <templarg>TVoxel</templarg>
    <base>mirtk::BaseImage</base>
    <member kind="typedef">
      <type>DataMap::const_iterator</type>
      <name>DataIterator</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a7dee02ee17ca97fe7627ca51852209f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UnorderedMap&lt; int, VoxelType &gt;</type>
      <name>DataMap</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>ae9d5ab819014b1090a16d894058cea53</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>voxel_info&lt; VoxelType &gt;::RealType</type>
      <name>RealType</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a9534860d1f770cf7624552802e15ece1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>voxel_info&lt; VoxelType &gt;::ScalarType</type>
      <name>ScalarType</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>aebf045f61db485711ba330748053b4c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TVoxel</type>
      <name>VoxelType</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a7935e46fcc401b39627708628f2cf0b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>af8bc9ec74431777b63e2d344752543af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BaseImage *</type>
      <name>Copy</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>ab82d058c3fe32226191f93f119d5a3a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a326c7d8402ce6395b3327406765c6fac</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a9aef943c01064dfec127ee951c4c974c</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>ab0b757bf2a6ff2dd4ebd9fb00bf062f7</anchor>
      <arglist>(const HashImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyTo</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a640f89786534933c2b904af251c8ffd8</anchor>
      <arglist>(GenericImage&lt; TVoxel2 &gt; &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXT</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>ad420afe84ddf849577f7d2c52d7ac43a</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXY</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a3794f5f1a7966ec3d73ffbd69d7bde00</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXZ</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a1158088643f1e8a7657e0cbb7e570545</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipYT</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>ac9e3d3dd73edd79fdbd6820489bcd879</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipYZ</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>aa8301eb97a10e7c9894bc09adc5e5d62</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipZT</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a7572caa4d48e12e81af19429e18137b3</anchor>
      <arglist>(bool modify_origin=false)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a000a58e14ba05420d40b6b07c302258c</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a4260d676cbe3b9a6bdddc0118ce13167</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>aa0cdaa2f915ae72aba004a4cd6d5d19e</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a8c4edd7e24e557e4ad4ef452d78c9a2f</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a68ba713e3992e8aa2e2c05a0c7529b96</anchor>
      <arglist>(Vector &amp;, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a2c278e1037df51f179867f0a903dd028</anchor>
      <arglist>(Vector &amp;, int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a0637afcbdd8a184afd375eb745f6c360</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a85aad102486464da65a2ed15311d4f45</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a98bb720d673715beb7949ac3fdc01aaa</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a6eff4f4932637a511814e3875c12bf11</anchor>
      <arglist>(int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a55fef8de03490ae130fdbd4fa6f26e5f</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>aa98fd485b7914230a0b2f8d337bf045b</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetDataType</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a875cd74cb85eb3066da02ae7d25d86e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetDataTypeMax</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>aab73b4518f2924e815cf8bb7965f02b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetDataTypeMin</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a334e6c0fa07273b45a10ab6af0421449</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetDataTypeSize</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>af6df762ce6c57f392074cac82c43980a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HashImage</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>ad7c40c6dfb465b69709a1eea3b029bbc</anchor>
      <arglist>(int, int=-1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>abc48486f77b3869a0b0fb27a593f905d</anchor>
      <arglist>(HashImage &amp;, int, int=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a66eb49073ffb66bef191e72b1f0ef6e4</anchor>
      <arglist>(BaseImage *&amp;, int, int=-1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a1096c85e770c3cf1d1763bea102a0aaf</anchor>
      <arglist>(VoxelType &amp;, VoxelType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>ad2828e05ba1da8cc2fbb51929c753cdb</anchor>
      <arglist>(VoxelType &amp;, VoxelType &amp;, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a1f867a5ae013bfd4d0762a005c53aa24</anchor>
      <arglist>(VoxelType *, VoxelType *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a802d1ec7f4b99c1a273d7fa00c2805fb</anchor>
      <arglist>(VoxelType *, VoxelType *, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMaxPad</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a383d775dd9c99dcfe78471d5c78cc9db</anchor>
      <arglist>(VoxelType *, VoxelType *, VoxelType) const</arglist>
    </member>
    <member kind="function">
      <type>HashImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a854f77c6b49114e318a849d4808a0c20</anchor>
      <arglist>(int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>af52c3df105077b6dbddd7d9a3a977582</anchor>
      <arglist>(HashImage &amp;, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a887fb15d3a9c11c14d3fc875b7cc2fda</anchor>
      <arglist>(BaseImage *&amp;, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>HashImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>af21eaf917c2eea9447d2fd85abd5fb04</anchor>
      <arglist>(int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>abc0680ed592582c318310cd421cdcaca</anchor>
      <arglist>(HashImage &amp;, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>ae6c6ddff6348797d5e73f6c7dadcab5f</anchor>
      <arglist>(BaseImage *&amp;, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>HashImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a7cd32c6437d7e7d9238b92c010c36048</anchor>
      <arglist>(int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a73cd534185103ea100ef339261d91d52</anchor>
      <arglist>(HashImage &amp;, int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a2db98ce42cf0b38f146d038aca39217f</anchor>
      <arglist>(BaseImage *&amp;, int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HashImage</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>ae7a5a977bce686799a9fb2f2868e2c98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HashImage</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a3ffe4afef3f883fc8ed1881bec2f6ccc</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HashImage</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a359a816128ee3510d015d6ee53230298</anchor>
      <arglist>(int, int, int=1, int=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HashImage</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a89377d95c2206e34f29b90774d65c2a8</anchor>
      <arglist>(int, int, int, int, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HashImage</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>aedbe1bc66611953485faa5a8b2a71481</anchor>
      <arglist>(const ImageAttributes &amp;, int=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HashImage</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a1ffffb5c390c11764f6153db8cf07d8c</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HashImage</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a5ec86660cf113f2c76692bc3ab5341f5</anchor>
      <arglist>(const HashImage&lt; VoxelType &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HashImage</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a313add660df3c5d59d18652dd2ef935b</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HashImage</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a3fde92bed3b411d063283a621f2adec5</anchor>
      <arglist>(const HashImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>ad579a94ee102dcd1669a8432f0faf034</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a24a14cadc91d20ee0abc1c19c8b392a2</anchor>
      <arglist>(const ImageAttributes &amp;, int=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a43462f874eeb335c2a6244c0f6033410</anchor>
      <arglist>(int, int, int, int, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a195077f714e37062bf18b634c5db5485</anchor>
      <arglist>(int, int, int=1, int=1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>N</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a2dc3816d8431f8b7501dfcb3473fec7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HashImage</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a9acab31e42a39cdc8cdff4cce4c6cdb7</anchor>
      <arglist>(const HashImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>HashImage</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>ab27b6a4d44a20143a5e9c44668cece42</anchor>
      <arglist>(ScalarType) const</arglist>
    </member>
    <member kind="function">
      <type>HashImage &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a5cadcdc7098a6a2ac407496f049b0437</anchor>
      <arglist>(ScalarType)</arglist>
    </member>
    <member kind="function">
      <type>HashImage &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a6f82f49f1f37be42b63781dee000669b</anchor>
      <arglist>(const HashImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>HashImage</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>ac769dd5495abc6960fc2e3bf666c61f6</anchor>
      <arglist>(const HashImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>HashImage</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a3cce371334ce29fdd81d5968f1e26b43</anchor>
      <arglist>(ScalarType) const</arglist>
    </member>
    <member kind="function">
      <type>HashImage &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a4519ccf61be6feff5d47e07a7c5bbce6</anchor>
      <arglist>(ScalarType)</arglist>
    </member>
    <member kind="function">
      <type>HashImage &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a103c2b56fb2bce6e7af101fc3fb4d4b3</anchor>
      <arglist>(const HashImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>HashImage</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>aef4905de478b7ea90cd81d7c069ce09b</anchor>
      <arglist>(const HashImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>HashImage</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a4d8cb93d01d4737942a204f23ad90d11</anchor>
      <arglist>(ScalarType) const</arglist>
    </member>
    <member kind="function">
      <type>HashImage &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>af3c2a480d755d934a2ba7eee3217b2d7</anchor>
      <arglist>(ScalarType)</arglist>
    </member>
    <member kind="function">
      <type>HashImage &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a8447450f4d29ef1d33c8865dfe042086</anchor>
      <arglist>(const HashImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>HashImage</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a88ec6f0440087be1f80c9b9387e27ec9</anchor>
      <arglist>(const HashImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>HashImage</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>ab1b59cd7aea4f2d6b7f2e453fbe19cfc</anchor>
      <arglist>(ScalarType) const</arglist>
    </member>
    <member kind="function">
      <type>HashImage &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>ac157366ca4fd063baacaf7b0fec1753f</anchor>
      <arglist>(ScalarType)</arglist>
    </member>
    <member kind="function">
      <type>HashImage &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>ad241ccb764e69d563c752bb02ee32501</anchor>
      <arglist>(const HashImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>HashImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>acac26113c01e1b50374382b814f98412</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>HashImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a70df3975e453e0741195c6517612e773</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>HashImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a2c959576d12fcbebd9e76056332081e2</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>HashImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a721404fb5d2a1e207da7120723bfea1d</anchor>
      <arglist>(const HashImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>HashImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>ae4eca1b97303b16c4b5304fecd55caa8</anchor>
      <arglist>(const HashImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>adae32cb37d43c2ec294a3cf95604234c</anchor>
      <arglist>(const HashImage&lt; TVoxel2 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a60f08a991cacedeac74edc5b9edae2c2</anchor>
      <arglist>(int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a82f80c4678768a5a68b6b1f2d02fe810</anchor>
      <arglist>(int, int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>ac3f5a0679ce9929a5246db7da0d9d8dd</anchor>
      <arglist>(int, int, int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a7f4c8be794f37b304586d8ae90347046</anchor>
      <arglist>(int, int, int, int, VoxelType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a1733d90fc160176142aee0d423d55ac8</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>af2aaf313351987d91a3a98307e57b33a</anchor>
      <arglist>(int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>ad784198913f49d98a9ee5961036041da</anchor>
      <arglist>(int, int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a0b1befe7b906274b184bb1443ec3a13a</anchor>
      <arglist>(int, int, int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a52b97ee360b8d0878b74b6e8dabcf427</anchor>
      <arglist>(int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a28c9d48fb9d86137e5485cb209c832be</anchor>
      <arglist>(int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a2e4ab5d33037100eb26338882363f13c</anchor>
      <arglist>(int, int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a3a5151bf051654bebbd69827523728b1</anchor>
      <arglist>(int, int, int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutBackgroundValueAsDouble</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a60608ab14961f97319e19fe63745834c</anchor>
      <arglist>(double, bool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutBackgroundValueAsDouble</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>aa5bf1f8eb46440151396a85491163b72</anchor>
      <arglist>(double value, bool threshold)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutBackgroundValueAsDouble</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>aead21343ed21759a69e2f0843c54c7c6</anchor>
      <arglist>(double value, bool threshold)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutMinMax</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>ad0fd47f9311de8f9f85c3bdfd4c0fd9a</anchor>
      <arglist>(VoxelType, VoxelType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a69fb7956f95d1082615e1c9be7c08c87</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a94773f12d7fb761be1d441b511853b3c</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>ae2024e843f89f62344ec6b623de9d765</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectT</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a2c9df096b958b3c897bc823d4e889ddb</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectX</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a0d7d094acd75b1d538daaacd59075367</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectY</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>ac38def86753e196d784d49b1606c1e42</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectZ</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a46c7201c8ee24de51ac948b709f92bf1</anchor>
      <arglist>(bool modify_axes=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXT</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a794c91362d38905b775c2f02e7ad2d97</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXY</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>aa5a6b59e2cf97b4a972a26f45224c082</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapXZ</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>ae000e3df67a4268c475a133f5f953dfa</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapYT</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a734be3ae01c6dc29004e7a45111ed49b</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapYZ</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a0de60c3f3fe6ab9a8937612a4466dbe8</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SwapZT</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a7f80d1658433a398962e594cacbb614f</anchor>
      <arglist>(bool modify_axes=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>VoxelToIndex</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a2cf9716aafe579db4e9278174a114f0e</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>af4fb64333fd2e38ddad68852dc2a6e83</anchor>
      <arglist>(const char *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a86cc1b0a7c39df3cf27ee988309b7678</anchor>
      <arglist>(const char *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>ab5638801c914fede306afba1916394c0</anchor>
      <arglist>(const char *) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HashImage</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a91da625b0297966ff589dc31a3ad26ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>VoxelType</type>
      <name>Access</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>ae8c0df61e728fbff1f2c2024eb8f8b86</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AllocateImage</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a890f705c5c30101151c7a576f9d933ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a0eab0c52dd139ec2b09bd356db9d6b3e</anchor>
      <arglist>(DataMap, Data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a17e6338635ae4a2c8ae59cfedcd36c3b</anchor>
      <arglist>(VoxelType, DefaultValue)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>deformable::neonatal_cortex::Hemisphere</name>
    <filename>classdeformable_1_1neonatal__cortex_1_1Hemisphere.html</filename>
  </compound>
  <compound kind="class">
    <name>mirtk::HessianImageFilter</name>
    <filename>classmirtk_1_1HessianImageFilter.html</filename>
    <templarg></templarg>
    <base>mirtk::ImageToImage</base>
    <member kind="enumeration">
      <type></type>
      <name>OutputType</name>
      <anchorfile>classmirtk_1_1HessianImageFilter.html</anchorfile>
      <anchor>a78e0192a1807c57453f99accc24d9ddf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HessianImageFilter</name>
      <anchorfile>classmirtk_1_1HessianImageFilter.html</anchorfile>
      <anchor>a9c875fe3828dac934d18af424c930723</anchor>
      <arglist>(OutputType type=HESSIAN_MATRIX)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1HessianImageFilter.html</anchorfile>
      <anchor>a67189f0b8b8839bf6852efd256d35816</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1HessianImageFilter.html</anchorfile>
      <anchor>accc1368098c4c1dcfe286b31abf95ffb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1HessianImageFilter.html</anchorfile>
      <anchor>adc7c9a313a73d828e2767262f8408f5b</anchor>
      <arglist>(bool, UseVoxelSize)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1HessianImageFilter.html</anchorfile>
      <anchor>afba0246116a2d160f9ecc14871a3788c</anchor>
      <arglist>(bool, UseOrientation)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1HessianImageFilter.html</anchorfile>
      <anchor>aae4e4cbe125e82d04d16a4edf11d635c</anchor>
      <arglist>(double, PaddingValue)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1HessianImageFilter.html</anchorfile>
      <anchor>a6a512ee23741b9ff07f5d8c0fe237a34</anchor>
      <arglist>(OutputType, Type)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::Histogram1D</name>
    <filename>classmirtk_1_1Histogram1D.html</filename>
    <templarg>HistogramType</templarg>
    <base>mirtk::Object</base>
    <member kind="function">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>ae7d4ff627cfde4dd1992aced2800d414</anchor>
      <arglist>(int, HistogramType=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddSample</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>ae9eef7e661ac20d387443540b76e7398</anchor>
      <arglist>(double, HistogramType=1)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>BinToCDF</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a9fe55934b8c553624b4cdb04447946aa</anchor>
      <arglist>(int bin) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>BinToPDF</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a1bd94d806d69111016073e498e1b6752</anchor>
      <arglist>(int bin) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>BinToVal</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>ab4e44df8cb935ae29e8fd2398248d08a</anchor>
      <arglist>(int bin) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>CDFToBin</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a6aa92f16a48b5ef8c6d29a1930aa781f</anchor>
      <arglist>(double p) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>CDFToVal</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a9b23cbc1b38d9cb83c5083773bc74f63</anchor>
      <arglist>(double p) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Delete</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a04488126798c180276ffa7ab8608b0e6</anchor>
      <arglist>(int, HistogramType=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DelSample</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a7178a3a0dd4156a30aca6403ca075347</anchor>
      <arglist>(double, HistogramType=1)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Entropy</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a8f990aa662ba63787513de1169673258</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetMax</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>ab85ea5efcac4bf1b0f1f10a61471f7e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetMin</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a8b0b38609b6396df1db1616a0bf0901b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetWidth</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a25672fcc10d793f46f250c902f8634c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Histogram1D</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>ad3b17b7b3def40081ecd5597b9430fd7</anchor>
      <arglist>(const Histogram1D &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Histogram1D</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>af6296e3f8300fa95b1ca3c0f08194937</anchor>
      <arglist>(int nbins=256)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Histogram1D</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a42f5e859d3437a9b5cd3707d66ad0f90</anchor>
      <arglist>(double min, double max, double width)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Histogram1D</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a29aded97602dc37c05cdec3e37d5892d</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Log</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a926826fae62145b6bca4c1d23f8c8fbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Max</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a5362098dbe47ededdbeedd9162d6d3f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Max</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a9a253e5796e2a6436b0d8ec3e4a0599e</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Mean</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a86acd4195f0f0d790543ef190ed0248a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Min</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a422b57cc584932d241008ef6dbc34b0e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Min</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a5aeb41c0cc8fd2e66c7fb95710ebd0ef</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Mode</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>ab3caa607fc23048e3e0a57d61b3730b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; double &gt;</type>
      <name>Modes</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a17ed1901ab49a179e19c7821c82f3a5d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfBins</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a293a8832c0f72b24705d80666dc9c632</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NumberOfBins</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a8216ad519694ed6e89c218eef1c190d2</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>HistogramType</type>
      <name>NumberOfSamples</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>ac7f69702d542846aa42e14cbdee00d1b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NumberOfSamples</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a3decc94e34b231bffb4fa97a0d04882f</anchor>
      <arglist>(HistogramType)</arglist>
    </member>
    <member kind="function">
      <type>HistogramType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a984112b09a927c9080a9d5751f9d4b9d</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const HistogramType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a17675dffda29509a36b4f565365bf478</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>Histogram1D &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a98f19cfe32db9784e8bd3f16d1d071a7</anchor>
      <arglist>(const Histogram1D &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a40a1181d2be9e0961a1b5492271235a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutMax</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>ab0871ef56abddbacb09103d3195dbcc1</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutMin</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a726febf4bd634476297519a09f2aea39</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutNumberOfBins</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a2973cba1a2169a7c3bd464f775767122</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutWidth</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>af5c744fffc6223b3940dca697604ac43</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>HistogramType *</type>
      <name>RawPointer</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a1a05a515f3438cbb3e4ce0a1616f29d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const HistogramType *</type>
      <name>RawPointer</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a792bbd46d660475cf794403ebee5a796</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>ac71dbcbc731d60ca1a9b35bf764e5e3d</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reset</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a865280e77d49be504ecf64f9c88278dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Smooth</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a86e4e0c2a65db1b0c3f8060a73aaaf01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>StandardDeviation</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>ae66913ef27a64920f61212c3d274dae4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ValToBin</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a76c325648dfa51ba1e05f5cf3aa99c02</anchor>
      <arglist>(double val) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ValToCDF</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>aabc82f90396847cad6ca8d0134fcadea</anchor>
      <arglist>(double val) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ValToPDF</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>abe620478248ccf099a58f88e8156e233</anchor>
      <arglist>(double val) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ValToRange</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>ae1f62a9ebc155ed11c44faeff0e7e87f</anchor>
      <arglist>(double val) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Variance</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>acc3309c6839098f777abe5f2925d9847</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a5edd96508cf55668172aa34cbe795359</anchor>
      <arglist>(const char *) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Histogram1D</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>adc7de4a38bd98db09fe9df346e4e525d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HistogramType *</type>
      <name>_bins</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>ae28dc599ba12e3cad64e83802c2c3d36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_max</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>afa78a8d14e53593e8b2a240f4e782e19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_min</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a7991365fe94e35d07b36d18feaa8ddbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_nbins</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a14b6594bf773d37fe1d79801577a3d85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HistogramType</type>
      <name>_nsamp</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a9f474c7e48cb88aa5e9ed137e0390006</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_width</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a46ea664644bb8072476f8717e6b182df</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Histogram1D&lt; VoxelType &gt;</name>
    <filename>classmirtk_1_1Histogram1D.html</filename>
    <base>mirtk::Object</base>
    <member kind="function">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>ae7d4ff627cfde4dd1992aced2800d414</anchor>
      <arglist>(int, VoxelType=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddSample</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>ae9eef7e661ac20d387443540b76e7398</anchor>
      <arglist>(double, VoxelType=1)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>BinToCDF</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a9fe55934b8c553624b4cdb04447946aa</anchor>
      <arglist>(int bin) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>BinToPDF</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a1bd94d806d69111016073e498e1b6752</anchor>
      <arglist>(int bin) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>BinToVal</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>ab4e44df8cb935ae29e8fd2398248d08a</anchor>
      <arglist>(int bin) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>CDFToBin</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a6aa92f16a48b5ef8c6d29a1930aa781f</anchor>
      <arglist>(double p) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>CDFToVal</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a9b23cbc1b38d9cb83c5083773bc74f63</anchor>
      <arglist>(double p) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Delete</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a04488126798c180276ffa7ab8608b0e6</anchor>
      <arglist>(int, VoxelType=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DelSample</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a7178a3a0dd4156a30aca6403ca075347</anchor>
      <arglist>(double, VoxelType=1)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Entropy</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a8f990aa662ba63787513de1169673258</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetMax</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>ab85ea5efcac4bf1b0f1f10a61471f7e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetMin</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a8b0b38609b6396df1db1616a0bf0901b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetWidth</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a25672fcc10d793f46f250c902f8634c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Histogram1D</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>ad3b17b7b3def40081ecd5597b9430fd7</anchor>
      <arglist>(const Histogram1D &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Histogram1D</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>af6296e3f8300fa95b1ca3c0f08194937</anchor>
      <arglist>(int nbins=256)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Histogram1D</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a42f5e859d3437a9b5cd3707d66ad0f90</anchor>
      <arglist>(double min, double max, double width)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Histogram1D</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a29aded97602dc37c05cdec3e37d5892d</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Log</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a926826fae62145b6bca4c1d23f8c8fbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Max</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a5362098dbe47ededdbeedd9162d6d3f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Max</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a9a253e5796e2a6436b0d8ec3e4a0599e</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Mean</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a86acd4195f0f0d790543ef190ed0248a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Min</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a422b57cc584932d241008ef6dbc34b0e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Min</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a5aeb41c0cc8fd2e66c7fb95710ebd0ef</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Mode</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>ab3caa607fc23048e3e0a57d61b3730b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; double &gt;</type>
      <name>Modes</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a17ed1901ab49a179e19c7821c82f3a5d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfBins</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a293a8832c0f72b24705d80666dc9c632</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NumberOfBins</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a8216ad519694ed6e89c218eef1c190d2</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>NumberOfSamples</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>ac7f69702d542846aa42e14cbdee00d1b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NumberOfSamples</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a3decc94e34b231bffb4fa97a0d04882f</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a984112b09a927c9080a9d5751f9d4b9d</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a17675dffda29509a36b4f565365bf478</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>Histogram1D &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a98f19cfe32db9784e8bd3f16d1d071a7</anchor>
      <arglist>(const Histogram1D &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a40a1181d2be9e0961a1b5492271235a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutMax</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>ab0871ef56abddbacb09103d3195dbcc1</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutMin</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a726febf4bd634476297519a09f2aea39</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutNumberOfBins</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a2973cba1a2169a7c3bd464f775767122</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutWidth</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>af5c744fffc6223b3940dca697604ac43</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>RawPointer</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a1a05a515f3438cbb3e4ce0a1616f29d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>RawPointer</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a792bbd46d660475cf794403ebee5a796</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>ac71dbcbc731d60ca1a9b35bf764e5e3d</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reset</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a865280e77d49be504ecf64f9c88278dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Smooth</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a86e4e0c2a65db1b0c3f8060a73aaaf01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>StandardDeviation</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>ae66913ef27a64920f61212c3d274dae4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ValToBin</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a76c325648dfa51ba1e05f5cf3aa99c02</anchor>
      <arglist>(double val) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ValToCDF</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>aabc82f90396847cad6ca8d0134fcadea</anchor>
      <arglist>(double val) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ValToPDF</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>abe620478248ccf099a58f88e8156e233</anchor>
      <arglist>(double val) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ValToRange</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>ae1f62a9ebc155ed11c44faeff0e7e87f</anchor>
      <arglist>(double val) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Variance</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>acc3309c6839098f777abe5f2925d9847</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a5edd96508cf55668172aa34cbe795359</anchor>
      <arglist>(const char *) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Histogram1D</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>adc7de4a38bd98db09fe9df346e4e525d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VoxelType *</type>
      <name>_bins</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>ae28dc599ba12e3cad64e83802c2c3d36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_max</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>afa78a8d14e53593e8b2a240f4e782e19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_min</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a7991365fe94e35d07b36d18feaa8ddbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_nbins</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a14b6594bf773d37fe1d79801577a3d85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VoxelType</type>
      <name>_nsamp</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a9f474c7e48cb88aa5e9ed137e0390006</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_width</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a46ea664644bb8072476f8717e6b182df</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::Histogram2D</name>
    <filename>classmirtk_1_1Histogram2D.html</filename>
    <templarg>HistogramType</templarg>
    <base>mirtk::Object</base>
    <member kind="function">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a408a8eacbd3de310891f5820b1a5e2a1</anchor>
      <arglist>(int, int, HistogramType=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddSample</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a4b4c546a9d963e9b8078904b4945a929</anchor>
      <arglist>(double, double, HistogramType=1)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>BinToValX</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a178c0754566e22af769cdd18c63bfc33</anchor>
      <arglist>(int bin) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>BinToValY</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>af5c0c3242012203d2bd63a424fe713d9</anchor>
      <arglist>(int bin) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ConditionalMeanXY</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>af328467c7f0dc708627ab5f1e50b977d</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ConditionalMeanYX</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>ad7f156e0351c713f00be27cf94371a12</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ConditionalProbabilityXY</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a0701af44860e665c851d62a36a7bcc4b</anchor>
      <arglist>(int, int) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ConditionalProbabilityYX</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a6e30df43199ebf39f8b44c9e70c45863</anchor>
      <arglist>(int, int) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ConditionalVarianceXY</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>af0141936a55a1054b673e027ab2e6724</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ConditionalVarianceYX</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>ab99dacc2275f13b4f20032c6309c7036</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>CorrelationRatioXY</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a325ed4c2af4be1528ce70e5d7c6d4aab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>CorrelationRatioYX</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>adf1fccb8b4173fe33dc6c417d845e6c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Covariance</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>aef8a69a0305d61658e5995c07d4f5b75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>CrossCorrelation</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>aabfd77d6c8fe6ea89659e224d2cebc86</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Delete</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>aef749128863860b9c386269c1c417993</anchor>
      <arglist>(int, int, HistogramType=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DelSample</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>aa821b49662fe5a5bf8267bd9f216d7fe</anchor>
      <arglist>(double, double, HistogramType=1)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>EntropyX</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a25cee0f7e22a1f9d8503bfee16741b3e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>EntropyY</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>aada7f2d8d1e9af95d993983bdbedbe58</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMax</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a468642fb1a9000544ece703d6c7262b6</anchor>
      <arglist>(double *, double *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMax</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a34e99022aaa506625bb0419f7aa7d51c</anchor>
      <arglist>(double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMin</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>ac0f363d2e401965e3de60402df6548bd</anchor>
      <arglist>(double *, double *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMin</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>afc8c3b55c401df1c372e4916ccafcd2a</anchor>
      <arglist>(double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetNumberOfBins</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>aebd430b0edd6fca7dccaa04ebf58c707</anchor>
      <arglist>(int *, int *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetNumberOfBins</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a68cb6fc6a808e2e307c3f51d1e1dbd78</anchor>
      <arglist>(int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetWidth</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>ad9d738f75db597fa23b8e4e1be77c6f1</anchor>
      <arglist>(double *, double *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetWidth</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>adf5010586c890c2294e6a3649770bf21</anchor>
      <arglist>(double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Histogram2D</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>ad9d4c5f8a90e2549e9df4ef5e4b275a3</anchor>
      <arglist>(const Histogram2D &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Histogram2D</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a70d8b61d9293c0241e23ffd91a6309a9</anchor>
      <arglist>(int nbins_x=256, int nbins_y=256)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Histogram2D</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>aaf3edb92adce245549a71ae0fdb9b765</anchor>
      <arglist>(double min_x, double max_x, double width_x, double min_y, double max_y, double width_y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>HistogramX</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>af503711c30914760b254186f8cecc058</anchor>
      <arglist>(Histogram1D&lt; HistogramType &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Histogram1D&lt; HistogramType &gt;</type>
      <name>HistogramX</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a0cee374bef83cbb943714ff6b6b570ac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>HistogramY</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>ae48586df9a334a77b6d38ba6cbee69c8</anchor>
      <arglist>(Histogram1D&lt; HistogramType &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Histogram1D&lt; HistogramType &gt;</type>
      <name>HistogramY</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a6c5d833e1219509906f16c775aaca97d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a1e78efe5df3f842df8e1dfcfdd9f7b6f</anchor>
      <arglist>(double min_x, double max_x, double width_x, double min_y, double max_y, double width_y)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>JointEntropy</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>ac327dfd6d6f98260aeec1e7f2cb2b954</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>JointProbability</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>acd22cf3eef20461888b97c30215d76f4</anchor>
      <arglist>(int, int) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Kappa</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a28426ceb94a253c0bdf7336df6382213</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>LabelConsistency</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a79fad833ecc0a4e2710a766988dc2c37</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Log</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a65d46b705c2bfe94282c0ab65437e08f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>MarginalProbabilityX</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a2422ba105b58b31bd610e55e8faf946d</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>MarginalProbabilityY</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>aaac8c0ff22534267580d821fa036b740</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>MaxX</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a2d466059e0f1656e6b3b8eb6c2932ea8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>MaxY</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>ac8efd2ab5899768adc6f34683be0aa5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>MeanX</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>aeff46dbd8ff4eb5aeb948b65f1a9cea4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>MeanY</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a9be7a68d2a24d5ab34ca39e5f9f38272</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>MinX</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>aa131910aefcdd340253de9b9972aa1dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>MinY</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>ae503639b39a8d1c8196f179ff50ca20a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>MutualInformation</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>acd63b0620549e1bf9eea25ffc09ad4c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>NormalizedMutualInformation</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a34315bfb9f36aa7d3469f16ceb98ab18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfBins</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a2547832326bbe74313cd7112d0d8f69d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfBinsX</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>aa6c61618888952d42e1d96d9e78e0b52</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfBinsY</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a365792fcdaa415d88381723e9084c245</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HistogramType</type>
      <name>NumberOfSamples</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a5700fb830f0e4b848b48d444f7e57936</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NumberOfSamples</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>ae2b6986f1cc3493643c145a8005621aa</anchor>
      <arglist>(HistogramType)</arglist>
    </member>
    <member kind="function">
      <type>HistogramType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>abdfa55ab84a78b6845d9f429128a9037</anchor>
      <arglist>(int, int)</arglist>
    </member>
    <member kind="function">
      <type>const HistogramType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>aac237477eec590ff209120d54804e8d0</anchor>
      <arglist>(int, int) const</arglist>
    </member>
    <member kind="function">
      <type>Histogram2D &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>aa43b20fd61193476c3c0061c79019630</anchor>
      <arglist>(const Histogram2D &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a4166482115e208fb535fd7f1a1457fa2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutMax</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>af80b3d59bfe5876c982ccd1292bc646a</anchor>
      <arglist>(double, double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutMin</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a6d13cc3fb4e2b46150e4be19807da4bb</anchor>
      <arglist>(double, double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutNumberOfBins</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a5fdb2c74373b9cb280358ac4d2607dff</anchor>
      <arglist>(int, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutNumberOfBinsX</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>ab195e933d2404283d0dbb18c8f677c2d</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutNumberOfBinsY</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a3e98fd565a06c77e13a89f86c7d939e2</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutWidth</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a777bf3d9523c9c69ae7b9f504ed82f43</anchor>
      <arglist>(double, double)</arglist>
    </member>
    <member kind="function">
      <type>HistogramType *</type>
      <name>RawPointer</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a93a145ba16d70b0ba874ff4a74adf3cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const HistogramType *</type>
      <name>RawPointer</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a6a6b4f15b9ff670dabe6d984f69bf752</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a378b5c2d7b4f38fd3be8c5e9c687f8af</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reset</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a00bd258ad14092f01d164b2128bce213</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reset</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a56027586387f7070ad2859f68ed14e13</anchor>
      <arglist>(const Histogram2D &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Smooth</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a8e55a6364e17cbb8161c4dcfa37e0afe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Histogram2D&lt; HistogramType &gt;</type>
      <name>Smoothed</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a1549752ef758d545dd440b29d057be2c</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>StandardDeviationX</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a7028489cb515f8cc0bcc137b2e54743c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>StandardDeviationY</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a36535b3f100e41c22a1b62f378f6b241</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SumsOfSquaredDifferences</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>ab8f6d096fb711cc72c2456771cc5f81a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Histogram2D&lt; HistogramType &gt; &amp;</type>
      <name>Transpose</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a829dac95ad854da440fd64d02dd99ff5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Histogram2D&lt; HistogramType &gt;</type>
      <name>Transposed</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>ac2c05240ebc84cd183fab442544bac0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ValToBinX</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>acdca523e6e6955e3ff07fd3ff3d71cec</anchor>
      <arglist>(double val) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ValToBinY</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a7903d4d8b767f6c1277661249237dea3</anchor>
      <arglist>(double val) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>VarianceX</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>ad4285decd3b04f0d46c8ef7717750639</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>VarianceY</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>affbfd99e9a8f99657cb16d84d58b55ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>WidthX</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>af3c6c2b78a46d781569bc5d59d929070</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>WidthY</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a0608b10ba2eda3991f8f3ffb9eefd9a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a879fda7c7666847c7f91e7e7fc1b38ae</anchor>
      <arglist>(const char *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WriteAsImage</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a393e7fe377a40c7d88e1f35b999cbc65</anchor>
      <arglist>(const char *) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Histogram2D</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a8726c5cbffed1df549517464cdcfd582</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::HistogramImageSimilarity</name>
    <filename>classmirtk_1_1HistogramImageSimilarity.html</filename>
    <base>mirtk::ImageSimilarity</base>
    <member kind="typedef">
      <type>double</type>
      <name>BinType</name>
      <anchorfile>classmirtk_1_1HistogramImageSimilarity.html</anchorfile>
      <anchor>acbe8760829ac021f6f461d880180fc22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Histogram2D&lt; BinType &gt;</type>
      <name>JointHistogramType</name>
      <anchorfile>classmirtk_1_1HistogramImageSimilarity.html</anchorfile>
      <anchor>afeef6715af31811e858b3bf06229c28d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyAttributes</name>
      <anchorfile>classmirtk_1_1HistogramImageSimilarity.html</anchorfile>
      <anchor>aa62fc857b2b61ca93c929ff716ce0e75</anchor>
      <arglist>(const HistogramImageSimilarity &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Exclude</name>
      <anchorfile>classmirtk_1_1HistogramImageSimilarity.html</anchorfile>
      <anchor>ab759d9af3a9a8ce68f054ee8186a00d6</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Include</name>
      <anchorfile>classmirtk_1_1HistogramImageSimilarity.html</anchorfile>
      <anchor>aa5407fa2fa3c9b0cef260dc7009cf1e7</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1HistogramImageSimilarity.html</anchorfile>
      <anchor>a6d0a55d9fc1c20809c1ed770b25919c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1HistogramImageSimilarity.html</anchorfile>
      <anchor>a5c249ecac105b9eb2424d4683e167e66</anchor>
      <arglist>(JointHistogramType, Histogram)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkLooseComponentMacro</name>
      <anchorfile>classmirtk_1_1HistogramImageSimilarity.html</anchorfile>
      <anchor>a0fb37de7f182f11b8090613a84e4191a</anchor>
      <arglist>(JointHistogramType, Samples)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1HistogramImageSimilarity.html</anchorfile>
      <anchor>ac8eb28ab8dcb8808cb79913409d6eca3</anchor>
      <arglist>(bool, UseParzenWindow)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1HistogramImageSimilarity.html</anchorfile>
      <anchor>a79193b28b304d3a028e1ca80cc3d40ce</anchor>
      <arglist>(bool, PadHistogram)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1HistogramImageSimilarity.html</anchorfile>
      <anchor>aacb0b947fb69b708f5f627fe3ff16b57</anchor>
      <arglist>(int, NumberOfTargetBins)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1HistogramImageSimilarity.html</anchorfile>
      <anchor>a453715629ad508c98d3c773479b606bb</anchor>
      <arglist>(int, NumberOfSourceBins)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1HistogramImageSimilarity.html</anchorfile>
      <anchor>af69699d6e0fecb6dce106c71f0bf6e4f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1HistogramImageSimilarity.html</anchorfile>
      <anchor>a97ab6257f0315cf50e6ecf13f9e6ab58</anchor>
      <arglist>(Indent=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1HistogramImageSimilarity.html</anchorfile>
      <anchor>a2e3d2a42666964f64b6b45b8905648a7</anchor>
      <arglist>(bool=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteDataSets</name>
      <anchorfile>classmirtk_1_1HistogramImageSimilarity.html</anchorfile>
      <anchor>aaaebaad17a9cf55e669c573518fe643a</anchor>
      <arglist>(const char *, const char *, bool=true) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>DefaultNumberOfBins</name>
      <anchorfile>classmirtk_1_1HistogramImageSimilarity.html</anchorfile>
      <anchor>af97f42d223e209e559cc2b36cd414299</anchor>
      <arglist>(const BaseImage *image, double min_intensity=NaN, double max_intensity=NaN)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>HistogramImageSimilarity</name>
      <anchorfile>classmirtk_1_1HistogramImageSimilarity.html</anchorfile>
      <anchor>aa61c9fbe838c3a463849fe9593d18a98</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>HistogramImageSimilarity</name>
      <anchorfile>classmirtk_1_1HistogramImageSimilarity.html</anchorfile>
      <anchor>a025587d238b67a0e650c9af0d14996a8</anchor>
      <arglist>(const HistogramImageSimilarity &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>HistogramImageSimilarity &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1HistogramImageSimilarity.html</anchorfile>
      <anchor>a6fafa0f931dc87e1fe5c7ccf1f5266d4</anchor>
      <arglist>(const HistogramImageSimilarity &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithPrefix</name>
      <anchorfile>classmirtk_1_1HistogramImageSimilarity.html</anchorfile>
      <anchor>ac74b96a7a1f4bee676bbc3c09b485031</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>UpdateHistogram</name>
      <anchorfile>classmirtk_1_1HistogramImageSimilarity.html</anchorfile>
      <anchor>ae324afd7d63bbd08b6c24289a7c01edf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~HistogramImageSimilarity</name>
      <anchorfile>classmirtk_1_1HistogramImageSimilarity.html</anchorfile>
      <anchor>a0e5d52539a98ecdd65ffff7c4c3f94a1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::HistogramMatching</name>
    <filename>classmirtk_1_1HistogramMatching.html</filename>
    <templarg></templarg>
    <base>mirtk::ImageToImage</base>
    <member kind="function">
      <type></type>
      <name>HistogramMatching</name>
      <anchorfile>classmirtk_1_1HistogramMatching.html</anchorfile>
      <anchor>afbea1953d834d35591fe41d54c345d4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1HistogramMatching.html</anchorfile>
      <anchor>a4733e662b8465395980d0298cd768daf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1HistogramMatching.html</anchorfile>
      <anchor>a69723cd429b3cd89264aea3e7fcad440</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::HomogeneousTransformation</name>
    <filename>classmirtk_1_1HomogeneousTransformation.html</filename>
    <base>mirtk::Transformation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Add</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>a03aa2b859c6517d4f70b1a157b55e545</anchor>
      <arglist>(const DOFValue *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Approximate</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>a54bce08f57b0392a6420e010e622e31a</anchor>
      <arglist>(const ImageAttributes &amp;, double *, double *, double *, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Approximate</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>a84e20489065aa33f451cc9367a463b7a</anchor>
      <arglist>(const double *, const double *, const double *, double *, double *, double *, int, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Approximate</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>aea5936d8ba67293af55f2ab398305a66</anchor>
      <arglist>(const double *, const double *, const double *, const double *, double *, double *, double *, int, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Approximate</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>a68653aab8be7cc32097081aa81ebc8f0</anchor>
      <arglist>(const Matrix &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApproximateAsNew</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>a86daf8e502327b7b1d99cdc67f0c70dc</anchor>
      <arglist>(const Matrix &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFs</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>a963e21227d42eee4ce6614d902c57102</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>a688720f544d8c64197e776fadae161e0</anchor>
      <arglist>(const Transformation *)</arglist>
    </member>
    <member kind="function">
      <type>const Matrix &amp;</type>
      <name>GetInverseMatrix</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>af8beb9ef4130f6a4fd967ca1bfbebc6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Matrix &amp;</type>
      <name>GetMatrix</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>ab382d4a7c1baa44a451357d92c19198e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GlobalInverse</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>a35c4852237242890efb98938981dd8c1</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GlobalJacobian</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>aabba8a516d18ea0e9686f22bd708ac09</anchor>
      <arglist>(Matrix &amp;, double, double, double, double=0, double=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GlobalTransform</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>ac0e194d28f312a1da58fb2ca6c9b40b3</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=-1) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HomogeneousTransformation</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>a6316de7210398cd3cd27ef2003b4299f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HomogeneousTransformation</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>a278e2372896ca5700854410140cd926f</anchor>
      <arglist>(const Matrix &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HomogeneousTransformation</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>aa919805d221f5475b448eae9752d5300</anchor>
      <arglist>(const HomogeneousTransformation &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Inverse</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>a7a282136cb3b324ca6a8a498c588a936</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=-1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Invert</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>a3dad4fa26e93c36526c81e45fe2821ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIdentity</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>a935ccc1f95bb9b027224418e22e6a76d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Jacobian</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>a4bc284af75b94316525bee6c19345002</anchor>
      <arglist>(Matrix &amp;, double, double, double, double=0, double=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LocalInverse</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>ab102d8cd3d05896fd9e234b5ccc82ccc</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalJacobian</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>affe1c32ccf503e1fa63ec6bf3d636071</anchor>
      <arglist>(Matrix &amp;, double, double, double, double=0, double=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalTransform</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>a80ca15f0b8e6536ad96d9ad681094f30</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>a131f1089291989a781c33bddb00c1ffb</anchor>
      <arglist>(ostream &amp;, Indent=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>a94403d334729e8e87575f503cb508617</anchor>
      <arglist>(int, DOFValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>ad34847f39a5bffa420104abfae7065fd</anchor>
      <arglist>(const DOFValue *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutMatrix</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>a9a42bc9a3d8d9149cc19b4e298831b61</anchor>
      <arglist>(const Matrix &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Reset</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>a045302b9e0b13aae1df378c772936fab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Transform</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>ab9dbde06c1086d29302789fa06e8982f</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>aaad98ebc4ac58205285875a3d37f6c57</anchor>
      <arglist>(const DOFValue *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UpdateParameter</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>ae6c92905eb1eb88e2b3810ec91b6067c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HomogeneousTransformation</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>a79f05e42463b63cb7d90b1e49b8571d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>HomogeneousTransformation</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>a8a012c6afa909368bc41acdccb61ab46</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>HomogeneousTransformation</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>ac72b4148e68d95d08cd701a95405459b</anchor>
      <arglist>(const HomogeneousTransformation &amp;, int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Cifstream &amp;</type>
      <name>ReadDOFs</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>a9fdd20099f8f8aa5acefd4edb8c6d409</anchor>
      <arglist>(Cifstream &amp;, TransformationType)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>a2cb240da893aa658c23f566ebb76e158</anchor>
      <arglist>(AttributeSelector)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>UpdateDOFs</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>a479c7073cf10ac1a0a1612847dbe7a40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>UpdateMatrix</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>acb67cc2a7d23216d98abab581018dc24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix</type>
      <name>_inverse</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>aeedbf6d8af420ea7fb305c41035623ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix</type>
      <name>_matrix</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>aba39ce328c4cf25237f8152cb8c5a6c2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::HomogeneousTransformationIterator</name>
    <filename>classmirtk_1_1HomogeneousTransformationIterator.html</filename>
    <base>mirtk::Point</base>
    <member kind="function">
      <type></type>
      <name>HomogeneousTransformationIterator</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformationIterator.html</anchorfile>
      <anchor>aa937886d1b4a8fc0fd4d49bab9df51e7</anchor>
      <arglist>(const HomogeneousTransformation *=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformationIterator.html</anchorfile>
      <anchor>a831030692af583d885656f4d13aa1bc3</anchor>
      <arglist>(const BaseImage *target, const BaseImage *source, double x=.0, double y=.0, double z=.0, bool inv=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NextX</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformationIterator.html</anchorfile>
      <anchor>acea95ac914848dbb87b43ada87a88f0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NextX</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformationIterator.html</anchorfile>
      <anchor>af1da2e0797f1db4683579171013841e6</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NextY</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformationIterator.html</anchorfile>
      <anchor>a72a4485b49fd5a4ca9a0d71494baf79e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NextY</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformationIterator.html</anchorfile>
      <anchor>a8ebaa745c596e86a369f150b9ca482df</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NextZ</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformationIterator.html</anchorfile>
      <anchor>acee31154f885e8b493ab04e8282ec9a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NextZ</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformationIterator.html</anchorfile>
      <anchor>a7c6c2065f6f831db29524d4beaf0300e</anchor>
      <arglist>(double)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ImageAttributes</name>
    <filename>structmirtk_1_1ImageAttributes.html</filename>
    <member kind="function">
      <type>double</type>
      <name>Area</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>aea08c99d5e3deaa71810975e712919fd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ContainsInSpace</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a227e82c70d5970b6b03503d3fa897a5f</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>EqualInSpace</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>aa44ffc922cb8c0cfabdac0a19c52c844</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>EqualInTime</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a58ca012ebb0dad0d8a1a2f7ad393863a</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>GetImageToWorldMatrix</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>afa379226801da183d6d567a0e82c8e35</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>GetImageToWorldOrientation</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a81967f8aba2677eaa0e3f986b6b54f7b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>GetLatticeToWorldMatrix</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a1e447ece60c1a3d705f220e691dd9df2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>GetLatticeToWorldOrientation</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a5261d367c6dfb3e8f9ef3e9236245d7a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>GetWorldToImageMatrix</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a489803fe3d3b31bc35dd93f37a9cb328</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>GetWorldToImageOrientation</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a520972cc6df97f5041df49cfe5011730</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>GetWorldToLatticeMatrix</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a6ff5296fd01932c4289c7f2453069b22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>GetWorldToLatticeOrientation</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a1cba7c385671e03ff7155698d7c14b47</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageAttributes</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a7b0d750a9e9a751748fd677a83c8bea5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageAttributes</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a5255188523ceee8c6df8929e081e602e</anchor>
      <arglist>(int, int, double=1.0, double=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageAttributes</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a0aa66b57e964a5a2b56f7625bbbe2d60</anchor>
      <arglist>(int, int, int, double=1.0, double=1.0, double=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageAttributes</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>abd3b5c3eb4f65cd524d189a4f1d6418c</anchor>
      <arglist>(int, int, int, int, double=1.0, double=1.0, double=1.0, double=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageAttributes</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>adb7462b96703e14d7324856aff096597</anchor>
      <arglist>(const ImageAttributes &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IndexToLattice</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>af816e0b6c85ee6e1e69133a7a6cc09ac</anchor>
      <arglist>(int, int *, int *, int *=NULL, int *=NULL) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IndexToLattice</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a36eb588effeee7130fd17e662b7dfb9d</anchor>
      <arglist>(int, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IndexToLattice</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a60140a9fa07fd9d5f2ae1e3b0ee1801e</anchor>
      <arglist>(int, int &amp;, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IndexToLattice</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a69eb81933d29c41ce883cd1aa8b8968f</anchor>
      <arglist>(int, int &amp;, int &amp;, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IndexToWorld</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a3336e32c52339dde8605eefcdfc4efdf</anchor>
      <arglist>(int, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IndexToWorld</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a4a9ceff022ec16153600e5646663f92d</anchor>
      <arglist>(int, double &amp;, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IndexToWorld</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a00fcf2bf000b2ca6fccebbe5e08e508c</anchor>
      <arglist>(int, Point &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>IndexToWorld</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a2b8a9cbc1637442dde0e56c633056558</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsBoundary</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a35e8f1007cf6ca46acbb937f2676edd3</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsBoundary</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a0f87e92e0e4341dc08e4ead6e10fac73</anchor>
      <arglist>(int, int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsBoundary</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>af8c9fc1c36f9b2405359f73630ca15c6</anchor>
      <arglist>(int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsBoundary</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a473750046c3a93c4c6c7468bcf3e1e81</anchor>
      <arglist>(int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInside</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a4b323b60eaf082a27fec6bb0c4988bec</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInside</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a0b09c5bf014796a19e4229dc15abaa8e</anchor>
      <arglist>(int, int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInside</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a46992d83a6427141b6de7dfa1ea01d2f</anchor>
      <arglist>(int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInside</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>aed2db3ad99aa09cee1389de49c993ae9</anchor>
      <arglist>(int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOutside</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>ab3d8d44a124786609dc3658eea4d4100</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOutside</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a223f0ea3cbe8975f520abe8c73064d19</anchor>
      <arglist>(int, int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOutside</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a51534e9d975dbd825e8f66a05c230a73</anchor>
      <arglist>(int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOutside</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a69f2bcf00eb61988a69fc27956dc6bb5</anchor>
      <arglist>(int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LatticeToIndex</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>ac9ae655f83e62e0bfb0008ae68ba94e8</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>LatticeToTime</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a64295dba6dda1b21c76a40a921d71079</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LatticeToWorld</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a0465e1320ffd18a0e18c73acf0083112</anchor>
      <arglist>(Point &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LatticeToWorld</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a37ab41642a8c2216f9f01b653971ffc8</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LatticeToWorld</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a07dad7a113c103bff056bb3240d25955</anchor>
      <arglist>(double *, double *, double *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LatticeToWorld</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a73d11ab830bd8fb2b41e1939d5e00b42</anchor>
      <arglist>(double *, double *, double *, double *) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>N</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>ac884187caa601336db2ea816fafd46b8</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfLatticePoints</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a2d09bfe5a68b793cadbb77cbed0b28d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfPoints</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>abb436244b94e1df6b3caf4f2fd0fc11f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfSpatialPoints</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a7fe62acae212809a52e52af2c1bc79ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a8367bba721b77081faef5658b41f0368</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>ae6aa4ae8cb12439069d456e97e9e41bf</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>ImageAttributes &amp;</type>
      <name>operator=</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a16c941b0a4e80faa3b1cfa0f02df5f8e</anchor>
      <arglist>(const ImageAttributes &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>adc6504fc8b02a83c27b6a980b44341d8</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a4dc20142b13152f622750b817b14536b</anchor>
      <arglist>(ostream &amp;, Indent=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a0ba0166745b957a9da1a7044a901051b</anchor>
      <arglist>(Indent=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutAffineMatrix</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>afd15d7e31e6b430d9cf24aece117529d</anchor>
      <arglist>(const Matrix &amp;m, bool apply=false)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Space</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a0741e9a25638459ace43170c89fd54e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Spacing</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a6d6a3af9fad2448b11dde9a3ab370301</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>T</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>ab2cd27a33b98024946dbc1eee97bf007</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>TimeToLattice</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a81140fd7b05e72a5424971d4ab6c8efd</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>TSize</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>af6c9e7d4d397e7005d572fdb2b0338f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>TSpacing</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>ad69d3001b3a273b16de5dce2b7baee5d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Volume</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a020019d6abcdbaec69164b513402a527</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WorldToLattice</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a7bd0d11c77099fd5bd0c6532be3cea2a</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WorldToLattice</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a3b7eefe32121a2516d55de561117f3e3</anchor>
      <arglist>(Point &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>X</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>ada6bee4521ba00c88699493fb07e81f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>XSize</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a8b4cbba7af93bbccd085beea3cf9a290</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>XSpacing</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a2737872cfa85d8b53b370e3b61f549f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Y</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a8615f3b1144cb1b22a9886b868f84f69</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>YSize</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a8c7ee2842d1ad227f5c291dff7d70902</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>YSpacing</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a7942ac638c847c9a51301474dda9b55b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Z</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a00cd2c044b2ec9b06c5abd485a4807dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ZSize</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a1c148d8763b4403f9a1eb0d05d137f56</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ZSpacing</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>ab6afa5f12425700c14a9272ecb29bcf4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_dt</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>ace52b4f86734d958e0b638c47c8194bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_dx</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a14b1bc549e02f620ff5f7b8d1e0b0bd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_dy</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a77f5b4976b487d381a5e1076701f410f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_dz</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a75ec697a6efe71b1f53f57d63109dc37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Matrix *</type>
      <name>_i2w</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a5e88b5de938c70447de10dfb19b54612</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix</type>
      <name>_smat</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a9d59fe867d7ece386b2c938d8cfc8b48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_t</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a0db054b14bb18bc0264727e133b6b442</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_torigin</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a9f14c3e7ac4d4d36f90c49bf1987ec0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Matrix *</type>
      <name>_w2i</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>ad85be169c1076eed13686765b308f6f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_x</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a74058b13cfddcec549dd2749aad54aec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_xaxis</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>ab92622462a3f6b52ee56f5607d429a9f</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_xorigin</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a6542b79ad96dbec5b6c874da2dc2ccc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_y</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>af57f60209e0e90cb125412d8bf68f020</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_yaxis</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a3b0d2458d4e24abeeee251cee1b9c1f5</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_yorigin</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a61792ddcb1ae95540b388c4c5c584809</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_z</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>abf3e386aa5f062ad1464e0b1b5f9c8ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_zaxis</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a6908c8a8ae1900eea53e5866f3c63351</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_zorigin</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>ab75051ede52a70ca32031550beae2f06</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ImageChannel</name>
    <filename>classmirtk_1_1ImageChannel.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::Object</base>
    <member kind="typedef">
      <type>TImage</type>
      <name>ImageType</name>
      <anchorfile>classmirtk_1_1ImageChannel.html</anchorfile>
      <anchor>adde4e8abec5b3f3f735437f275d00896</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Image</name>
      <anchorfile>classmirtk_1_1ImageChannel.html</anchorfile>
      <anchor>a27315f3a6e72a2ec5cff7207bd6f6717</anchor>
      <arglist>(ImageType *image, bool manage=false, bool copy=false)</arglist>
    </member>
    <member kind="function">
      <type>ImageType *</type>
      <name>Image</name>
      <anchorfile>classmirtk_1_1ImageChannel.html</anchorfile>
      <anchor>a1d2d48ebd8fe8e22a33fa6aef6167290</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageChannel</name>
      <anchorfile>classmirtk_1_1ImageChannel.html</anchorfile>
      <anchor>a2ac25b96861d9c6e9190e62408e8cc78</anchor>
      <arglist>(ImageType *image=NULL, bool manage=false, bool copy=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageChannel</name>
      <anchorfile>classmirtk_1_1ImageChannel.html</anchorfile>
      <anchor>acb5561b2660e0aa454555ee97b0de467</anchor>
      <arglist>(const ImageChannel &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageChannel</name>
      <anchorfile>classmirtk_1_1ImageChannel.html</anchorfile>
      <anchor>a5758ffc295c877f9c9e3b3d92ddfaaa4</anchor>
      <arglist>(const ImageChannel&lt; TOtherImage &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ImageChannel &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1ImageChannel.html</anchorfile>
      <anchor>a59c287426feded8deb360bd3f6632668</anchor>
      <arglist>(const ImageChannel &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ImageChannel &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1ImageChannel.html</anchorfile>
      <anchor>a23d3e385ac171acf7c0325a9f11ffaaa</anchor>
      <arglist>(const ImageChannel&lt; TOtherImage &gt; &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImageChannel</name>
      <anchorfile>classmirtk_1_1ImageChannel.html</anchorfile>
      <anchor>a65dc5e09ca7cbe1146693404456f8fa3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ImageType *</type>
      <name>_Image</name>
      <anchorfile>classmirtk_1_1ImageChannel.html</anchorfile>
      <anchor>ad3b26e508407a9431666c45a6617fca8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_Manage</name>
      <anchorfile>classmirtk_1_1ImageChannel.html</anchorfile>
      <anchor>aff795af90b398ba0421ac49199fe32b1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ImageCovariance</name>
    <filename>classmirtk_1_1ImageCovariance.html</filename>
    <base>mirtk::HistogramImageSimilarity</base>
    <member kind="function">
      <type></type>
      <name>ImageCovariance</name>
      <anchorfile>classmirtk_1_1ImageCovariance.html</anchorfile>
      <anchor>ab180dd5dc07c584b832425480b6b203c</anchor>
      <arglist>(const char *=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageCovariance</name>
      <anchorfile>classmirtk_1_1ImageCovariance.html</anchorfile>
      <anchor>a90c450e0f1b313b775d77d13f6a691d3</anchor>
      <arglist>(const ImageCovariance &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ImageCovariance &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1ImageCovariance.html</anchorfile>
      <anchor>a98d866ab6ed668f06e40f940b791485b</anchor>
      <arglist>(const ImageCovariance &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>RawValue</name>
      <anchorfile>classmirtk_1_1ImageCovariance.html</anchorfile>
      <anchor>af55608e7694f6a1ddaede793cf8f0e8a</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ImageCovariance</name>
      <anchorfile>classmirtk_1_1ImageCovariance.html</anchorfile>
      <anchor>af8ef4d018c619dbfce0cfd6d1efcd1a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1ImageCovariance.html</anchorfile>
      <anchor>a065a6c75f24531e80dda9e678c4ac781</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ImageEdgeDistance</name>
    <filename>classmirtk_1_1ImageEdgeDistance.html</filename>
    <base>mirtk::SurfaceForce</base>
    <member kind="enumvalue">
      <name>ClosestExtremum</name>
      <anchorfile>classmirtk_1_1ImageEdgeDistance.html</anchorfile>
      <anchor>a8b4079a6baf4fabe5cde8fd01a69ff9da4c4807ced5869076af34f343135e5194</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ClosestMaximum</name>
      <anchorfile>classmirtk_1_1ImageEdgeDistance.html</anchorfile>
      <anchor>a8b4079a6baf4fabe5cde8fd01a69ff9da9fea75bdc0abcc890d83ca4894b3af6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ClosestMinimum</name>
      <anchorfile>classmirtk_1_1ImageEdgeDistance.html</anchorfile>
      <anchor>a8b4079a6baf4fabe5cde8fd01a69ff9dad718179be5f7bfb5466247902736c5bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericFastCubicBSplineInterpolateImageFunction&lt; DiscreteImage &gt;</type>
      <name>ContinuousImage</name>
      <anchorfile>classmirtk_1_1ImageEdgeDistance.html</anchorfile>
      <anchor>a816b5d70c5ea5d9a9d088737172a0fa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericImage&lt; double &gt;</type>
      <name>DiscreteImage</name>
      <anchorfile>classmirtk_1_1ImageEdgeDistance.html</anchorfile>
      <anchor>afdbb1ae72e8147de2e79ba771b18f250</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EdgeType</name>
      <anchorfile>classmirtk_1_1ImageEdgeDistance.html</anchorfile>
      <anchor>a8b4079a6baf4fabe5cde8fd01a69ff9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Extremum</name>
      <anchorfile>classmirtk_1_1ImageEdgeDistance.html</anchorfile>
      <anchor>a8b4079a6baf4fabe5cde8fd01a69ff9da072ad5c587354e28be1e25df613f5133</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ClosestMinimum</name>
      <anchorfile>classmirtk_1_1ImageEdgeDistance.html</anchorfile>
      <anchor>a8b4079a6baf4fabe5cde8fd01a69ff9dad718179be5f7bfb5466247902736c5bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ClosestMaximum</name>
      <anchorfile>classmirtk_1_1ImageEdgeDistance.html</anchorfile>
      <anchor>a8b4079a6baf4fabe5cde8fd01a69ff9da9fea75bdc0abcc890d83ca4894b3af6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ClosestExtremum</name>
      <anchorfile>classmirtk_1_1ImageEdgeDistance.html</anchorfile>
      <anchor>a8b4079a6baf4fabe5cde8fd01a69ff9da4c4807ced5869076af34f343135e5194</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>StrongestMinimum</name>
      <anchorfile>classmirtk_1_1ImageEdgeDistance.html</anchorfile>
      <anchor>a8b4079a6baf4fabe5cde8fd01a69ff9da1e573a9201ea512e92754e2d9cf51f93</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>StrongestMaximum</name>
      <anchorfile>classmirtk_1_1ImageEdgeDistance.html</anchorfile>
      <anchor>a8b4079a6baf4fabe5cde8fd01a69ff9da6d9b7ae6f4055ac4790f3c2fa0679072</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>StrongestExtremum</name>
      <anchorfile>classmirtk_1_1ImageEdgeDistance.html</anchorfile>
      <anchor>a8b4079a6baf4fabe5cde8fd01a69ff9dadb0ecc87a00a068d2816e1d8a2012ec4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NeonatalWhiteSurface</name>
      <anchorfile>classmirtk_1_1ImageEdgeDistance.html</anchorfile>
      <anchor>a8b4079a6baf4fabe5cde8fd01a69ff9da0e97ace82559b7fa346f73443b63552c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NeonatalPialSurface</name>
      <anchorfile>classmirtk_1_1ImageEdgeDistance.html</anchorfile>
      <anchor>a8b4079a6baf4fabe5cde8fd01a69ff9daf4aba6cb69cc2115977bf4897e703ab5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Extremum</name>
      <anchorfile>classmirtk_1_1ImageEdgeDistance.html</anchorfile>
      <anchor>a8b4079a6baf4fabe5cde8fd01a69ff9da072ad5c587354e28be1e25df613f5133</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericImage&lt; float &gt;</type>
      <name>LocalStatsImage</name>
      <anchorfile>classmirtk_1_1ImageEdgeDistance.html</anchorfile>
      <anchor>aa6470b30052abb204840de1d77ae1eda</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NeonatalPialSurface</name>
      <anchorfile>classmirtk_1_1ImageEdgeDistance.html</anchorfile>
      <anchor>a8b4079a6baf4fabe5cde8fd01a69ff9daf4aba6cb69cc2115977bf4897e703ab5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NeonatalWhiteSurface</name>
      <anchorfile>classmirtk_1_1ImageEdgeDistance.html</anchorfile>
      <anchor>a8b4079a6baf4fabe5cde8fd01a69ff9da0e97ace82559b7fa346f73443b63552c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>StrongestExtremum</name>
      <anchorfile>classmirtk_1_1ImageEdgeDistance.html</anchorfile>
      <anchor>a8b4079a6baf4fabe5cde8fd01a69ff9dadb0ecc87a00a068d2816e1d8a2012ec4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>StrongestMaximum</name>
      <anchorfile>classmirtk_1_1ImageEdgeDistance.html</anchorfile>
      <anchor>a8b4079a6baf4fabe5cde8fd01a69ff9da6d9b7ae6f4055ac4790f3c2fa0679072</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>StrongestMinimum</name>
      <anchorfile>classmirtk_1_1ImageEdgeDistance.html</anchorfile>
      <anchor>a8b4079a6baf4fabe5cde8fd01a69ff9da1e573a9201ea512e92754e2d9cf51f93</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageEdgeDistance</name>
      <anchorfile>classmirtk_1_1ImageEdgeDistance.html</anchorfile>
      <anchor>a62f6a53b3db423724e506e19e2fa2c73</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageEdgeDistance</name>
      <anchorfile>classmirtk_1_1ImageEdgeDistance.html</anchorfile>
      <anchor>a4c780a6ca2c702570dcae8f0f371b960</anchor>
      <arglist>(const ImageEdgeDistance &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1ImageEdgeDistance.html</anchorfile>
      <anchor>a18b16cb0701a650b7460fcbc5ccd6018</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ImageEdgeDistance &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1ImageEdgeDistance.html</anchorfile>
      <anchor>a40205c09651fd1d35afdfc2ef580969e</anchor>
      <arglist>(const ImageEdgeDistance &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1ImageEdgeDistance.html</anchorfile>
      <anchor>ae42ee58e58f74423b35968af067be486</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1ImageEdgeDistance.html</anchorfile>
      <anchor>aeb21134d696d8e152eeba477521b14ab</anchor>
      <arglist>(bool=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImageEdgeDistance</name>
      <anchorfile>classmirtk_1_1ImageEdgeDistance.html</anchorfile>
      <anchor>a48ee1200f02cbff4c93cec16f0769969</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1ImageEdgeDistance.html</anchorfile>
      <anchor>a9ce5d63e5008419b0d298a8a62677a9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1ImageEdgeDistance.html</anchorfile>
      <anchor>a605dea3f74cac72434532e632d9ef542</anchor>
      <arglist>(double *, double, double)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithoutPrefix</name>
      <anchorfile>classmirtk_1_1ImageEdgeDistance.html</anchorfile>
      <anchor>a4d9df872726b1a32d772d215e75d04ec</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ImageEdgeForce</name>
    <filename>classmirtk_1_1ImageEdgeForce.html</filename>
    <base>mirtk::ExternalForce</base>
    <member kind="function">
      <type></type>
      <name>ImageEdgeForce</name>
      <anchorfile>classmirtk_1_1ImageEdgeForce.html</anchorfile>
      <anchor>a504897e632acabf565716a25a83d03a5</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageEdgeForce</name>
      <anchorfile>classmirtk_1_1ImageEdgeForce.html</anchorfile>
      <anchor>a38e409efb2f59e53343510edc3df4318</anchor>
      <arglist>(const ImageEdgeForce &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1ImageEdgeForce.html</anchorfile>
      <anchor>ae0d39dea9a9feeac43df21c6c55fdd03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ImageEdgeForce &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1ImageEdgeForce.html</anchorfile>
      <anchor>a0e638919f16bebbf421dbd8b9c946ddb</anchor>
      <arglist>(const ImageEdgeForce &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1ImageEdgeForce.html</anchorfile>
      <anchor>ac191be0e3b4d4e221430d1f5100296bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImageEdgeForce</name>
      <anchorfile>classmirtk_1_1ImageEdgeForce.html</anchorfile>
      <anchor>a6145242c150bc497608dc46bdd8a6fbc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CopyAttributes</name>
      <anchorfile>classmirtk_1_1ImageEdgeForce.html</anchorfile>
      <anchor>a35edb3b8640c4fcdd6dc46f8046163fd</anchor>
      <arglist>(const ImageEdgeForce &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1ImageEdgeForce.html</anchorfile>
      <anchor>ad3cb14952b89d189f0466bebd2ad630b</anchor>
      <arglist>(double *, double, double)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithoutPrefix</name>
      <anchorfile>classmirtk_1_1ImageEdgeForce.html</anchorfile>
      <anchor>a1b967ef2ed130b9b2965322270817a1e</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ImageFrame</name>
    <filename>classmirtk_1_1ImageFrame.html</filename>
    <templarg>TChannel</templarg>
    <base>mirtk::Object</base>
    <member kind="typedef">
      <type>TChannel</type>
      <name>ChannelType</name>
      <anchorfile>classmirtk_1_1ImageFrame.html</anchorfile>
      <anchor>aa4e58ed804117cfb4e2efeeeab42c37e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TChannel::ImageType</type>
      <name>ImageType</name>
      <anchorfile>classmirtk_1_1ImageFrame.html</anchorfile>
      <anchor>a01b20854719cb05f66011e79b923fb2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classmirtk_1_1ImageFrame.html</anchorfile>
      <anchor>a98176ca4d26b3605b8a85a21cc6026f7</anchor>
      <arglist>(ImageType *image, bool manage=false, bool copy=false)</arglist>
    </member>
    <member kind="function">
      <type>ImageAttributes</type>
      <name>Attributes</name>
      <anchorfile>classmirtk_1_1ImageFrame.html</anchorfile>
      <anchor>ab81331f590f5cafb38b2abe69e17d8ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ChannelType &amp;</type>
      <name>Channel</name>
      <anchorfile>classmirtk_1_1ImageFrame.html</anchorfile>
      <anchor>a14c90a822690084e167b31618bce49f5</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function">
      <type>const ChannelType &amp;</type>
      <name>Channel</name>
      <anchorfile>classmirtk_1_1ImageFrame.html</anchorfile>
      <anchor>a470de489af5f08cfbf0504c9cdb8389f</anchor>
      <arglist>(int=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1ImageFrame.html</anchorfile>
      <anchor>a34daa542828f56603cbf783249a5f113</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetPixelSize</name>
      <anchorfile>classmirtk_1_1ImageFrame.html</anchorfile>
      <anchor>ae57bf17599de18fe70bfcd3a8d00c30a</anchor>
      <arglist>(double *, double *, double *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Image</name>
      <anchorfile>classmirtk_1_1ImageFrame.html</anchorfile>
      <anchor>ac5ae1e6cffce3760bf546d8f0e982c1f</anchor>
      <arglist>(int idx, ImageType *image, bool manage=false, bool copy=false)</arglist>
    </member>
    <member kind="function">
      <type>ImageType *</type>
      <name>Image</name>
      <anchorfile>classmirtk_1_1ImageFrame.html</anchorfile>
      <anchor>adf2bcd3d16a9c1dce65129787bfaf2ad</anchor>
      <arglist>(int=0) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageFrame</name>
      <anchorfile>classmirtk_1_1ImageFrame.html</anchorfile>
      <anchor>ababd88faf89aaba88b2b10ad7d9dd52d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageFrame</name>
      <anchorfile>classmirtk_1_1ImageFrame.html</anchorfile>
      <anchor>ac8ac1335fbe5231778bdce99c4206a2f</anchor>
      <arglist>(const ImageFrame &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ImageToWorld</name>
      <anchorfile>classmirtk_1_1ImageFrame.html</anchorfile>
      <anchor>a85d66b77449824ab33821345ff89dccf</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NumberOfChannels</name>
      <anchorfile>classmirtk_1_1ImageFrame.html</anchorfile>
      <anchor>a7e45d42fa416cbfe970ba3e7cfca195d</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfChannels</name>
      <anchorfile>classmirtk_1_1ImageFrame.html</anchorfile>
      <anchor>a38bc158de153a870092fb72f570d52b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfVoxels</name>
      <anchorfile>classmirtk_1_1ImageFrame.html</anchorfile>
      <anchor>a2521c3d704cdaae4b0083b1944108897</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ImageFrame &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1ImageFrame.html</anchorfile>
      <anchor>a13aa43b4d9a4837ed9509647c7ab806b</anchor>
      <arglist>(const ImageFrame &amp;)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Time</name>
      <anchorfile>classmirtk_1_1ImageFrame.html</anchorfile>
      <anchor>a4f0664aef13c34d1827f6c902693558c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WorldToImage</name>
      <anchorfile>classmirtk_1_1ImageFrame.html</anchorfile>
      <anchor>a4a1e9cf07ced9872437d456a525b1d3c</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>X</name>
      <anchorfile>classmirtk_1_1ImageFrame.html</anchorfile>
      <anchor>a2474f4ba183561e3c7be922cc9c86673</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>XSize</name>
      <anchorfile>classmirtk_1_1ImageFrame.html</anchorfile>
      <anchor>a85a4652b668b7cffd5f841c2d4dfb022</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Y</name>
      <anchorfile>classmirtk_1_1ImageFrame.html</anchorfile>
      <anchor>af3d726f3a090f06394225e8bec3c1017</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>YSize</name>
      <anchorfile>classmirtk_1_1ImageFrame.html</anchorfile>
      <anchor>aa7c83cefab96111bf93e55e809a7b18e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Z</name>
      <anchorfile>classmirtk_1_1ImageFrame.html</anchorfile>
      <anchor>a1253e728ddbcf53fe02170fb9d8335e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ZSize</name>
      <anchorfile>classmirtk_1_1ImageFrame.html</anchorfile>
      <anchor>ad1f28040bb0d34e7234a2c3a94dbd8bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImageFrame</name>
      <anchorfile>classmirtk_1_1ImageFrame.html</anchorfile>
      <anchor>a5147a546cbae29c52db8c239f236b0c4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ImageFunction</name>
    <filename>classmirtk_1_1ImageFunction.html</filename>
    <base>mirtk::Object</base>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1ImageFunction.html</anchorfile>
      <anchor>afbc5992258510865e3d275ea9ba42fb4</anchor>
      <arglist>(double, double, double, double=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1ImageFunction.html</anchorfile>
      <anchor>a9306883cc059a96e52bd6943b20da5a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImageFunction</name>
      <anchorfile>classmirtk_1_1ImageFunction.html</anchorfile>
      <anchor>aff3a5615e39d6a1eb3592e91531f212a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImageFunction</name>
      <anchorfile>classmirtk_1_1ImageFunction.html</anchorfile>
      <anchor>a25d24c8fb590f44caf6b03809bc2e94e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImageFunction</name>
      <anchorfile>classmirtk_1_1ImageFunction.html</anchorfile>
      <anchor>a676920804a069de8b0007b3c562c5aea</anchor>
      <arglist>(const ImageFunction &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ImageGradientFunction</name>
    <filename>classmirtk_1_1ImageGradientFunction.html</filename>
    <base>mirtk::Object</base>
    <member kind="typedef">
      <type>Vector3D&lt; double &gt;</type>
      <name>GradientType</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a056a7cd6adc514024fb87df77fbc98ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a7a1c3c13e45d221497e1d5c5d6e483f0</anchor>
      <arglist>(double, double, int &amp;, int &amp;, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a6844c4faaabd735471944fd23b41f075</anchor>
      <arglist>(double, double, double, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>ad4ccfbc587ed6bdc267036bb16738c50</anchor>
      <arglist>(double, double, double, double, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>BoundingInterval</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a34d7d983d776b0f9ace36cb83d58b6ae</anchor>
      <arglist>(double, int &amp;, int &amp;) const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a0a8f41dd4aaeae1771db51f707f798f6</anchor>
      <arglist>(double *, double, double, double=0, int=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateInside</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a453f19de08d48c8d8df2c9c078f8470d</anchor>
      <arglist>(double *, double, double, double=0, int=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateOutside</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>acadbc4754ffbd5a665f265984e755a3c</anchor>
      <arglist>(double *, double, double, double=0, int=1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateWithPadding</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a06b5aba7ccdd65ed4cf3039345a234a9</anchor>
      <arglist>(double *, double, double, double=0, int=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateWithPaddingInside</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>abc1b063c72579e0b1e49cf41df20bf72</anchor>
      <arglist>(double *, double, double, double=0, int=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a3dae122eee91f49e28b333f15eed2ead</anchor>
      <arglist>(double *, double, double, double=0, int=1) const</arglist>
    </member>
    <member kind="function">
      <type>enum ExtrapolationMode</type>
      <name>ExtrapolationMode</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a7bbc887e7a39b76a2c12c0b1506b6ced</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Extrapolator</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>ab5595110cc8967c8f7f099c6c8a77c0e</anchor>
      <arglist>(ExtrapolateImageFunction *, bool=false)</arglist>
    </member>
    <member kind="function">
      <type>ExtrapolateImageFunction *</type>
      <name>Extrapolator</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a0c40cbb5e4df3aa66b809ab97ce7afa7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ExtrapolateImageFunction *</type>
      <name>Extrapolator</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>ad53a9d49bfffe9eeb5c6b25e72e4d536</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a80b250d29f6bd0937c19654f90d99e35</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual GradientType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>acf947235ec0a0b4662e28a50f19d6e01</anchor>
      <arglist>(double, double, double=0, double=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual GradientType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a6c03106e4643913467ffc6498c08d5ee</anchor>
      <arglist>(double, double, double=0, double=0) const =0</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetTOrigin</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>aed193bb983c0b55c6c360dc2b603652e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a854b18127d974a8415731f53022569be</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual GradientType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>aefce92f9420981527d639ea1040a743d</anchor>
      <arglist>(double, double, double=0, double=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual GradientType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>ac7659c2e19e0b38e745c7e6a1d750e65</anchor>
      <arglist>(double, double, double=0, double=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a8581e53d8d2f6f0c5e1aacd182d7b8de</anchor>
      <arglist>(bool coeff=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a720e46619c038e311e0735d68a95276f</anchor>
      <arglist>(const BaseImage *)</arglist>
    </member>
    <member kind="function">
      <type>const BaseImage *</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>acd6a872da54432f456f3de5f358bb817</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Inside</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>ab8e6b0b859249ad45253dd92600fe6f8</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Inside</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>ad1383a9276f76d7a3190ea8257798a80</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Inside</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a24598a1f1b6754d36f6e9196978d902e</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual enum InterpolationMode</type>
      <name>InterpolationMode</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a0cba83ceed09fef2b450eaf0fa01730c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsForeground</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>af85f0b567e724774fd12f06fa339e53d</anchor>
      <arglist>(double, double) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsForeground</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>ad1995d551c3941de5af7aee131f256ff</anchor>
      <arglist>(double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsForeground</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a64e28134b5f14772960183925760acdb</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInside</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a74d298a95e1fe3ac42d845b24c1a5708</anchor>
      <arglist>(double, double) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInside</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a64a9025cbfa6b90384116873801e381b</anchor>
      <arglist>(double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInside</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>af41ba9270589da0aab2c70d4d6f04dc5</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOutside</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>adbed000f23e4354b438d7b5ffcc34c55</anchor>
      <arglist>(double, double) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOutside</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>aad154eee4c7794df5e2c1fe8b89269b3</anchor>
      <arglist>(double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOutside</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a73047ce0b35549bf5078156e7c14c072</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ExtrapolateImageFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a9c69e2b807a7ee11180a8b91441a0e66</anchor>
      <arglist>(enum ExtrapolationMode, const BaseImage *=NULL)</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a625c72cf504551e431659458c31d5ab5</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WorldToImage</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>ac82c4ff6252617f534526eaf20270f4b</anchor>
      <arglist>(double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WorldToImage</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>aa60dd865d49f15ac82ca3a9ec17d5b50</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WorldToImage</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>adc8dc526aa180000e6e69fa6d915240d</anchor>
      <arglist>(Point &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImageGradientFunction</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>ac1956dcb0f99707aea6efef43f039e80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImageGradientFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a21ce74c57ff69c3fa71cd05563c908e9</anchor>
      <arglist>(enum InterpolationMode, const BaseImage *=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImageGradientFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>aad735ae0618ec64fdcdfff6c783ae314</anchor>
      <arglist>(enum InterpolationMode, enum ExtrapolationMode, const BaseImage *=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImageGradientFunction</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a1b8a3f066d3075f6e377b34d3ab0cffa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ImageGradientToWorld</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a75ae3ab86dc7264ae3e5590bdb1c4180</anchor>
      <arglist>(GradientType &amp;) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ExtrapolateImageFunction *</type>
      <name>_InfiniteInput</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>ab456985fd67269ca4ed57339c6ad537e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_InfiniteInputOwner</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a95547c8d62f18ec23d3b85301b03e20b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseImage *</type>
      <name>_Input</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a9268a3d0dedc8a1325fca821da2e0b47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix</type>
      <name>_Orientation</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a9f876664d8c93541ac2605f39fc21b1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GradientType</type>
      <name>_VoxelSize</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a6c2f57a3ee46a717d389a33a8b6783ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_x1</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a5ff1cde28f9dfdbefca6a4053b578f78</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ImageIterator</name>
    <filename>classmirtk_1_1ImageIterator.html</filename>
    <base>mirtk::ConstImageIterator</base>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Current</name>
      <anchorfile>classmirtk_1_1ImageIterator.html</anchorfile>
      <anchor>aa99a7811ff1ba21979068c33578a9fa0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Current</name>
      <anchorfile>classmirtk_1_1ImageIterator.html</anchorfile>
      <anchor>aeb36b83f5a74b449c63a342abb35c2fb</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageIterator</name>
      <anchorfile>classmirtk_1_1ImageIterator.html</anchorfile>
      <anchor>af8ed56d09cdc9831e44ee6119b8c6629</anchor>
      <arglist>(const ImageAttributes &amp;, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageIterator</name>
      <anchorfile>classmirtk_1_1ImageIterator.html</anchorfile>
      <anchor>aabf4437a1ebbe93b1ea986fc2b0d15f9</anchor>
      <arglist>(const ImageAttributes &amp;, void *=NULL, int=MIRTK_VOXEL_UNKNOWN)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageIterator</name>
      <anchorfile>classmirtk_1_1ImageIterator.html</anchorfile>
      <anchor>a9f2afb1d816e3e3b52bde6091f2fd9ba</anchor>
      <arglist>(BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageIterator</name>
      <anchorfile>classmirtk_1_1ImageIterator.html</anchorfile>
      <anchor>a5f7bd55bf5bc7285c42a5a18544880ab</anchor>
      <arglist>(BaseImage *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageIterator</name>
      <anchorfile>classmirtk_1_1ImageIterator.html</anchorfile>
      <anchor>ae44fc5223e2de9ce6e044c7edd714629</anchor>
      <arglist>(const ConstImageIterator &amp;)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Next</name>
      <anchorfile>classmirtk_1_1ImageIterator.html</anchorfile>
      <anchor>aefa4dbb5fa1aa94d32bc90492a5348f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Next</name>
      <anchorfile>classmirtk_1_1ImageIterator.html</anchorfile>
      <anchor>abbc793cbbc093a91fb63056541753092</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>ImageIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1ImageIterator.html</anchorfile>
      <anchor>ad4bf981579f6d017b051a7906756e00b</anchor>
      <arglist>(const ImageIterator &amp;)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType &amp;</type>
      <name>Value</name>
      <anchorfile>classmirtk_1_1ImageIterator.html</anchorfile>
      <anchor>adae3e1c001c5538bebdfaabded2f83a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType &amp;</type>
      <name>Value</name>
      <anchorfile>classmirtk_1_1ImageIterator.html</anchorfile>
      <anchor>a75ba7abd0fec7a956270e0fbdbea2147</anchor>
      <arglist>(int t) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImageIterator</name>
      <anchorfile>classmirtk_1_1ImageIterator.html</anchorfile>
      <anchor>abb8042d298a74a75c734b0bfd60b65c5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ImageReader</name>
    <filename>classmirtk_1_1ImageReader.html</filename>
    <base protection="protected">mirtk::Cifstream</base>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>CanRead</name>
      <anchorfile>classmirtk_1_1ImageReader.html</anchorfile>
      <anchor>a0b0db2ca18973a41a4654544f16c6cc0</anchor>
      <arglist>(const char *) const =0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageReader</name>
      <anchorfile>classmirtk_1_1ImageReader.html</anchorfile>
      <anchor>a72cdf9dc480c8d57475a085e4139fccc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1ImageReader.html</anchorfile>
      <anchor>ad8758ae63e5d8bd3c5666073830c0cad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1ImageReader.html</anchorfile>
      <anchor>aa6af1e87f010799fc71ab2fa8815014e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BaseImage *</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1ImageReader.html</anchorfile>
      <anchor>afb19fa3a926309be10eb55566bddd2cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImageReader</name>
      <anchorfile>classmirtk_1_1ImageReader.html</anchorfile>
      <anchor>a3e9261028e89f52eb667a50d665e3087</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImageReader *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1ImageReader.html</anchorfile>
      <anchor>ab5bdaf2d59d4e93bb99acd2e96e5e5c7</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImageReader *</type>
      <name>TryNew</name>
      <anchorfile>classmirtk_1_1ImageReader.html</anchorfile>
      <anchor>a768a4e960ee9fd33ff612cc895e6eca6</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>ReadHeader</name>
      <anchorfile>classmirtk_1_1ImageReader.html</anchorfile>
      <anchor>ab25830908d17b90ec8a56b36a78af8b2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_ReflectX</name>
      <anchorfile>classmirtk_1_1ImageReader.html</anchorfile>
      <anchor>ab470c837d9aa4955b9111783007705e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_ReflectY</name>
      <anchorfile>classmirtk_1_1ImageReader.html</anchorfile>
      <anchor>a3343170f0a82e0fabd030d42155709c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_ReflectZ</name>
      <anchorfile>classmirtk_1_1ImageReader.html</anchorfile>
      <anchor>a91ba4d903f7067a52247d059a2b839d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_Start</name>
      <anchorfile>classmirtk_1_1ImageReader.html</anchorfile>
      <anchor>a7dcaf8eb400b0fb8702cdab0c8899775</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ImageReaderFactory</name>
    <filename>classmirtk_1_1ImageReaderFactory.html</filename>
    <member kind="typedef">
      <type>ImageReader *(*</type>
      <name>ImageReaderCreator</name>
      <anchorfile>classmirtk_1_1ImageReaderFactory.html</anchorfile>
      <anchor>aa2df820d91ec102725bb53e16231c300</anchor>
      <arglist>)()</arglist>
    </member>
    <member kind="function">
      <type>ImageReader *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1ImageReaderFactory.html</anchorfile>
      <anchor>a559c6fa5b0003de569c398fd8f77832b</anchor>
      <arglist>(const char *fname) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Register</name>
      <anchorfile>classmirtk_1_1ImageReaderFactory.html</anchorfile>
      <anchor>a83398351dd09e797fbf1aa8f6f340b78</anchor>
      <arglist>(ImageReaderCreator creator)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImageReaderFactory &amp;</type>
      <name>Instance</name>
      <anchorfile>classmirtk_1_1ImageReaderFactory.html</anchorfile>
      <anchor>adaed3fd34da8f6f96d00a5de0b668e44</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ImageRegion</name>
    <filename>classmirtk_1_1ImageRegion.html</filename>
    <member kind="function">
      <type>int</type>
      <name>BeginT</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a34de65fd0163ed83b49c575ec211eb96</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>BeginX</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a2fcb6fbdedad95affe659a2d1742c2a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>BeginY</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a715c04ca03009bfff5782e978c36c50a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>BeginZ</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a288ada5ecba37e021341b7fc2b3e9168</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ColumnStride</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a7b344890c67feec179ac744cae84a954</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>EndT</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a0f66413a2ee311d5ee449487b02d8671</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>EndX</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a5a800722411bfddd6935f63c6e990064</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>EndY</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>abb0d3a0074caef79951b2de32a2a02e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>EndZ</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a70ae25a32f69cb6360167f8702820c7a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>FrameStride</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a787b071783f05054f54f777cfe93f207</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>GetPointerToBegin</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a02d77536ef3e1c94d4b8daed31c94a12</anchor>
      <arglist>(const BaseImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>GetPointerToBegin</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>aff3a93e2e86850532a2e804d4e2c95fd</anchor>
      <arglist>(const BaseImage *) const</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>GetPointerToBegin</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>ae591ee09dd2c5979716eb8969949149e</anchor>
      <arglist>(const GenericImage&lt; VoxelType &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>GetPointerToBegin</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>aaf12c70cbe7adc922a1a31d009b66ceb</anchor>
      <arglist>(GenericImage&lt; VoxelType &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>GetPointerToBegin</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a34eec43ef1f3f7cf1a022fe589a8226e</anchor>
      <arglist>(const GenericImage&lt; VoxelType &gt; *) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>GetPointerToBegin</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a613fc3c344a437c4d088d30425e91084</anchor>
      <arglist>(GenericImage&lt; VoxelType &gt; *) const</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>GetPointerToEnd</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a7102de4bcd422e6760b00b15a65cb0ba</anchor>
      <arglist>(const BaseImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>GetPointerToEnd</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>aa7bc345af7b15060bf2bf2fddf5b85ed</anchor>
      <arglist>(const BaseImage *) const</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>GetPointerToEnd</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>ac8a5c63ef09519e64641f4621587004f</anchor>
      <arglist>(const GenericImage&lt; VoxelType &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>GetPointerToEnd</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>ae34b8bd915e2e2c7ebf0ce9c4f9541e3</anchor>
      <arglist>(GenericImage&lt; VoxelType &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>GetPointerToEnd</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a43e09f318234c647e07ed518c26d230e</anchor>
      <arglist>(const GenericImage&lt; VoxelType &gt; *) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>GetPointerToEnd</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a4ae8e0a083da23f6bd4c7713ec8c7741</anchor>
      <arglist>(GenericImage&lt; VoxelType &gt; *) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageRegion</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a300dc70ea02d1752e2571e33285ca179</anchor>
      <arglist>(const ImageAttributes &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageRegion</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>adb1f41b2c3f6ef140f1d86ae3dac9c24</anchor>
      <arglist>(const ImageAttributes &amp;, const blocked_range2d&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageRegion</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a87afb50b77126760a7022e31202fd39b</anchor>
      <arglist>(const ImageAttributes &amp;, const blocked_range3d&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageRegion</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a6d8e47235529137d986061af767acfb1</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageRegion</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>aba880684fb3a3faf807e4b32def58b94</anchor>
      <arglist>(const BaseImage &amp;, const blocked_range2d&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageRegion</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a4900090435fc218a1f976698b8eb75ed</anchor>
      <arglist>(const BaseImage &amp;, const blocked_range3d&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageRegion</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a3d054acf7151dafeb02fe6a721d6f200</anchor>
      <arglist>(const BaseImage *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageRegion</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a0d320cd8f5a38838246e8871b196d7c8</anchor>
      <arglist>(const BaseImage *, const blocked_range2d&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageRegion</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a1d4cbb4a82aee0cc771305ee76839628</anchor>
      <arglist>(const BaseImage *, const blocked_range3d&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageRegion</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>ab8f45976231dd46bb48d7b854c80445c</anchor>
      <arglist>(const ImageRegion &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a29cbf42cfcb10aabbf6538d6bdacebf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsImageSequence</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>aeaa96d39aa3a9785bb335121e307ce8e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsScalar</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a21d8085b3702753be8105c05e14b3859</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsScalarImage</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>ae455dc71cea02f3cd607591270986474</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSequence</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>ae289506376fd47bf552d2c9f93a3052c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LineStride</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a4493715155a1c62e038259226e05a797</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MaxNumberOfChannels</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a5f7254c1b9cf497eed0b7ba6d282ca72</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MaxNumberOfComponents</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a34e241615e4ad13f4a8aa63a773d1417</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MaxNumberOfFrames</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>acb6c1c981ed8793a85ae153326131495</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MaxNumberOfVoxels</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a724c3e79215042793f22b29cb094d958</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfChannels</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a6e8a44585057bcaacc14be6fa114f37d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfComponents</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a6d112cbef287ff73c686ec6c6982af39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfFrames</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a373825d146f64247b9485fcbfcb577ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfImageChannels</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a74977e9ef9e1908582d4f19c203182c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfImageVoxels</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>ac15db6130fd6beec21d07ebafcb04cd0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfSequenceFrames</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>aee098b481cf4e089533b35f6b8e0b895</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfVectorComponents</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a4fc14067b855bcde253aa550ae217374</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfVoxels</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>abc92538bc4e6f288dd76da9f3ea354dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ImageRegion &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a4966854e71543e55ae29a505bac3226d</anchor>
      <arglist>(const ImageRegion &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetCenter</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>afdce8027f6eeaaf631a4c57890b80f00</anchor>
      <arglist>(int, int, int=0, int=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetChannel</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a3f089442d0508b336f036c4258cdb356</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetChannel</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>abacf048578cf6f1b756036edb8e9f90e</anchor>
      <arglist>(int, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetChannel</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a4d478da06bc4f1cc29f4110f08bfb125</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetComponent</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a449cbac3493d0e26d84489afc0bfba55</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetComponent</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a871c4a5a5177de0917c7b4ab2410fa94</anchor>
      <arglist>(int, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetComponent</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a200066798375fe67b16cb2e7f85aaeb5</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFrame</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a1493347b31c8ca5ef07d9557eb05cbd8</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFrame</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a848167e8a9eb6938eba327a315a6e443</anchor>
      <arglist>(int, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFrame</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>ac985223c34b4a855e0e67174afce1ee6</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNeighborhood</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a06ef04d5f167411d0858ef12b2671219</anchor>
      <arglist>(int, int, int, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNeighborhood</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a4a7f0c80e9735154bbab3071898f6096</anchor>
      <arglist>(int, int, int, int, int, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNeighborhood</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>adf9a1e98904cbfbb71cdef5dfcc5f688</anchor>
      <arglist>(int, int, int, int, int, int, int, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRadius</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>ac14d833eb64f0213495ee8e8cf4ceb3d</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRadius</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a193ed3be335a51ed08ede34522de9dd8</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRegion</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>ad0d59f7755a63632ccfab18ef1a0904a</anchor>
      <arglist>(int, int, int, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRegion</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a3892e6bbb12114f1abe9c3d7b9a8a39f</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRegion</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a23dba3c1f098b43f31eaf52aa50c7728</anchor>
      <arglist>(int, int, int, int, int, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRegion</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a86a58f88b15d0dcc036c160ac3e030ea</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRegion</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a4d17c52d93b49230d8c67d5430cf5bd7</anchor>
      <arglist>(int, int, int, int, int, int, int, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSize</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>ae41211bbd298b89f92e3cc1d5cfc66c0</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSize</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a0d773e5c88a87fd8604ab32e84a03358</anchor>
      <arglist>(int, int, int=1, int=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetStart</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>af672a60cf28d00125160fe6958628f58</anchor>
      <arglist>(int, int, int=0, int=-1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SliceStride</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a704ec386ae7dbcb70a49598e10b0097d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ImageRegion</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a07dd2dee49fa228fe00e9b8a9e6f9c28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector4D&lt; int &gt;</type>
      <name>_Begin</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>aa365e403c48d16fc06322ff9fa6243f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector4D&lt; int &gt;</type>
      <name>_DataSize</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a8af8bbbe6c01c40fc3fd29c35402fddb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector4D&lt; int &gt;</type>
      <name>_End</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>aeb1cf9b1f895a1242ca0b9e42996b0eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_FrameStride</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a9ec6b1e7a883d32b73baa9af9a9b849d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector4D&lt; int &gt;</type>
      <name>_Index</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a5a0ce43bf65edf7106eac8f21ad556f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_IsImageSequence</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a09e1a4bbecf15627fbbf99b5c491313e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_LineStride</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a2f09fe4f7c0ad04ec4489242c673a1f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector4D&lt; int &gt;</type>
      <name>_Size</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a4ca5eed0ab455eed76427c3836133048</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_SliceStride</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>ad770cceda36ff38d860212ebf22ef4e9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ImageSequence</name>
    <filename>classmirtk_1_1ImageSequence.html</filename>
    <templarg>TFrame</templarg>
    <base>mirtk::Object</base>
    <member kind="typedef">
      <type>TFrame::ChannelType</type>
      <name>ChannelType</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>a6c92c61a71bb75ddbd11c2f2a5c7dafc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TFrame</type>
      <name>FrameType</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>aa2d58273674a6d0d329a2ac2c1b2cfb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TFrame::ImageType</type>
      <name>ImageType</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>ae6f4b815aacd44c96bf430ea521eb6f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>a73c43b12289cd0ef98422781c5ec1d81</anchor>
      <arglist>(ImageType *image, bool manage=false, bool copy=false)</arglist>
    </member>
    <member kind="function">
      <type>ImageAttributes</type>
      <name>Attributes</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>ad37e0b1c1ffee8231cc013771a22e08f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ChannelType &amp;</type>
      <name>Channel</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>a2c4b76c86f9820926f9fff1a00435c98</anchor>
      <arglist>(int idx)</arglist>
    </member>
    <member kind="function">
      <type>const ChannelType &amp;</type>
      <name>Channel</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>a5729dfb182dee4741820f002ed235813</anchor>
      <arglist>(int idx) const</arglist>
    </member>
    <member kind="function">
      <type>ChannelType &amp;</type>
      <name>Channel</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>a5d36a75ce84eb2e423e1741f5b56250b</anchor>
      <arglist>(int f, int c)</arglist>
    </member>
    <member kind="function">
      <type>const ChannelType &amp;</type>
      <name>Channel</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>ab74baa16e7046aeb2e2ab2b054023ddd</anchor>
      <arglist>(int f, int c) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>a374e2cc759c50238cdce67aeb469503a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FrameType &amp;</type>
      <name>Frame</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>ae2fc8968d0e670c48359c94e956249e9</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const FrameType &amp;</type>
      <name>Frame</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>ab40bf5610b893b43dffe8c39f0f743e5</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetPixelSize</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>a3e3766d4db431e95b90cc77396fa2a86</anchor>
      <arglist>(double *, double *, double *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Image</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>a348e40304cfeda8472e87b4cfbd53abb</anchor>
      <arglist>(int f, int c, ImageType *image, bool manage, bool copy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Image</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>acf4a057458e1b991142b16487d51036c</anchor>
      <arglist>(int f, int c, const ImageType *image)</arglist>
    </member>
    <member kind="function">
      <type>ImageType *</type>
      <name>Image</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>a53b496bc6d28c19f370ae1576d53d6ae</anchor>
      <arglist>(int idx) const</arglist>
    </member>
    <member kind="function">
      <type>ImageType *</type>
      <name>Image</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>a08774865dde397e497f6580afd29f2f5</anchor>
      <arglist>(int f, int c) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageSequence</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>aa1fe71644f47f398399f3391f099681c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageSequence</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>ab48af53c9d30bf28d22717845d39a06c</anchor>
      <arglist>(const ImageSequence &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ImageToWorld</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>a5a9a5df6d71f0ca9d0ee28d7252499ec</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NumberOfChannels</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>a8253c1626078e3b27eab13dd5420b92f</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfChannels</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>a6e8d0a84a923a5ef80c7165b85520b3d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NumberOfFrames</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>a635eb04fcf9a0d43cdc571d137c8f234</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfFrames</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>a3705ca9888e6cd8e6f78597f4c3496a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfImages</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>abf855b250cf4dca6c41b773b7256f63b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfVoxels</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>a7fa5f03089f4b804f9cbca27edb3adfb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ImageSequence &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>a2ebb3d4c4746e203e563aab34c8c38c8</anchor>
      <arglist>(const ImageSequence &amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>T</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>ab38dc66ab2167f09a075fb32df63692f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Time</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>ab6aedf9a79de8a7acf2f102617df9982</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WorldToImage</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>a51e8b4226d3143230d3e166ae30d38c1</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>X</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>a1c95e333d148329bd8d1f99b42395674</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>XSize</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>a5cf60f0346bc0294e9ade2600c3d1998</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Y</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>a58ef85ccffa8f315aabeea81a2182781</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>YSize</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>a48fb48d9b575d2f0c92d216bf0b26d70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Z</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>aab4941b28a92e59d58fe7459361f4605</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ZSize</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>a00584ec8fff5e522731e4f3e97000c42</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ImageSequence</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>ae039bb68461ad626ad5bfd0ef943e56a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ImageSimilarity</name>
    <filename>classmirtk_1_1ImageSimilarity.html</filename>
    <base>mirtk::DataFidelity</base>
    <member kind="enumvalue">
      <name>FG_Domain</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a622ec224d9b467b0cf408a3ceafd50aaa8837ef7908e075ecd9e38b15841f75b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FG_Mask</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a622ec224d9b467b0cf408a3ceafd50aaa56e65345e8481bacd1bcac989c6b12aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FG_Overlap</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a622ec224d9b467b0cf408a3ceafd50aaa08379526111242f565526c3f4fbfb5c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FG_Target</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a622ec224d9b467b0cf408a3ceafd50aaa40b7102b43d2a7b6d04f4ca4577bdd2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FG_Union</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a622ec224d9b467b0cf408a3ceafd50aaa8d399388b6b76e7750c7021b78d53d43</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ForegroundRegion</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a622ec224d9b467b0cf408a3ceafd50aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FG_Domain</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a622ec224d9b467b0cf408a3ceafd50aaa8837ef7908e075ecd9e38b15841f75b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FG_Mask</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a622ec224d9b467b0cf408a3ceafd50aaa56e65345e8481bacd1bcac989c6b12aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FG_Target</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a622ec224d9b467b0cf408a3ceafd50aaa40b7102b43d2a7b6d04f4ca4577bdd2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FG_Overlap</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a622ec224d9b467b0cf408a3ceafd50aaa08379526111242f565526c3f4fbfb5c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FG_Union</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a622ec224d9b467b0cf408a3ceafd50aaa8d399388b6b76e7750c7021b78d53d43</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericImage&lt; GradientType &gt;</type>
      <name>GradientImageType</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>aaa6b698ebd88beddec018b062aca9897</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>GradientType</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a55cc139f7a3707a5538fbc95eac3c9e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RegisteredImage::VoxelType</type>
      <name>VoxelType</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a34474195fec252b6d5dcb89ec04ee66b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyAttributes</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a6d167e81157a2a98e583894ead30f473</anchor>
      <arglist>(const ImageSimilarity &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Exclude</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a5debefb5796e477c5cf53218f0d31cf0</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Include</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a640f80ec45e3fab79de67d8aab271948</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>ae23fb6a77f5d80a72489cb704499b9ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsForeground</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a4af72a89c6e91be5e318e3cd379e8284</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsForeground</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a2822466e1e62220b268835d1fbb10d53</anchor>
      <arglist>(int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a250d7d3c73491fb2399b2a8088734c37</anchor>
      <arglist>(bool, InitialUpdate)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkComponentMacro</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a52a930d1a1f178623ae5fe15bc09e9e8</anchor>
      <arglist>(GradientImageType, GradientWrtTarget)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkComponentMacro</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a9ed1193e55e59887d287f3e73584aeb9</anchor>
      <arglist>(GradientImageType, GradientWrtSource)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkComponentMacro</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>adbb698a18df83e6bc94dbd3f6327464c</anchor>
      <arglist>(double, Gradient)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkLooseComponentMacro</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a59a402ae1caa75ec40c2f2aabfca211f</anchor>
      <arglist>(RegisteredImage, Target)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkLooseComponentMacro</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>af5b29cbee9e42d16b843f531f807d9c8</anchor>
      <arglist>(RegisteredImage, Source)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>acd79ea1162815df26d79d01664a73b78</anchor>
      <arglist>(BinaryImage, Mask)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a8cbf9e27b65d76d8ba43b92e155c863f</anchor>
      <arglist>(ImageAttributes, Domain)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a72b767888caec12685ba8b3da06bdf8c</anchor>
      <arglist>(ForegroundRegion, Foreground)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a922aa5a0598a7caa50cb1bcfbda41778</anchor>
      <arglist>(int, NumberOfVoxels)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a7b786276cade108a6abfe423a0b77461</anchor>
      <arglist>(bool, NormalizeImageGradient)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a2f1b7c53f8d63146ce952e833c8349cd</anchor>
      <arglist>(bool, UseApproximateGradient)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a77ce05f40c5fa4332465fde1ae236218</anchor>
      <arglist>(double, VoxelWisePreconditioning)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a93ba237069bd4dd9873a28c878eb7250</anchor>
      <arglist>(double, NodeBasedPreconditioning)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a025b40370cce23d1400d22ffb88cac5e</anchor>
      <arglist>(bool, SkipTargetInitialization)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a5562bf5c1b4e2163e7792bebd764f347</anchor>
      <arglist>(bool, SkipSourceInitialization)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a8744961e72a01cdd78b183a522305fbb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a37b62545c1758be9fbf4f1dec8d2e27e</anchor>
      <arglist>(Indent=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ReleaseSource</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a7ee70d460ea4dfaeada50384b307474d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ReleaseTarget</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>ac3b1968c83d22d4b0299053348add494</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a69da9ade4678e865416ecca7535a62b6</anchor>
      <arglist>(bool=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteDataSets</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a1fb62e53e7177d3be81d91c1be27b67e</anchor>
      <arglist>(const char *, const char *, bool=true) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteGradient</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a47e87875c8beed06261373f3db424bf1</anchor>
      <arglist>(const char *, const char *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImageSimilarity</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a66ce7c9d231d4bae60c487aa499087ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImageSimilarity *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a6d4c13a98d33f2cad6ca06afd2beb220</anchor>
      <arglist>(SimilarityMeasure, const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ApproximateGradient</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>abd83e3f94a3ec81dfa1cd736daca9a39</anchor>
      <arglist>(RegisteredImage *image, FreeFormTransformation *ffd, double *gradient, double step, double weight)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ApproximateGradient</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a7ce946810f498fba81d9b8c27983b0dc</anchor>
      <arglist>(RegisteredImage *image, double *gradient, double step, double weight)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a72366f98ea7d1bcd74889a5c98339eb5</anchor>
      <arglist>(RegisteredImage *image, GradientImageType *&amp;np_gradient, double *gradient, double step, double weight)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>abe5715489ea71fb861ac5d1c50061b20</anchor>
      <arglist>(double *gradient, double step, double weight)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImageSimilarity</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a3d02a354926433117faa57e55aef596a</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImageSimilarity</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a2e6840020defcee929395c81653ee140</anchor>
      <arglist>(const ImageSimilarity &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>InitializeInput</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a8da137da16ef27a9d847f933865a74ef</anchor>
      <arglist>(const ImageAttributes &amp;domain)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>MultiplyByImageGradient</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a118ef6822ff1ca93fd873b3248f02b73</anchor>
      <arglist>(const RegisteredImage *image, GradientImageType *gradient)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>NonParametricGradient</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a4d4a3161fb17db195cb962df9cffb0a6</anchor>
      <arglist>(const RegisteredImage *image, GradientImageType *gradient)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>NormalizeGradient</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a58165418605ad1b36e0edb237ad6172e</anchor>
      <arglist>(GradientImageType *gradient)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>NormalizeGradient</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a259b829149afb33e95d63114e94c9849</anchor>
      <arglist>(const RegisteredImage *image, double *gradient)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ImageSimilarity &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a9d9cce57ab827c2fce42b27ea1a6ee9a</anchor>
      <arglist>(const ImageSimilarity &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a3a462d733b5d7d0945ba19badf11ba5f</anchor>
      <arglist>(const RegisteredImage *image, GradientImageType *np_gradient, double *gradient, double weight)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithoutPrefix</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a7f20cb7c4fe19de82b0fdb012bb16cba</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::GenericRegistrationFilter::ImageSimilarityInfo</name>
    <filename>structmirtk_1_1GenericRegistrationFilter_1_1ImageSimilarityInfo.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>_DefaultSign</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1ImageSimilarityInfo.html</anchorfile>
      <anchor>af17ae36be200d87c218bb7198d514b05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SimilarityMeasure</type>
      <name>_Measure</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1ImageSimilarityInfo.html</anchorfile>
      <anchor>aaad661d49c729c2a037009b0918efb54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>_Name</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1ImageSimilarityInfo.html</anchorfile>
      <anchor>a575e52404dc12a13df3ce1ff1b873188</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_SourceIndex</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1ImageSimilarityInfo.html</anchorfile>
      <anchor>a8025b8a737c9327936bc030921dd0222</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TransformationInfo</type>
      <name>_SourceTransformation</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1ImageSimilarityInfo.html</anchorfile>
      <anchor>ae997651c8c1799db6668c7d73f7888c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_TargetIndex</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1ImageSimilarityInfo.html</anchorfile>
      <anchor>a797ef88ffc314df0262ae87c696483ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TransformationInfo</type>
      <name>_TargetTransformation</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1ImageSimilarityInfo.html</anchorfile>
      <anchor>ab3bf237ed709b0af4d2054bb534abfba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_Weight</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1ImageSimilarityInfo.html</anchorfile>
      <anchor>a513c9e616b20febd4ec53994ab9cd5a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ImageSurfaceStatistics</name>
    <filename>classmirtk_1_1ImageSurfaceStatistics.html</filename>
    <base>mirtk::SurfaceFilter</base>
    <member kind="function">
      <type></type>
      <name>ImageSurfaceStatistics</name>
      <anchorfile>classmirtk_1_1ImageSurfaceStatistics.html</anchorfile>
      <anchor>ab46272ef8be208a2cba8376f8b9bce98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageSurfaceStatistics</name>
      <anchorfile>classmirtk_1_1ImageSurfaceStatistics.html</anchorfile>
      <anchor>a30284679fcfdcc3b1b6bb1ca84cf5559</anchor>
      <arglist>(const ImageSurfaceStatistics &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ImageSurfaceStatistics &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1ImageSurfaceStatistics.html</anchorfile>
      <anchor>acd1ca909822ec530303d6a8f48aa0ff7</anchor>
      <arglist>(const ImageSurfaceStatistics &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImageSurfaceStatistics</name>
      <anchorfile>classmirtk_1_1ImageSurfaceStatistics.html</anchorfile>
      <anchor>a884649b9a82e975cc4183895a86a4b37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Execute</name>
      <anchorfile>classmirtk_1_1ImageSurfaceStatistics.html</anchorfile>
      <anchor>a4bbd2eac3816e4a712e04682e9903dd5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ImageToImage</name>
    <filename>classmirtk_1_1ImageToImage.html</filename>
    <templarg>TVoxel</templarg>
    <base>mirtk::Object</base>
    <member kind="typedef">
      <type>GenericImage&lt; VoxelType &gt;</type>
      <name>ImageType</name>
      <anchorfile>classmirtk_1_1ImageToImage.html</anchorfile>
      <anchor>a00305d97368a382b1390575ba1b3b13c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TVoxel</type>
      <name>VoxelType</name>
      <anchorfile>classmirtk_1_1ImageToImage.html</anchorfile>
      <anchor>acf4bd8bb898039c1ec60e6199def2a5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageToImage</name>
      <anchorfile>classmirtk_1_1ImageToImage.html</anchorfile>
      <anchor>ad8178f5ebe06619d7e05ca99c08da819</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>RequiresBuffering</name>
      <anchorfile>classmirtk_1_1ImageToImage.html</anchorfile>
      <anchor>a3e9cb15a557b4dfaf2da83c095de320c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1ImageToImage.html</anchorfile>
      <anchor>a24f7c58a556ba64263f04d04322fe062</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1ImageToImage.html</anchorfile>
      <anchor>a330d2ead06bcbcbb6a8cead8b38722f4</anchor>
      <arglist>(int, int, int, int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImageToImage</name>
      <anchorfile>classmirtk_1_1ImageToImage.html</anchorfile>
      <anchor>a28551fb003575de82b6015a11fbf9b8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1ImageToImage.html</anchorfile>
      <anchor>a7bdc1fa457bcf59bf64e8566aac6f9ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1ImageToImage.html</anchorfile>
      <anchor>af0128937402667f9572dfeee3d50d2d5</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1ImageToImage.html</anchorfile>
      <anchor>ab13e82af173b290188077d36922f3698</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAggregateMacro</name>
      <anchorfile>classmirtk_1_1ImageToImage.html</anchorfile>
      <anchor>a26c50174bc34f27bc33dc18feb64761a</anchor>
      <arglist>(ImageType, Buffer)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1ImageToImage.html</anchorfile>
      <anchor>ad881dd9d4ebeb16a008cba3e7b24a20b</anchor>
      <arglist>(const ImageType, Input)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1ImageToImage.html</anchorfile>
      <anchor>a1bf258919bc034578cd33e9247579bc4</anchor>
      <arglist>(ImageType, Output)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ImageToImage&lt; VoxelType &gt;</name>
    <filename>classmirtk_1_1ImageToImage.html</filename>
    <base>mirtk::Object</base>
    <member kind="typedef">
      <type>GenericImage&lt; VoxelType &gt;</type>
      <name>ImageType</name>
      <anchorfile>classmirtk_1_1ImageToImage.html</anchorfile>
      <anchor>a00305d97368a382b1390575ba1b3b13c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VoxelType</type>
      <name>VoxelType</name>
      <anchorfile>classmirtk_1_1ImageToImage.html</anchorfile>
      <anchor>acf4bd8bb898039c1ec60e6199def2a5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageToImage</name>
      <anchorfile>classmirtk_1_1ImageToImage.html</anchorfile>
      <anchor>ad8178f5ebe06619d7e05ca99c08da819</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>RequiresBuffering</name>
      <anchorfile>classmirtk_1_1ImageToImage.html</anchorfile>
      <anchor>a3e9cb15a557b4dfaf2da83c095de320c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1ImageToImage.html</anchorfile>
      <anchor>a24f7c58a556ba64263f04d04322fe062</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1ImageToImage.html</anchorfile>
      <anchor>a330d2ead06bcbcbb6a8cead8b38722f4</anchor>
      <arglist>(int, int, int, int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImageToImage</name>
      <anchorfile>classmirtk_1_1ImageToImage.html</anchorfile>
      <anchor>a28551fb003575de82b6015a11fbf9b8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1ImageToImage.html</anchorfile>
      <anchor>a7bdc1fa457bcf59bf64e8566aac6f9ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1ImageToImage.html</anchorfile>
      <anchor>af0128937402667f9572dfeee3d50d2d5</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1ImageToImage.html</anchorfile>
      <anchor>ab13e82af173b290188077d36922f3698</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAggregateMacro</name>
      <anchorfile>classmirtk_1_1ImageToImage.html</anchorfile>
      <anchor>a26c50174bc34f27bc33dc18feb64761a</anchor>
      <arglist>(ImageType, Buffer)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1ImageToImage.html</anchorfile>
      <anchor>ad881dd9d4ebeb16a008cba3e7b24a20b</anchor>
      <arglist>(const ImageType, Input)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1ImageToImage.html</anchorfile>
      <anchor>a1bf258919bc034578cd33e9247579bc4</anchor>
      <arglist>(ImageType, Output)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ImageTransformation</name>
    <filename>classmirtk_1_1ImageTransformation.html</filename>
    <base>mirtk::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Cache</name>
      <anchorfile>classmirtk_1_1ImageTransformation.html</anchorfile>
      <anchor>aaf8d6104f00d57d329a8a5204ea854e5</anchor>
      <arglist>(ImageTransformationCache *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageTransformation</name>
      <anchorfile>classmirtk_1_1ImageTransformation.html</anchorfile>
      <anchor>aa0378ea6a25ac541190ec5418c80e08d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Invert</name>
      <anchorfile>classmirtk_1_1ImageTransformation.html</anchorfile>
      <anchor>a87d9424c0b3873e13347d2d72cbf62b6</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1ImageTransformation.html</anchorfile>
      <anchor>ac6c7980a74eba71cceaecf54d3243ecd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Transformation</name>
      <anchorfile>classmirtk_1_1ImageTransformation.html</anchorfile>
      <anchor>a4bdd9aab60305cec1e6cb76e4b05a2af</anchor>
      <arglist>(const class Transformation *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImageTransformation</name>
      <anchorfile>classmirtk_1_1ImageTransformation.html</anchorfile>
      <anchor>ae3b5f1e044b9f6a840851cdc3b4973af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1ImageTransformation.html</anchorfile>
      <anchor>a70526b818bc7286e3d0f2083edb3e377</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ImageTransformationCache</name>
    <filename>classmirtk_1_1ImageTransformationCache.html</filename>
    <base>GenericImage&lt; RealPixel &gt;</base>
    <member kind="function">
      <type></type>
      <name>ImageTransformationCache</name>
      <anchorfile>classmirtk_1_1ImageTransformationCache.html</anchorfile>
      <anchor>a081076ada5676c826ff01113056cfd29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageTransformationCache</name>
      <anchorfile>classmirtk_1_1ImageTransformationCache.html</anchorfile>
      <anchor>a02670c1b3f10c4030b46fb89b6b10752</anchor>
      <arglist>(const ImageAttributes &amp;attr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImageTransformationCache</name>
      <anchorfile>classmirtk_1_1ImageTransformationCache.html</anchorfile>
      <anchor>a0b70b75d301ad4b01f771671d083a763</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ImageWriter</name>
    <filename>classmirtk_1_1ImageWriter.html</filename>
    <base protection="protected">mirtk::Cofstream</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1ImageWriter.html</anchorfile>
      <anchor>abdae43fe1b29568bb707099f89b9709c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImageWriter</name>
      <anchorfile>classmirtk_1_1ImageWriter.html</anchorfile>
      <anchor>a72f9d6dfcd34a85ded003510b0b3a535</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImageWriter *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1ImageWriter.html</anchorfile>
      <anchor>a655367294fdcd37a381edb028830b18a</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1ImageWriter.html</anchorfile>
      <anchor>a5db6d032d5d418f2a905e1502cdb5a89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImageWriter</name>
      <anchorfile>classmirtk_1_1ImageWriter.html</anchorfile>
      <anchor>a535d9f619d9e56f1125713c2b745665c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1ImageWriter.html</anchorfile>
      <anchor>a6002376480800af993cb751797730c34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_ReflectX</name>
      <anchorfile>classmirtk_1_1ImageWriter.html</anchorfile>
      <anchor>ab7054ab3fa7379ded2cd32b75babb0b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_ReflectY</name>
      <anchorfile>classmirtk_1_1ImageWriter.html</anchorfile>
      <anchor>ae7c1ac8aa4a0a20d782116302fb8f020</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_ReflectZ</name>
      <anchorfile>classmirtk_1_1ImageWriter.html</anchorfile>
      <anchor>a22671ce924727ba8bef72b5b46bc409d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_Start</name>
      <anchorfile>classmirtk_1_1ImageWriter.html</anchorfile>
      <anchor>ab4092861ea4ee82ad87c5ab5d33beded</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ImageWriterFactory</name>
    <filename>classmirtk_1_1ImageWriterFactory.html</filename>
    <member kind="typedef">
      <type>ImageWriter *(*</type>
      <name>ImageWriterCreator</name>
      <anchorfile>classmirtk_1_1ImageWriterFactory.html</anchorfile>
      <anchor>a09e80c1daede84304c3b5b5597e66bf0</anchor>
      <arglist>)()</arglist>
    </member>
    <member kind="function">
      <type>ImageWriter *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1ImageWriterFactory.html</anchorfile>
      <anchor>a87c9b72c74042341eaf6901c2b608864</anchor>
      <arglist>(const char *fname) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Register</name>
      <anchorfile>classmirtk_1_1ImageWriterFactory.html</anchorfile>
      <anchor>af8c5b6fed9eb03c90156249e68b6ed51</anchor>
      <arglist>(const Array&lt; string &gt; &amp;exts, ImageWriterCreator creator)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImageWriterFactory &amp;</type>
      <name>Instance</name>
      <anchorfile>classmirtk_1_1ImageWriterFactory.html</anchorfile>
      <anchor>a8bff0f6e5a4ab6076d510f79950397a5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ImplicitSurfaceDistance</name>
    <filename>classmirtk_1_1ImplicitSurfaceDistance.html</filename>
    <base>mirtk::ImplicitSurfaceForce</base>
    <member kind="function">
      <type></type>
      <name>ImplicitSurfaceDistance</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceDistance.html</anchorfile>
      <anchor>a999bf9295ada0651c4c7ef7f91a4da56</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImplicitSurfaceDistance</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceDistance.html</anchorfile>
      <anchor>af4a0ba1cfb8c0d932afa150f5194e0be</anchor>
      <arglist>(const ImplicitSurfaceDistance &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceDistance.html</anchorfile>
      <anchor>af573d01a95bac7fc568497c2037e35e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ImplicitSurfaceDistance &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceDistance.html</anchorfile>
      <anchor>ad0f1aa90b5238d1234016ea98a319d32</anchor>
      <arglist>(const ImplicitSurfaceDistance &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceDistance.html</anchorfile>
      <anchor>ae99f95b4f248dc13952976379dd99613</anchor>
      <arglist>(bool=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImplicitSurfaceDistance</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceDistance.html</anchorfile>
      <anchor>ada7843657c59c774c93546eb8440ce8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceDistance.html</anchorfile>
      <anchor>ab122074997626af7922b0056a26d8504</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceDistance.html</anchorfile>
      <anchor>a44464ef8513383868eba716e5d3ea929</anchor>
      <arglist>(double *, double, double)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UpdateMagnitude</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceDistance.html</anchorfile>
      <anchor>adb95e8ba7ff3d9baa4ea410514c1244d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ImplicitSurfaceForce</name>
    <filename>classmirtk_1_1ImplicitSurfaceForce.html</filename>
    <base>mirtk::SurfaceForce</base>
    <member kind="enumeration">
      <type></type>
      <name>DistanceMeasureType</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceForce.html</anchorfile>
      <anchor>a13f2e7e79ed8292b852e1a086646a9ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DM_Minimum</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceForce.html</anchorfile>
      <anchor>a13f2e7e79ed8292b852e1a086646a9acaf696d0075ee23f1b65497fac05fb150e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DM_Normal</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceForce.html</anchorfile>
      <anchor>a13f2e7e79ed8292b852e1a086646a9aca21e796d6b2429fc773956919741a49a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DM_Minimum</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceForce.html</anchorfile>
      <anchor>a13f2e7e79ed8292b852e1a086646a9acaf696d0075ee23f1b65497fac05fb150e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DM_Normal</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceForce.html</anchorfile>
      <anchor>a13f2e7e79ed8292b852e1a086646a9aca21e796d6b2429fc773956919741a49a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Distance</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceForce.html</anchorfile>
      <anchor>ae9e01831de76907f24316330d5893f21</anchor>
      <arglist>(const double p[3]) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Distance</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceForce.html</anchorfile>
      <anchor>afa4847589d782a3e7c01b909e1793acc</anchor>
      <arglist>(const double p[3], const double n[3]) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DistanceGradient</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceForce.html</anchorfile>
      <anchor>a530c2a954deedc59b67ef4a16168878c</anchor>
      <arglist>(const double p[3], double g[3], bool normalize=false) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceForce.html</anchorfile>
      <anchor>a3961cdf4972116f17fe21d0f154646e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceForce.html</anchorfile>
      <anchor>acf2f63792c7ea6bb206504862ae84c62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SelfDistance</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceForce.html</anchorfile>
      <anchor>a8fc974d42ba809aace835f5199fee83c</anchor>
      <arglist>(const double p[3], const double n[3]) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImplicitSurfaceForce</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceForce.html</anchorfile>
      <anchor>a09f8727c8793602da7842dddf10e44d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>vtkDataArray *</type>
      <name>Distances</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceForce.html</anchorfile>
      <anchor>a210aa2d94416c2b0a5520288ee41c21e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImplicitSurfaceForce</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceForce.html</anchorfile>
      <anchor>abf7e13b5b592aa239c48f14858711f60</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImplicitSurfaceForce</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceForce.html</anchorfile>
      <anchor>adf55b7dcbf88e470d33f7ce7620bf00e</anchor>
      <arglist>(const ImplicitSurfaceForce &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>InitializeDistances</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceForce.html</anchorfile>
      <anchor>ad82711ce86888aabf16755d8a7b504fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>InitializeMinimumDistances</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceForce.html</anchorfile>
      <anchor>ae5b35d89fbc74d482bbb371f15496be6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>InitializeNormalDistances</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceForce.html</anchorfile>
      <anchor>abde626a9df09ddca070807266364403e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>vtkDataArray *</type>
      <name>MinimumDistances</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceForce.html</anchorfile>
      <anchor>a4160619220eb8e9126287b99a3b87271</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>vtkDataArray *</type>
      <name>NormalDistances</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceForce.html</anchorfile>
      <anchor>a5d05b9a4f55eaeb37d242d4134205e47</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ImplicitSurfaceForce &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceForce.html</anchorfile>
      <anchor>ae8cf652f839835511e7ebeea9cc7be3f</anchor>
      <arglist>(const ImplicitSurfaceForce &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithoutPrefix</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceForce.html</anchorfile>
      <anchor>ab80f2327223695d522e2a47f6089c9b5</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithPrefix</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceForce.html</anchorfile>
      <anchor>af9b20abbef15d54a31aff4ca88479d94</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UpdateDistances</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceForce.html</anchorfile>
      <anchor>a9ba76c93c1c31f0f4e5043eaf4aade39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UpdateMinimumDistances</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceForce.html</anchorfile>
      <anchor>a1fb5b9f499a375e0db0c7a316aae03ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UpdateNormalDistances</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceForce.html</anchorfile>
      <anchor>a33cc2946af2c6dc6accab868260ea78c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::Indent</name>
    <filename>classmirtk_1_1Indent.html</filename>
    <member kind="function">
      <type></type>
      <name>Indent</name>
      <anchorfile>classmirtk_1_1Indent.html</anchorfile>
      <anchor>a293a8ca03437678ad8a7b3e0a2015abc</anchor>
      <arglist>(int n=0, int s=2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Indent</name>
      <anchorfile>classmirtk_1_1Indent.html</anchorfile>
      <anchor>a11b23afaad2b591d3de2fa75dc25b45b</anchor>
      <arglist>(const Indent &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Level</name>
      <anchorfile>classmirtk_1_1Indent.html</anchorfile>
      <anchor>ac979559324483b42c6ba1f0fb5d71ead</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Indent</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1Indent.html</anchorfile>
      <anchor>a41bfe783ad7f7ea31c979e697446e790</anchor>
      <arglist>(const Indent &amp;indent) const</arglist>
    </member>
    <member kind="function">
      <type>Indent &amp;</type>
      <name>operator++</name>
      <anchorfile>classmirtk_1_1Indent.html</anchorfile>
      <anchor>a7bbc89c874d4dd66c0fb338ae89f5eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Indent</type>
      <name>operator++</name>
      <anchorfile>classmirtk_1_1Indent.html</anchorfile>
      <anchor>a7b917cfc1eec7a02351bb99450dd516e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>Indent &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1Indent.html</anchorfile>
      <anchor>ae57fca7786fcf44908e402c9b5698aa7</anchor>
      <arglist>(const Indent &amp;indent)</arglist>
    </member>
    <member kind="function">
      <type>Indent</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1Indent.html</anchorfile>
      <anchor>a07e794d5105263ee3ae75ff84bde0d56</anchor>
      <arglist>(const Indent &amp;indent) const</arglist>
    </member>
    <member kind="function">
      <type>Indent &amp;</type>
      <name>operator--</name>
      <anchorfile>classmirtk_1_1Indent.html</anchorfile>
      <anchor>a84c3d8592107179f0cef2f4cb3fe6a95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Indent</type>
      <name>operator--</name>
      <anchorfile>classmirtk_1_1Indent.html</anchorfile>
      <anchor>aa07523439bca2bab0aa88765e8770775</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>Indent &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1Indent.html</anchorfile>
      <anchor>a4368823bdf06457cda0386804db04e70</anchor>
      <arglist>(const Indent &amp;indent)</arglist>
    </member>
    <member kind="function">
      <type>Indent &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1Indent.html</anchorfile>
      <anchor>a7118c91cd7a444a4589aa830863e685c</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>Indent &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1Indent.html</anchorfile>
      <anchor>a114f7899cff6e83e02ff83154d178f8a</anchor>
      <arglist>(const Indent &amp;indent)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Spaces</name>
      <anchorfile>classmirtk_1_1Indent.html</anchorfile>
      <anchor>af45d3e1376bfd97aae76a3d03737493d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SpacesPerLevel</name>
      <anchorfile>classmirtk_1_1Indent.html</anchorfile>
      <anchor>afd57de03b5895fb7525cf10072554f6a</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SpacesPerLevel</name>
      <anchorfile>classmirtk_1_1Indent.html</anchorfile>
      <anchor>a44c8ab85e24b7698a2e02939deb31195</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_N</name>
      <anchorfile>classmirtk_1_1Indent.html</anchorfile>
      <anchor>ab8c7c5484d42b0f542ea83eec62a9b54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_NumberOfSpaces</name>
      <anchorfile>classmirtk_1_1Indent.html</anchorfile>
      <anchor>a5cf10650a49a9c10ce689908d73dc08f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::IndexExtrapolateImageFunction</name>
    <filename>classmirtk_1_1IndexExtrapolateImageFunction.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericExtrapolateImageFunction</base>
    <member kind="typedef">
      <type>TImage</type>
      <name>ImageType</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a1868c1fea95c1243173b429e891a232f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImageType::RealType</type>
      <name>RealType</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a138ca258a1a77f09baf39d4e02751b7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImageType::VoxelType</type>
      <name>VoxelType</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a2cc6d24e4ab60fa2f2c99e13a6b52a72</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a4e4e4087f4dc9ae3a0bf4fbd9d7e528a</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>ae8aacac9b05741b0e0aa1e17e1903e70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsForeground</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a509fcabccf8e5190834c8cdda9e4c282</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Transform</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>ab0c87c7cd87cb062243beb4a8ce9d2e8</anchor>
      <arglist>(int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Transform</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a9f14d042178f53e080e6a3263358dd6a</anchor>
      <arglist>(int &amp;, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Transform</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a2249948fb13f9efe117426cfe246057e</anchor>
      <arglist>(int &amp;, int &amp;, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>TransformIndex</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a278dbc99c961dd8ae71489b87b02aa05</anchor>
      <arglist>(int &amp;idx, int max) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>TransformT</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>ad29064aa730c2b078bd51248107e4b68</anchor>
      <arglist>(int &amp;l) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>TransformT</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a745ac3a601b97c16e57168bc0c2a1f93</anchor>
      <arglist>(int &amp;l, int c) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TransformX</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a028af9f49fd8d194c143ac4a31f44716</anchor>
      <arglist>(int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TransformX</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>aea330fd0f37290870ba7895180971b52</anchor>
      <arglist>(int &amp;, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TransformY</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>aa49d39219d454b5b47c9afa4632e500f</anchor>
      <arglist>(int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TransformY</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a714ab8f95ef8049f6a818bc9093b4b96</anchor>
      <arglist>(int &amp;, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TransformZ</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>af256b8acaf14e692a58f7c29764909e6</anchor>
      <arglist>(int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TransformZ</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a6dbf22fd3f675b49e8990d2f902bcf34</anchor>
      <arglist>(int &amp;, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IndexExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a26674588f01f2a3b9f80114a0d2d6b3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IndexExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>ad436529ab7a2a53fefa652bcb6d7669a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_tmax</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a98c67188327d04f09a7f9d334a04024b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_xmax</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>aa138da4590f6d6c6a35d0907c1f97efd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_ymax</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a1f6705775ba8ae4b8342bb155b239474</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_zmax</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a95b991eb6c2c5e1dd29e82a8b0caa7cd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IndexExtrapolateImageFunction&lt; BaseImage &gt;</name>
    <filename>classmirtk_1_1IndexExtrapolateImageFunction.html</filename>
    <base>GenericExtrapolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="typedef">
      <type>BaseImage</type>
      <name>ImageType</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a1868c1fea95c1243173b429e891a232f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImageType::RealType</type>
      <name>RealType</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a138ca258a1a77f09baf39d4e02751b7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImageType::VoxelType</type>
      <name>VoxelType</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a2cc6d24e4ab60fa2f2c99e13a6b52a72</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a4e4e4087f4dc9ae3a0bf4fbd9d7e528a</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>ae8aacac9b05741b0e0aa1e17e1903e70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsForeground</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a509fcabccf8e5190834c8cdda9e4c282</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Transform</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>ab0c87c7cd87cb062243beb4a8ce9d2e8</anchor>
      <arglist>(int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Transform</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a9f14d042178f53e080e6a3263358dd6a</anchor>
      <arglist>(int &amp;, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Transform</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a2249948fb13f9efe117426cfe246057e</anchor>
      <arglist>(int &amp;, int &amp;, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>TransformIndex</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a278dbc99c961dd8ae71489b87b02aa05</anchor>
      <arglist>(int &amp;idx, int max) const=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>TransformT</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>ad29064aa730c2b078bd51248107e4b68</anchor>
      <arglist>(int &amp;l) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>TransformT</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a745ac3a601b97c16e57168bc0c2a1f93</anchor>
      <arglist>(int &amp;l, int c) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TransformX</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a028af9f49fd8d194c143ac4a31f44716</anchor>
      <arglist>(int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TransformX</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>aea330fd0f37290870ba7895180971b52</anchor>
      <arglist>(int &amp;, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TransformY</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>aa49d39219d454b5b47c9afa4632e500f</anchor>
      <arglist>(int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TransformY</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a714ab8f95ef8049f6a818bc9093b4b96</anchor>
      <arglist>(int &amp;, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TransformZ</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>af256b8acaf14e692a58f7c29764909e6</anchor>
      <arglist>(int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TransformZ</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a6dbf22fd3f675b49e8990d2f902bcf34</anchor>
      <arglist>(int &amp;, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IndexExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a26674588f01f2a3b9f80114a0d2d6b3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IndexExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>ad436529ab7a2a53fefa652bcb6d7669a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_tmax</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a98c67188327d04f09a7f9d334a04024b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_xmax</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>aa138da4590f6d6c6a35d0907c1f97efd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_ymax</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a1f6705775ba8ae4b8342bb155b239474</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_zmax</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a95b991eb6c2c5e1dd29e82a8b0caa7cd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::InexactLineSearch</name>
    <filename>classmirtk_1_1InexactLineSearch.html</filename>
    <base>mirtk::LineSearch</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Function</name>
      <anchorfile>classmirtk_1_1InexactLineSearch.html</anchorfile>
      <anchor>a23f6d4c5e880b9e4c0c7da96a0e93fee</anchor>
      <arglist>(ObjectiveFunction *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InexactLineSearch</name>
      <anchorfile>classmirtk_1_1InexactLineSearch.html</anchorfile>
      <anchor>a9846d769074bbb1fef0cdf64d34352e7</anchor>
      <arglist>(ObjectiveFunction *=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InexactLineSearch</name>
      <anchorfile>classmirtk_1_1InexactLineSearch.html</anchorfile>
      <anchor>a9ee09cd015f81ff131059bdc1c2b8795</anchor>
      <arglist>(const InexactLineSearch &amp;)</arglist>
    </member>
    <member kind="function">
      <type>InexactLineSearch &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1InexactLineSearch.html</anchorfile>
      <anchor>a14eec09a82f86b73a9b8d50a2e9a1b4f</anchor>
      <arglist>(const InexactLineSearch &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1InexactLineSearch.html</anchorfile>
      <anchor>aadd12b657894124ce54971e2c3f3df11</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1InexactLineSearch.html</anchorfile>
      <anchor>a64c30d8674da15e23c24db4c20c73c9c</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InexactLineSearch</name>
      <anchorfile>classmirtk_1_1InexactLineSearch.html</anchorfile>
      <anchor>a98a5b0862a1f441ec57dc95aa80bc4f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>Advance</name>
      <anchorfile>classmirtk_1_1InexactLineSearch.html</anchorfile>
      <anchor>ad758aca9c9fe0452874485c14b5e02e0</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Retreat</name>
      <anchorfile>classmirtk_1_1InexactLineSearch.html</anchorfile>
      <anchor>a0c73a9852da55518faec13a122ddc534</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>Value</name>
      <anchorfile>classmirtk_1_1InexactLineSearch.html</anchorfile>
      <anchor>ad18e32a90fe9deb648b6a1a20a938061</anchor>
      <arglist>(double, double *=NULL)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>_CurrentDoFValues</name>
      <anchorfile>classmirtk_1_1InexactLineSearch.html</anchorfile>
      <anchor>a1b9a0e599096ed8fbdbab9b4aefd8832</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>_ScaledDirection</name>
      <anchorfile>classmirtk_1_1InexactLineSearch.html</anchorfile>
      <anchor>aad2119085e3eb4130b351649279dfe69</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::InflationForce</name>
    <filename>classmirtk_1_1InflationForce.html</filename>
    <base>mirtk::SurfaceConstraint</base>
    <member kind="function">
      <type></type>
      <name>InflationForce</name>
      <anchorfile>classmirtk_1_1InflationForce.html</anchorfile>
      <anchor>a2d7a9e6a2dbc67712e2d7f1449f7babe</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InflationForce</name>
      <anchorfile>classmirtk_1_1InflationForce.html</anchorfile>
      <anchor>a77d337a4223f6527b77bd52aab530a7f</anchor>
      <arglist>(const InflationForce &amp;)</arglist>
    </member>
    <member kind="function">
      <type>InflationForce &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1InflationForce.html</anchorfile>
      <anchor>abebed65540eaeff64750ee767f2dfefc</anchor>
      <arglist>(const InflationForce &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InflationForce</name>
      <anchorfile>classmirtk_1_1InflationForce.html</anchorfile>
      <anchor>a2b0e79be7ab622963e52c8ed6bbf4919</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1InflationForce.html</anchorfile>
      <anchor>af37cebec66c5708c5bbb470d13e8b0ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1InflationForce.html</anchorfile>
      <anchor>a0b3c4884f295ec3fc73c2a483fe99dd4</anchor>
      <arglist>(double *, double, double)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::InflationStoppingCriterion</name>
    <filename>classmirtk_1_1InflationStoppingCriterion.html</filename>
    <base>mirtk::StoppingCriterion</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Fulfilled</name>
      <anchorfile>classmirtk_1_1InflationStoppingCriterion.html</anchorfile>
      <anchor>a562857aa8b1a695eafa2d2828fc2a824</anchor>
      <arglist>(int iter, double value, const double *delta)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InflationStoppingCriterion</name>
      <anchorfile>classmirtk_1_1InflationStoppingCriterion.html</anchorfile>
      <anchor>a086e4c7469d72e4f7c76882482235864</anchor>
      <arglist>(const ObjectiveFunction *=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InflationStoppingCriterion</name>
      <anchorfile>classmirtk_1_1InflationStoppingCriterion.html</anchorfile>
      <anchor>a82ea89d0d9755bcc54546988d6ce887d</anchor>
      <arglist>(const InflationStoppingCriterion &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StoppingCriterion *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1InflationStoppingCriterion.html</anchorfile>
      <anchor>a45b48c3051de7c4cd646b1c7fd3cde35</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InflationStoppingCriterion &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1InflationStoppingCriterion.html</anchorfile>
      <anchor>af579f93c90a40371fc9121dadf5002c8</anchor>
      <arglist>(const InflationStoppingCriterion &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1InflationStoppingCriterion.html</anchorfile>
      <anchor>a24ae7454cc491bcf2684c49db4afe250</anchor>
      <arglist>(ostream &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InflationStoppingCriterion</name>
      <anchorfile>classmirtk_1_1InflationStoppingCriterion.html</anchorfile>
      <anchor>a75bf682cedc8f6814adbc70f88b05508</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ForEachVoxelDomain::InMask</name>
    <filename>structmirtk_1_1ForEachVoxelDomain_1_1InMask.html</filename>
  </compound>
  <compound kind="struct">
    <name>mirtk::InterpolationDomain::Inside</name>
    <filename>structmirtk_1_1InterpolationDomain_1_1Inside.html</filename>
  </compound>
  <compound kind="struct">
    <name>mirtk::ForEachVoxelDomain::InSpatialMask</name>
    <filename>structmirtk_1_1ForEachVoxelDomain_1_1InSpatialMask.html</filename>
  </compound>
  <compound kind="class">
    <name>mirtk::IntensityCorrelationRatioXY</name>
    <filename>classmirtk_1_1IntensityCorrelationRatioXY.html</filename>
    <base>mirtk::HistogramImageSimilarity</base>
    <member kind="function">
      <type></type>
      <name>IntensityCorrelationRatioXY</name>
      <anchorfile>classmirtk_1_1IntensityCorrelationRatioXY.html</anchorfile>
      <anchor>a33628d84c6e9770c7fb3815b6503e31a</anchor>
      <arglist>(const char *=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntensityCorrelationRatioXY</name>
      <anchorfile>classmirtk_1_1IntensityCorrelationRatioXY.html</anchorfile>
      <anchor>acc404b9de0c57126e4fdba0c523601c6</anchor>
      <arglist>(const IntensityCorrelationRatioXY &amp;)</arglist>
    </member>
    <member kind="function">
      <type>IntensityCorrelationRatioXY &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1IntensityCorrelationRatioXY.html</anchorfile>
      <anchor>a35f5e82355546f7e05533b131d8093b5</anchor>
      <arglist>(const IntensityCorrelationRatioXY &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IntensityCorrelationRatioXY</name>
      <anchorfile>classmirtk_1_1IntensityCorrelationRatioXY.html</anchorfile>
      <anchor>a4a010e179251b476b2ca98895f3fa3d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1IntensityCorrelationRatioXY.html</anchorfile>
      <anchor>a2494960de1692e04ae3c6b722c260292</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::IntensityCorrelationRatioYX</name>
    <filename>classmirtk_1_1IntensityCorrelationRatioYX.html</filename>
    <base>mirtk::HistogramImageSimilarity</base>
    <member kind="function">
      <type></type>
      <name>IntensityCorrelationRatioYX</name>
      <anchorfile>classmirtk_1_1IntensityCorrelationRatioYX.html</anchorfile>
      <anchor>ab509f8a2bc02e3fcab50486fe26f751e</anchor>
      <arglist>(const char *=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntensityCorrelationRatioYX</name>
      <anchorfile>classmirtk_1_1IntensityCorrelationRatioYX.html</anchorfile>
      <anchor>a2e80ef8eefee16e26eead8c3e27a6c61</anchor>
      <arglist>(const IntensityCorrelationRatioYX &amp;)</arglist>
    </member>
    <member kind="function">
      <type>IntensityCorrelationRatioYX &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1IntensityCorrelationRatioYX.html</anchorfile>
      <anchor>a7a027b20b77102b32b40ef1797a42c4a</anchor>
      <arglist>(const IntensityCorrelationRatioYX &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IntensityCorrelationRatioYX</name>
      <anchorfile>classmirtk_1_1IntensityCorrelationRatioYX.html</anchorfile>
      <anchor>a90df6b91c05617df6d4a491524e71cf2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1IntensityCorrelationRatioYX.html</anchorfile>
      <anchor>adfc48f94558ad09f5970b9d204ebd324</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::IntensityCrossCorrelation</name>
    <filename>classmirtk_1_1IntensityCrossCorrelation.html</filename>
    <base>mirtk::NormalizedIntensityCrossCorrelation</base>
    <member kind="function">
      <type></type>
      <name>IntensityCrossCorrelation</name>
      <anchorfile>classmirtk_1_1IntensityCrossCorrelation.html</anchorfile>
      <anchor>aaac602e4577bc43f857a29364ae79b93</anchor>
      <arglist>(const char *=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntensityCrossCorrelation</name>
      <anchorfile>classmirtk_1_1IntensityCrossCorrelation.html</anchorfile>
      <anchor>a276449c4d0ee4cf3e8d09999fb0f0468</anchor>
      <arglist>(const IntensityCrossCorrelation &amp;)</arglist>
    </member>
    <member kind="function">
      <type>IntensityCrossCorrelation &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1IntensityCrossCorrelation.html</anchorfile>
      <anchor>adf43ec8534673ae2cfd441d745eb9bb2</anchor>
      <arglist>(const IntensityCrossCorrelation &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IntensityCrossCorrelation</name>
      <anchorfile>classmirtk_1_1IntensityCrossCorrelation.html</anchorfile>
      <anchor>a2fa8306826344671bfb3c35da257f15d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::InternalForce</name>
    <filename>classmirtk_1_1InternalForce.html</filename>
    <base>mirtk::PointSetForce</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1InternalForce.html</anchorfile>
      <anchor>a97d8af4cb3520e8c8aacafc3fa21fe35</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InternalForce</name>
      <anchorfile>classmirtk_1_1InternalForce.html</anchorfile>
      <anchor>ab29efabbe8a6b3520ff7cb3dfc71d8e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static InternalForce *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1InternalForce.html</anchorfile>
      <anchor>acd27dddbb4a709f4833d160af2e594d1</anchor>
      <arglist>(InternalForceTerm, const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1InternalForce.html</anchorfile>
      <anchor>a4b287861f8273733d7b95844e369270b</anchor>
      <arglist>(double *gradient, double step, double weight)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>vtkDataArray *</type>
      <name>ExternalMagnitude</name>
      <anchorfile>classmirtk_1_1InternalForce.html</anchorfile>
      <anchor>acd4b7ebec2e665fbc78555120561c0a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>InternalForce</name>
      <anchorfile>classmirtk_1_1InternalForce.html</anchorfile>
      <anchor>a5b4a1fead85df8201884cc0a2098982c</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>InternalForce</name>
      <anchorfile>classmirtk_1_1InternalForce.html</anchorfile>
      <anchor>abbb903c673b61af4889f53d274134e31</anchor>
      <arglist>(const InternalForce &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>InternalForce &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1InternalForce.html</anchorfile>
      <anchor>af3b508a9942a8e33946bb57a68d85586</anchor>
      <arglist>(const InternalForce &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithoutPrefix</name>
      <anchorfile>classmirtk_1_1InternalForce.html</anchorfile>
      <anchor>a2aae5f291cf4df9526421bb0bd17a52b</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::MultipleVoxelTransformation::Interpolate</name>
    <filename>structmirtk_1_1MultipleVoxelTransformation_1_1Interpolate.html</filename>
    <templarg></templarg>
    <base>mirtk::MultipleVoxelTransformation::Base</base>
    <member kind="function">
      <type>void</type>
      <name>InitializeMemory</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1Interpolate.html</anchorfile>
      <anchor>a406862ce55b8d0097d44b94b1d7a82e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Interpolate</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1Interpolate.html</anchorfile>
      <anchor>a2cac78063b1e7bcc5cb66fa8690bce2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Interpolate</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1Interpolate.html</anchorfile>
      <anchor>a909ee3040783d5c1fcd2be72abb23db4</anchor>
      <arglist>(const Interpolate &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Interpolate</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1Interpolate.html</anchorfile>
      <anchor>a668a0cc639d354cf7894e5460beb8c4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>_v</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1Interpolate.html</anchorfile>
      <anchor>a1335f9a81124611663bb1d77302e486c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::UnaryVoxelFunction::InterpolateImage</name>
    <filename>structmirtk_1_1UnaryVoxelFunction_1_1InterpolateImage.html</filename>
    <templarg>TInterpolator</templarg>
    <base>mirtk::VoxelFunction</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1UnaryVoxelFunction_1_1InterpolateImage.html</anchorfile>
      <anchor>a8c0d467c5d33cb9320816839e7c9ca10</anchor>
      <arglist>(int i, int j, int k, int l, T *o)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::InterpolateImageFunction</name>
    <filename>classmirtk_1_1InterpolateImageFunction.html</filename>
    <base>mirtk::ImageFunction</base>
    <member kind="function">
      <type>const ImageAttributes &amp;</type>
      <name>Attributes</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>ae5a1537d0cdb44769846f0fc4fbef4bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a89661aff90949acdd4413b47da260fe4</anchor>
      <arglist>(double, double, int &amp;, int &amp;, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>ad36a1a58c4e02561e2d844bce18068df</anchor>
      <arglist>(double, double, double, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>aa782b3cbd1580a00cd7d29922816e800</anchor>
      <arglist>(double, double, double, double, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>BoundingInterval</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a5045c72e2a238208370d0279eb4469df</anchor>
      <arglist>(double, int &amp;, int &amp;) const =0</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a481881260c93bd6c49fab3b5a22ee40e</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>af0c06c2f50e7bc092b45de63f821e9e2</anchor>
      <arglist>(const Point &amp;, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>afb9c9c42952daa3c38f596415d5f8b67</anchor>
      <arglist>(double, double, double=0, double=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a5556e765e2506ee47974ed52ea66d304</anchor>
      <arglist>(double *, double, double, double=0, int=1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a54202dfbbe3b2a9686784a3d13427f01</anchor>
      <arglist>(double *, const Point &amp;, int=1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a2fd820d8f110120afdb71d6b2cce3ff6</anchor>
      <arglist>(Vector &amp;, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>aab351596a2d576f6674e617dac6f9ece</anchor>
      <arglist>(GenericImage&lt; TVoxel &gt; &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>EvaluateInside</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a48a6dc11bdcfc33cd5cd0114d293aed1</anchor>
      <arglist>(double, double, double=0, double=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateInside</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>adb708605904eba60d395799186e1e719</anchor>
      <arglist>(double *, double, double, double=0, int=1) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>EvaluateInside</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>ac000fa0c57069139e9a6c7f5b061e705</anchor>
      <arglist>(Vector &amp;, double, double, double=0, double=0) const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateJacobian</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a25c09bbd9db2165b27b94904619a71e2</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateJacobianInside</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a367c24825b8568300ad35b78d7256b76</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateJacobianOutside</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a6eb2a0240d779c8940bddef738619201</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateJacobianWithPadding</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>ab739f8ec3a3daa85eb37ce3703d3d35f</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateJacobianWithPaddingInside</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a957d245b07395413318cbfba38844765</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateJacobianWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>aae266703980869e770c84bfee6a84d2b</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>EvaluateOutside</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a8c5eb1b3aa13979bc41514a8290bdda3</anchor>
      <arglist>(double, double, double=0, double=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateOutside</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a276eccf37a8d2f1f003d8373080d7b1e</anchor>
      <arglist>(double *, double, double, double=0, int=1) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>EvaluateOutside</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a2188eb26655602a371eeee0550c77e0c</anchor>
      <arglist>(Vector &amp;, double, double, double=0, double=0) const =0</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>EvaluateWithPadding</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a10248ce822a1f90c6e4aeacdd882d205</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateWithPadding</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a9cc35ed7ad43038354a78a826ca23b85</anchor>
      <arglist>(double *, double, double, double=0, int=1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateWithPadding</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>af0c9affa6e612260c494b4bec0c728f3</anchor>
      <arglist>(Vector &amp;, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>EvaluateWithPaddingInside</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a94bf7cbec872fd3dba646ea4f26babc6</anchor>
      <arglist>(double, double, double=0, double=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateWithPaddingInside</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a3981dfc0f726603e607623026cfc17b2</anchor>
      <arglist>(double *, double, double, double=0, int=1) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>EvaluateWithPaddingInside</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>ab30e3bd593042d6a0222671d90d1da30</anchor>
      <arglist>(Vector &amp;, double, double, double=0, double=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>EvaluateWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a81f4f82a1780a6fe27692d4a1ec18500</anchor>
      <arglist>(double, double, double=0, double=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a702f8efc3c5f4ca8d9b04a680c2a4cb1</anchor>
      <arglist>(double *, double, double, double=0, int=1) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>EvaluateWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>aa8bdf37c8365a471022c9f79e734f6f0</anchor>
      <arglist>(Vector &amp;, double, double, double=0, double=0) const =0</arglist>
    </member>
    <member kind="function">
      <type>enum ExtrapolationMode</type>
      <name>ExtrapolationMode</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a3ca8d1da58b5302aeecd113f2465b214</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Extrapolator</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a2bd1f8b29b30b9ea865d50e92a3fde73</anchor>
      <arglist>(ExtrapolateImageFunction *, bool=false)</arglist>
    </member>
    <member kind="function">
      <type>ExtrapolateImageFunction *</type>
      <name>Extrapolator</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a97d9cb333d8a6d6ed1609d1805a5b9fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ExtrapolateImageFunction *</type>
      <name>Extrapolator</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a673078cfc9f3cd8d350777ddefab1dc9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ImageToWorld</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a0ab73f5d05189e28f61e313d7eb464e1</anchor>
      <arglist>(double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ImageToWorld</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a4830cf13a0982f54ef9a918d4b6cb4d8</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ImageToWorld</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a5d2815d7678ba2934f51d3f4886bc0d8</anchor>
      <arglist>(Point &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ImageToWorld</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>ad6364107a9ba0c440517e8fb40a3a76e</anchor>
      <arglist>(Vector3 &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a77ba1c07776afd5bda521c6753797173</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a4f0a7c1d46740e7b37f6c62786c14c6e</anchor>
      <arglist>(bool coeff)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>aa149d65ef0925e52ff829078822984fc</anchor>
      <arglist>(const BaseImage *)</arglist>
    </member>
    <member kind="function">
      <type>const BaseImage *</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a3eeb9492a6d255b391c0e2753453f59b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Inside</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a04bbf8e90b5fedd8294d12e6cf734cde</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Inside</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a0ba15ec2f35c3501b25e03b6dbf63aa3</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Inside</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a430121ca6767ed648c9dc19dba2dac0e</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual enum InterpolationMode</type>
      <name>InterpolationMode</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a1aa9e055dc143202294e6110723e2e1f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsForeground</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a93dcd3714b8d8d60e20ca2e01b213427</anchor>
      <arglist>(double, double) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsForeground</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a4f15311e54d29f953faa690ef2e9b0bc</anchor>
      <arglist>(double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsForeground</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a418100ed2a62994a210f59e5099a9aec</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsForeground</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a63193797b43f62ccd8d41fbf072f0aca</anchor>
      <arglist>(const Point &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsForeground</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a5e0da6b30a6a7fc0c01f515dde83c23c</anchor>
      <arglist>(const Point &amp;, double) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInside</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>aedec708be879c6be75dd9224d56d6520</anchor>
      <arglist>(double, double) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInside</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a6e0e62f27ff7b9103a37c02ad2699253</anchor>
      <arglist>(double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInside</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a27f598ec2fa1bbd1c69c0ee779be597c</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInside</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a53cbfd5f0befae9535916b8cf746e492</anchor>
      <arglist>(const Point &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInside</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a362e72edb5b120d2ff6e966583235ebb</anchor>
      <arglist>(const Point &amp;, double) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOutside</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>ae0c71b1739f5fa691675f016368f0ddc</anchor>
      <arglist>(double, double) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOutside</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a64ab64b20cf66d4241b2d7c31ad5a4ba</anchor>
      <arglist>(double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOutside</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>ad255388e51fc3cb8fa132d7b13648184</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOutside</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>ad9c800cb77341606a983973b98cc326c</anchor>
      <arglist>(const Point &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOutside</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a984ee745a623c469311090f5fb25efde</anchor>
      <arglist>(const Point &amp;, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ExtrapolateImageFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a09aaccfe84af46403064d8639ef24d22</anchor>
      <arglist>(enum ExtrapolationMode, const BaseImage *=NULL)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>T</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>ad86279299dffa93c740abc3e8a9d1ca0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>TSize</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>af9797168f9acca241b602213bd7ab75a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>af3745fc0c9623e03f7caec8c0b537879</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WorldToImage</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a65d61e498528b75783c3cba6e0288504</anchor>
      <arglist>(double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WorldToImage</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>aec7ad03df5ed7774e0afa56131dd538d</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WorldToImage</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a2c2ad4029841b4b55390982cc043bb8a</anchor>
      <arglist>(Point &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WorldToImage</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>ac7e3303476418bec8395f7dcbdc90aeb</anchor>
      <arglist>(Vector3 &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>X</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a6c5d41eac42f92ae53ddf1208ed597be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>XSize</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>aa3c9dd956609a80d0954c7f93231a7dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Y</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>ab494166866b9bf27383e2d66d77cdb15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>YSize</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>ac8fdf4924f01ee510dbcdd5d2e43803c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Z</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>afe00132b184edd7b46974e3573b0778b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ZSize</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a3490537ff993a0d89344a7510d0bfcb8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a8f073b18f956078a629327395aa7bac6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static InterpolateImageFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a7acd5ae498f53ef1549e2e10ef831af2</anchor>
      <arglist>(enum InterpolationMode=Interpolation_Default, const BaseImage *=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static InterpolateImageFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a2787da6e67257c5b278a7729b2384ec0</anchor>
      <arglist>(enum InterpolationMode, enum ExtrapolationMode, const BaseImage *=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>InterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>acf20ad872b4f361b080b1850004f2b4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ExtrapolateImageFunction *</type>
      <name>_InfiniteInput</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a70dcb03259231c2acb274015ebca5fdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_InfiniteInputOwner</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>acfd2c1bf2f50b8925f982ebd84ec180b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_x1</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a546fb8dfa3a8627de421f323aee5b379</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::UnaryVoxelFunction::InterpolateMultiChannelImage</name>
    <filename>structmirtk_1_1UnaryVoxelFunction_1_1InterpolateMultiChannelImage.html</filename>
    <templarg>TInterpolator</templarg>
    <base>mirtk::VoxelFunction</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1UnaryVoxelFunction_1_1InterpolateMultiChannelImage.html</anchorfile>
      <anchor>a5593077b19613d071e2b5b319bec6af1</anchor>
      <arglist>(int i, int j, int k, int, T *o)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1UnaryVoxelFunction_1_1InterpolateMultiChannelImage.html</anchorfile>
      <anchor>a03d05446f2bbd2e2092c2e64dedb231a</anchor>
      <arglist>(int i, int j, int k, int, double *o)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::MultipleVoxelTransformation::InterpolateRescale</name>
    <filename>structmirtk_1_1MultipleVoxelTransformation_1_1InterpolateRescale.html</filename>
    <templarg></templarg>
    <base>mirtk::MultipleVoxelTransformation::Interpolate</base>
  </compound>
  <compound kind="struct">
    <name>mirtk::MultipleVoxelTransformation::InterpolateRescaleAsDouble</name>
    <filename>structmirtk_1_1MultipleVoxelTransformation_1_1InterpolateRescaleAsDouble.html</filename>
    <templarg></templarg>
    <base>mirtk::MultipleVoxelTransformation::InterpolateRescale</base>
  </compound>
  <compound kind="struct">
    <name>mirtk::UnaryVoxelFunction::InterpolateScalarImage</name>
    <filename>structmirtk_1_1UnaryVoxelFunction_1_1InterpolateScalarImage.html</filename>
    <templarg>TInterpolator</templarg>
    <base>mirtk::VoxelFunction</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1UnaryVoxelFunction_1_1InterpolateScalarImage.html</anchorfile>
      <anchor>abe97a1dc2bf45d9546f7fc2250382c21</anchor>
      <arglist>(int i, int j, int k, int l, T *o)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SurfaceCollisions::IntersectionInfo</name>
    <filename>structmirtk_1_1SurfaceCollisions_1_1IntersectionInfo.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>_Adjacent</name>
      <anchorfile>structmirtk_1_1SurfaceCollisions_1_1IntersectionInfo.html</anchorfile>
      <anchor>a76c112dd5b42652d067715cab94c8646</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_CellId</name>
      <anchorfile>structmirtk_1_1SurfaceCollisions_1_1IntersectionInfo.html</anchorfile>
      <anchor>a492de7565f924f951317a3733916fdd6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::IntrinsicLeastAreaDistortionSurfaceMapper</name>
    <filename>classmirtk_1_1IntrinsicLeastAreaDistortionSurfaceMapper.html</filename>
    <base>mirtk::NearOptimalIntrinsicSurfaceMapper</base>
    <member kind="function">
      <type></type>
      <name>IntrinsicLeastAreaDistortionSurfaceMapper</name>
      <anchorfile>classmirtk_1_1IntrinsicLeastAreaDistortionSurfaceMapper.html</anchorfile>
      <anchor>a65ca2cfc1269258c7745ff7c26ba9ae9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntrinsicLeastAreaDistortionSurfaceMapper</name>
      <anchorfile>classmirtk_1_1IntrinsicLeastAreaDistortionSurfaceMapper.html</anchorfile>
      <anchor>a03d5a2ba66bb9a3d309f2b4b4f7fd85e</anchor>
      <arglist>(const IntrinsicLeastAreaDistortionSurfaceMapper &amp;)</arglist>
    </member>
    <member kind="function">
      <type>IntrinsicLeastAreaDistortionSurfaceMapper &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1IntrinsicLeastAreaDistortionSurfaceMapper.html</anchorfile>
      <anchor>acaa13c25fa0dcaaf7ce52d5752a553f4</anchor>
      <arglist>(const IntrinsicLeastAreaDistortionSurfaceMapper &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IntrinsicLeastAreaDistortionSurfaceMapper</name>
      <anchorfile>classmirtk_1_1IntrinsicLeastAreaDistortionSurfaceMapper.html</anchorfile>
      <anchor>a2bad7dea88a26b31ec21ebe808167203</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>ComputeLambda</name>
      <anchorfile>classmirtk_1_1IntrinsicLeastAreaDistortionSurfaceMapper.html</anchorfile>
      <anchor>a74f6f87fb6a96985ff0b78153e637bac</anchor>
      <arglist>(vtkDataArray *u0, vtkDataArray *u1) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::IntrinsicLeastEdgeLengthDistortionSurfaceMapper</name>
    <filename>classmirtk_1_1IntrinsicLeastEdgeLengthDistortionSurfaceMapper.html</filename>
    <base>mirtk::NearOptimalIntrinsicSurfaceMapper</base>
    <member kind="function">
      <type></type>
      <name>IntrinsicLeastEdgeLengthDistortionSurfaceMapper</name>
      <anchorfile>classmirtk_1_1IntrinsicLeastEdgeLengthDistortionSurfaceMapper.html</anchorfile>
      <anchor>aa54cb8941b1a4188b79f88d60e380420</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntrinsicLeastEdgeLengthDistortionSurfaceMapper</name>
      <anchorfile>classmirtk_1_1IntrinsicLeastEdgeLengthDistortionSurfaceMapper.html</anchorfile>
      <anchor>abe54138541cda87988955a5d07b331d0</anchor>
      <arglist>(const IntrinsicLeastEdgeLengthDistortionSurfaceMapper &amp;)</arglist>
    </member>
    <member kind="function">
      <type>IntrinsicLeastEdgeLengthDistortionSurfaceMapper &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1IntrinsicLeastEdgeLengthDistortionSurfaceMapper.html</anchorfile>
      <anchor>a209481bf45958b847d0441bb503079aa</anchor>
      <arglist>(const IntrinsicLeastEdgeLengthDistortionSurfaceMapper &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IntrinsicLeastEdgeLengthDistortionSurfaceMapper</name>
      <anchorfile>classmirtk_1_1IntrinsicLeastEdgeLengthDistortionSurfaceMapper.html</anchorfile>
      <anchor>aee0bca8f67455ed95c0fa272f2b53461</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>ComputeLambda</name>
      <anchorfile>classmirtk_1_1IntrinsicLeastEdgeLengthDistortionSurfaceMapper.html</anchorfile>
      <anchor>a19ce67e505365911851e45bfdbdf6724</anchor>
      <arglist>(vtkDataArray *u0, vtkDataArray *u1) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::IntrinsicSurfaceMapper</name>
    <filename>classmirtk_1_1IntrinsicSurfaceMapper.html</filename>
    <base>mirtk::NonSymmetricWeightsSurfaceMapper</base>
    <member kind="function">
      <type></type>
      <name>IntrinsicSurfaceMapper</name>
      <anchorfile>classmirtk_1_1IntrinsicSurfaceMapper.html</anchorfile>
      <anchor>a5d51c360c6120cf167808c05e3cfd9c7</anchor>
      <arglist>(double lambda=.5)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntrinsicSurfaceMapper</name>
      <anchorfile>classmirtk_1_1IntrinsicSurfaceMapper.html</anchorfile>
      <anchor>a720f253c4595a156739bf6932fa6217b</anchor>
      <arglist>(const IntrinsicSurfaceMapper &amp;)</arglist>
    </member>
    <member kind="function">
      <type>IntrinsicSurfaceMapper &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1IntrinsicSurfaceMapper.html</anchorfile>
      <anchor>aa8a676356d0d0585693e6088674e82c2</anchor>
      <arglist>(const IntrinsicSurfaceMapper &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IntrinsicSurfaceMapper</name>
      <anchorfile>classmirtk_1_1IntrinsicSurfaceMapper.html</anchorfile>
      <anchor>a490e141358050cf402c7e00828358fda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Weight</name>
      <anchorfile>classmirtk_1_1IntrinsicSurfaceMapper.html</anchorfile>
      <anchor>abe5e73d3357312ea5c92b6fef02e83ab</anchor>
      <arglist>(int i, int j) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::InverseAffineTransformation</name>
    <filename>classmirtk_1_1InverseAffineTransformation.html</filename>
    <base>mirtk::AffineTransformation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasSameDOFsAs</name>
      <anchorfile>classmirtk_1_1InverseAffineTransformation.html</anchorfile>
      <anchor>a88040a35b98fa09267a2abf5743d140b</anchor>
      <arglist>(const class Transformation *) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InverseAffineTransformation</name>
      <anchorfile>classmirtk_1_1InverseAffineTransformation.html</anchorfile>
      <anchor>a68b3273e87dcbfacdacba21d38fe3f37</anchor>
      <arglist>(AffineTransformation *=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1InverseAffineTransformation.html</anchorfile>
      <anchor>ae2ca967a4efe468e8ba45d02b0de39f2</anchor>
      <arglist>(double [3], int, double, double, double, double=0, double=1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Transformation</name>
      <anchorfile>classmirtk_1_1InverseAffineTransformation.html</anchorfile>
      <anchor>a3a7ba70f62c30d1b486133ee2beb310e</anchor>
      <arglist>(AffineTransformation *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InverseAffineTransformation</name>
      <anchorfile>classmirtk_1_1InverseAffineTransformation.html</anchorfile>
      <anchor>ac24828cfc3d1ce485982c6642c75a011</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::InvertMask</name>
    <filename>classmirtk_1_1data_1_1op_1_1InvertMask.html</filename>
    <base>mirtk::data::Op</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1InvertMask.html</anchorfile>
      <anchor>a2b9d33bfac17ff29388068edc7b51d22</anchor>
      <arglist>(int n, double *, bool *mask=nullptr)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::Iteration</name>
    <filename>structmirtk_1_1Iteration.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>_Begin</name>
      <anchorfile>structmirtk_1_1Iteration.html</anchorfile>
      <anchor>a23cf3a31eee4bbc413137f76d79ec1d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_End</name>
      <anchorfile>structmirtk_1_1Iteration.html</anchorfile>
      <anchor>afb84b07c5866458674fd9516dceea35e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Inc</name>
      <anchorfile>structmirtk_1_1Iteration.html</anchorfile>
      <anchor>ace01bdb3e225897a0b77242746ca7380</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Iter</name>
      <anchorfile>structmirtk_1_1Iteration.html</anchorfile>
      <anchor>a832750a34df849d82492005cb89e4e76</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::JacobianConstraint</name>
    <filename>classmirtk_1_1JacobianConstraint.html</filename>
    <base>mirtk::TransformationConstraint</base>
    <member kind="enumvalue">
      <name>SD_Image</name>
      <anchorfile>classmirtk_1_1JacobianConstraint.html</anchorfile>
      <anchor>a58caae79730c11891dcda36847815bfda0b62a42bbb54833d985a0b20140de31a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SD_Lattice</name>
      <anchorfile>classmirtk_1_1JacobianConstraint.html</anchorfile>
      <anchor>a58caae79730c11891dcda36847815bfda2f8c0f4c6bac81f79bf3883931750f92</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SD_Shifted</name>
      <anchorfile>classmirtk_1_1JacobianConstraint.html</anchorfile>
      <anchor>a58caae79730c11891dcda36847815bfda22a9a69fe80489405dd56a22779d3b3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SD_SubDiv</name>
      <anchorfile>classmirtk_1_1JacobianConstraint.html</anchorfile>
      <anchor>a58caae79730c11891dcda36847815bfdac47042021c3997f1151b572b40523c82</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SubDomainEnum</name>
      <anchorfile>classmirtk_1_1JacobianConstraint.html</anchorfile>
      <anchor>a58caae79730c11891dcda36847815bfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SD_Image</name>
      <anchorfile>classmirtk_1_1JacobianConstraint.html</anchorfile>
      <anchor>a58caae79730c11891dcda36847815bfda0b62a42bbb54833d985a0b20140de31a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SD_Lattice</name>
      <anchorfile>classmirtk_1_1JacobianConstraint.html</anchorfile>
      <anchor>a58caae79730c11891dcda36847815bfda2f8c0f4c6bac81f79bf3883931750f92</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SD_SubDiv</name>
      <anchorfile>classmirtk_1_1JacobianConstraint.html</anchorfile>
      <anchor>a58caae79730c11891dcda36847815bfdac47042021c3997f1151b572b40523c82</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SD_Shifted</name>
      <anchorfile>classmirtk_1_1JacobianConstraint.html</anchorfile>
      <anchor>a58caae79730c11891dcda36847815bfda22a9a69fe80489405dd56a22779d3b3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>DerivativeWrtJacobianDet</name>
      <anchorfile>classmirtk_1_1JacobianConstraint.html</anchorfile>
      <anchor>adb5ff56ff42ce94339ee473c830dcced</anchor>
      <arglist>(double det) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1JacobianConstraint.html</anchorfile>
      <anchor>afc836f5668619bf2269cc0a397f9c843</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1JacobianConstraint.html</anchorfile>
      <anchor>ac9b5093e009c4f39120cdc803c6a1538</anchor>
      <arglist>(SubDomainEnum, SubDomain)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1JacobianConstraint.html</anchorfile>
      <anchor>ad8d2030a679f0f1928f099fe93a365ef</anchor>
      <arglist>(bool, WithRespectToWorld)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1JacobianConstraint.html</anchorfile>
      <anchor>a3b56b47c1a74cab814ec159596fb2418</anchor>
      <arglist>(bool, UseLatticeSpacing)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1JacobianConstraint.html</anchorfile>
      <anchor>ae799664c98bcaf7f7f5c4f6b6d8ddd83</anchor>
      <arglist>(bool, Symmetric)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1JacobianConstraint.html</anchorfile>
      <anchor>a10e144d39e08b1e408d8b4875504d9bc</anchor>
      <arglist>(bool, ConstrainParameterization)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1JacobianConstraint.html</anchorfile>
      <anchor>a4a6344389a4e1aff31fc695414fde1b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>Penalty</name>
      <anchorfile>classmirtk_1_1JacobianConstraint.html</anchorfile>
      <anchor>a5bb453e5702be09c4f6fd66d500b97db</anchor>
      <arglist>(double det) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1JacobianConstraint.html</anchorfile>
      <anchor>ac21db9294241a65146cbc4e746456db0</anchor>
      <arglist>(bool=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteDataSets</name>
      <anchorfile>classmirtk_1_1JacobianConstraint.html</anchorfile>
      <anchor>a28c17f8cb91b7b128b355f063efb61eb</anchor>
      <arglist>(const char *, const char *, bool=true) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteGradient</name>
      <anchorfile>classmirtk_1_1JacobianConstraint.html</anchorfile>
      <anchor>a0317050e041499caa7c59bff2e89d2a5</anchor>
      <arglist>(const char *, const char *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~JacobianConstraint</name>
      <anchorfile>classmirtk_1_1JacobianConstraint.html</anchorfile>
      <anchor>a1d2c186a977a5df8fb9910f6a2a9ec60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1JacobianConstraint.html</anchorfile>
      <anchor>abc03322b6cec0c845f9bed09e00a5fd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1JacobianConstraint.html</anchorfile>
      <anchor>a091a9f68302082509b4f38e93bf7299d</anchor>
      <arglist>(double *, double, double)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>JacobianConstraint</name>
      <anchorfile>classmirtk_1_1JacobianConstraint.html</anchorfile>
      <anchor>ab33bb4b99330a380f200ef5ebbd7e301</anchor>
      <arglist>(const char *, bool=false)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithoutPrefix</name>
      <anchorfile>classmirtk_1_1JacobianConstraint.html</anchorfile>
      <anchor>ae1fb996b66b397afd41a5e76465b46c8</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix *</type>
      <name>_AdjJacobian</name>
      <anchorfile>classmirtk_1_1JacobianConstraint.html</anchorfile>
      <anchor>a90de97dd8908264dc8873607dbf151a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>_DetJacobian</name>
      <anchorfile>classmirtk_1_1JacobianConstraint.html</anchorfile>
      <anchor>a1489c22f2373d13c1207069d41e30964</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; Matrix &gt;</type>
      <name>_MatL2W</name>
      <anchorfile>classmirtk_1_1JacobianConstraint.html</anchorfile>
      <anchor>a3f248cdbd713a44d9004f802efdda360</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; Matrix &gt;</type>
      <name>_MatW2L</name>
      <anchorfile>classmirtk_1_1JacobianConstraint.html</anchorfile>
      <anchor>a783db01d8c211d5c9e683633be8cc0f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_NumJacobian</name>
      <anchorfile>classmirtk_1_1JacobianConstraint.html</anchorfile>
      <anchor>ad047d7a8c2a4195a73efc5a19aba6d26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; ImageAttributes &gt;</type>
      <name>_SubDomains</name>
      <anchorfile>classmirtk_1_1JacobianConstraint.html</anchorfile>
      <anchor>ade16ac56e7a71721665bb3c16fe50daf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::JointImageEntropy</name>
    <filename>classmirtk_1_1JointImageEntropy.html</filename>
    <base>mirtk::HistogramImageSimilarity</base>
    <member kind="function">
      <type></type>
      <name>JointImageEntropy</name>
      <anchorfile>classmirtk_1_1JointImageEntropy.html</anchorfile>
      <anchor>a2dbf2166544a43271af7044b283156cf</anchor>
      <arglist>(const char *=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JointImageEntropy</name>
      <anchorfile>classmirtk_1_1JointImageEntropy.html</anchorfile>
      <anchor>a30875df6c84f0cfc256bb25ef4738cee</anchor>
      <arglist>(const JointImageEntropy &amp;)</arglist>
    </member>
    <member kind="function">
      <type>JointImageEntropy &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1JointImageEntropy.html</anchorfile>
      <anchor>a0e1d1fd59624321937d1c868258d0506</anchor>
      <arglist>(const JointImageEntropy &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>RawValue</name>
      <anchorfile>classmirtk_1_1JointImageEntropy.html</anchorfile>
      <anchor>a5114553caedfae6e0591a65dd4c3d699</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~JointImageEntropy</name>
      <anchorfile>classmirtk_1_1JointImageEntropy.html</anchorfile>
      <anchor>ac6585cd33ba81894ba0cf87f466ad5d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1JointImageEntropy.html</anchorfile>
      <anchor>a6748761adb7e0bb3082903cb5f8c0587</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::LabelConsistency</name>
    <filename>classmirtk_1_1LabelConsistency.html</filename>
    <base>mirtk::HistogramImageSimilarity</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1LabelConsistency.html</anchorfile>
      <anchor>ad97db58f61bba19af7b503225f66ac8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LabelConsistency</name>
      <anchorfile>classmirtk_1_1LabelConsistency.html</anchorfile>
      <anchor>a6c30ce324426cbf0b26bfb4333d875a3</anchor>
      <arglist>(const char *=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LabelConsistency</name>
      <anchorfile>classmirtk_1_1LabelConsistency.html</anchorfile>
      <anchor>ad5c14e284dce9a356d721847007cc12f</anchor>
      <arglist>(const LabelConsistency &amp;)</arglist>
    </member>
    <member kind="function">
      <type>LabelConsistency &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1LabelConsistency.html</anchorfile>
      <anchor>a9e7147595768ec99188331e144542db0</anchor>
      <arglist>(const LabelConsistency &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LabelConsistency</name>
      <anchorfile>classmirtk_1_1LabelConsistency.html</anchorfile>
      <anchor>a1ebd82392133a13026ae6124624e130a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1LabelConsistency.html</anchorfile>
      <anchor>ac57f2e0097053898e341e3acd3874e07</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::Lb</name>
    <filename>classmirtk_1_1data_1_1op_1_1Lb.html</filename>
    <base>mirtk::data::op::ElementWiseUnaryOp</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Op</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Lb.html</anchorfile>
      <anchor>a2d7224d2c7ebdc624cb5bb9161aa64dd</anchor>
      <arglist>(double value, bool &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Lb.html</anchorfile>
      <anchor>ad49a1e1971b3d64329a900b2ee7f85fd</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::LeastSquaresConformalSurfaceMapper</name>
    <filename>classmirtk_1_1LeastSquaresConformalSurfaceMapper.html</filename>
    <base>mirtk::FreeBoundarySurfaceMapper</base>
    <member kind="function">
      <type>void</type>
      <name>AddFixedPoint</name>
      <anchorfile>classmirtk_1_1LeastSquaresConformalSurfaceMapper.html</anchorfile>
      <anchor>aa6d88c76484a4921bd151967829cfeb6</anchor>
      <arglist>(int i, double u, double v)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>FixedPointId</name>
      <anchorfile>classmirtk_1_1LeastSquaresConformalSurfaceMapper.html</anchorfile>
      <anchor>aba514e2192dfac5b1ffeccdd299c2a53</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>FixedPointIndex</name>
      <anchorfile>classmirtk_1_1LeastSquaresConformalSurfaceMapper.html</anchorfile>
      <anchor>aad9a39cb4df383fb20fb8829dc530a46</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>FreePointId</name>
      <anchorfile>classmirtk_1_1LeastSquaresConformalSurfaceMapper.html</anchorfile>
      <anchor>a6ec2b8f1d1706dba8807ee46781dc3a0</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>FreePointIndex</name>
      <anchorfile>classmirtk_1_1LeastSquaresConformalSurfaceMapper.html</anchorfile>
      <anchor>ab23040f58afe4651467656571af0f52a</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetFixedValue</name>
      <anchorfile>classmirtk_1_1LeastSquaresConformalSurfaceMapper.html</anchorfile>
      <anchor>a13f16cfc8f06be866892482cc2455567</anchor>
      <arglist>(int i, int j=0) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetFreeValue</name>
      <anchorfile>classmirtk_1_1LeastSquaresConformalSurfaceMapper.html</anchorfile>
      <anchor>af737afa901c1f9bdda57b512160ef706</anchor>
      <arglist>(int i, int j=0) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetValue</name>
      <anchorfile>classmirtk_1_1LeastSquaresConformalSurfaceMapper.html</anchorfile>
      <anchor>ab3ed9a99e36268522927e0af180229cc</anchor>
      <arglist>(int i, int j=0) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsFixedPoint</name>
      <anchorfile>classmirtk_1_1LeastSquaresConformalSurfaceMapper.html</anchorfile>
      <anchor>a00a20891853e31fb7ba57c45fa1fe96a</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsFreePoint</name>
      <anchorfile>classmirtk_1_1LeastSquaresConformalSurfaceMapper.html</anchorfile>
      <anchor>a7d2d13300015379e76be1d10f4d23d9b</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LeastSquaresConformalSurfaceMapper</name>
      <anchorfile>classmirtk_1_1LeastSquaresConformalSurfaceMapper.html</anchorfile>
      <anchor>aeab6c8210f596bf1c2a24066cc697004</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LeastSquaresConformalSurfaceMapper</name>
      <anchorfile>classmirtk_1_1LeastSquaresConformalSurfaceMapper.html</anchorfile>
      <anchor>a1e7dfc78c770bbcce5e7e57e32cdceb1</anchor>
      <arglist>(const LeastSquaresConformalSurfaceMapper &amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfFixedPoints</name>
      <anchorfile>classmirtk_1_1LeastSquaresConformalSurfaceMapper.html</anchorfile>
      <anchor>a47c48c5e73028609447490c26f924c67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfFreePoints</name>
      <anchorfile>classmirtk_1_1LeastSquaresConformalSurfaceMapper.html</anchorfile>
      <anchor>a2736f54718782723b168770fd65fb213</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LeastSquaresConformalSurfaceMapper &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1LeastSquaresConformalSurfaceMapper.html</anchorfile>
      <anchor>aa51724bfa1e3f3bcd5300bbdb5918d3e</anchor>
      <arglist>(const LeastSquaresConformalSurfaceMapper &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LeastSquaresConformalSurfaceMapper</name>
      <anchorfile>classmirtk_1_1LeastSquaresConformalSurfaceMapper.html</anchorfile>
      <anchor>a52d409fccc6652bd943009249221ea3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>ComputeMap</name>
      <anchorfile>classmirtk_1_1LeastSquaresConformalSurfaceMapper.html</anchorfile>
      <anchor>a5c73a0198aa8bc0361ffa417d2288abd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1LeastSquaresConformalSurfaceMapper.html</anchorfile>
      <anchor>a6ed9b435b780ffc751daf86e5a37f164</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1LeastSquaresConformalSurfaceMapper.html</anchorfile>
      <anchor>af13ca9b30575e7e22ad957c3499594cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetFreeValue</name>
      <anchorfile>classmirtk_1_1LeastSquaresConformalSurfaceMapper.html</anchorfile>
      <anchor>af5fe62201ba2b81fc8f5cabd7f0a16f6</anchor>
      <arglist>(int i, double v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetFreeValue</name>
      <anchorfile>classmirtk_1_1LeastSquaresConformalSurfaceMapper.html</anchorfile>
      <anchor>a2cd01849dd2bbfd332ca70eb75bdbbc7</anchor>
      <arglist>(int i, int j, double v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classmirtk_1_1LeastSquaresConformalSurfaceMapper.html</anchorfile>
      <anchor>ab29bf3a461e2e1f615f4af60b082397d</anchor>
      <arglist>(int i, double v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classmirtk_1_1LeastSquaresConformalSurfaceMapper.html</anchorfile>
      <anchor>aaa38b9a6b45f6a2e4edf05a1def748c1</anchor>
      <arglist>(int i, int j, double v)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Weight</name>
      <anchorfile>classmirtk_1_1LeastSquaresConformalSurfaceMapper.html</anchorfile>
      <anchor>a95f15c36bbf3adb21f6c5fc2dd26fd39</anchor>
      <arglist>(int i, int j) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::select::LessOrEqual</name>
    <filename>classmirtk_1_1data_1_1select_1_1LessOrEqual.html</filename>
    <base>mirtk::data::SelectionCriterium</base>
    <member kind="function">
      <type></type>
      <name>LessOrEqual</name>
      <anchorfile>classmirtk_1_1data_1_1select_1_1LessOrEqual.html</anchorfile>
      <anchor>aed2df60461d775479efdfc3cf483feb1</anchor>
      <arglist>(double threshold)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Select</name>
      <anchorfile>classmirtk_1_1data_1_1select_1_1LessOrEqual.html</anchorfile>
      <anchor>a5ff3ea0372853406be703574d3b04ad3</anchor>
      <arglist>(double value) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::select::LessThan</name>
    <filename>classmirtk_1_1data_1_1select_1_1LessThan.html</filename>
    <base>mirtk::data::SelectionCriterium</base>
    <member kind="function">
      <type></type>
      <name>LessThan</name>
      <anchorfile>classmirtk_1_1data_1_1select_1_1LessThan.html</anchorfile>
      <anchor>ada9542768e69a5180930765d5b27f6e3</anchor>
      <arglist>(double threshold)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Select</name>
      <anchorfile>classmirtk_1_1data_1_1select_1_1LessThan.html</anchorfile>
      <anchor>a580cdc2b83d51c1f8df0dc65289b9aac</anchor>
      <arglist>(double value) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::Lg</name>
    <filename>classmirtk_1_1data_1_1op_1_1Lg.html</filename>
    <base>mirtk::data::op::ElementWiseUnaryOp</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Op</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Lg.html</anchorfile>
      <anchor>af3bac1d90fd66550599b338d69ca0f4f</anchor>
      <arglist>(double value, bool &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Lg.html</anchorfile>
      <anchor>a4167f244fc983760d523763189dcf001</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::LieBracketImageFilter</name>
    <filename>classmirtk_1_1LieBracketImageFilter.html</filename>
    <templarg></templarg>
    <base>mirtk::ImageToImage</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const ImageType *</type>
      <name>GetInput</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter.html</anchorfile>
      <anchor>a0d1d74fc226cd3a8fc09a63c35d06fa6</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter.html</anchorfile>
      <anchor>a120188679d1a9075b2023f857b750c8b</anchor>
      <arglist>(int, const ImageType *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ImageType *</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter.html</anchorfile>
      <anchor>ae0f2b8b341c2bb3b689651c9d45259fe</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LieBracketImageFilter</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter.html</anchorfile>
      <anchor>a3e377a881c19a37895a3bc6edd6adbb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LieBracketImageFilter *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter.html</anchorfile>
      <anchor>ab451bfc0692feb376fe2d69ab19144fc</anchor>
      <arglist>(const ImageAttributes &amp;, bool=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LieBracketImageFilter *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter.html</anchorfile>
      <anchor>a80053800ba0bebec444f44218f1fe974</anchor>
      <arglist>(const BaseImage *, bool=true)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter.html</anchorfile>
      <anchor>a811e5cae68011a85f0ba05cb1ee32572</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LieBracketImageFilter</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter.html</anchorfile>
      <anchor>a7bf844d91d12158dfdf64a08c09651cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ImageType *</type>
      <name>_Input2</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter.html</anchorfile>
      <anchor>a721e48df3a037d3a4b9068f409013246</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::LieBracketImageFilter2D</name>
    <filename>classmirtk_1_1LieBracketImageFilter2D.html</filename>
    <templarg></templarg>
    <base>mirtk::LieBracketImageFilter</base>
    <member kind="typedef">
      <type>LieBracketImageFilter&lt; TVoxel &gt;</type>
      <name>Superclass</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter2D.html</anchorfile>
      <anchor>aa8468c59a8a25a817dec6810ddf5fc41</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LieBracketImageFilter2D</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter2D.html</anchorfile>
      <anchor>a97ca86b1e320867753dacd77da358037</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Output</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter2D.html</anchorfile>
      <anchor>aeb9bd2d01c3175d8252ad437c2d4a786</anchor>
      <arglist>(ImageType *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter2D.html</anchorfile>
      <anchor>a813f736401312fda07a93404536c1761</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter2D.html</anchorfile>
      <anchor>a73ec61af53741b8cd53bc5d713de1f00</anchor>
      <arglist>(double [2], int, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter2D.html</anchorfile>
      <anchor>ab343c25666bca5bf050597d347620217</anchor>
      <arglist>(int, int, int, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LieBracketImageFilter2D</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter2D.html</anchorfile>
      <anchor>a176dd0eebf0a310bd126a4f2637b240b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter2D.html</anchorfile>
      <anchor>a3f7f1447f66b36a4a581bff410ba9f6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Jacobian</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter2D.html</anchorfile>
      <anchor>a48754022f4f18caec7c082281743e717</anchor>
      <arglist>(Matrix &amp;, const ImageType &amp;, int, int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::LieBracketImageFilter3D</name>
    <filename>classmirtk_1_1LieBracketImageFilter3D.html</filename>
    <templarg></templarg>
    <base>mirtk::LieBracketImageFilter</base>
    <member kind="typedef">
      <type>LieBracketImageFilter&lt; TVoxel &gt;</type>
      <name>Superclass</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter3D.html</anchorfile>
      <anchor>a09ca38733f9ea2a671b25a0fa60f00f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LieBracketImageFilter3D</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter3D.html</anchorfile>
      <anchor>ab7b10c079ec612bcf93b26a3c3b8b08c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Output</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter3D.html</anchorfile>
      <anchor>a7ecb161c3214ccf84f59afb97bfd144c</anchor>
      <arglist>(ImageType *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter3D.html</anchorfile>
      <anchor>a65a83895851d1daf7eefbc887dd0da2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter3D.html</anchorfile>
      <anchor>a6780b4fadd3057a308fe033ff665aaec</anchor>
      <arglist>(double [3], int, int, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter3D.html</anchorfile>
      <anchor>a0008b590a3ebd11ba9aaac2f457010bc</anchor>
      <arglist>(int, int, int, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LieBracketImageFilter3D</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter3D.html</anchorfile>
      <anchor>afb442643f2bf2917305a6d3e6e994359</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter3D.html</anchorfile>
      <anchor>ae24c39af436336f598e1c0cfa2e68fa1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Jacobian</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter3D.html</anchorfile>
      <anchor>a9ed23849954109bd3bf75a8c03714b98</anchor>
      <arglist>(Matrix &amp;, const ImageType &amp;, int, int, int)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix</type>
      <name>_MatW2I</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter3D.html</anchorfile>
      <anchor>a292e74d44d514162bafe96afffe75dbd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::LimitedMemoryBFGSDescent</name>
    <filename>classmirtk_1_1LimitedMemoryBFGSDescent.html</filename>
    <base>mirtk::LocalOptimizer</base>
    <member kind="function">
      <type></type>
      <name>LimitedMemoryBFGSDescent</name>
      <anchorfile>classmirtk_1_1LimitedMemoryBFGSDescent.html</anchorfile>
      <anchor>ae452d5ecaa1898287ab348f27eb6c2af</anchor>
      <arglist>(ObjectiveFunction *=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LimitedMemoryBFGSDescent</name>
      <anchorfile>classmirtk_1_1LimitedMemoryBFGSDescent.html</anchorfile>
      <anchor>ad0ba6d06dc436a3accaf59c0c551211c</anchor>
      <arglist>(const LimitedMemoryBFGSDescent &amp;)</arglist>
    </member>
    <member kind="function">
      <type>LimitedMemoryBFGSDescent &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1LimitedMemoryBFGSDescent.html</anchorfile>
      <anchor>adcb5ac6691621509d492913b77b9bcea</anchor>
      <arglist>(const LimitedMemoryBFGSDescent &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1LimitedMemoryBFGSDescent.html</anchorfile>
      <anchor>ad7add870436d14d1e23b3796e380d187</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1LimitedMemoryBFGSDescent.html</anchorfile>
      <anchor>a5e65acf7c949d783ddf25b25f141f196</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1LimitedMemoryBFGSDescent.html</anchorfile>
      <anchor>adbb66b8b4fcfd61a242926f11bbee1c2</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LimitedMemoryBFGSDescent</name>
      <anchorfile>classmirtk_1_1LimitedMemoryBFGSDescent.html</anchorfile>
      <anchor>a6ff08560f3504a23f0301d0d1e656c5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>LineSearchStep</type>
      <name>_CurrentStep</name>
      <anchorfile>classmirtk_1_1LimitedMemoryBFGSDescent.html</anchorfile>
      <anchor>ac8c2fd19816b50f23cc6ae0f5b9d31bb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::LinearElasticityConstraint</name>
    <filename>classmirtk_1_1LinearElasticityConstraint.html</filename>
    <base>mirtk::TransformationConstraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1LinearElasticityConstraint.html</anchorfile>
      <anchor>aea111deb265aac078107796e4712ccfb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearElasticityConstraint</name>
      <anchorfile>classmirtk_1_1LinearElasticityConstraint.html</anchorfile>
      <anchor>a9be4d34abb67691a095593bddc525a56</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1LinearElasticityConstraint.html</anchorfile>
      <anchor>a9df7b785bab460abd1b8bc98835152f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1LinearElasticityConstraint.html</anchorfile>
      <anchor>a35abc52833edf8d7b14e4bf5e9c94ff2</anchor>
      <arglist>(bool=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteGradient</name>
      <anchorfile>classmirtk_1_1LinearElasticityConstraint.html</anchorfile>
      <anchor>a630c30dd546d8e3919261f6fd5da3377</anchor>
      <arglist>(const char *, const char *) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1LinearElasticityConstraint.html</anchorfile>
      <anchor>ab73975c4aa81aebd7f35f66c151bb9cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1LinearElasticityConstraint.html</anchorfile>
      <anchor>acbb050d4b387cd1076ab7e0b3a70bd54</anchor>
      <arglist>(double *, double, double)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithoutPrefix</name>
      <anchorfile>classmirtk_1_1LinearElasticityConstraint.html</anchorfile>
      <anchor>a7c241ecb68969c028750e4febfec16cb</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::LinearFixedBoundarySurfaceMapper</name>
    <filename>classmirtk_1_1LinearFixedBoundarySurfaceMapper.html</filename>
    <base>mirtk::FixedBoundarySurfaceMapper</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>ComputeMap</name>
      <anchorfile>classmirtk_1_1LinearFixedBoundarySurfaceMapper.html</anchorfile>
      <anchor>a1b7db5a03e01d8d6acc52e337f737ed4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1LinearFixedBoundarySurfaceMapper.html</anchorfile>
      <anchor>af26366bd426151ce03f1eed12c58830f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>FixedPointId</name>
      <anchorfile>classmirtk_1_1LinearFixedBoundarySurfaceMapper.html</anchorfile>
      <anchor>aa48f33054dc67552f1d2bc3e1f029a6c</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>FixedPointIndex</name>
      <anchorfile>classmirtk_1_1LinearFixedBoundarySurfaceMapper.html</anchorfile>
      <anchor>aeb7e564df82dc47d98ae8df588011eb1</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>FreePointId</name>
      <anchorfile>classmirtk_1_1LinearFixedBoundarySurfaceMapper.html</anchorfile>
      <anchor>aead865c1cc19717ddb0cd716d03d4c06</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>FreePointIndex</name>
      <anchorfile>classmirtk_1_1LinearFixedBoundarySurfaceMapper.html</anchorfile>
      <anchor>a496bffc77b9263f77dca0540b64009bb</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetFixedValue</name>
      <anchorfile>classmirtk_1_1LinearFixedBoundarySurfaceMapper.html</anchorfile>
      <anchor>a8883e9b8f2dd5cc7bba221c44e8aa9e8</anchor>
      <arglist>(int i, int j=0) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetFreeValue</name>
      <anchorfile>classmirtk_1_1LinearFixedBoundarySurfaceMapper.html</anchorfile>
      <anchor>a02e95065538660eac71b55413af48fc4</anchor>
      <arglist>(int i, int j=0) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetValue</name>
      <anchorfile>classmirtk_1_1LinearFixedBoundarySurfaceMapper.html</anchorfile>
      <anchor>a5ac5b35e556582c81102ce1ee38042ff</anchor>
      <arglist>(int i, int j=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1LinearFixedBoundarySurfaceMapper.html</anchorfile>
      <anchor>a6fa47e8c84b744f7ccf3904e19eb6c4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsFixedPoint</name>
      <anchorfile>classmirtk_1_1LinearFixedBoundarySurfaceMapper.html</anchorfile>
      <anchor>a28797a84c1c65403cc86f7933dc08ae6</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsFreePoint</name>
      <anchorfile>classmirtk_1_1LinearFixedBoundarySurfaceMapper.html</anchorfile>
      <anchor>aa67f59a8062fb42f9257beb80d603ebe</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfFixedPoints</name>
      <anchorfile>classmirtk_1_1LinearFixedBoundarySurfaceMapper.html</anchorfile>
      <anchor>affda107dc20c3c3d66adfd2c54aa0508</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfFreePoints</name>
      <anchorfile>classmirtk_1_1LinearFixedBoundarySurfaceMapper.html</anchorfile>
      <anchor>aba7af2e89f738b7d99c28e77567fc258</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LinearFixedBoundarySurfaceMapper</name>
      <anchorfile>classmirtk_1_1LinearFixedBoundarySurfaceMapper.html</anchorfile>
      <anchor>a7788d0001002b014a79810e11e6f2145</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LinearFixedBoundarySurfaceMapper</name>
      <anchorfile>classmirtk_1_1LinearFixedBoundarySurfaceMapper.html</anchorfile>
      <anchor>a6d5671fb4c4becaddcb27fcb1fa84b2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LinearFixedBoundarySurfaceMapper</name>
      <anchorfile>classmirtk_1_1LinearFixedBoundarySurfaceMapper.html</anchorfile>
      <anchor>a05ff9a770657f9bc437ffa6426c8c38c</anchor>
      <arglist>(const LinearFixedBoundarySurfaceMapper &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>LinearFixedBoundarySurfaceMapper &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1LinearFixedBoundarySurfaceMapper.html</anchorfile>
      <anchor>a306c6e69947f3e38bd28bd27e90c3233</anchor>
      <arglist>(const LinearFixedBoundarySurfaceMapper &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetFreeValue</name>
      <anchorfile>classmirtk_1_1LinearFixedBoundarySurfaceMapper.html</anchorfile>
      <anchor>a5836ddbb96923152e3b5b4faa8600ec7</anchor>
      <arglist>(int i, double v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetFreeValue</name>
      <anchorfile>classmirtk_1_1LinearFixedBoundarySurfaceMapper.html</anchorfile>
      <anchor>a56d649db002ecc37c7be072708d7a09c</anchor>
      <arglist>(int i, int j, double v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classmirtk_1_1LinearFixedBoundarySurfaceMapper.html</anchorfile>
      <anchor>ad424505dcc693a9cf40d4dbb480e1579</anchor>
      <arglist>(int i, double v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classmirtk_1_1LinearFixedBoundarySurfaceMapper.html</anchorfile>
      <anchor>a099ccc0a7df829947d53350b7cd2ad4f</anchor>
      <arglist>(int i, int j, double v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::LinearFreeFormTransformation3D</name>
    <filename>classmirtk_1_1LinearFreeFormTransformation3D.html</filename>
    <base>mirtk::FreeFormTransformation3D</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFs</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>ab2502bbfd5da6d4bbe81d1e1742c4551</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFsGradient</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>abd3ec547c0398e46578aab4400ec1509</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int, double *, double=1.0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>BendingEnergy</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>a3fac6e89c35f56bbe86dbc18668575be</anchor>
      <arglist>(bool=false, bool=true) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BendingEnergyGradient</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>a4f1035723cebb9604a956dc80ef50902</anchor>
      <arglist>(double *, double=1, bool=false, bool=true, bool=true) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>aa06346abf16a6f86b8ad57cda91484c5</anchor>
      <arglist>(int, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CanRead</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>a48fb4f4431944d75981d8ad9d01ccc60</anchor>
      <arglist>(TransformationType) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Compose</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>aa41ec1f532b21ec2b32f24bc745b1765</anchor>
      <arglist>(const Transformation *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>aa87487e1616053a0eaac2be59fa0ae40</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>a6460c8be1fc6e55c36f6093c127d415e</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateJacobian</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>a14f7f2c2b644f7d539deb55d84350671</anchor>
      <arglist>(Matrix &amp;, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Interpolate</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>a0e7ae10f586823f50930a61b68aaa6e7</anchor>
      <arglist>(const double *, const double *, const double *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>a97532e434bc5e9ac668cd28264fc71eb</anchor>
      <arglist>(double [3], int, int, int, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>KernelSize</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>ab092f47c8a362793218c0d98a7a76161</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearFreeFormTransformation3D</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>a0501bae0da70ea0273d3ee13b5a20105</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearFreeFormTransformation3D</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>a907af8c3f6d3ab9c5ea8e872c90646f4</anchor>
      <arglist>(double, double, double, double, double, double, double, double, double, double *, double *, double *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearFreeFormTransformation3D</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>a2f4af407f388e8c513f8831fe67dffe7</anchor>
      <arglist>(const ImageAttributes &amp;, double=-1, double=-1, double=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearFreeFormTransformation3D</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>a29d56efa288aac8af1ca33c7ec665900</anchor>
      <arglist>(const BaseImage &amp;, double, double, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearFreeFormTransformation3D</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>ac0db61f2bdc46f505b9dfe9bfc08b3b6</anchor>
      <arglist>(const GenericImage&lt; double &gt; &amp;, bool=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearFreeFormTransformation3D</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>af7d159a4c46ce72efe9a436e3a4d812e</anchor>
      <arglist>(const BSplineFreeFormTransformation3D &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearFreeFormTransformation3D</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>a100c7c1957801c79713d7010d4efe43a</anchor>
      <arglist>(const LinearFreeFormTransformation3D &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LocalInverse</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>a560f43a4da2a20ff23cbb61e04fb1d25</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalJacobian</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>a893f5b235fbd4a60fb3120f131086270</anchor>
      <arglist>(Matrix &amp;, double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalTransform</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>a0a70dcfebc9a9da434d217a45b9651af</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>a3c9d898d43187fc84c16174b67c816fd</anchor>
      <arglist>(ostream &amp;, Indent=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LinearFreeFormTransformation3D</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>a5ea9bf8a308c75d25365260b4c0e57b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>BendingEnergy</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>ae2963515a4696faed74bc83171c7515c</anchor>
      <arglist>(int i, int j, int k) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Interpolator</type>
      <name>_FFD</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>a0e48aa252b7941f731fc1628a0626ca0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::LinearFreeFormTransformation4D</name>
    <filename>classmirtk_1_1LinearFreeFormTransformation4D.html</filename>
    <base>mirtk::FreeFormTransformation4D</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFs</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>a2e8c8d20465fcd554356f59067f28fe3</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFsGradient</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>aa542aed41c36fb9046c2b074dc726f93</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int, double *, double=1.0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>BendingEnergy</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>a9c0035937d0831a2644023413a920be4</anchor>
      <arglist>(bool=false, bool=true) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BendingEnergyGradient</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>ae7091c3bdb7d824bc6b1a7668f70405d</anchor>
      <arglist>(double *, double=NaN, bool=false, bool=true, bool=true) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>a95810ab69eed96ad5cae87f1cf56caf4</anchor>
      <arglist>(int, double &amp;, double &amp;, double=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>a56183e7cc6d002b3ed48a0045b44a2f7</anchor>
      <arglist>(int, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>a5c0d0e41eef76b7391831cbc4939f615</anchor>
      <arglist>(int, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CanRead</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>a66e535c11804b6d0770ec5a98dc175c5</anchor>
      <arglist>(TransformationType) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>a1608b98f499e033506f50adbcbae4d2b</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateInside</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>a9450d7a1699e0809a44e25e1adbec4f9</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateJacobian</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>a8d8330e81eab9fe56473de72fd93e09b</anchor>
      <arglist>(Matrix &amp;, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Interpolate</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>aaac5dfe81545980e6e80feabcfe4f759</anchor>
      <arglist>(const double *, const double *, const double *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>a31f78bf4970945948f12ce83ffbc397f</anchor>
      <arglist>(double [3], int, int, int, int, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>KernelSize</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>adce2fd232f2ad8d744b1b916a523e1b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearFreeFormTransformation4D</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>a71aa1b427f280df43f1ddde84aea562f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearFreeFormTransformation4D</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>a76df9119c77ad44d42acc581b4265e43</anchor>
      <arglist>(double, double, double, double, double, double, double, double, double, double, double, double, double *, double *, double *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearFreeFormTransformation4D</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>a3fc512e93eb97a4483df80f7e4151442</anchor>
      <arglist>(const ImageAttributes &amp;, double=-1, double=-1, double=-1, double=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearFreeFormTransformation4D</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>a6b946660d86944aeaff8b97475b51319</anchor>
      <arglist>(const BaseImage &amp;, double, double, double, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearFreeFormTransformation4D</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>a9f1b88b86d7b04d2ecb202078e7a2cbf</anchor>
      <arglist>(const BSplineFreeFormTransformation4D &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearFreeFormTransformation4D</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>ac579b2ba8e132faae0db1aabc9e8c6f6</anchor>
      <arglist>(const LinearFreeFormTransformation4D &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LocalInverse</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>a069ba54874368b4e081725a2b2cd223b</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double, double=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalJacobian</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>a96553806bf413636c185c7bf4a6a9e43</anchor>
      <arglist>(Matrix &amp;, double, double, double, double, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalTransform</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>a40a74c62818112dded95dbd58ffb3e6b</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double, double=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>a0581b981701a120c3b1833ebef7ec9bd</anchor>
      <arglist>(ostream &amp;, Indent=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LinearFreeFormTransformation4D</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>a776e152dd0425f627af39be3c156ff94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>BendingEnergy</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>aa2a652b5afb6df753b8e0e2e9f7f580c</anchor>
      <arglist>(int i, int j, int k, int l) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Interpolator</type>
      <name>_FFD</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>a37ed50f6f25ddb96e6170827f982e6fa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::LinearFreeFormTransformationTD</name>
    <filename>classmirtk_1_1LinearFreeFormTransformationTD.html</filename>
    <base>mirtk::LinearFreeFormTransformation4D</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApproximateAsNew</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformationTD.html</anchorfile>
      <anchor>a4c61b69e04d34cc3fcd75015eff835a8</anchor>
      <arglist>(GenericImage&lt; double &gt; **, const double *, const double *, int, bool=false, int=3, int=8)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFs</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformationTD.html</anchorfile>
      <anchor>a4d5ca62c6f373232abed7218629ac995</anchor>
      <arglist>(const GenericImage&lt; double &gt; *const *, const double *, const double *, int, bool=false, int=3, int=8)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFs</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformationTD.html</anchorfile>
      <anchor>aa768980d3d57f131c0a3e62a7954dbd3</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFsGradient</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformationTD.html</anchorfile>
      <anchor>acae86c7247886ff2de241c6f8de07ee6</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int, double *, double=1.0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CanRead</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformationTD.html</anchorfile>
      <anchor>a992c662f3f8d2f4efcfc74f905db931e</anchor>
      <arglist>(TransformationType) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Interpolate</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformationTD.html</anchorfile>
      <anchor>a849f15e47bdaed2e52ad9b64323203ee</anchor>
      <arglist>(const double *, const double *, const double *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearFreeFormTransformationTD</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformationTD.html</anchorfile>
      <anchor>a13ee6de8e778d336a4cdaa9359dd3ec0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearFreeFormTransformationTD</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformationTD.html</anchorfile>
      <anchor>a8e7b369481ba897daa061b6836300836</anchor>
      <arglist>(const ImageAttributes &amp;, double, double, double, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearFreeFormTransformationTD</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformationTD.html</anchorfile>
      <anchor>aac1d5bed38105b2f11770d5a5d192124</anchor>
      <arglist>(const BaseImage &amp;, double, double, double, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearFreeFormTransformationTD</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformationTD.html</anchorfile>
      <anchor>a85f014eb55301cd5b3264fcabcd9ef33</anchor>
      <arglist>(const BSplineFreeFormTransformationTD &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearFreeFormTransformationTD</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformationTD.html</anchorfile>
      <anchor>a07d930099ab204e90fab71e4484d71a3</anchor>
      <arglist>(const LinearFreeFormTransformationTD &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LocalInverse</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformationTD.html</anchorfile>
      <anchor>adbd2a052331c7917e5975153d608cb22</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalTransform</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformationTD.html</anchorfile>
      <anchor>ae51ff94cb03cf6dcf90b89f0a4e4560e</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformationTD.html</anchorfile>
      <anchor>ab040c79beb6e73ecb880e02accc80769</anchor>
      <arglist>(ostream &amp;, Indent=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LinearFreeFormTransformationTD</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformationTD.html</anchorfile>
      <anchor>ac17901172d1d514b1d07e454c984ea29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Cifstream &amp;</type>
      <name>ReadDOFs</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformationTD.html</anchorfile>
      <anchor>a8fac9847508e7501653c5eca163207ae</anchor>
      <arglist>(Cifstream &amp;, TransformationType)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Cofstream &amp;</type>
      <name>WriteDOFs</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformationTD.html</anchorfile>
      <anchor>ab0d17614a36d04ce1d09f4af5bd0cdd3</anchor>
      <arglist>(Cofstream &amp;) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::LinearImageGradientFunction</name>
    <filename>classmirtk_1_1LinearImageGradientFunction.html</filename>
    <base>GenericLinearImageGradientFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>LinearImageGradientFunction</name>
      <anchorfile>classmirtk_1_1LinearImageGradientFunction.html</anchorfile>
      <anchor>ab7de8a3ed4b473617eee9c97cb299a4e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::LinearImageGradientFunction2D</name>
    <filename>classmirtk_1_1LinearImageGradientFunction2D.html</filename>
    <base>GenericLinearImageGradientFunction2D&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>LinearImageGradientFunction2D</name>
      <anchorfile>classmirtk_1_1LinearImageGradientFunction2D.html</anchorfile>
      <anchor>a9de15923a68d21c19f62d09b6997b77c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::LinearImageGradientFunction3D</name>
    <filename>classmirtk_1_1LinearImageGradientFunction3D.html</filename>
    <base>GenericLinearImageGradientFunction3D&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>LinearImageGradientFunction3D</name>
      <anchorfile>classmirtk_1_1LinearImageGradientFunction3D.html</anchorfile>
      <anchor>a782df1420aff669697d6ecbaebe6755b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::LinearInterpolateImageFunction</name>
    <filename>classmirtk_1_1LinearInterpolateImageFunction.html</filename>
    <base>GenericLinearInterpolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>LinearInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1LinearInterpolateImageFunction.html</anchorfile>
      <anchor>a2bc417c99c76a37310b37ee787cf3cc7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::LinearInterpolateImageFunction2D</name>
    <filename>classmirtk_1_1LinearInterpolateImageFunction2D.html</filename>
    <base>GenericLinearInterpolateImageFunction2D&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>LinearInterpolateImageFunction2D</name>
      <anchorfile>classmirtk_1_1LinearInterpolateImageFunction2D.html</anchorfile>
      <anchor>ac8b5a3436293c176101cd58cc13d0b73</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::LinearInterpolateImageFunction3D</name>
    <filename>classmirtk_1_1LinearInterpolateImageFunction3D.html</filename>
    <base>GenericLinearInterpolateImageFunction3D&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>LinearInterpolateImageFunction3D</name>
      <anchorfile>classmirtk_1_1LinearInterpolateImageFunction3D.html</anchorfile>
      <anchor>ad1e0c236f34e83d3d43f7d33bb2314e7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::LinearInterpolateImageFunction4D</name>
    <filename>classmirtk_1_1LinearInterpolateImageFunction4D.html</filename>
    <base>GenericLinearInterpolateImageFunction4D&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>LinearInterpolateImageFunction4D</name>
      <anchorfile>classmirtk_1_1LinearInterpolateImageFunction4D.html</anchorfile>
      <anchor>a87dcdfe6a72ed314436b9101b0602d65</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::LinearTetrahedralMeshMapper</name>
    <filename>classmirtk_1_1LinearTetrahedralMeshMapper.html</filename>
    <base>mirtk::TetrahedralMeshMapper</base>
    <member kind="function" virtualness="pure">
      <type>virtual Matrix3x3</type>
      <name>GetWeight</name>
      <anchorfile>classmirtk_1_1LinearTetrahedralMeshMapper.html</anchorfile>
      <anchor>a357c9ec590d13e040272f9de3707e5f3</anchor>
      <arglist>(vtkIdType cellId, const double v0[3], const double v1[3], const double v2[3], const double v3[3], double volume) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LinearTetrahedralMeshMapper</name>
      <anchorfile>classmirtk_1_1LinearTetrahedralMeshMapper.html</anchorfile>
      <anchor>a3447ff0ad4ebaab6fc631944ba7554e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1LinearTetrahedralMeshMapper.html</anchorfile>
      <anchor>a726b4cd31883ab9152de709561d56a31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LinearTetrahedralMeshMapper</name>
      <anchorfile>classmirtk_1_1LinearTetrahedralMeshMapper.html</anchorfile>
      <anchor>adbf5197e9de038648c809b20f93c83d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LinearTetrahedralMeshMapper</name>
      <anchorfile>classmirtk_1_1LinearTetrahedralMeshMapper.html</anchorfile>
      <anchor>ae705beee5f319deb30f3e333fec03c49</anchor>
      <arglist>(const LinearTetrahedralMeshMapper &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>LinearTetrahedralMeshMapper &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1LinearTetrahedralMeshMapper.html</anchorfile>
      <anchor>a1eaa62574607619297064f144c43db46</anchor>
      <arglist>(const LinearTetrahedralMeshMapper &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Solve</name>
      <anchorfile>classmirtk_1_1LinearTetrahedralMeshMapper.html</anchorfile>
      <anchor>a984c42a4d4e00b98d6c696e9fac612db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Solve</name>
      <anchorfile>classmirtk_1_1LinearTetrahedralMeshMapper.html</anchorfile>
      <anchor>a192d4decc21d899985fafc447e9de3bb</anchor>
      <arglist>(const LinearTetrahedralMeshMapper *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::LineSearch</name>
    <filename>classmirtk_1_1LineSearch.html</filename>
    <base>mirtk::LocalOptimizer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1LineSearch.html</anchorfile>
      <anchor>ac7f48b9531b50667c4c81221fcae76f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1LineSearch.html</anchorfile>
      <anchor>a52d60bb9513de0704816d9c2c0087396</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1LineSearch.html</anchorfile>
      <anchor>a85b4dce9f830c00fef11f036e295f696</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1LineSearch.html</anchorfile>
      <anchor>a72524d22a50d217644c9dcb6cc6cfd43</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual LineSearchStrategy</type>
      <name>Strategy</name>
      <anchorfile>classmirtk_1_1LineSearch.html</anchorfile>
      <anchor>a05fb053ca48f4db7e0be1326a2fb2afd</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LineSearch</name>
      <anchorfile>classmirtk_1_1LineSearch.html</anchorfile>
      <anchor>ab77e94268dff5ed68b7f48406b690ccf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LineSearch *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1LineSearch.html</anchorfile>
      <anchor>a4a7369adc1917857453fd1262f877f4d</anchor>
      <arglist>(LineSearchStrategy &amp;, ObjectiveFunction *=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LineSearch</name>
      <anchorfile>classmirtk_1_1LineSearch.html</anchorfile>
      <anchor>ad7ba787b074c1b68971bfc0636ff690e</anchor>
      <arglist>(ObjectiveFunction *=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LineSearch</name>
      <anchorfile>classmirtk_1_1LineSearch.html</anchorfile>
      <anchor>a646c37bd1f2e32a18bfd91066acd8798</anchor>
      <arglist>(const LineSearch &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>LineSearch &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1LineSearch.html</anchorfile>
      <anchor>a34864fad49b51175d9c3798e735c1640</anchor>
      <arglist>(const LineSearch &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::LineSearchStep</name>
    <filename>structmirtk_1_1LineSearchStep.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>_Current</name>
      <anchorfile>structmirtk_1_1LineSearchStep.html</anchorfile>
      <anchor>a14fec566c2a8b2deaa9da18b9608d108</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_Delta</name>
      <anchorfile>structmirtk_1_1LineSearchStep.html</anchorfile>
      <anchor>a48b4d208078b95f357718c766f110dc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>_Direction</name>
      <anchorfile>structmirtk_1_1LineSearchStep.html</anchorfile>
      <anchor>a65c55abd4ac37438d73f8f33ebd7ea41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>_Info</name>
      <anchorfile>structmirtk_1_1LineSearchStep.html</anchorfile>
      <anchor>a3d77674b9d0402b35fbb78a12a2c1daf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_Length</name>
      <anchorfile>structmirtk_1_1LineSearchStep.html</anchorfile>
      <anchor>a33769872c41178d3040c8354942be806</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_MaxLength</name>
      <anchorfile>structmirtk_1_1LineSearchStep.html</anchorfile>
      <anchor>a2bb7dcdd3f372b646ea4c406f460f44b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_MinLength</name>
      <anchorfile>structmirtk_1_1LineSearchStep.html</anchorfile>
      <anchor>a90119221f6b58ea4e6eb4edbb318f6a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_TotalDelta</name>
      <anchorfile>structmirtk_1_1LineSearchStep.html</anchorfile>
      <anchor>ab95527362dc1c8a544a7882fe4e7b30d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_TotalLength</name>
      <anchorfile>structmirtk_1_1LineSearchStep.html</anchorfile>
      <anchor>a562ca7480533ac486b8c2baa3a35ea3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_Unit</name>
      <anchorfile>structmirtk_1_1LineSearchStep.html</anchorfile>
      <anchor>a9c62cd83783fe182405ba605dc8d0b06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_Value</name>
      <anchorfile>structmirtk_1_1LineSearchStep.html</anchorfile>
      <anchor>a10962d3af9a3b3dfdda4074d43a44fe5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::Ln</name>
    <filename>classmirtk_1_1data_1_1op_1_1Ln.html</filename>
    <base>mirtk::data::op::ElementWiseUnaryOp</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Op</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Ln.html</anchorfile>
      <anchor>a8cd6a76f9990769ddc414500e99c0fe9</anchor>
      <arglist>(double value, bool &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Ln.html</anchorfile>
      <anchor>aeb1008af5f97852be78afd00ce7361a9</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::LocalOptimizer</name>
    <filename>classmirtk_1_1LocalOptimizer.html</filename>
    <base>mirtk::Observable</base>
    <member kind="typedef">
      <type>ObjectFactory&lt; enum OptimizationMethod, LocalOptimizer &gt;</type>
      <name>FactoryType</name>
      <anchorfile>classmirtk_1_1LocalOptimizer.html</anchorfile>
      <anchor>a47620809c82d9a52db99e32284460f38</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddStoppingCriterion</name>
      <anchorfile>classmirtk_1_1LocalOptimizer.html</anchorfile>
      <anchor>a908f26980c4e028506412a1c28e176b3</anchor>
      <arglist>(StoppingCriterion *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearStoppingCriteria</name>
      <anchorfile>classmirtk_1_1LocalOptimizer.html</anchorfile>
      <anchor>adbd720abb5ed37ace4e05b9dca26f116</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1LocalOptimizer.html</anchorfile>
      <anchor>ae9dc13c1490a3db0c0837656f97c63ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfStoppingCriteria</name>
      <anchorfile>classmirtk_1_1LocalOptimizer.html</anchorfile>
      <anchor>a2294aba84d8bab0545aa6aba4f2cfc09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual enum OptimizationMethod</type>
      <name>OptimizationMethod</name>
      <anchorfile>classmirtk_1_1LocalOptimizer.html</anchorfile>
      <anchor>ac0bcc332f645d1a39b863d99f899d6f5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1LocalOptimizer.html</anchorfile>
      <anchor>a64aeae52bf1c2ce367a0aba110ea6d13</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveStoppingCriterion</name>
      <anchorfile>classmirtk_1_1LocalOptimizer.html</anchorfile>
      <anchor>a051276f5ae615cba66f6ace5901198f3</anchor>
      <arglist>(StoppingCriterion *)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1LocalOptimizer.html</anchorfile>
      <anchor>a506eb38f1310bc2c63ae8d15e5a4018a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1LocalOptimizer.html</anchorfile>
      <anchor>a58805bb5515965c01545641b807e8ffe</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function">
      <type>class StoppingCriterion *</type>
      <name>StoppingCriterion</name>
      <anchorfile>classmirtk_1_1LocalOptimizer.html</anchorfile>
      <anchor>a910136c279755691f9b4467df0585e7e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const class StoppingCriterion *</type>
      <name>StoppingCriterion</name>
      <anchorfile>classmirtk_1_1LocalOptimizer.html</anchorfile>
      <anchor>a8704d6d5ca760e16bffb4ccf8c4722eb</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LocalOptimizer</name>
      <anchorfile>classmirtk_1_1LocalOptimizer.html</anchorfile>
      <anchor>acf564e53e97d1ecb755344e07665e868</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FactoryType &amp;</type>
      <name>Factory</name>
      <anchorfile>classmirtk_1_1LocalOptimizer.html</anchorfile>
      <anchor>a353821a1ee1d6e0e36a664fc09ce8987</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LocalOptimizer *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1LocalOptimizer.html</anchorfile>
      <anchor>ae331aa930b97370e8ae6bc28f4ee0d1c</anchor>
      <arglist>(enum OptimizationMethod, ObjectiveFunction *=NULL)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Converged</name>
      <anchorfile>classmirtk_1_1LocalOptimizer.html</anchorfile>
      <anchor>a11fcec4e1607921a2e6bc87789538c94</anchor>
      <arglist>(int iter, double value, const double *delta)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsImprovement</name>
      <anchorfile>classmirtk_1_1LocalOptimizer.html</anchorfile>
      <anchor>aee7b99dc17c23c0b851624296731a4c0</anchor>
      <arglist>(double prev, double value) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LocalOptimizer</name>
      <anchorfile>classmirtk_1_1LocalOptimizer.html</anchorfile>
      <anchor>a577275816ed43fdbe329824c910af18c</anchor>
      <arglist>(ObjectiveFunction *=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LocalOptimizer</name>
      <anchorfile>classmirtk_1_1LocalOptimizer.html</anchorfile>
      <anchor>a45a4f286638aae59f721a89d9ae54ddb</anchor>
      <arglist>(const LocalOptimizer &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>LocalOptimizer &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1LocalOptimizer.html</anchorfile>
      <anchor>ad57c5ac3ef2612843dbab453ab988e37</anchor>
      <arglist>(const LocalOptimizer &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::Log</name>
    <filename>classmirtk_1_1data_1_1op_1_1Log.html</filename>
    <base>mirtk::data::op::ElementWiseUnaryOp</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Op</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Log.html</anchorfile>
      <anchor>a9145ca34d7ddd8e2613a4f184de00430</anchor>
      <arglist>(double value, bool &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Log.html</anchorfile>
      <anchor>ace7ff9d1183574e82b78197a716da1a8</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::LogicalAnd</name>
    <filename>classmirtk_1_1data_1_1LogicalAnd.html</filename>
    <base>mirtk::data::LogicalOp</base>
    <member kind="function" virtualness="virtual">
      <type>virtual Selection</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1data_1_1LogicalAnd.html</anchorfile>
      <anchor>a06c11c1662a811fc4e05b794cc9b9bae</anchor>
      <arglist>(const Array&lt; double &gt; &amp;values) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::LogicalOp</name>
    <filename>classmirtk_1_1data_1_1LogicalOp.html</filename>
    <base>mirtk::data::Selector</base>
    <member kind="function">
      <type>SelectorPointer</type>
      <name>Criterium</name>
      <anchorfile>classmirtk_1_1data_1_1LogicalOp.html</anchorfile>
      <anchor>aa1a87c2f5651ab523f4639db69313f1f</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfCriteria</name>
      <anchorfile>classmirtk_1_1data_1_1LogicalOp.html</anchorfile>
      <anchor>a5384302c493c555249be536353809966</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Push</name>
      <anchorfile>classmirtk_1_1data_1_1LogicalOp.html</anchorfile>
      <anchor>a4887355c1d81154c975679f5155b3d2a</anchor>
      <arglist>(const SelectorPointer &amp;criterium)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1data_1_1LogicalOp.html</anchorfile>
      <anchor>a6e0ec9eaaa95566d2a64679d1d9f3a6a</anchor>
      <arglist>(SelectorList, Criteria)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::LogicalOr</name>
    <filename>classmirtk_1_1data_1_1LogicalOr.html</filename>
    <base>mirtk::data::LogicalOp</base>
    <member kind="function" virtualness="virtual">
      <type>virtual Selection</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1data_1_1LogicalOr.html</anchorfile>
      <anchor>a883730253a23382e0587d46c58a73422</anchor>
      <arglist>(const Array&lt; double &gt; &amp;values) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::LogJacobianConstraint</name>
    <filename>classmirtk_1_1LogJacobianConstraint.html</filename>
    <base>mirtk::JacobianConstraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>DerivativeWrtJacobianDet</name>
      <anchorfile>classmirtk_1_1LogJacobianConstraint.html</anchorfile>
      <anchor>ad89483fbeddc2d19477b73b2a21a09ba</anchor>
      <arglist>(double det) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogJacobianConstraint</name>
      <anchorfile>classmirtk_1_1LogJacobianConstraint.html</anchorfile>
      <anchor>a12153c944a7d81cdcdd8c97d9c6083d5</anchor>
      <arglist>(const char *=&quot;&quot;, bool=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1LogJacobianConstraint.html</anchorfile>
      <anchor>abfab9e3d238037fa91d9ea74382a4403</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Penalty</name>
      <anchorfile>classmirtk_1_1LogJacobianConstraint.html</anchorfile>
      <anchor>a29424ef6ffc6ae83eb8b0526b2a31df9</anchor>
      <arglist>(double det) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LogJacobianConstraint</name>
      <anchorfile>classmirtk_1_1LogJacobianConstraint.html</anchorfile>
      <anchor>a8cdc8b359d86b4f5c54022d7478a7260</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithoutPrefix</name>
      <anchorfile>classmirtk_1_1LogJacobianConstraint.html</anchorfile>
      <anchor>ab73c044ccfac6f2e74d30a627f372b5a</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithPrefix</name>
      <anchorfile>classmirtk_1_1LogJacobianConstraint.html</anchorfile>
      <anchor>aa9ccfaa515160fb74c3271bceebef12b</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::statistic::LowerPercentileMean</name>
    <filename>classmirtk_1_1data_1_1statistic_1_1LowerPercentileMean.html</filename>
    <base>mirtk::data::statistic::Percentile</base>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1data_1_1statistic_1_1LowerPercentileMean.html</anchorfile>
      <anchor>a4b5517827c866888f9ead67579b23f50</anchor>
      <arglist>(Array&lt; double &gt; &amp;values, int n, const double *data, const bool *mask=nullptr) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::UnaryVoxelFunction::LowerThreshold</name>
    <filename>structmirtk_1_1UnaryVoxelFunction_1_1LowerThreshold.html</filename>
    <templarg></templarg>
    <base>mirtk::VoxelFunction</base>
    <member kind="variable">
      <type>T</type>
      <name>_LowerThreshold</name>
      <anchorfile>structmirtk_1_1UnaryVoxelFunction_1_1LowerThreshold.html</anchorfile>
      <anchor>a14606319dfe8aa6cb5b9f62b73d111d2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::LowerThreshold</name>
    <filename>classmirtk_1_1data_1_1op_1_1LowerThreshold.html</filename>
    <base>mirtk::data::op::ElementWiseUnaryOp</base>
    <member kind="function">
      <type></type>
      <name>LowerThreshold</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1LowerThreshold.html</anchorfile>
      <anchor>a42c6dbbfd7e8c5b106dc35a4da5ba575</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LowerThreshold</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1LowerThreshold.html</anchorfile>
      <anchor>a34c0c04f25220835b0e3f4ceae9d9147</anchor>
      <arglist>(const double *value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Op</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1LowerThreshold.html</anchorfile>
      <anchor>a0bce200030f33c6a0d677c9f047b978c</anchor>
      <arglist>(double value, bool &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1LowerThreshold.html</anchorfile>
      <anchor>a42231a8eb36fa13e7b5505dcd5953466</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::Map</name>
    <filename>classmirtk_1_1data_1_1op_1_1Map.html</filename>
    <base>mirtk::data::op::ElementWiseUnaryOp</base>
    <member kind="function">
      <type>void</type>
      <name>Insert</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Map.html</anchorfile>
      <anchor>aa474ad3a7582cbc1b341341e7636ffb9</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Op</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Map.html</anchorfile>
      <anchor>afe1f5f5ffff84d34c2592bee5423268c</anchor>
      <arglist>(double value, bool &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Map.html</anchorfile>
      <anchor>ab458eed818b642801f43555b38e3cd62</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::Mapping</name>
    <filename>classmirtk_1_1Mapping.html</filename>
    <base>mirtk::Object</base>
    <member kind="function">
      <type>ImageAttributes</type>
      <name>Attributes</name>
      <anchorfile>classmirtk_1_1Mapping.html</anchorfile>
      <anchor>ac860c27e8b9c5538830538289a7f9fd6</anchor>
      <arglist>(int nx, int ny=0, int nz=0) const</arglist>
    </member>
    <member kind="function">
      <type>ImageAttributes</type>
      <name>Attributes</name>
      <anchorfile>classmirtk_1_1Mapping.html</anchorfile>
      <anchor>a4d822fc7e884b2938b767b069d1d066a</anchor>
      <arglist>(double dx=.0, double dy=.0, double dz=.0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1Mapping.html</anchorfile>
      <anchor>a0578b977d1ffc52ab6e952af1eae3505</anchor>
      <arglist>(double &amp;x1, double &amp;y1, double &amp;x2, double &amp;y2) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1Mapping.html</anchorfile>
      <anchor>a665534174d8ea82fbbf8aa5eb5407389</anchor>
      <arglist>(double &amp;x1, double &amp;y1, double &amp;z1, double &amp;x2, double &amp;y2, double &amp;z2) const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1Mapping.html</anchorfile>
      <anchor>ae98756242186f0af481f59f151980bc3</anchor>
      <arglist>(double bounds[6]) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1Mapping.html</anchorfile>
      <anchor>a2c2e39493eb9d6473b94786d4b5c973e</anchor>
      <arglist>(Point &amp;p1, Point &amp;p2) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1Mapping.html</anchorfile>
      <anchor>aa4884a3e93ce0eb14dcad68f67d377eb</anchor>
      <arglist>(double *v, double x, double y, double z=0) const =0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1Mapping.html</anchorfile>
      <anchor>a829ccedaad44ae28b2f8fcb10f2993ea</anchor>
      <arglist>(double *v, const double p[3]) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1Mapping.html</anchorfile>
      <anchor>a0e63385ae67e41171f8b67f0c393fb9c</anchor>
      <arglist>(double *v, const Point &amp;p) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1Mapping.html</anchorfile>
      <anchor>afe2f6bc20211e229209201711d7e21b4</anchor>
      <arglist>(double x, double y, double z=0, int l=0) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1Mapping.html</anchorfile>
      <anchor>a2f0b90a516bca2da399f313974e0bf19</anchor>
      <arglist>(const double p[3], int l=0) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1Mapping.html</anchorfile>
      <anchor>ae9ec99ecbc2dfb2f897abd7ce8d3a7a8</anchor>
      <arglist>(const Point &amp;, int l=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1Mapping.html</anchorfile>
      <anchor>afe3a558c052e16906bfdb95fb2423207</anchor>
      <arglist>(GenericImage&lt; float &gt; &amp;f, int l=0, vtkSmartPointer&lt; vtkPointSet &gt; m=nullptr) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1Mapping.html</anchorfile>
      <anchor>aebcfffa51764252d5b45f42614134bc1</anchor>
      <arglist>(GenericImage&lt; double &gt; &amp;f, int l=0, vtkSmartPointer&lt; vtkPointSet &gt; m=nullptr) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1Mapping.html</anchorfile>
      <anchor>a5fe5e367e3d3a844b9aa305265e458fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Mapping *</type>
      <name>NewCopy</name>
      <anchorfile>classmirtk_1_1Mapping.html</anchorfile>
      <anchor>afabc33e6bf27679db6b49f006968974f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumberOfArguments</name>
      <anchorfile>classmirtk_1_1Mapping.html</anchorfile>
      <anchor>a09211d1df68aa7f362032e3afe7cc835</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>NumberOfComponents</name>
      <anchorfile>classmirtk_1_1Mapping.html</anchorfile>
      <anchor>aa4a221446e843716883de9ad5076c755</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1Mapping.html</anchorfile>
      <anchor>a705db4024972a15295fe6efc56ad72f7</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1Mapping.html</anchorfile>
      <anchor>abd72930d7d9083511d32d5abe6cb71dc</anchor>
      <arglist>(const char *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Mapping</name>
      <anchorfile>classmirtk_1_1Mapping.html</anchorfile>
      <anchor>a499e62eb5bacf3cefd63f91d24a9225f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mapping *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1Mapping.html</anchorfile>
      <anchor>a2be0271fc5f880dc7b8584dadfed9ee1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Mapping</name>
      <anchorfile>classmirtk_1_1Mapping.html</anchorfile>
      <anchor>aa8c4f8192a9bc4a05d464bd0fd88316e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Mapping</name>
      <anchorfile>classmirtk_1_1Mapping.html</anchorfile>
      <anchor>a54372370434048a86f92fc2daea113bf</anchor>
      <arglist>(const Mapping &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Mapping &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1Mapping.html</anchorfile>
      <anchor>af7b09ab7aaf215c621e440c862d9b3db</anchor>
      <arglist>(const Mapping &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>ReadMap</name>
      <anchorfile>classmirtk_1_1Mapping.html</anchorfile>
      <anchor>a4373b9060be1daf6699724b5432eec36</anchor>
      <arglist>(Cifstream &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteMap</name>
      <anchorfile>classmirtk_1_1Mapping.html</anchorfile>
      <anchor>a0ad03c274922f35387f47b87acb2b2a2</anchor>
      <arglist>(Cofstream &amp;) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::Mask</name>
    <filename>classmirtk_1_1data_1_1op_1_1Mask.html</filename>
    <base>mirtk::data::op::ElementWiseBinaryOp</base>
    <member kind="function">
      <type></type>
      <name>Mask</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Mask.html</anchorfile>
      <anchor>a332705a45b1ada7ff9aaf779060ed14a</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mask</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Mask.html</anchorfile>
      <anchor>a4a2655b4e7104169c5b526306d4bbe7d</anchor>
      <arglist>(const double *value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mask</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Mask.html</anchorfile>
      <anchor>afa1d80a48bc1dc06aa69a04002eacb6f</anchor>
      <arglist>(const char *fname)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mask</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Mask.html</anchorfile>
      <anchor>a747e272724ec70664de3b179c7270c22</anchor>
      <arglist>(const char *fname, double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Op</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Mask.html</anchorfile>
      <anchor>a72b7005fd65aa27ca8f3d7afa2b54e2b</anchor>
      <arglist>(double value, double constant, bool &amp;mask) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Mask.html</anchorfile>
      <anchor>a9b36d994cf3fdfabb92b714f9a90c2ee</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::MaskEvenValues</name>
    <filename>classmirtk_1_1data_1_1op_1_1MaskEvenValues.html</filename>
    <base>mirtk::data::op::ElementWiseUnaryOp</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Op</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskEvenValues.html</anchorfile>
      <anchor>a382c9cc9ea9952a2ee58b923091699fc</anchor>
      <arglist>(double value, bool &amp;mask) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskEvenValues.html</anchorfile>
      <anchor>a3c2c3c301f408d3ae4fbaed95bd80d6c</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::MaskInsideInterval</name>
    <filename>classmirtk_1_1data_1_1op_1_1MaskInsideInterval.html</filename>
    <base>mirtk::data::op::ElementWiseUnaryOp</base>
    <member kind="function">
      <type></type>
      <name>MaskInsideInterval</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskInsideInterval.html</anchorfile>
      <anchor>ac8de35982dcad1cd88c60e92f0aa2839</anchor>
      <arglist>(double l, double u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaskInsideInterval</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskInsideInterval.html</anchorfile>
      <anchor>ab338d5cf31e7eb898007acb2d71e8bd5</anchor>
      <arglist>(const double *l, const double *u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaskInsideInterval</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskInsideInterval.html</anchorfile>
      <anchor>a7edf3f4eed7399b98d70ba9bc76ff0b6</anchor>
      <arglist>(double l, const double *u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaskInsideInterval</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskInsideInterval.html</anchorfile>
      <anchor>ad66b9ecce5c1846cca5e57901b84b60e</anchor>
      <arglist>(const double *l, double u)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Op</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskInsideInterval.html</anchorfile>
      <anchor>a1dbe90cde63582243a9e1cfd96c7090d</anchor>
      <arglist>(double value, bool &amp;mask) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskInsideInterval.html</anchorfile>
      <anchor>a86bd7214eba5b41d1fd9c206392f07b9</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::MaskInsideOpenInterval</name>
    <filename>classmirtk_1_1data_1_1op_1_1MaskInsideOpenInterval.html</filename>
    <base>mirtk::data::op::ElementWiseUnaryOp</base>
    <member kind="function">
      <type></type>
      <name>MaskInsideOpenInterval</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskInsideOpenInterval.html</anchorfile>
      <anchor>aca4317e66806ead09c0ce538ec5615ae</anchor>
      <arglist>(double l, double u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaskInsideOpenInterval</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskInsideOpenInterval.html</anchorfile>
      <anchor>aefa8c8f0cd731ca52120644bd9c2fa26</anchor>
      <arglist>(const double *l, const double *u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaskInsideOpenInterval</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskInsideOpenInterval.html</anchorfile>
      <anchor>a5c8ed10d31da144b47f79a95bde5d399</anchor>
      <arglist>(double l, const double *u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaskInsideOpenInterval</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskInsideOpenInterval.html</anchorfile>
      <anchor>a78873d8faacbd3b7deee08348729db92</anchor>
      <arglist>(const double *l, double u)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Op</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskInsideOpenInterval.html</anchorfile>
      <anchor>aef184a5e2e58566aaca6c46251549407</anchor>
      <arglist>(double value, bool &amp;mask) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskInsideOpenInterval.html</anchorfile>
      <anchor>a911520e5f322a126be237b3fdca32cc0</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::MaskOddValues</name>
    <filename>classmirtk_1_1data_1_1op_1_1MaskOddValues.html</filename>
    <base>mirtk::data::op::ElementWiseUnaryOp</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Op</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskOddValues.html</anchorfile>
      <anchor>a9903c191e946f36c4d4d0b821d863c56</anchor>
      <arglist>(double value, bool &amp;mask) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskOddValues.html</anchorfile>
      <anchor>aada0770573cc54bf531d0f3635c886f6</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::MaskOutsideInterval</name>
    <filename>classmirtk_1_1data_1_1op_1_1MaskOutsideInterval.html</filename>
    <base>mirtk::data::op::ElementWiseUnaryOp</base>
    <member kind="function">
      <type></type>
      <name>MaskOutsideInterval</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskOutsideInterval.html</anchorfile>
      <anchor>ad983416d9560a3b76ff1abb593c7c249</anchor>
      <arglist>(double l, double u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaskOutsideInterval</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskOutsideInterval.html</anchorfile>
      <anchor>a447b4543ebf8e58c83d7807766032124</anchor>
      <arglist>(const double *l, const double *u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaskOutsideInterval</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskOutsideInterval.html</anchorfile>
      <anchor>a5d2d07af542503d2d796252889da3b15</anchor>
      <arglist>(double l, const double *u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaskOutsideInterval</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskOutsideInterval.html</anchorfile>
      <anchor>a3e9f80c53a42e1d016fbc6bd0de1409e</anchor>
      <arglist>(const double *l, double u)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Op</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskOutsideInterval.html</anchorfile>
      <anchor>a28813277574749bfda01c1fd93a7af9f</anchor>
      <arglist>(double value, bool &amp;mask) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskOutsideInterval.html</anchorfile>
      <anchor>ab83747f1ede15e61cbc4745673aba45a</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::MaskOutsideOpenInterval</name>
    <filename>classmirtk_1_1data_1_1op_1_1MaskOutsideOpenInterval.html</filename>
    <base>mirtk::data::op::ElementWiseUnaryOp</base>
    <member kind="function">
      <type></type>
      <name>MaskOutsideOpenInterval</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskOutsideOpenInterval.html</anchorfile>
      <anchor>a9af73c853c32e4e70c9cfeba5c378587</anchor>
      <arglist>(double l, double u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaskOutsideOpenInterval</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskOutsideOpenInterval.html</anchorfile>
      <anchor>a0b7a2dd1142d53106bf6dc1716eae0c3</anchor>
      <arglist>(const double *l, const double *u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaskOutsideOpenInterval</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskOutsideOpenInterval.html</anchorfile>
      <anchor>a9f6436bf592e111496b13d906131a03e</anchor>
      <arglist>(double l, const double *u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaskOutsideOpenInterval</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskOutsideOpenInterval.html</anchorfile>
      <anchor>afc519f79f344da31070c045f1eba018f</anchor>
      <arglist>(const double *l, double u)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Op</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskOutsideOpenInterval.html</anchorfile>
      <anchor>af42dbb8ab011130de81a933c17aaba54</anchor>
      <arglist>(double value, bool &amp;mask) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskOutsideOpenInterval.html</anchorfile>
      <anchor>a30ff623b82841c6dc785fcc78111b20a</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::Matlab</name>
    <filename>classmirtk_1_1Matlab.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1Matlab.html</anchorfile>
      <anchor>aa1e68ab4215da3489321b9d1fea242ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>InitializeApplication</name>
      <anchorfile>classmirtk_1_1Matlab.html</anchorfile>
      <anchor>a7c6fa1a939361f13320110dd79df961a</anchor>
      <arglist>(const char **options, int count)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matlab &amp;</type>
      <name>Instance</name>
      <anchorfile>classmirtk_1_1Matlab.html</anchorfile>
      <anchor>a476d968ae7ea68f7cd8d5c7a7c13c0be</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::Matrix</name>
    <filename>classmirtk_1_1Matrix.html</filename>
    <base>mirtk::Object</base>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>AddToCol</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a9a2a3f5c8213dce30224a54df6d36466</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>AddToRow</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a5369401b57282d060f8634a9889ca4cc</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>Adjugate</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>ab3c79e966433b6fbda8ac1aca844261e</anchor>
      <arglist>(double &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a19d96eee7c17817cf5721bd0f5986a4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>Col</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a2817eaf65c6dda872dca009daf6788ea</anchor>
      <arglist>(int c)</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>Col</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a77273e1ad9291005285b7ff6e3dc2f85</anchor>
      <arglist>(int c) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ColIndex</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a1666b62031dd91033d3fa722d14f9e7c</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ColMax</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>adca33ad9c6d32499ad1f1896edd2d7bb</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ColMean</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>acb2bb5abbde0b5a2d486beeeffc47231</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ColMin</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>aa288eede87f84e3d37dcdcc205dc77ea</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ColRange</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a868bce6ed0fe937223cba4ced2baffc2</anchor>
      <arglist>(int, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Cols</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a0b54f78846e70bd6a9bf499476484ac5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ColStd</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>ad0787bcae3c73534fb57e9b40def42eb</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ColSum</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a63f709bc94762212b41b742aa04d60c6</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ColVar</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a6e4ac691dd2fc4add7d61faca4a89d48</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Det</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>ab9b6390136f3cd1293383f7a1e79444b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Det3x3</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>abc2c94880292ae65664c443c32f3efd0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Eigenvalues</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>aebbb883ad78c7a3245fbdd01e6e1c1ab</anchor>
      <arglist>(Matrix &amp;, Vector &amp;, Matrix &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>Exp</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>abf16ac3ae03263ad0a0e05af1fae635d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a189547d503d15fdbe0179cec1a3ec769</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>ac7cf7ad26fbf0e2c0d7bebed63f4e8f6</anchor>
      <arglist>(int, int) const</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>GetPointerToElements</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a0902b5d643c6b1537c8c9bad9d107c70</anchor>
      <arglist>(int r=0, int c=0)</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>GetPointerToElements</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a7e2a357d8f92537fd22d4b47153c81c5</anchor>
      <arglist>(int r=0, int c=0) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>Ident</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a4aa863132b24495abaae231d9c1d2f06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Import</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a83465e033cf9fb8db499377bd9c2eca5</anchor>
      <arglist>(const char *, int, int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Index</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>ab8834d37e3e0235c7843e1e44fdaa798</anchor>
      <arglist>(int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a236e5759e02324e2f51bda03ef37ef6a</anchor>
      <arglist>(int, int=-1, double *=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>Inverse</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>ae1bf0615ca09085b3c1791fe3d45c4bc</anchor>
      <arglist>(bool use_svd_if_singular=true) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>Invert</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a80c21f88a2f466a07d55e73f621f3cf0</anchor>
      <arglist>(bool use_svd_if_singular=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsDiagonalizable</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a9c8b68643850a3be0a272840b8369367</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsIdentity</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>ac6038ce1259a2c1d3d53ae5eb7c75e20</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSquare</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a63aea5387476f11edd282d415ad45cdd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSymmetric</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>ab4b82f9150b3ecdcb3ac7dd3baddf43c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LeastSquaresFit</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>adc128c147147bdcf0282347515d1aa2a</anchor>
      <arglist>(const Vector &amp;, Vector &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>Log</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a4688aa1251a9353ce29c20bfc25d0024</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LU</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a978aac2b357a86205f69bd111885cb8c</anchor>
      <arglist>(Matrix &amp;, Matrix &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MakeSymmetric</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a87d274e96a50b91139ae0fc8f4f65b88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a5ad40e4a1e409d4af6efb49e55d19100</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a8d0d7daf3d627206cedd8cc7a24deeae</anchor>
      <arglist>(int, int=-1, double *=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a8f1abe1dfbf26a63f0f5557da5c942d2</anchor>
      <arglist>(const Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>ab0e39b381e484f62c8b6839b2a99c3c3</anchor>
      <arglist>(const PointSet &amp;, bool twoD=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a725aa92939456f577f31bc21355c1118</anchor>
      <arglist>(const Matrix &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a49da5889706a83bc5b994bbc9ce8dd39</anchor>
      <arglist>(const Matrix3x3 &amp;)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Norm</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a7a10f780a194df2476b23934c75e0f64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfElements</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>ada69a9b83766085b876dcbea0ec9f3e0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>operator!</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a0eb93e9c697abdbae6aa7f0c26b39f6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>aca38dab87a812f01a100a3814b157eb6</anchor>
      <arglist>(const Matrix &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>operator!=</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a7fe0f1b7d0ce1487eff77d4354bcba8b</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a5f19f5f06950f607bfe36667aae68b17</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a66a9bd3ac968edd5bb191c21170b36d9</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a3a74bd76c5d5238c69de737885f58073</anchor>
      <arglist>(int, int)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a35fd58e7aff70416ec7806b811aca6a7</anchor>
      <arglist>(int, int) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a1770d3a034becd927a3d811137e626c8</anchor>
      <arglist>(int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a53003da583e478e70428377f5003464e</anchor>
      <arglist>(Matrix &amp;, int, int)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a3a353e306f936f7ea8eb9532ad06fc59</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a7712ef0ebe4279a9d264253f462c1b45</anchor>
      <arglist>(const Vector &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a97214d9f43bef8ec90e84525ae41fdb0</anchor>
      <arglist>(const Matrix &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>ab9793d6dad7f8645914f16c5bf1edb52</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a55274ccc16566d8a34e64e5f90e11b17</anchor>
      <arglist>(const Matrix &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a2f4df14519022d79026b018615fbae82</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a74ddd744b6f442301935627debf79bbb</anchor>
      <arglist>(const Matrix &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a3064f8660fc72bef19e9c8f7eecf8662</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a323a1075b382409409019d3e2ea2e030</anchor>
      <arglist>(const Matrix &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>aac458a7ce310071b5f82c6dfe9912e49</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a2706153689cbf25f05deb3e550b45de7</anchor>
      <arglist>(const Matrix &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a3bda42604f4aacff560825409b932cfa</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>ac8509e80fa5b4662fcc9015b3820e211</anchor>
      <arglist>(const Matrix &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a537ac57641ea06ad17c71a5568125e6a</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>aacf4019e004b9adc376ab4ef0bf35c44</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>operator&lt;</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>af9edb6c68757a7bbe8c166ca0e9054f5</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>operator&lt;=</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>afba68d6c432f3da77cf06b00c22c2e0e</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>af112ff9c466fcf91c963a8c330a8cdb5</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a5f8156e109580ceebabd730dde2a9548</anchor>
      <arglist>(const Matrix &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a77c648c6e3e9f01b6b1ae3ec96f3461b</anchor>
      <arglist>(const Matrix3x3 &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>ace8f2e9dbc0093d682af1248342c723f</anchor>
      <arglist>(const Matrix &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>operator==</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>af7d6a86078305eaddb57e3758fd52ba6</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>operator&gt;</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a8a15e34760d60da91ba458caef6e20bb</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>operator&gt;=</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>ab97128b872f292ee69c9169bb3177a83</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>operator~</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a47166ef325d75a89c58b496c5387be34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>PermuteCols</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a7a78451eb36a61ed4d9ddbe77db8da18</anchor>
      <arglist>(Array&lt; int &gt;)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>PermuteRows</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a28410a0825de156febd2172c23d7e6e5</anchor>
      <arglist>(Array&lt; int &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>aa87cb8e29d1467e6653610b12cd6c30e</anchor>
      <arglist>(Indent=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>ab614bd7edcde219e2693dafa78a15b1e</anchor>
      <arglist>(ostream &amp;, Indent=0) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>PseudoInverse</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a1c1d75c4cbcb018a844484fa54778882</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>PseudoInvert</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a4328945194c022af6805475796a1ceec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>add86d8091cbc94f64b0e7345ba05de7c</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>adb95dbfe02012a5a700fc8e842b8b98e</anchor>
      <arglist>(int, int, double)</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>RawPointer</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>af31415a4bc51832f61801df2b14d205e</anchor>
      <arglist>(int r=0, int c=0)</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>RawPointer</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a93009a8a9ebade29c8d3f13df954157b</anchor>
      <arglist>(int r=0, int c=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>af85bc56a86e0e73e47ecd8779a92eb9e</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Resize</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>aea9ac684d6f96a9c71adf4f460f3a792</anchor>
      <arglist>(int, int=-1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>RowIndex</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a4e9bb5db3e11dfa9912870729f9dc774</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RowMax</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>aefe280b802666b29f866cfdb0dd406c3</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RowMean</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a411cf4975f1e4b5dbf2edfd61f4a1087</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RowMin</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a9d76fd13ddb907df22f4ab3995dd9c83</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RowRange</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a8b516661827c72591f1e0b1f8e2e909a</anchor>
      <arglist>(int, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Rows</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a465bfe0607d6683d2603ff18adbab20f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RowStd</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a243812f8f09847dfa059bde5b0341783</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RowSum</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a53225d005b56f62f73e30f4752ada7db</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RowVar</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a2335fe6373e5b88a1fa52107cd497585</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>ScaleCol</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a98e5f2044291bf61d7087f8fd6852202</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>ScaleRow</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a03993657eb17e367a4d8606a84c0785b</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function">
      <type>Pair&lt; int, int &gt;</type>
      <name>Size</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a7dedd4083963796c8a78df8c87f7c389</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>Sqrt</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>aa8a533bedebee645a00443224d61f1d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SubIndex</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>ad10bb2fb5765d2a87d2f413554783065</anchor>
      <arglist>(int, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Pair&lt; int, int &gt;</type>
      <name>SubIndex</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a37e6a864e2373c2f769e4ad0253a23ba</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SVD</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>af9a24d310f1d087fa4af6cff9c4ec9a2</anchor>
      <arglist>(Matrix &amp;, Vector &amp;, Matrix &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>SVDInverse</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a183b5a1c021cd8673cdaf40f27ed8e70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>SVDInvert</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a2d7f28fce77be600f165a3d879158ad3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SymmetricEigen</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a03b1a4ca098ffb5d00ec76b6f6bba86b</anchor>
      <arglist>(Matrix &amp;, Vector &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3x3</type>
      <name>To3x3</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a8e8e606f9129ae87c698763395fdafbe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Trace</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>afd704904a79060ba9b9f837a82254192</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>Transpose</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>abfc05000891edb7422a04fcb7a2a0c88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>Transposed</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>af271644c1d41a4fc6f1676daf47a882f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>ac7ca94523c8bd994733316f034f97356</anchor>
      <arglist>(const char *) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteMAT</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a7390ffe0a23fc0267c812225ad426583</anchor>
      <arglist>(const char *, const char *=&quot;A&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Zero</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a6de0073685a9a94e19fc2a1e8d3a973d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Matrix</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>ad66bed92aea3494e44378811f4271014</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_cols</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>abac6b69cdd21059d5003c1b3385d7b1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double **</type>
      <name>_matrix</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a4d81da91f7b46e540b2d2a9209bda586</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_owner</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>ac80a999297174c96602ea8f15f1a1ea5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_rows</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a82abc2494d7e5589e8f8bbdf3384b7c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a2f42038170939f5026438222e10d48a8</anchor>
      <arglist>(ostream &amp;, const Matrix &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend Cofstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a447021117dc27a7c0887303b6b453c03</anchor>
      <arglist>(Cofstream &amp;, const Matrix &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>ac93b3623c6195dcb8289a3a9ff68b5f1</anchor>
      <arglist>(istream &amp;, Matrix &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend Cifstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>ac631a9fb9772ed7d7e137b4ebd7e8f65</anchor>
      <arglist>(Cifstream &amp;, Matrix &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::statistic::Max</name>
    <filename>classmirtk_1_1data_1_1statistic_1_1Max.html</filename>
    <base>mirtk::data::Statistic</base>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1data_1_1statistic_1_1Max.html</anchorfile>
      <anchor>a58979bbb7f83f46cf48a531a3718fc42</anchor>
      <arglist>(Array&lt; double &gt; &amp;values, int n, const double *data, const bool *mask=nullptr) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::statistic::MaxAbs</name>
    <filename>classmirtk_1_1data_1_1statistic_1_1MaxAbs.html</filename>
    <base>mirtk::data::Statistic</base>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1data_1_1statistic_1_1MaxAbs.html</anchorfile>
      <anchor>af2b2fb7a5d99fd2218dfd61b3d9c8ba6</anchor>
      <arglist>(Array&lt; double &gt; &amp;values, int n, const double *data, const bool *mask=nullptr) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::MaximumCurvatureConstraint</name>
    <filename>classmirtk_1_1MaximumCurvatureConstraint.html</filename>
    <base>mirtk::SurfaceConstraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1MaximumCurvatureConstraint.html</anchorfile>
      <anchor>a09a322bbcfe783261217f5b7da4ecb12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaximumCurvatureConstraint</name>
      <anchorfile>classmirtk_1_1MaximumCurvatureConstraint.html</anchorfile>
      <anchor>a236b755a46ddb296e763458bb5502675</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaximumCurvatureConstraint</name>
      <anchorfile>classmirtk_1_1MaximumCurvatureConstraint.html</anchorfile>
      <anchor>ab703390eb7f1c6d7b96579f573041c98</anchor>
      <arglist>(const MaximumCurvatureConstraint &amp;)</arglist>
    </member>
    <member kind="function">
      <type>MaximumCurvatureConstraint &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1MaximumCurvatureConstraint.html</anchorfile>
      <anchor>af60404266427723fa1790bbfe0afce19</anchor>
      <arglist>(const MaximumCurvatureConstraint &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1MaximumCurvatureConstraint.html</anchorfile>
      <anchor>a7cd87c2a408e98fe32d2c7dabaf99311</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MaximumCurvatureConstraint</name>
      <anchorfile>classmirtk_1_1MaximumCurvatureConstraint.html</anchorfile>
      <anchor>a8436852591af2c520de50e808eff922f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1MaximumCurvatureConstraint.html</anchorfile>
      <anchor>a3e237e6444621c8569e85c33a05e997b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1MaximumCurvatureConstraint.html</anchorfile>
      <anchor>acb5276cdc5d71756c45c3108b3f33078</anchor>
      <arglist>(double *, double, double)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::MaxStepLineSearch</name>
    <filename>classmirtk_1_1MaxStepLineSearch.html</filename>
    <base>mirtk::InexactLineSearch</base>
    <member kind="function">
      <type></type>
      <name>MaxStepLineSearch</name>
      <anchorfile>classmirtk_1_1MaxStepLineSearch.html</anchorfile>
      <anchor>ae4b1d2f96b1479537da22b02c03f5304</anchor>
      <arglist>(ObjectiveFunction *=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaxStepLineSearch</name>
      <anchorfile>classmirtk_1_1MaxStepLineSearch.html</anchorfile>
      <anchor>a5845d73a39b3a045f2edf8c3c7da1d84</anchor>
      <arglist>(const MaxStepLineSearch &amp;)</arglist>
    </member>
    <member kind="function">
      <type>MaxStepLineSearch &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1MaxStepLineSearch.html</anchorfile>
      <anchor>ab596cbcbeafe3990b650d2133e37f5b5</anchor>
      <arglist>(const MaxStepLineSearch &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1MaxStepLineSearch.html</anchorfile>
      <anchor>a939909359accf3fdcb323d2856901e4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MaxStepLineSearch</name>
      <anchorfile>classmirtk_1_1MaxStepLineSearch.html</anchorfile>
      <anchor>a026f654c411e1610637aa5c385acee3d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ImplicitSurfaceUtils::MaxWidth</name>
    <filename>structmirtk_1_1ImplicitSurfaceUtils_1_1MaxWidth.html</filename>
    <base>mirtk::ImplicitSurfaceUtils::DistanceMeasurement</base>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>structmirtk_1_1ImplicitSurfaceUtils_1_1MaxWidth.html</anchorfile>
      <anchor>a6b092373f9b66ca18df236a3d90458fa</anchor>
      <arglist>(const double p[3], const PointSamples &amp;dirs, double mind, double minh, double maxw, const DistanceFunction &amp;distance, double offset=.0, double tol=1e-3)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::statistic::Mean</name>
    <filename>classmirtk_1_1data_1_1statistic_1_1Mean.html</filename>
    <base>mirtk::data::Statistic</base>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1data_1_1statistic_1_1Mean.html</anchorfile>
      <anchor>a49d036b4238c856d1cea958f8d3089d1</anchor>
      <arglist>(Array&lt; double &gt; &amp;values, int n, const double *data, const bool *mask=nullptr) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::statistic::MeanAbsoluteDifference</name>
    <filename>classmirtk_1_1data_1_1statistic_1_1MeanAbsoluteDifference.html</filename>
    <base>mirtk::data::Statistic</base>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1data_1_1statistic_1_1MeanAbsoluteDifference.html</anchorfile>
      <anchor>a03ea42538809d28ba2bab739bf443e21</anchor>
      <arglist>(Array&lt; double &gt; &amp;values, int n, const double *data, const bool *mask=nullptr) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::MeanCurvatureConstraint</name>
    <filename>classmirtk_1_1MeanCurvatureConstraint.html</filename>
    <base>mirtk::SurfaceConstraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1MeanCurvatureConstraint.html</anchorfile>
      <anchor>a3b44f2ae1b6981b2ba0bc6f2cf64a6ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MeanCurvatureConstraint</name>
      <anchorfile>classmirtk_1_1MeanCurvatureConstraint.html</anchorfile>
      <anchor>ab9b249796b1f5c5cdf4f2eb9f5c5b980</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MeanCurvatureConstraint</name>
      <anchorfile>classmirtk_1_1MeanCurvatureConstraint.html</anchorfile>
      <anchor>a6e01ba0f7d6c862901ff01fe5f997103</anchor>
      <arglist>(const MeanCurvatureConstraint &amp;)</arglist>
    </member>
    <member kind="function">
      <type>MeanCurvatureConstraint &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1MeanCurvatureConstraint.html</anchorfile>
      <anchor>a009d0e9b4aba4efdd78a604bfeb67d82</anchor>
      <arglist>(const MeanCurvatureConstraint &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1MeanCurvatureConstraint.html</anchorfile>
      <anchor>a5b84d6184c7ea227f8d461aeb7b047b0</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MeanCurvatureConstraint</name>
      <anchorfile>classmirtk_1_1MeanCurvatureConstraint.html</anchorfile>
      <anchor>a433594cd28f9c7a906857d58e9759dc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1MeanCurvatureConstraint.html</anchorfile>
      <anchor>af4eab2bf4e1a6ca1f422db3645e04561</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1MeanCurvatureConstraint.html</anchorfile>
      <anchor>a0addaddac890c8544fc28b00e2d86eac</anchor>
      <arglist>(double *, double, double)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::MeanSquaredDisplacementError</name>
    <filename>classmirtk_1_1MeanSquaredDisplacementError.html</filename>
    <base>mirtk::DataFidelity</base>
    <member kind="typedef">
      <type>RegisteredImage::DisplacementImageType</type>
      <name>DisplacementImageType</name>
      <anchorfile>classmirtk_1_1MeanSquaredDisplacementError.html</anchorfile>
      <anchor>a5e7a4c2251776e20199356558c739695</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericImage&lt; GradientType &gt;</type>
      <name>GradientImageType</name>
      <anchorfile>classmirtk_1_1MeanSquaredDisplacementError.html</anchorfile>
      <anchor>ac832df0a70c742b78226a3e6d9bfd8a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>GradientType</name>
      <anchorfile>classmirtk_1_1MeanSquaredDisplacementError.html</anchorfile>
      <anchor>af73b9b884bd6457c2a797aeee57fc8d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1MeanSquaredDisplacementError.html</anchorfile>
      <anchor>ad18b7c79453ff304149fd5250b07d15e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MeanSquaredDisplacementError</name>
      <anchorfile>classmirtk_1_1MeanSquaredDisplacementError.html</anchorfile>
      <anchor>a23727ef22e68099fc720de496751d288</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1MeanSquaredDisplacementError.html</anchorfile>
      <anchor>a27359b878b1d766a0306cfb5af75eb49</anchor>
      <arglist>(bool gradient=true)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1MeanSquaredDisplacementError.html</anchorfile>
      <anchor>aace170f99aec5e1fae8397bcb03e7c3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1MeanSquaredDisplacementError.html</anchorfile>
      <anchor>a5034dc45c320c7e3ade6aa11e611f4a6</anchor>
      <arglist>(double *, double, double)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1MeanSquaredDisplacementError.html</anchorfile>
      <anchor>a1215af1b93e509ef3495f00f693c9fbc</anchor>
      <arglist>(DisplacementImageType, TargetDisplacement)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1MeanSquaredDisplacementError.html</anchorfile>
      <anchor>a52fcb2d59e932f4ef9e16585adc8da71</anchor>
      <arglist>(DisplacementImageType, CurrentDisplacement)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1MeanSquaredDisplacementError.html</anchorfile>
      <anchor>ae53602932f8afe672d3d27544e122022</anchor>
      <arglist>(GradientImageType, NonParametricGradient)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1MeanSquaredDisplacementError.html</anchorfile>
      <anchor>a90d3b97959efa033d4de8a31fbd00702</anchor>
      <arglist>(const class Transformation, TargetTransformation)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1MeanSquaredDisplacementError.html</anchorfile>
      <anchor>af996d1565f03ee0acb138659cc0962ea</anchor>
      <arglist>(DisplacementImageType, ExternalDisplacement)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1MeanSquaredDisplacementError.html</anchorfile>
      <anchor>a22688d64acfdd499ee8159eaab3dad7b</anchor>
      <arglist>(ImageAttributes, Domain)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::MeanValueSurfaceMapper</name>
    <filename>classmirtk_1_1MeanValueSurfaceMapper.html</filename>
    <base>mirtk::NonSymmetricWeightsSurfaceMapper</base>
    <member kind="function">
      <type></type>
      <name>MeanValueSurfaceMapper</name>
      <anchorfile>classmirtk_1_1MeanValueSurfaceMapper.html</anchorfile>
      <anchor>a4cdb73e2169ac15e0de6a5c1a4a2f98c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MeanValueSurfaceMapper</name>
      <anchorfile>classmirtk_1_1MeanValueSurfaceMapper.html</anchorfile>
      <anchor>ad00a1d0f46fd4bb647c541a6594c1283</anchor>
      <arglist>(const MeanValueSurfaceMapper &amp;)</arglist>
    </member>
    <member kind="function">
      <type>MeanValueSurfaceMapper &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1MeanValueSurfaceMapper.html</anchorfile>
      <anchor>a6d19d6732984267e51d4d48370c1aa67</anchor>
      <arglist>(const MeanValueSurfaceMapper &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MeanValueSurfaceMapper</name>
      <anchorfile>classmirtk_1_1MeanValueSurfaceMapper.html</anchorfile>
      <anchor>af8adbf80b4eac9ec44c78ca35b43721a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Weight</name>
      <anchorfile>classmirtk_1_1MeanValueSurfaceMapper.html</anchorfile>
      <anchor>aafde5f2ffac76e35a1b0166460ff8b1f</anchor>
      <arglist>(int i, int j) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::statistic::MeanVar</name>
    <filename>classmirtk_1_1data_1_1statistic_1_1MeanVar.html</filename>
    <base>mirtk::data::Statistic</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>MeanVar</name>
      <anchorfile>classmirtk_1_1data_1_1statistic_1_1MeanVar.html</anchorfile>
      <anchor>aaf0b48b64862f06cdb278ffe3128ae04</anchor>
      <arglist>(int nvalues, const char *desc=nullptr, const Array&lt; string &gt; *names=nullptr)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ImplicitSurfaceUtils::MeanWidth</name>
    <filename>structmirtk_1_1ImplicitSurfaceUtils_1_1MeanWidth.html</filename>
    <base>mirtk::ImplicitSurfaceUtils::DistanceMeasurement</base>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>structmirtk_1_1ImplicitSurfaceUtils_1_1MeanWidth.html</anchorfile>
      <anchor>a874b80345121ed4cd2c1956f50a9fc17</anchor>
      <arglist>(const double p[3], const PointSamples &amp;dirs, double mind, double minh, double maxw, const DistanceFunction &amp;distance, double offset=.0, double tol=1e-3)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::statistic::Median</name>
    <filename>classmirtk_1_1data_1_1statistic_1_1Median.html</filename>
    <base>mirtk::data::Statistic</base>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1data_1_1statistic_1_1Median.html</anchorfile>
      <anchor>a311ed718a0b67cdb4fb0b888b4d24e59</anchor>
      <arglist>(Array&lt; double &gt; &amp;values, int n, const double *data, const bool *mask=nullptr) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::statistic::MedianAbsoluteDifference</name>
    <filename>classmirtk_1_1data_1_1statistic_1_1MedianAbsoluteDifference.html</filename>
    <base>mirtk::data::Statistic</base>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1data_1_1statistic_1_1MedianAbsoluteDifference.html</anchorfile>
      <anchor>ada875bac2b021fe9f735133defb2c10d</anchor>
      <arglist>(Array&lt; double &gt; &amp;values, int n, const double *data, const bool *mask=nullptr) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::MedianPointData</name>
    <filename>classmirtk_1_1MedianPointData.html</filename>
    <base>mirtk::PointDataFilter</base>
    <member kind="function">
      <type></type>
      <name>MedianPointData</name>
      <anchorfile>classmirtk_1_1MedianPointData.html</anchorfile>
      <anchor>a73c6e15e2928600465e1e4ec705d3179</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MedianPointData</name>
      <anchorfile>classmirtk_1_1MedianPointData.html</anchorfile>
      <anchor>a83f21167a688c13aeeaf1cb42f1b2e09</anchor>
      <arglist>(const MedianPointData &amp;)</arglist>
    </member>
    <member kind="function">
      <type>MedianPointData &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1MedianPointData.html</anchorfile>
      <anchor>a5cec12a2e23a58dd6f5a32c66e48728a</anchor>
      <arglist>(const MedianPointData &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MedianPointData</name>
      <anchorfile>classmirtk_1_1MedianPointData.html</anchorfile>
      <anchor>a43e0bfde923daa37618caaf506abd8a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Execute</name>
      <anchorfile>classmirtk_1_1MedianPointData.html</anchorfile>
      <anchor>a764b4db96dcf5867d46ba30c77086fef</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ImplicitSurfaceUtils::MedianWidth</name>
    <filename>structmirtk_1_1ImplicitSurfaceUtils_1_1MedianWidth.html</filename>
    <base>mirtk::ImplicitSurfaceUtils::DistanceMeasurement</base>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>structmirtk_1_1ImplicitSurfaceUtils_1_1MedianWidth.html</anchorfile>
      <anchor>a7598667ae92305677dbbc66ff2ef8143</anchor>
      <arglist>(const double p[3], const PointSamples &amp;dirs, double mind, double minh, double maxw, const DistanceFunction &amp;distance, double offset=.0, double tol=1e-3)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::MeshFilter</name>
    <filename>classmirtk_1_1MeshFilter.html</filename>
    <base>mirtk::Object</base>
    <member kind="function">
      <type>vtkPolyData *</type>
      <name>GetOutput</name>
      <anchorfile>classmirtk_1_1MeshFilter.html</anchorfile>
      <anchor>a66e7b60875013af5a0f8d670e6c3971e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkOnOffMacro</name>
      <anchorfile>classmirtk_1_1MeshFilter.html</anchorfile>
      <anchor>af67f5fcfdd7cf00df8a79da1b1a6f43e</anchor>
      <arglist>(DoublePrecision)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1MeshFilter.html</anchorfile>
      <anchor>ac70fcef3a7e6b4e1ca3bb6e1564090f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetInput</name>
      <anchorfile>classmirtk_1_1MeshFilter.html</anchorfile>
      <anchor>a8c583323169c8e3a8890abffd87f9c2f</anchor>
      <arglist>(vtkPolyData *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetInputData</name>
      <anchorfile>classmirtk_1_1MeshFilter.html</anchorfile>
      <anchor>a779ac1f9039bc0e6346faea0efc3c7d3</anchor>
      <arglist>(vtkPolyData *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1MeshFilter.html</anchorfile>
      <anchor>a48ba36248060babbb8c941ebdd6c8031</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>Execute</name>
      <anchorfile>classmirtk_1_1MeshFilter.html</anchorfile>
      <anchor>aba9c5f4a70a3dd191de40c3ded3fdf49</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1MeshFilter.html</anchorfile>
      <anchor>a2736ca40f84f1257ebb4e8624d3521ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1MeshFilter.html</anchorfile>
      <anchor>a7e2981a3864ab0461f04d4aea4608fc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>InitializeEdgeTable</name>
      <anchorfile>classmirtk_1_1MeshFilter.html</anchorfile>
      <anchor>af4692a345b0ae0746eb6cb4785e8b02c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MeshFilter</name>
      <anchorfile>classmirtk_1_1MeshFilter.html</anchorfile>
      <anchor>af37ad89d23d6ca875be54400e3096f8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MeshFilter</name>
      <anchorfile>classmirtk_1_1MeshFilter.html</anchorfile>
      <anchor>af275db356ca500b15e189b7436ef9a30</anchor>
      <arglist>(const MeshFilter &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>vtkSmartPointer&lt; vtkDataArray &gt;</type>
      <name>NewArray</name>
      <anchorfile>classmirtk_1_1MeshFilter.html</anchorfile>
      <anchor>a5b0b35606a3e34fed480c11154f1bfe4</anchor>
      <arglist>(const char *name, vtkIdType n, int c, int type=VTK_VOID) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>vtkSmartPointer&lt; vtkDataArray &gt;</type>
      <name>NewArray</name>
      <anchorfile>classmirtk_1_1MeshFilter.html</anchorfile>
      <anchor>acd5c55d648648dab36feea0ae78d5389</anchor>
      <arglist>(const char *name, int c=1, int type=VTK_VOID) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>vtkSmartPointer&lt; vtkDataArray &gt;</type>
      <name>NewCellArray</name>
      <anchorfile>classmirtk_1_1MeshFilter.html</anchorfile>
      <anchor>a28bce24de64ed412f64004d30e8f8ced</anchor>
      <arglist>(const char *name, int c=1, int type=VTK_VOID) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>vtkSmartPointer&lt; vtkDataArray &gt;</type>
      <name>NewPointArray</name>
      <anchorfile>classmirtk_1_1MeshFilter.html</anchorfile>
      <anchor>a6bece2c1308a3345bf1fc104acc2d9b0</anchor>
      <arglist>(const char *name, int c=1, int type=VTK_VOID) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>MeshFilter &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1MeshFilter.html</anchorfile>
      <anchor>a9d1ab38d05d173c76b76c2211c097f99</anchor>
      <arglist>(const MeshFilter &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~MeshFilter</name>
      <anchorfile>classmirtk_1_1MeshFilter.html</anchorfile>
      <anchor>a0d5e2cfe22315de564e7d9a2a4d23106</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::MeshlessBiharmonicMap</name>
    <filename>classmirtk_1_1MeshlessBiharmonicMap.html</filename>
    <base>mirtk::MeshlessHarmonicMap</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1MeshlessBiharmonicMap.html</anchorfile>
      <anchor>a9f697f135619392830ce34f25e6b0929</anchor>
      <arglist>(double *v, double x, double y, double z=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1MeshlessBiharmonicMap.html</anchorfile>
      <anchor>adf7a9c23db253d2c42e9d60a34fd70b6</anchor>
      <arglist>(double x, double y, double z=0, int l=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1MeshlessBiharmonicMap.html</anchorfile>
      <anchor>af20217fa2827216bb3f52538c0ca1e48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MeshlessBiharmonicMap</name>
      <anchorfile>classmirtk_1_1MeshlessBiharmonicMap.html</anchorfile>
      <anchor>a94dcd8a3755b046ca6aaa40fdd4f31f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MeshlessBiharmonicMap</name>
      <anchorfile>classmirtk_1_1MeshlessBiharmonicMap.html</anchorfile>
      <anchor>ad99491da41b43ffe7136b79bf97e5fb7</anchor>
      <arglist>(const MeshlessBiharmonicMap &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Mapping *</type>
      <name>NewCopy</name>
      <anchorfile>classmirtk_1_1MeshlessBiharmonicMap.html</anchorfile>
      <anchor>af4c4f76a9b2674ee9ae0530f2ed17e5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MeshlessBiharmonicMap &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1MeshlessBiharmonicMap.html</anchorfile>
      <anchor>aa31ec5028a7d9bd2cf2362aa8ed1291b</anchor>
      <arglist>(const MeshlessBiharmonicMap &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MeshlessBiharmonicMap</name>
      <anchorfile>classmirtk_1_1MeshlessBiharmonicMap.html</anchorfile>
      <anchor>ad5126d334cefd9dcd251ccd14c0c1ed9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>B</name>
      <anchorfile>classmirtk_1_1MeshlessBiharmonicMap.html</anchorfile>
      <anchor>ac692e9fdfd51339810ba4eb6d9fb68c8</anchor>
      <arglist>(double d)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::MeshlessHarmonicMap</name>
    <filename>classmirtk_1_1MeshlessHarmonicMap.html</filename>
    <base>mirtk::MeshlessMap</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1MeshlessHarmonicMap.html</anchorfile>
      <anchor>a52e7f80a70d07158eb36b2f7fb1c3f67</anchor>
      <arglist>(double *v, double x, double y, double z=.0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1MeshlessHarmonicMap.html</anchorfile>
      <anchor>aa6c87d5df25f52b250d1e12915850a3b</anchor>
      <arglist>(double x, double y, double z=.0, int l=0) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MeshlessHarmonicMap</name>
      <anchorfile>classmirtk_1_1MeshlessHarmonicMap.html</anchorfile>
      <anchor>a473c2f2ab4bcc6dd7edba85b5bce693e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MeshlessHarmonicMap</name>
      <anchorfile>classmirtk_1_1MeshlessHarmonicMap.html</anchorfile>
      <anchor>adf6d0ee0c6cbeb213acea15378847769</anchor>
      <arglist>(const MeshlessHarmonicMap &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Mapping *</type>
      <name>NewCopy</name>
      <anchorfile>classmirtk_1_1MeshlessHarmonicMap.html</anchorfile>
      <anchor>a3958534ad9ddfce619087578b654a879</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MeshlessHarmonicMap &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1MeshlessHarmonicMap.html</anchorfile>
      <anchor>a3eaaea2204fe3c17d359e4c528d01632</anchor>
      <arglist>(const MeshlessHarmonicMap &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MeshlessHarmonicMap</name>
      <anchorfile>classmirtk_1_1MeshlessHarmonicMap.html</anchorfile>
      <anchor>afa9eaa573d85e7ce292fd56ebacbd1f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>H</name>
      <anchorfile>classmirtk_1_1MeshlessHarmonicMap.html</anchorfile>
      <anchor>a1a83d90a200f2bafdde02ef328ba88d2</anchor>
      <arglist>(double d)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::MeshlessHarmonicVolumeMapper</name>
    <filename>classmirtk_1_1MeshlessHarmonicVolumeMapper.html</filename>
    <base>mirtk::MeshlessVolumeMapper</base>
    <member kind="function">
      <type></type>
      <name>MeshlessHarmonicVolumeMapper</name>
      <anchorfile>classmirtk_1_1MeshlessHarmonicVolumeMapper.html</anchorfile>
      <anchor>af58433fb28b2f669397dccc5143c4044</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MeshlessHarmonicVolumeMapper</name>
      <anchorfile>classmirtk_1_1MeshlessHarmonicVolumeMapper.html</anchorfile>
      <anchor>ac4e28220035f5f0e29d028f29a61a539</anchor>
      <arglist>(const MeshlessHarmonicVolumeMapper &amp;)</arglist>
    </member>
    <member kind="function">
      <type>MeshlessHarmonicVolumeMapper &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1MeshlessHarmonicVolumeMapper.html</anchorfile>
      <anchor>a82ce91be7183c57c76e9c4c557fa8cea</anchor>
      <arglist>(const MeshlessHarmonicVolumeMapper &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MeshlessHarmonicVolumeMapper</name>
      <anchorfile>classmirtk_1_1MeshlessHarmonicVolumeMapper.html</anchorfile>
      <anchor>a95bb0fd8fc9764899e4dbcb7511916bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>AddSourcePoint</name>
      <anchorfile>classmirtk_1_1MeshlessHarmonicVolumeMapper.html</anchorfile>
      <anchor>ae09976dc1330c776aecaada8f838eaef</anchor>
      <arglist>(double q[3])</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AddWeights</name>
      <anchorfile>classmirtk_1_1MeshlessHarmonicVolumeMapper.html</anchorfile>
      <anchor>a7fdda79b4d444a77e7785b8139c196af</anchor>
      <arglist>(int k, const Matrix &amp;w)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>GetCoefficients</name>
      <anchorfile>classmirtk_1_1MeshlessHarmonicVolumeMapper.html</anchorfile>
      <anchor>a1538487597f3efff0d402f4c698d6850</anchor>
      <arglist>(int k, Matrix &amp;coeff) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>GetConstraints</name>
      <anchorfile>classmirtk_1_1MeshlessHarmonicVolumeMapper.html</anchorfile>
      <anchor>ae18a16241122d41681518ff951f7c94f</anchor>
      <arglist>(int k, Matrix &amp;b) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1MeshlessHarmonicVolumeMapper.html</anchorfile>
      <anchor>aa64b94c950760379a23b7171ff0812d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Solve</name>
      <anchorfile>classmirtk_1_1MeshlessHarmonicVolumeMapper.html</anchorfile>
      <anchor>a50bb73cbedc07a278792e69a78b6f63e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::MeshlessMap</name>
    <filename>classmirtk_1_1MeshlessMap.html</filename>
    <base>mirtk::Mapping</base>
    <member kind="function">
      <type>bool</type>
      <name>AddSourcePoint</name>
      <anchorfile>classmirtk_1_1MeshlessMap.html</anchorfile>
      <anchor>a842497e6b3d15939cb00779f5f021541</anchor>
      <arglist>(double p[3], double tol=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1MeshlessMap.html</anchorfile>
      <anchor>a5ba6f2d7a6c634a7685a84f89be9e855</anchor>
      <arglist>(double &amp;x1, double &amp;y1, double &amp;z1, double &amp;x2, double &amp;y2, double &amp;z2) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumberOfComponents</name>
      <anchorfile>classmirtk_1_1MeshlessMap.html</anchorfile>
      <anchor>ac17e47a967c7d8731bf220a6159b3d65</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfSourcePoints</name>
      <anchorfile>classmirtk_1_1MeshlessMap.html</anchorfile>
      <anchor>a22a8e86bd24f87d5860952587aa5c0de</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MeshlessMap</name>
      <anchorfile>classmirtk_1_1MeshlessMap.html</anchorfile>
      <anchor>aeeb5f4d1b2d31e6aaba46472d3a4c6e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1MeshlessMap.html</anchorfile>
      <anchor>a1a3cdc9ef70878bcc0bb09581e7cebc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MeshlessMap</name>
      <anchorfile>classmirtk_1_1MeshlessMap.html</anchorfile>
      <anchor>adae0fab518208dca11b0298324ccf15c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MeshlessMap</name>
      <anchorfile>classmirtk_1_1MeshlessMap.html</anchorfile>
      <anchor>a97ddce5b49e32bd0fd637f59b4c4f7cc</anchor>
      <arglist>(const MeshlessMap &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>MeshlessMap &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1MeshlessMap.html</anchorfile>
      <anchor>a69473604cd660cfd1c8ef57a2610a100</anchor>
      <arglist>(const MeshlessMap &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>ReadMap</name>
      <anchorfile>classmirtk_1_1MeshlessMap.html</anchorfile>
      <anchor>ae3e0dc1744dd3f00c6273b93a7160cc1</anchor>
      <arglist>(Cifstream &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteMap</name>
      <anchorfile>classmirtk_1_1MeshlessMap.html</anchorfile>
      <anchor>aa81dc1df1f86fe9cc266afd4d96c61d1</anchor>
      <arglist>(Cofstream &amp;) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::MeshlessVolumeMapper</name>
    <filename>classmirtk_1_1MeshlessVolumeMapper.html</filename>
    <base>mirtk::VolumeMapper</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MeshlessVolumeMapper</name>
      <anchorfile>classmirtk_1_1MeshlessVolumeMapper.html</anchorfile>
      <anchor>a18c47e105db294f617c3b45909e6ad7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>AddSourcePoint</name>
      <anchorfile>classmirtk_1_1MeshlessVolumeMapper.html</anchorfile>
      <anchor>a6f377cf1b13d2352cd236eb89afc4496</anchor>
      <arglist>(double q[3])</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>AddWeights</name>
      <anchorfile>classmirtk_1_1MeshlessVolumeMapper.html</anchorfile>
      <anchor>a71bde5125b0ff44113f16c801b91c549</anchor>
      <arglist>(int k, const Matrix &amp;w)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CopyAttributes</name>
      <anchorfile>classmirtk_1_1MeshlessVolumeMapper.html</anchorfile>
      <anchor>a0c5565a341d891da313323c32e8b972e</anchor>
      <arglist>(const MeshlessVolumeMapper &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>GetClosestPointOnOffsetSurface</name>
      <anchorfile>classmirtk_1_1MeshlessVolumeMapper.html</anchorfile>
      <anchor>a876027799016f55e9a104ed486c9592c</anchor>
      <arglist>(double x[3], double p[3])</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>GetCoefficients</name>
      <anchorfile>classmirtk_1_1MeshlessVolumeMapper.html</anchorfile>
      <anchor>a1fc5d224e41cc4c0efebf71a5456133d</anchor>
      <arglist>(int k, Matrix &amp;coeff) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>GetConstraints</name>
      <anchorfile>classmirtk_1_1MeshlessVolumeMapper.html</anchorfile>
      <anchor>a479fb8cd950c297ca34aa49d43f165b5</anchor>
      <arglist>(int k, Matrix &amp;b) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1MeshlessVolumeMapper.html</anchorfile>
      <anchor>a58c2c9c90e0c6e175217278e7b9a861f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>InitializeResidualMap</name>
      <anchorfile>classmirtk_1_1MeshlessVolumeMapper.html</anchorfile>
      <anchor>a5269ffdbc953ba599a565c28c97fcbe6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MeshlessVolumeMapper</name>
      <anchorfile>classmirtk_1_1MeshlessVolumeMapper.html</anchorfile>
      <anchor>a6d6d693c9e01f1f219d9e9df93413861</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MeshlessVolumeMapper</name>
      <anchorfile>classmirtk_1_1MeshlessVolumeMapper.html</anchorfile>
      <anchor>ac7b8b387d466a3fa641057115f65947f</anchor>
      <arglist>(const MeshlessVolumeMapper &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>NumberOfBoundaryPoints</name>
      <anchorfile>classmirtk_1_1MeshlessVolumeMapper.html</anchorfile>
      <anchor>a4fb318a2eff27c2200e5ad35b14dbe00</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>NumberOfSourcePoints</name>
      <anchorfile>classmirtk_1_1MeshlessVolumeMapper.html</anchorfile>
      <anchor>ac96dd0ebe58955741e7e0c70f35acb30</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>NumberOfSourcePoints</name>
      <anchorfile>classmirtk_1_1MeshlessVolumeMapper.html</anchorfile>
      <anchor>a21b6f4cbf65b2bb838ff096f56a9775f</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>NumberOfSourcePointSets</name>
      <anchorfile>classmirtk_1_1MeshlessVolumeMapper.html</anchorfile>
      <anchor>a0c9684021df79368575a4f26cbee7881</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>MeshlessVolumeMapper &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1MeshlessVolumeMapper.html</anchorfile>
      <anchor>a331b2ed381c6f52d687a2530b075700c</anchor>
      <arglist>(const MeshlessVolumeMapper &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PartitionSourcePoints</name>
      <anchorfile>classmirtk_1_1MeshlessVolumeMapper.html</anchorfile>
      <anchor>a6197a72874eea055c4150ebdb53bce5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PlaceBoundaryPoints</name>
      <anchorfile>classmirtk_1_1MeshlessVolumeMapper.html</anchorfile>
      <anchor>a9336f7c67446509b62a32669612bda02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PlaceSourcePoints</name>
      <anchorfile>classmirtk_1_1MeshlessVolumeMapper.html</anchorfile>
      <anchor>afe55adac832ea3f4543821e390aa5723</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Solve</name>
      <anchorfile>classmirtk_1_1MeshlessVolumeMapper.html</anchorfile>
      <anchor>a823e3a5f7751f846ff5fe2b1f993768c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>SourcePointIndex</name>
      <anchorfile>classmirtk_1_1MeshlessVolumeMapper.html</anchorfile>
      <anchor>aed9f830baae3551670339f8ffe802e2a</anchor>
      <arglist>(int k, int i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>UpdateBoundary</name>
      <anchorfile>classmirtk_1_1MeshlessVolumeMapper.html</anchorfile>
      <anchor>ae095c518015e189ee401a5a8c40c843a</anchor>
      <arglist>(vtkPolyData *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>UpdateResidualMap</name>
      <anchorfile>classmirtk_1_1MeshlessVolumeMapper.html</anchorfile>
      <anchor>a33b26386ab846522ad2430be8f4b996d</anchor>
      <arglist>(double *=nullptr, double *=nullptr, double *=nullptr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::MeshSmoothing</name>
    <filename>classmirtk_1_1MeshSmoothing.html</filename>
    <base>mirtk::MeshFilter</base>
    <member kind="enumvalue">
      <name>AnisotropicGaussian</name>
      <anchorfile>classmirtk_1_1MeshSmoothing.html</anchorfile>
      <anchor>a2657e813efdba85594ccfd0706b37ecda31a844fe66b200175e62dc9d169ef11b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Array&lt; string &gt;</type>
      <name>ArrayNames</name>
      <anchorfile>classmirtk_1_1MeshSmoothing.html</anchorfile>
      <anchor>abf0679cdfcaa9bf17f870fb7812ee989</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Combinatorial</name>
      <anchorfile>classmirtk_1_1MeshSmoothing.html</anchorfile>
      <anchor>a2657e813efdba85594ccfd0706b37ecdaf82217565a91960e69a353ddb5f18c6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Array&lt; vtkSmartPointer&lt; vtkDataArray &gt; &gt;</type>
      <name>DataArrays</name>
      <anchorfile>classmirtk_1_1MeshSmoothing.html</anchorfile>
      <anchor>ad305966fd1a637b6f6a194a1d257e290</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Default</name>
      <anchorfile>classmirtk_1_1MeshSmoothing.html</anchorfile>
      <anchor>a2657e813efdba85594ccfd0706b37ecda5f8514eca9d3c0085489fcceb54aafb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Gaussian</name>
      <anchorfile>classmirtk_1_1MeshSmoothing.html</anchorfile>
      <anchor>a2657e813efdba85594ccfd0706b37ecda57b1d05eda7b950ab0db34df74b5a9d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InverseDistance</name>
      <anchorfile>classmirtk_1_1MeshSmoothing.html</anchorfile>
      <anchor>a2657e813efdba85594ccfd0706b37ecda2dce463bb5a8865419f6b85a31c70f11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NormalDeviation</name>
      <anchorfile>classmirtk_1_1MeshSmoothing.html</anchorfile>
      <anchor>a2657e813efdba85594ccfd0706b37ecda3ce6c0a5f3e27a75fec9314af0e24533</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>WeightFunction</name>
      <anchorfile>classmirtk_1_1MeshSmoothing.html</anchorfile>
      <anchor>a2657e813efdba85594ccfd0706b37ecd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Default</name>
      <anchorfile>classmirtk_1_1MeshSmoothing.html</anchorfile>
      <anchor>a2657e813efdba85594ccfd0706b37ecda5f8514eca9d3c0085489fcceb54aafb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Combinatorial</name>
      <anchorfile>classmirtk_1_1MeshSmoothing.html</anchorfile>
      <anchor>a2657e813efdba85594ccfd0706b37ecdaf82217565a91960e69a353ddb5f18c6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InverseDistance</name>
      <anchorfile>classmirtk_1_1MeshSmoothing.html</anchorfile>
      <anchor>a2657e813efdba85594ccfd0706b37ecda2dce463bb5a8865419f6b85a31c70f11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Gaussian</name>
      <anchorfile>classmirtk_1_1MeshSmoothing.html</anchorfile>
      <anchor>a2657e813efdba85594ccfd0706b37ecda57b1d05eda7b950ab0db34df74b5a9d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AnisotropicGaussian</name>
      <anchorfile>classmirtk_1_1MeshSmoothing.html</anchorfile>
      <anchor>a2657e813efdba85594ccfd0706b37ecda31a844fe66b200175e62dc9d169ef11b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NormalDeviation</name>
      <anchorfile>classmirtk_1_1MeshSmoothing.html</anchorfile>
      <anchor>a2657e813efdba85594ccfd0706b37ecda3ce6c0a5f3e27a75fec9314af0e24533</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MeshSmoothing</name>
      <anchorfile>classmirtk_1_1MeshSmoothing.html</anchorfile>
      <anchor>a759d9fd89818e0c7878605214f63ac21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MeshSmoothing</name>
      <anchorfile>classmirtk_1_1MeshSmoothing.html</anchorfile>
      <anchor>a5b870296739bb1281ee40e22f6afd15c</anchor>
      <arglist>(const MeshSmoothing &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkGetMacro</name>
      <anchorfile>classmirtk_1_1MeshSmoothing.html</anchorfile>
      <anchor>a669b99b82e3bb1ef1071ab540330c900</anchor>
      <arglist>(NumberOfIterations, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkGetMacro</name>
      <anchorfile>classmirtk_1_1MeshSmoothing.html</anchorfile>
      <anchor>af13bdc583be0effc8d3fd2881fa61b10</anchor>
      <arglist>(Lambda, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkGetMacro</name>
      <anchorfile>classmirtk_1_1MeshSmoothing.html</anchorfile>
      <anchor>a6187acf2de484f888ae968c6fd2d4df5</anchor>
      <arglist>(Sigma, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkGetMacro</name>
      <anchorfile>classmirtk_1_1MeshSmoothing.html</anchorfile>
      <anchor>a9a49191186838028d27b6736e1679acd</anchor>
      <arglist>(MaximumDirectionSigma, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkOnOffMacro</name>
      <anchorfile>classmirtk_1_1MeshSmoothing.html</anchorfile>
      <anchor>ab9ded631df6efc06298eccf7dd489a91</anchor>
      <arglist>(AdjacentValuesOnly)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkOnOffMacro</name>
      <anchorfile>classmirtk_1_1MeshSmoothing.html</anchorfile>
      <anchor>a83d5d8d9ee2e77b6ac63ab53c4276eb4</anchor>
      <arglist>(SmoothPoints)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkSetMacro</name>
      <anchorfile>classmirtk_1_1MeshSmoothing.html</anchorfile>
      <anchor>a477799f4ed26721275163054ede3b610</anchor>
      <arglist>(NumberOfIterations, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkSetMacro</name>
      <anchorfile>classmirtk_1_1MeshSmoothing.html</anchorfile>
      <anchor>aae247a8b6faad1159a097b6c38bf4cff</anchor>
      <arglist>(Lambda, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkSetMacro</name>
      <anchorfile>classmirtk_1_1MeshSmoothing.html</anchorfile>
      <anchor>a57827b97360e59edaff53c38f8664e07</anchor>
      <arglist>(Sigma, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkSetMacro</name>
      <anchorfile>classmirtk_1_1MeshSmoothing.html</anchorfile>
      <anchor>ab807c8452e8da791eebe010dcc6b59ae</anchor>
      <arglist>(MaximumDirectionSigma, double)</arglist>
    </member>
    <member kind="function">
      <type>MeshSmoothing &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1MeshSmoothing.html</anchorfile>
      <anchor>aab545690164b0dc1f2f17abe2b844587</anchor>
      <arglist>(const MeshSmoothing &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SmoothArray</name>
      <anchorfile>classmirtk_1_1MeshSmoothing.html</anchorfile>
      <anchor>aa6f17035d70f9de040bf82e6e73e65eb</anchor>
      <arglist>(const char *name, int attr=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MeshSmoothing</name>
      <anchorfile>classmirtk_1_1MeshSmoothing.html</anchorfile>
      <anchor>a86aca3656aaa151338d80691fe49086b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Execute</name>
      <anchorfile>classmirtk_1_1MeshSmoothing.html</anchorfile>
      <anchor>a36e6c1b3ad2727ddcc668eb44313f392</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1MeshSmoothing.html</anchorfile>
      <anchor>a4091ab075cc6d6b433b31b1637dec74c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1MeshSmoothing.html</anchorfile>
      <anchor>aa575c80bc1d784cbd675f2600c12ab3a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::MetricDistortion</name>
    <filename>classmirtk_1_1MetricDistortion.html</filename>
    <base>mirtk::SurfaceConstraint</base>
    <member kind="typedef">
      <type>Array&lt; NodeDistances &gt;</type>
      <name>DistancesArray</name>
      <anchorfile>classmirtk_1_1MetricDistortion.html</anchorfile>
      <anchor>a24f4d35fd66e7b7d9321fb8879fe25d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyAttributes</name>
      <anchorfile>classmirtk_1_1MetricDistortion.html</anchorfile>
      <anchor>a010cb57ecb3157c74e483edeb15c12d8</anchor>
      <arglist>(const MetricDistortion &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1MetricDistortion.html</anchorfile>
      <anchor>a2283e3f45038feb1f827b4b010c93c79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MetricDistortion</name>
      <anchorfile>classmirtk_1_1MetricDistortion.html</anchorfile>
      <anchor>ab551774ccb6ddc325e30b65ee360a2ac</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MetricDistortion</name>
      <anchorfile>classmirtk_1_1MetricDistortion.html</anchorfile>
      <anchor>a82415a8094d9dc018ecc0bcad6d7205b</anchor>
      <arglist>(const MetricDistortion &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1MetricDistortion.html</anchorfile>
      <anchor>a3f57ac4f35f52f9e1f085385b4e57bb2</anchor>
      <arglist>(double, InitialArea)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1MetricDistortion.html</anchorfile>
      <anchor>a69e7447b5ef4e67caa766d2872faccde</anchor>
      <arglist>(Array&lt; DistancesArray &gt;, Distances)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1MetricDistortion.html</anchorfile>
      <anchor>aad9d4588899d4304a08a874ddabbc11c</anchor>
      <arglist>(int, Radius)</arglist>
    </member>
    <member kind="function">
      <type>MetricDistortion &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1MetricDistortion.html</anchorfile>
      <anchor>a3b57eda74948ba76f1655399971820b7</anchor>
      <arglist>(const MetricDistortion &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1MetricDistortion.html</anchorfile>
      <anchor>a01ab2bf357fe7515948fd7a42c0f89bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Reinitialize</name>
      <anchorfile>classmirtk_1_1MetricDistortion.html</anchorfile>
      <anchor>a717b713f4c56a46d7f617d1dfc426882</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1MetricDistortion.html</anchorfile>
      <anchor>ac1951988dbb2bea8c1ba1acce46fff2b</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MetricDistortion</name>
      <anchorfile>classmirtk_1_1MetricDistortion.html</anchorfile>
      <anchor>acf257e03befb41d1985f9f3f30b9966e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1MetricDistortion.html</anchorfile>
      <anchor>a7c3ccaf50322c8841b7928f70e3d3ec8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1MetricDistortion.html</anchorfile>
      <anchor>a02d976e537c2e559b41b766ed68dd1a1</anchor>
      <arglist>(double *, double, double)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Init</name>
      <anchorfile>classmirtk_1_1MetricDistortion.html</anchorfile>
      <anchor>aca3c1297fa426cfa5e9870385cae8532</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithoutPrefix</name>
      <anchorfile>classmirtk_1_1MetricDistortion.html</anchorfile>
      <anchor>ac1bba26401f24dcbd99be40936306858</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::statistic::Min</name>
    <filename>classmirtk_1_1data_1_1statistic_1_1Min.html</filename>
    <base>mirtk::data::Statistic</base>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1data_1_1statistic_1_1Min.html</anchorfile>
      <anchor>a3ceacfe319610b3fdc8b97ce6daa4f0c</anchor>
      <arglist>(Array&lt; double &gt; &amp;values, int n, const double *data, const bool *mask=nullptr) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::statistic::MinAbs</name>
    <filename>classmirtk_1_1data_1_1statistic_1_1MinAbs.html</filename>
    <base>mirtk::data::Statistic</base>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1data_1_1statistic_1_1MinAbs.html</anchorfile>
      <anchor>a6e2cd2d61fee5f1dd8ec8403c772ec94</anchor>
      <arglist>(Array&lt; double &gt; &amp;values, int n, const double *data, const bool *mask=nullptr) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::MinActiveStoppingCriterion</name>
    <filename>classmirtk_1_1MinActiveStoppingCriterion.html</filename>
    <base>mirtk::StoppingCriterion</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Fulfilled</name>
      <anchorfile>classmirtk_1_1MinActiveStoppingCriterion.html</anchorfile>
      <anchor>a88c24ce9ce7233f217ee6106521cd044</anchor>
      <arglist>(int iter, double value, const double *delta)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1MinActiveStoppingCriterion.html</anchorfile>
      <anchor>a2dcd951a3961457cf09d112752666087</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MinActiveStoppingCriterion</name>
      <anchorfile>classmirtk_1_1MinActiveStoppingCriterion.html</anchorfile>
      <anchor>aad18e2dfe1cbab4cf5bc39fd03cf6427</anchor>
      <arglist>(const ObjectiveFunction *=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MinActiveStoppingCriterion</name>
      <anchorfile>classmirtk_1_1MinActiveStoppingCriterion.html</anchorfile>
      <anchor>aa18a6474b0ec2ff66bda6b3e4809cba3</anchor>
      <arglist>(const MinActiveStoppingCriterion &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StoppingCriterion *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1MinActiveStoppingCriterion.html</anchorfile>
      <anchor>af52720bf9e70716c083ab561aee763d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MinActiveStoppingCriterion &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1MinActiveStoppingCriterion.html</anchorfile>
      <anchor>aaec5b802008ec8584ed5ff5cbe35bd94</anchor>
      <arglist>(const MinActiveStoppingCriterion &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1MinActiveStoppingCriterion.html</anchorfile>
      <anchor>ac7871a672e1c8d6d0b45b4d47972d731</anchor>
      <arglist>(ostream &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MinActiveStoppingCriterion</name>
      <anchorfile>classmirtk_1_1MinActiveStoppingCriterion.html</anchorfile>
      <anchor>a9922ecab5bd556a04b983d8189b56782</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ImplicitSurfaceUtils::MinWidth</name>
    <filename>structmirtk_1_1ImplicitSurfaceUtils_1_1MinWidth.html</filename>
    <base>mirtk::ImplicitSurfaceUtils::DistanceMeasurement</base>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>structmirtk_1_1ImplicitSurfaceUtils_1_1MinWidth.html</anchorfile>
      <anchor>ad83d056f525dcee464338ec8f420f42e</anchor>
      <arglist>(const double p[3], const PointSamples &amp;dirs, double mind, double minh, double maxw, const DistanceFunction &amp;distance, double offset=.0, double tol=1e-3)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::MirrorBoundaryCondition</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1MirrorBoundaryCondition.html</filename>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1MirrorBoundaryCondition.html</anchorfile>
      <anchor>acb2da1321e21db382605e6c6912d042a</anchor>
      <arglist>(int i, int N) const</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1MirrorBoundaryCondition.html</anchorfile>
      <anchor>ac484d2671c92ba46ebe62eb2ad6ac20a</anchor>
      <arglist>(int i, int N, const T *p, int stride)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ConvolutionFunction::MirroredForegroundConvolution1D</name>
    <filename>classmirtk_1_1ConvolutionFunction_1_1MirroredForegroundConvolution1D.html</filename>
    <templarg>TKernel</templarg>
    <base>mirtk::VoxelFunction</base>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>ConvolveCenterVoxel</name>
      <anchorfile>classmirtk_1_1ConvolutionFunction_1_1MirroredForegroundConvolution1D.html</anchorfile>
      <anchor>a5683c4621952993280aebea40ceb4c0a</anchor>
      <arglist>(const T *in, double &amp;acc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ConvolveLeftNeighbors</name>
      <anchorfile>classmirtk_1_1ConvolutionFunction_1_1MirroredForegroundConvolution1D.html</anchorfile>
      <anchor>aedc1957a774d22d82a18b01b62603531</anchor>
      <arglist>(int i, int n, const T *in, int s, double &amp;acc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ConvolveRightNeighbors</name>
      <anchorfile>classmirtk_1_1ConvolutionFunction_1_1MirroredForegroundConvolution1D.html</anchorfile>
      <anchor>ae5cda252372d5dfdddc9e9728d743d4e</anchor>
      <arglist>(int i, int n, const T *in, int s, double &amp;acc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MirroredForegroundConvolution1D</name>
      <anchorfile>classmirtk_1_1ConvolutionFunction_1_1MirroredForegroundConvolution1D.html</anchorfile>
      <anchor>adc50f194cfaef2d8acb46e4d63d51529</anchor>
      <arglist>(const BaseImage *image, const TKernel *kernel, int size, double norm=1.0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::MirrorExtrapolateImageFunction</name>
    <filename>classmirtk_1_1MirrorExtrapolateImageFunction.html</filename>
    <base>GenericMirrorExtrapolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>MirrorExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1MirrorExtrapolateImageFunction.html</anchorfile>
      <anchor>affb970cc7c358c3449b0c9423afe608f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MirrorExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1MirrorExtrapolateImageFunction.html</anchorfile>
      <anchor>a2c3c5c06d5826d74c4b895e294b8ec48</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::Module</name>
    <filename>classmirtk_1_1Module.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__getattr__</name>
      <anchorfile>classmirtk_1_1Module.html</anchorfile>
      <anchor>a511fe4bdc6c52dbbf830f1ba37307b61</anchor>
      <arglist>(self, name)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::BinaryVoxelFunction::Mul</name>
    <filename>structmirtk_1_1BinaryVoxelFunction_1_1Mul.html</filename>
    <base>mirtk::VoxelFunction</base>
  </compound>
  <compound kind="struct">
    <name>mirtk::TernaryVoxelFunction::Mul</name>
    <filename>structmirtk_1_1TernaryVoxelFunction_1_1Mul.html</filename>
    <base>mirtk::VoxelFunction</base>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::Mul</name>
    <filename>classmirtk_1_1data_1_1op_1_1Mul.html</filename>
    <base>mirtk::data::op::ElementWiseBinaryOp</base>
    <member kind="function">
      <type></type>
      <name>Mul</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Mul.html</anchorfile>
      <anchor>a1d0e07aac9410eb7c3dcde9c546ab18a</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mul</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Mul.html</anchorfile>
      <anchor>af00b7ef6d689f7e4c42495009c208c47</anchor>
      <arglist>(const double *value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mul</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Mul.html</anchorfile>
      <anchor>ac940bcf78b7019121ff051b32c13b091</anchor>
      <arglist>(const char *fname)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Op</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Mul.html</anchorfile>
      <anchor>a94b6abdee3b178302727811e99908dc2</anchor>
      <arglist>(double value, double constant, bool &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Mul.html</anchorfile>
      <anchor>a55453d90a5e7b448d4c9bc007484d9ff</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::MultiLevelFreeFormTransformation</name>
    <filename>classmirtk_1_1MultiLevelFreeFormTransformation.html</filename>
    <base>mirtk::MultiLevelTransformation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Approximate</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>a8040c3444817cc15885d73b2af5a38eb</anchor>
      <arglist>(const ImageAttributes &amp;, double *, double *, double *, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Approximate</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>a0f7a5e293d85bb37d13ab7b2bce4b8e1</anchor>
      <arglist>(const double *, const double *, const double *, double *, double *, double *, int, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Approximate</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>aa2937cf736911941a8ad6a4bc64eecbe</anchor>
      <arglist>(const double *, const double *, const double *, const double *, double *, double *, double *, int, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApproximateAsNew</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>abdb0f137a592ca29a0a6b5890bab2ca3</anchor>
      <arglist>(const ImageAttributes &amp;, double *, double *, double *, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApproximateAsNew</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>ae4cbfd7940ecf3fed4c8169447caf32a</anchor>
      <arglist>(const double *, const double *, const double *, double *, double *, double *, int, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApproximateAsNew</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>a9df08d3966ea04995581cdefbc3fef8a</anchor>
      <arglist>(const double *, const double *, const double *, const double *, double *, double *, double *, int, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFs</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>ae3852d5e3431b6ab865f25c930d44a7a</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFsGradient</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>a01d04f4f44266f502b9eca03ca5d96e2</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int, double *, double=1.0) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Bending</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>a0031268529e28a620ad248fec3f0bed9</anchor>
      <arglist>(double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CanModifyDisplacement</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>af760503f74af72aa97625a78035cde44</anchor>
      <arglist>(int=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>CombineLocalTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>ab70887eff89c74f3589ed48d6ced56d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DeriveJacobianWrtDOF</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>a3d63f1ce97bb266efaed8bfe852e9e74</anchor>
      <arglist>(Matrix &amp;, int, double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>af74d73fce7072d37eaba0f4e5beb88ee</anchor>
      <arglist>(int, int, GenericImage&lt; double &gt; &amp;, double, double=NaN, const WorldCoordsImage *=NULL) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>a8cb0dd461b7c2b262b7f5911fdaca53f</anchor>
      <arglist>(int, int, GenericImage&lt; float &gt; &amp;, double, double=NaN, const WorldCoordsImage *=NULL) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DisplacementAfterDOFChange</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>a50fefecb7b0e4be0c63cd939a2f78f50</anchor>
      <arglist>(int dof, double dv, GenericImage&lt; double &gt; &amp;dx, double t, double t0=-1, const WorldCoordsImage *i2w=NULL) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DOFBoundingBox</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>a689dab53532a4c9fae4e15ce9dedc5eb</anchor>
      <arglist>(const Image *, int, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, double=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Hessian</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>a75e78192312422309076ef9143aaa9f4</anchor>
      <arglist>(int, int, Matrix [3], double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InverseDisplacement</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>ad29ae2999709a1fef19d4b4f77e7e4bc</anchor>
      <arglist>(int, int, GenericImage&lt; double &gt; &amp;, double, double=NaN, const WorldCoordsImage *=NULL) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InverseDisplacement</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>a764d50b922c1b3f75bd5f671cd2d47ba</anchor>
      <arglist>(int, int, GenericImage&lt; float &gt; &amp;, double, double=NaN, const WorldCoordsImage *=NULL) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Jacobian</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>a029a4ee9b8f5039dd0c44a89d5441efa</anchor>
      <arglist>(int, int, Matrix &amp;, double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalTransform</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>ac7347eca7226f01fd79cb59e57d043a0</anchor>
      <arglist>(int, int, double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>MergeGlobalIntoLocalDisplacement</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>ae520b325690f43e1521801697a0d0b06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiLevelFreeFormTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>aa08d9e777e067d0a01b1ae40ec6f99d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiLevelFreeFormTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>a52dc11360a457ca5bb1d1a0509be03f0</anchor>
      <arglist>(const RigidTransformation &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiLevelFreeFormTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>afdeddcd52a2701c686ea1582372d3b14</anchor>
      <arglist>(const AffineTransformation &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiLevelFreeFormTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>ae0aec3a849686806715497f561e12dbc</anchor>
      <arglist>(const MultiLevelFreeFormTransformation &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>abeb2ee27924e34a72b3346bf8451a0d2</anchor>
      <arglist>(const GenericImage&lt; double &gt; *, double *, const WorldCoordsImage *=NULL, const WorldCoordsImage *=NULL, double=NaN, double=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>af38bb198b3d69d6991d797d70ef1d2d7</anchor>
      <arglist>(const PointSet &amp;, const Vector3D&lt; double &gt; *, double *, double=0, double=NaN, double=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>ae74a29a0f68acd0bf2c79514374a6273</anchor>
      <arglist>(ostream &amp;, Indent=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Transform</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>a65db4153f8a89690843aa847ff05de82</anchor>
      <arglist>(int, int, double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MultiLevelFreeFormTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>a1b702978faa7b52301a648643e06c237</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::MultiLevelStationaryVelocityTransformation</name>
    <filename>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</filename>
    <base>mirtk::MultiLevelTransformation</base>
    <member kind="function">
      <type>BSplineFreeFormTransformationSV *</type>
      <name>ActiveSVFFD</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a11704f35c22c9f1147f19ee815baa476</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BSplineFreeFormTransformationSV *</type>
      <name>ActiveSVFFD</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a7bbfbfba5a2aec1da940edef68e1dd69</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Add</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>acdbac73d89d22d0bc65da8ef851925f8</anchor>
      <arglist>(const DOFValue *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>CombineLocalTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>ab4afbeb478738987297265c2ce84ff1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a122779c3ddda0d6f2618114c4f8f620c</anchor>
      <arglist>(int, int, GenericImage&lt; double &gt; &amp;, double, double=NaN, const WorldCoordsImage *=NULL) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>ab80d892443e06f4c4c74bbf52368613e</anchor>
      <arglist>(int, int, GenericImage&lt; float &gt; &amp;, double, double=NaN, const WorldCoordsImage *=NULL) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>DOFGradientNorm</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a505a111dd767f01e3331d2353d38875d</anchor>
      <arglist>(const double *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a69bf2cdd2e515581bc1bdc17faba4904</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>abbe452926c84b78af00351ec722bef8f</anchor>
      <arglist>(DOFValue *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DOFStatus</type>
      <name>GetStatus</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>aa3ddda5d3121a78784d699e6463d06b9</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Inverse</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a4edddf261eff3571a8e76d23da10490f</anchor>
      <arglist>(int, int, double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InverseDisplacement</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a37873d4ac6322bc4ee7193f01a610501</anchor>
      <arglist>(int, int, GenericImage&lt; double &gt; &amp;, double, double=NaN, const WorldCoordsImage *=NULL) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InverseDisplacement</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a45a09f1adf8675e8c03766f251d047e9</anchor>
      <arglist>(int, int, GenericImage&lt; float &gt; &amp;, double, double=NaN, const WorldCoordsImage *=NULL) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Invert</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a1f61c2b1642eb922bfe8c703b7ec50ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>MergeGlobalIntoLocalDisplacement</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a24f00cdf9574157db04d59be879c1e51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiLevelStationaryVelocityTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>ac2050a88c1abfe843b2c8a238cf03d6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiLevelStationaryVelocityTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a1b1324c1470e719f7d7dccf73498efb0</anchor>
      <arglist>(const RigidTransformation &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiLevelStationaryVelocityTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>af5763f3573655042ded77cdbfed4f66d</anchor>
      <arglist>(const AffineTransformation &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiLevelStationaryVelocityTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a5318b6f18d438e8f90999c7e14e6d8eb</anchor>
      <arglist>(const MultiLevelStationaryVelocityTransformation &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumberOfDOFs</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>ab3e407b408f068b622122cc249673719</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>aa1f1da02c29d150452f5a94539f2ab57</anchor>
      <arglist>(const GenericImage&lt; double &gt; *, double *, const WorldCoordsImage *, const WorldCoordsImage *, double=NaN, double=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>acc863f502486100451c9ebe91b853d5f</anchor>
      <arglist>(ostream &amp;, Indent=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a715c73ad19a963c8acfbec520a91b9dc</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a7da25ee1de9fcdbed8beff45c7b1b777</anchor>
      <arglist>(const DOFValue *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutStatus</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>aa2691d480751a84a4197c00b9d9e54b0</anchor>
      <arglist>(int, DOFStatus)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>RequiresCachingOfDisplacements</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a2142aa833c28024ed8825bb0972c3cee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BSplineFreeFormTransformationSV *</type>
      <name>SVFFD</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a9130fc8cecbcf5b36b8a92720460c032</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>const BSplineFreeFormTransformationSV *</type>
      <name>SVFFD</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a027f8ac8bd2802543c02e17a32555d08</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Transform</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a0aff1f5b0f0cb76e3539c875607267f7</anchor>
      <arglist>(int, int, double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>afee9ee1bc80bac9c04b63d04552adbd5</anchor>
      <arglist>(const DOFValue *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MultiLevelStationaryVelocityTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a022f540ae39fc9587070b7ace84d5341</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>CanUseScalingAndSquaring</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a933353abb643ba51decd556eef87b2fe</anchor>
      <arglist>(const GenericImage&lt; VoxelType &gt; &amp;) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>FastScalingAndSquaring</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a4cf91a7efd8b5a8ab30f86521647373b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>MaxScaledVelocity</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a0e88932361bcfb29c097ee1e3f58ecd4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a7e3ea33a82616b1dfb384dd22f918a99</anchor>
      <arglist>(Matrix, LogA)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>NumberOfStepsForIntervalLength</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>ab9e1c8d5553a3d01e5019514ed38ecda</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>NumberOfStepsForIntervalLength</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>af89e23e02d06cc05a553f23a04398208</anchor>
      <arglist>(double, int) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a4fc6281e33976c238af4864896dfc944</anchor>
      <arglist>(const GenericImage&lt; double &gt; *, double *, const WorldCoordsImage *, const WorldCoordsImage *, double, double, double) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>RKE1</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>afbc677f979523ebfddb49721d99b1d65</anchor>
      <arglist>(int, int, double &amp;x, double &amp;y, double &amp;z, double t) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ScalingAndSquaring</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>ac037b52fee25ca4538046a9d603e513d</anchor>
      <arglist>(int, int, GenericImage&lt; VoxelType &gt; &amp;, double, const WorldCoordsImage *=NULL) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UpdateLogMatrix</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>ae2a932b4c24ffa25f4b5c15db0a8702f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>UpperIntegrationLimit</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>ae99cc703a4435291dd34b1aa76e87da4</anchor>
      <arglist>(double t, double t0) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>UseScalingAndSquaring</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>aba146eb86c4d1737e90fb92156ace0ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Velocity</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a7c10f088b46f51382e0eb0a5bf518c10</anchor>
      <arglist>(int, int, GenericImage&lt; VoxelType &gt; &amp;, bool=false) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>VelocityComponents</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a3306ae484d771997292b343aa79f9d3a</anchor>
      <arglist>(int, int, GenericImage&lt; ScalarType &gt; &amp;, bool=false) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EventDelegate</type>
      <name>_GlobalTransformationObserver</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>ad5ef401385ccf299785df6b9cba72186</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::MultiLevelTransformation</name>
    <filename>classmirtk_1_1MultiLevelTransformation.html</filename>
    <base>mirtk::Transformation</base>
    <member kind="typedef">
      <type>Status</type>
      <name>FFDStatus</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>aa29ab918c400b5a8e9ffa0d4bedc83be</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Add</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a77c510592c82605906baa7cb12cb1ded</anchor>
      <arglist>(const DOFValue *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Approximate</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a6301764e9c0fbbca85fb694fa32c2445</anchor>
      <arglist>(const ImageAttributes &amp;, double *, double *, double *, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Approximate</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a3e700c0266765b78c176eccf2060e399</anchor>
      <arglist>(const double *, const double *, const double *, double *, double *, double *, int, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Approximate</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>adb6c1090b28a3a4ebc1eb7be7ec5f7f4</anchor>
      <arglist>(const double *, const double *, const double *, const double *, double *, double *, double *, int, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApproximateAsNew</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a408c59a15cd83ef778be454b29de2065</anchor>
      <arglist>(const ImageAttributes &amp;, double *, double *, double *, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApproximateAsNew</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a52641990db313096d611e9a355485652</anchor>
      <arglist>(const double *, const double *, const double *, double *, double *, double *, int, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApproximateAsNew</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a2ff8d699334a6ebceefccba13168be44</anchor>
      <arglist>(const double *, const double *, const double *, const double *, double *, double *, double *, int, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFs</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a21532f06ba3297eafd344223c907d604</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFsGradient</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a27570ce3ff4420a4af2d13ab564fee0a</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int, double *, double=1.0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>BendingEnergy</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>acb86f8d7193287a1c1d27f07fa52ede2</anchor>
      <arglist>(int, int, double, double, double, double=0, double=NaN, bool=true) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>BendingEnergy</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>afc819269d7a8859a55b151cb3098a228</anchor>
      <arglist>(int, double, double, double, double=0, double=NaN, bool=true) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>BendingEnergy</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a832dd3881de10d32b5f310b8059b9c54</anchor>
      <arglist>(double, double, double, double=0, double=NaN, bool=true) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a0e97afed882d18fbf5ca75075cba1cbb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>CombineLocalTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a44d9433e28324398d3ab5e88c829ded8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>acf1a2381037802992c9b8bfba73d801b</anchor>
      <arglist>(const Transformation *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DeriveJacobianWrtDOF</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a6535127a1dfc9ea32f054dce3df23332</anchor>
      <arglist>(Matrix &amp;, int, double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a0699379e1f14765be5ec20e3c55e720e</anchor>
      <arglist>(int, int, double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a142389efcbb58c63ab24bd15462f6152</anchor>
      <arglist>(int, double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a8bf2824c76d70280898fa83657e42334</anchor>
      <arglist>(int, int, GenericImage&lt; double &gt; &amp;, double=NaN, const WorldCoordsImage *=NULL) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>ae7fa93a489705c2524407f6300089f21</anchor>
      <arglist>(int, int, GenericImage&lt; float &gt; &amp;, double=NaN, const WorldCoordsImage *=NULL) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a5b42514bed5e85730062ceaa1f8d6d1d</anchor>
      <arglist>(int, GenericImage&lt; double &gt; &amp;, double=NaN, const WorldCoordsImage *=NULL) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a858cfa1db422b34b58bd031d32abc014</anchor>
      <arglist>(int, GenericImage&lt; float &gt; &amp;, double=NaN, const WorldCoordsImage *=NULL) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>abf737e3720299de51afa737f955e7a42</anchor>
      <arglist>(int, int, GenericImage&lt; double &gt; &amp;, double, double=NaN, const WorldCoordsImage *=NULL) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a15f88422a0408f2279cd3362c5686c03</anchor>
      <arglist>(int, int, GenericImage&lt; float &gt; &amp;, double, double=NaN, const WorldCoordsImage *=NULL) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>aeddf72c91a18d6172bafde11f55b2484</anchor>
      <arglist>(int, GenericImage&lt; double &gt; &amp;, double, double=NaN, const WorldCoordsImage *=NULL) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a0ee2b7ff965127473348e07c950ad16c</anchor>
      <arglist>(int, GenericImage&lt; float &gt; &amp;, double, double=NaN, const WorldCoordsImage *=NULL) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>ae64ef12b2af018d1da015fabfa0b06c9</anchor>
      <arglist>(GenericImage&lt; double &gt; &amp;, double, double=NaN, const WorldCoordsImage *=NULL) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a4450a4bbb3766fc0bdeac8d6a359e3d0</anchor>
      <arglist>(GenericImage&lt; float &gt; &amp;, double, double=NaN, const WorldCoordsImage *=NULL) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>DOFGradientNorm</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a35f3398f855a691cb51721283b5b40eb</anchor>
      <arglist>(const double *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a12a0e01b4924d651cef45939fa35faba</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a292771c1949f690b585efc5dd2b6ff22</anchor>
      <arglist>(DOFValue *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AffineTransformation *</type>
      <name>GetGlobalTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a1436c195cdb9948855d847e3e008ecd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const AffineTransformation *</type>
      <name>GetGlobalTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a10d115daf12b88151dcec97eb89cda17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FreeFormTransformation *</type>
      <name>GetLocalTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>aebe5ba46bab187d22773cc81436b2e44</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const FreeFormTransformation *</type>
      <name>GetLocalTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a887b83e88e5dd984d7dabc0cfecb3ad8</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DOFStatus</type>
      <name>GetStatus</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a3d62803634a90d5c50419a8c3dc3a056</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GlobalHessian</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>af918c3a92daa9c53d6eb9d304640c000</anchor>
      <arglist>(Matrix [3], double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GlobalInverse</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a35dd363e534295f9e2fc5d004e5e6238</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GlobalJacobian</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>ab6643454d774f369c1b91a98bb8b7825</anchor>
      <arglist>(Matrix &amp;, double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GlobalTransform</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>ae38dd8b37c58615d3af895711b90a982</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasSameDOFsAs</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a95fbb311fe7dc05475fa312422d5d680</anchor>
      <arglist>(const Transformation *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Hessian</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a20497797c49a80fd3275a2185d9f713e</anchor>
      <arglist>(int, int, Matrix [3], double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Hessian</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a88c2463621119aff8df68d4767bc694c</anchor>
      <arglist>(int, Matrix [3], double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Hessian</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a0cbd23e3ca491e62c89ceadc7a095b3e</anchor>
      <arglist>(Matrix [3], double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>InsertLocalTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>ac21bc430b231b867bc50f8b9c6a61e7f</anchor>
      <arglist>(FreeFormTransformation *, int=0, bool=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Inverse</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a24ef3d90278b6ce889cb845039cb8eaa</anchor>
      <arglist>(int, int, double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Inverse</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>af5060843f53b237576b98709844c8264</anchor>
      <arglist>(int, double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Inverse</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>af777d7e966e51ee7a3b59100fcd4de83</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>InverseDisplacement</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a7c08b27481eceb5805671f6bda5d8451</anchor>
      <arglist>(int, int, double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>InverseDisplacement</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a15a79595d31b147e2fd0b53e2004dcc7</anchor>
      <arglist>(int, double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InverseDisplacement</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a75292b0bea85b78a2aef41ff07a67457</anchor>
      <arglist>(int, int, GenericImage&lt; double &gt; &amp;, double, double=NaN, const WorldCoordsImage *=NULL) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InverseDisplacement</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>af13eaafc7a5c92ed6660ac47946184ec</anchor>
      <arglist>(int, int, GenericImage&lt; float &gt; &amp;, double, double=NaN, const WorldCoordsImage *=NULL) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InverseDisplacement</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>ac537cc9ba437f4a699e3b7af9f62c202</anchor>
      <arglist>(int, GenericImage&lt; double &gt; &amp;, double, double=NaN, const WorldCoordsImage *=NULL) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InverseDisplacement</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a9c37246aa6575c675ca862d9e9ba3dc5</anchor>
      <arglist>(int, GenericImage&lt; float &gt; &amp;, double, double=NaN, const WorldCoordsImage *=NULL) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InverseDisplacement</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a0d0c3e1e3a6c1da3bfcf3cd9081a93b5</anchor>
      <arglist>(GenericImage&lt; double &gt; &amp;, double, double=NaN, const WorldCoordsImage *=NULL) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InverseDisplacement</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a7b375fd1bc9787bb34e080a1a9421c71</anchor>
      <arglist>(GenericImage&lt; float &gt; &amp;, double, double=NaN, const WorldCoordsImage *=NULL) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIdentity</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a9347c719e3428996c973ee8b972bacb7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Jacobian</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a7f68c578fa343c287ab260342863143e</anchor>
      <arglist>(int, int, Matrix &amp;, double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Jacobian</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a225f9efb136b42eac73bfadb2c99f17a</anchor>
      <arglist>(int, Matrix &amp;, double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Jacobian</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>abc928b0028fce037a411273d9dc07e52</anchor>
      <arglist>(Matrix &amp;, double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Jacobian</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a290cbfc72af025080af3d6a8a9837a7d</anchor>
      <arglist>(int, int, double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Jacobian</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>afac6138848a91037e63be7bf065812d6</anchor>
      <arglist>(int, double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>afdc02137cd121cadb92fccb97717f48a</anchor>
      <arglist>(double [3], int, double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalDisplacement</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a43ae74d13c2a704d7e6bc8f3c71b50ae</anchor>
      <arglist>(int, int, double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalDisplacement</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>ad59abe5b80794ae857b099234c1c292e</anchor>
      <arglist>(int, double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalHessian</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a03ac535345f1eeb28233edb05ca3e4c3</anchor>
      <arglist>(int, Matrix [3], double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalHessian</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>ae2c44de0d72401f369a4618c40e7ef67</anchor>
      <arglist>(Matrix [3], double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LocalInverse</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a03aa0016b390df499e94b808c22fcdea</anchor>
      <arglist>(int, int, double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LocalInverse</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a6de55dd8769ee075f595b2948575b471</anchor>
      <arglist>(int, double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LocalInverse</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>ac14a0f1a23a3331f4c2c3cd9e1d7c468</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LocalInverseDisplacement</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>abb9ee8e7a80711259d97848de7306bc1</anchor>
      <arglist>(int, int, double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LocalInverseDisplacement</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>acc9ed9b052c110ec69f6f9d1dceea5a6</anchor>
      <arglist>(int, double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalJacobian</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>ae25f9c16c9ba012519107e1b59a3c773</anchor>
      <arglist>(int, Matrix &amp;, double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalJacobian</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>aec49ad9d935a566953ffc8c8f55b7e49</anchor>
      <arglist>(Matrix &amp;, double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>LocalJacobian</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>adced44fd1f5f276f9898b7a5382d9f78</anchor>
      <arglist>(int, double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalTransform</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>acb0927aa6bbaab7e238ba657f25c4bdd</anchor>
      <arglist>(int, int, double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalTransform</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a2b7868f2cf30cd7f4c8ab8cc65b02d15</anchor>
      <arglist>(int, double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalTransform</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a948b1091bae8fff54c3571dc08bdbda9</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LocalTransformationIsActive</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>aea44b99003ed29d9c0b0e80a70f20826</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalTransformationStatus</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a7c3f0b58ec8ff0d5c0b8b31aa805241e</anchor>
      <arglist>(int, FFDStatus)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FFDStatus</type>
      <name>LocalTransformationStatus</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>ae45a11f7784684c6c559e9e976c4550e</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>MergeGlobalIntoLocalDisplacement</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a82373eca2a27f9b0c18a06dfc3822da0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumberOfActiveCPs</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>af6900dfc5ea09c006ab6eada93e8fd89</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumberOfActiveLevels</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a80488e7701a133cee08a3cd953853846</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumberOfCPs</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a0306c55626764d0ddd0f585cc1081b84</anchor>
      <arglist>(bool=false) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumberOfDOFs</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a2b0fe4539e08cd30b9914150cac7cb2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumberOfLevels</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>aa43d3c33cb6ba66aebe440a95c50fcd9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumberOfPassiveLevels</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a16c7edf1c2b0a05dab9d7053f94f0896</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a1fcad6653af27e6823a74846fd01caa3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FreeFormTransformation *</type>
      <name>PopLocalTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a34104834d01b21e6242975317638dbe9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a1e6a45aacd54f7f3a5511c6d46a8d1b7</anchor>
      <arglist>(ostream &amp;, Indent=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PushLocalTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>acd0df9468e25472e1cdf515190e8021f</anchor>
      <arglist>(FreeFormTransformation *, bool=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a1d10c2ec27d4c0a0e4023695704f5626</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a1fc04369173d7c93de69d3ddcb54cfcf</anchor>
      <arglist>(const DOFValue *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FreeFormTransformation *</type>
      <name>PutLocalTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a6243d98e28a450d7ea1b0dc160b3b451</anchor>
      <arglist>(FreeFormTransformation *, int, bool=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutStatus</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a0b9049f1b374f2fd30161aed8981460d</anchor>
      <arglist>(int, DOFStatus)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FreeFormTransformation *</type>
      <name>RemoveLocalTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>ad4d9be932beecffff512f5c757e74f9a</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>RequiresCachingOfDisplacements</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>ad6de724f110765f687b3c3be4b931daa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Reset</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a215db9805de6c4079be717f15c0023eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>ac1cb343e68eebc01a36d73a84d473ea5</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Transform</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a24faf5531dd0f96312e52d855b501fec</anchor>
      <arglist>(int, int, double &amp;, double &amp;, double &amp;, double=0, double=NaN) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Transform</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a6259862e5e6cc2880f38088db793099b</anchor>
      <arglist>(int, double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Transform</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a999a08ea19d31d87905766e22f067209</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Transform</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a8d370f044db896a74dfa38de6e241b9a</anchor>
      <arglist>(int, int, Point &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Transform</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>ad0f8bc9230574ca90efd0925a664000b</anchor>
      <arglist>(int, Point &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Transform</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a9314f0127e55700758a314b3943aea3b</anchor>
      <arglist>(int, int, PointSet &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Transform</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>ad807b2139c0bdfb6e78ee5abf35d69e0</anchor>
      <arglist>(int, PointSet &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a9f508075202b66edc136d4c2b7b7c925</anchor>
      <arglist>(const DOFValue *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MultiLevelTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a61dcc560f9d8bf9ff9d45ca7a330e494</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>CheckTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a61bb1f7a08d9f43e8ad86c9aa06bef98</anchor>
      <arglist>(FreeFormTransformation *) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>InterpolateGlobalDisplacement</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>ad3b37d9af0e66d83ff4cb81e02d92aa6</anchor>
      <arglist>(FreeFormTransformation *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MultiLevelTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a5f55095a43bd6f3aca16bb8af1d42bde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MultiLevelTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a30f4c752a432036389a209ef02d7d099</anchor>
      <arglist>(const RigidTransformation &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MultiLevelTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a66f0868629622050208c0d6ccc829da9</anchor>
      <arglist>(const AffineTransformation &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MultiLevelTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a2126e1db1d5d6cce2d75ebdd00297056</anchor>
      <arglist>(const MultiLevelTransformation &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Cifstream &amp;</type>
      <name>ReadDOFs</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a69b861e60f570c4f2035a194099ed97a</anchor>
      <arglist>(Cifstream &amp;, TransformationType)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Cofstream &amp;</type>
      <name>WriteDOFs</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a7189ef2b7b875140af165466a4d959e3</anchor>
      <arglist>(Cofstream &amp;) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AffineTransformation</type>
      <name>_GlobalTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>ae41729bf41ca02892f9c2d4e0cb5e85f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FreeFormTransformation *</type>
      <name>_LocalTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a09ee3e7312b92dea136c20a4a12e9213</anchor>
      <arglist>[MAX_TRANS]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_LocalTransformationOwner</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a5b71f4bb53b18393b0e7db5de33c38b9</anchor>
      <arglist>[MAX_TRANS]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FFDStatus</type>
      <name>_LocalTransformationStatus</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a5721725c4aa878d89cfb9543eac8c415</anchor>
      <arglist>[MAX_TRANS]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_NumberOfLevels</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a1cac7df5b2043f4ea5f42b36fbfcb2ec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::MutualImageInformation</name>
    <filename>classmirtk_1_1MutualImageInformation.html</filename>
    <base>mirtk::HistogramImageSimilarity</base>
    <member kind="function">
      <type></type>
      <name>MutualImageInformation</name>
      <anchorfile>classmirtk_1_1MutualImageInformation.html</anchorfile>
      <anchor>a9eea92620dbb31f1836db65ae4ac278f</anchor>
      <arglist>(const char *=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MutualImageInformation</name>
      <anchorfile>classmirtk_1_1MutualImageInformation.html</anchorfile>
      <anchor>ad1dd073e82837e97c3c44ea4a1f2a48f</anchor>
      <arglist>(const MutualImageInformation &amp;)</arglist>
    </member>
    <member kind="function">
      <type>MutualImageInformation &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1MutualImageInformation.html</anchorfile>
      <anchor>a7f23f715b50da32752fb173da993c838</anchor>
      <arglist>(const MutualImageInformation &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>RawValue</name>
      <anchorfile>classmirtk_1_1MutualImageInformation.html</anchorfile>
      <anchor>a973f4bd0a2adf905beea58e46a8377da</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MutualImageInformation</name>
      <anchorfile>classmirtk_1_1MutualImageInformation.html</anchorfile>
      <anchor>a4046b93d82058cfed3990c8699b52c86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1MutualImageInformation.html</anchorfile>
      <anchor>a023c7d76814fc7bcf662507386393818</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::NearestNeighborExtrapolateImageFunction</name>
    <filename>classmirtk_1_1NearestNeighborExtrapolateImageFunction.html</filename>
    <base>GenericNearestNeighborExtrapolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>NearestNeighborExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1NearestNeighborExtrapolateImageFunction.html</anchorfile>
      <anchor>ad45201c09dedc7ed833dad07b48e5f7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NearestNeighborExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1NearestNeighborExtrapolateImageFunction.html</anchorfile>
      <anchor>aa09b7305e79bec24775e4170a8e488d2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::NearestNeighborInterpolateImageFunction</name>
    <filename>classmirtk_1_1NearestNeighborInterpolateImageFunction.html</filename>
    <base>GenericNearestNeighborInterpolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>NearestNeighborInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1NearestNeighborInterpolateImageFunction.html</anchorfile>
      <anchor>afd5fe186aa2ccde2e239023b262a13a9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::NearOptimalIntrinsicSurfaceMapper</name>
    <filename>classmirtk_1_1NearOptimalIntrinsicSurfaceMapper.html</filename>
    <base>mirtk::IntrinsicSurfaceMapper</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ComputeMap</name>
      <anchorfile>classmirtk_1_1NearOptimalIntrinsicSurfaceMapper.html</anchorfile>
      <anchor>ac157ab6efa036d661fc4b9f1e2f02ec8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NearOptimalIntrinsicSurfaceMapper</name>
      <anchorfile>classmirtk_1_1NearOptimalIntrinsicSurfaceMapper.html</anchorfile>
      <anchor>a882e5a214bccc723754486163d48c94b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual double</type>
      <name>ComputeLambda</name>
      <anchorfile>classmirtk_1_1NearOptimalIntrinsicSurfaceMapper.html</anchorfile>
      <anchor>a771bb8628cac7f0f0763741b11b0fe8a</anchor>
      <arglist>(vtkDataArray *u0, vtkDataArray *u1) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NearOptimalIntrinsicSurfaceMapper</name>
      <anchorfile>classmirtk_1_1NearOptimalIntrinsicSurfaceMapper.html</anchorfile>
      <anchor>ab2fb7f66879ecbdff531f5cbd38f1b9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NearOptimalIntrinsicSurfaceMapper</name>
      <anchorfile>classmirtk_1_1NearOptimalIntrinsicSurfaceMapper.html</anchorfile>
      <anchor>a5d7a7c786f78f1420ade5703f72c20b3</anchor>
      <arglist>(const NearOptimalIntrinsicSurfaceMapper &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NearOptimalIntrinsicSurfaceMapper &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1NearOptimalIntrinsicSurfaceMapper.html</anchorfile>
      <anchor>a79bf32a576cd065e8822647f55f66bfe</anchor>
      <arglist>(const NearOptimalIntrinsicSurfaceMapper &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>Scale</name>
      <anchorfile>classmirtk_1_1NearOptimalIntrinsicSurfaceMapper.html</anchorfile>
      <anchor>a4e0a9539591431f00e6e65b2c008f5b2</anchor>
      <arglist>(vtkPolyData *) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>Scale</name>
      <anchorfile>classmirtk_1_1NearOptimalIntrinsicSurfaceMapper.html</anchorfile>
      <anchor>aaed685554e8298230ee475776e2a1b93</anchor>
      <arglist>(vtkDataArray *, vtkDataArray *=nullptr) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::NegJacobianConstraint</name>
    <filename>classmirtk_1_1NegJacobianConstraint.html</filename>
    <base>mirtk::JacobianConstraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>DerivativeWrtJacobianDet</name>
      <anchorfile>classmirtk_1_1NegJacobianConstraint.html</anchorfile>
      <anchor>a36c8d6841c1b6ae5c3f4670d1bffd569</anchor>
      <arglist>(double det) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NegJacobianConstraint</name>
      <anchorfile>classmirtk_1_1NegJacobianConstraint.html</anchorfile>
      <anchor>af913aab6cac8812afce6e08fc917595c</anchor>
      <arglist>(const char *=&quot;&quot;, bool=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1NegJacobianConstraint.html</anchorfile>
      <anchor>a26a75bd33f9b05eff7be47c165d3365e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Penalty</name>
      <anchorfile>classmirtk_1_1NegJacobianConstraint.html</anchorfile>
      <anchor>ae273c531167941f3397f8f3730e1cdf4</anchor>
      <arglist>(double det) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NegJacobianConstraint</name>
      <anchorfile>classmirtk_1_1NegJacobianConstraint.html</anchorfile>
      <anchor>a363248f2e4388cecd74ef99c63bec909</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithoutPrefix</name>
      <anchorfile>classmirtk_1_1NegJacobianConstraint.html</anchorfile>
      <anchor>a3ff077ee976d31f36a0e0da0db23e1c9</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithPrefix</name>
      <anchorfile>classmirtk_1_1NegJacobianConstraint.html</anchorfile>
      <anchor>aaab35bbe616e28ffe71c5b4921e4ba09</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::NeighborhoodOffsets</name>
    <filename>classmirtk_1_1NeighborhoodOffsets.html</filename>
    <base>mirtk::Object</base>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1NeighborhoodOffsets.html</anchorfile>
      <anchor>a5e166a78a744555a490b7520bf212abc</anchor>
      <arglist>(const BaseImage *, ConnectivityType=CONNECTIVITY_26)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1NeighborhoodOffsets.html</anchorfile>
      <anchor>afde9eb8cdc453ef220379c4a645969ee</anchor>
      <arglist>(int, int, ConnectivityType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NeighborhoodOffsets</name>
      <anchorfile>classmirtk_1_1NeighborhoodOffsets.html</anchorfile>
      <anchor>a99b50eb8e7ec47667d4a0455e023ba7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NeighborhoodOffsets</name>
      <anchorfile>classmirtk_1_1NeighborhoodOffsets.html</anchorfile>
      <anchor>a0a3f7815b2ec67490f09ea652f4407de</anchor>
      <arglist>(const BaseImage *, ConnectivityType=CONNECTIVITY_26)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1NeighborhoodOffsets.html</anchorfile>
      <anchor>a75966639fa55a9828c6f2953e7b025c1</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NeighborhoodOffsets</name>
      <anchorfile>classmirtk_1_1NeighborhoodOffsets.html</anchorfile>
      <anchor>ae05cf7ed6c94f0599476fa8e6c77377d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::NiftiImage</name>
    <filename>classmirtk_1_1NiftiImage.html</filename>
    <member kind="function">
      <type></type>
      <name>NiftiImage</name>
      <anchorfile>classmirtk_1_1NiftiImage.html</anchorfile>
      <anchor>a26e607c6c91a0480b9bbffd41f8ffb89</anchor>
      <arglist>(const char *fname=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1NiftiImage.html</anchorfile>
      <anchor>af8524079d9334c8d639235709414e16d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1NiftiImage.html</anchorfile>
      <anchor>a25f201c4d5362eeaf8e134ab8d8c2859</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NiftiImage</name>
      <anchorfile>classmirtk_1_1NiftiImage.html</anchorfile>
      <anchor>a1d231b0c09f52e61c60c6b0d6a184a83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>nifti_image *</type>
      <name>nim</name>
      <anchorfile>classmirtk_1_1NiftiImage.html</anchorfile>
      <anchor>ae4ffb50504bfbbb3d19e810b3f002346</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::NiftiImageInfo</name>
    <filename>structmirtk_1_1NiftiImageInfo.html</filename>
    <member kind="function">
      <type></type>
      <name>NiftiImageInfo</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a98ffe61f0c169cc6107ebe6c1685a0b3</anchor>
      <arglist>(const char *=nullptr)</arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>aux_file</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a5b7276acd6eafa4469cd3fc0d203b979</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>byteorder</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>adcb7b005d8e7fed668003eae58e6b4b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>cal_max</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>acc0b99497338c8c7643da676d072e977</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>cal_min</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a63c1fed27bc32b2f039a1f237b9b43c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>datatype</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a6fe351e19568bb5e8e7ea1de42ad0585</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>descrip</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a142db038d8e0c731ae7e9c962f2bdb25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>dt</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a368f4a0c4d66ce0d374c79b2f8ddda1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>du</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a4687268a796f48a5d83143497b75bad8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>dv</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>aaafe944747f5611b6387eb873298d373</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>dw</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a5f927c107af63b3d2ec62d484850a5da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>dx</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a693a267f0507b40d17545dfc6d11ebfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>dy</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a4743ad60f97cacf080d6a552f7d59d98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>dz</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a39acec43ac43eda20ae285fe6b7ae7ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>fname</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a070a96c57e67f92d4467b82475606850</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>iname</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a83e4dc4b21176b1ecd1de6ec3abd2e75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>iname_offset</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>ab8926b73c262cf7229fc60d718fc00a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>intent_code</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a8dd8326508dd5a557afdcf261bcc9f86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>intent_name</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>ab92343ea4fb78e31f4f9a78fc197e18b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>intent_p1</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>ad6411476b41994d2ffc74dd8aac8b51f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>intent_p2</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a891cb2820183b8c1f47ae8a8620cf173</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>intent_p3</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a3046cd89852188a9280172b59147a792</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nbyper</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a03102459955121d97a5d0b96ccd6f2b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ndim</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>abb376be28f9003b6672d4736bd17d619</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nifti_type</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a8dca7d21e3f10d30ee0ca706ccb5a9ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nt</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a0f7adc3916c8223d203d1fc613eb2c32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nu</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a83ce84241b4304ea53edd2b4a90140d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nv</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a9d94bc05a622194c4dc85cd1f406d67a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>nvox</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>aca454dabd164a3f44d2170ea17bb43d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nw</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a16d7448aad9ee6f8c750fb26c54b7adb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nx</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>af1900c248bcbfe1e3d7446c2b3fa0f88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ny</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a4945f03840c147a6df8d2fc252f204b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nz</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>ad45599fa6271cce6aa674150648c3bba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>qform_code</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a5ff48e17bf9f2691e20ac6d921721833</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix</type>
      <name>qto_ijk</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a90fa3fa582ed18f96520ac2acdb56e38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix</type>
      <name>qto_xyz</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a571fa2e817ff7b7032f772c72760e124</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>scl_inter</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>aaefe699a301b128ee352d56545b5024c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>scl_slope</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a9b7116535acb79ada200d87b76104014</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>sform_code</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a00fbca555752755c8cc0fcbe0a8a77f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>slice_code</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>ac684e1c456bf3b96735556003dd3a43f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>slice_duration</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a6a1c26d757e5f0953cd73bdc4d55a2ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>slice_end</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>aab49d955cf0b9c4c5af1b8c20477d2e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>slice_start</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a9287067212e8480266db3e6b751d397d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix</type>
      <name>sto_ijk</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>aae77cae4530b8770c69b88f6a850a2ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix</type>
      <name>sto_xyz</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a79a500699cfcdcd08a92baa6a75c1fab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>swapsize</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>aae7cf38bd1131bf5546b36e29113434a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>time_units</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a1bfbcb5195778745a149c888892abd68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>toffset</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a36be5f496ed3fde470a89eb9886e7eec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>xyz_units</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>aaa59622c20befbd711fb7bae73ed6562</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::NiftiImageReader</name>
    <filename>classmirtk_1_1NiftiImageReader.html</filename>
    <base>mirtk::ImageReader</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CanRead</name>
      <anchorfile>classmirtk_1_1NiftiImageReader.html</anchorfile>
      <anchor>ab9c448e3e03aeddda30b0e4488ef823c</anchor>
      <arglist>(const char *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1NiftiImageReader.html</anchorfile>
      <anchor>a9cc70b2954826ac1e98c9c4cc8fd9919</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NiftiImageReader</name>
      <anchorfile>classmirtk_1_1NiftiImageReader.html</anchorfile>
      <anchor>a586e19e57e517e7b2e9549c2210e0133</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1NiftiImageReader.html</anchorfile>
      <anchor>ae23dc77ee1763cf28efefc5cb787776f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NiftiImageReader</name>
      <anchorfile>classmirtk_1_1NiftiImageReader.html</anchorfile>
      <anchor>ab7dd47349a4410a8b092804fb302f27a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>CheckHeader</name>
      <anchorfile>classmirtk_1_1NiftiImageReader.html</anchorfile>
      <anchor>a95bcaf93abeaf8741cedfa93a50600b4</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>ReadHeader</name>
      <anchorfile>classmirtk_1_1NiftiImageReader.html</anchorfile>
      <anchor>a4c672ac4d78e39a8ac68ae9ee54e56e1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::NiftiImageWriter</name>
    <filename>classmirtk_1_1NiftiImageWriter.html</filename>
    <base>mirtk::ImageWriter</base>
    <member kind="function">
      <type></type>
      <name>NiftiImageWriter</name>
      <anchorfile>classmirtk_1_1NiftiImageWriter.html</anchorfile>
      <anchor>a3eb6456ce9fe661756bd3330fdd9aa7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1NiftiImageWriter.html</anchorfile>
      <anchor>ab7720d0f7e536d7aa7013b1cd1bb1d9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NiftiImageWriter</name>
      <anchorfile>classmirtk_1_1NiftiImageWriter.html</anchorfile>
      <anchor>aa98ed8533f9a9cde6f43898a862b8492</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Array&lt; string &gt;</type>
      <name>Extensions</name>
      <anchorfile>classmirtk_1_1NiftiImageWriter.html</anchorfile>
      <anchor>aaf840cc1f18402239cc6c050c3215ed0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1NiftiImageWriter.html</anchorfile>
      <anchor>aa0578a8f46d4f7cc2ce7b5ac655d35c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1NiftiImageWriter.html</anchorfile>
      <anchor>a6dacbead08927323131e9e7a205e37e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::NonaryForEachVoxelBody</name>
    <filename>structmirtk_1_1NonaryForEachVoxelBody.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>T8</templarg>
    <templarg>T9</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody.html</anchorfile>
      <anchor>ad7080366c09c3111b56002fcc6376d70</anchor>
      <arglist>(GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, GenericImage&lt; T9 &gt; &amp;im9, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody.html</anchorfile>
      <anchor>a8cd118c026c57ab50b4fc46c6c680bbe</anchor>
      <arglist>(const NonaryForEachVoxelBody &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody.html</anchorfile>
      <anchor>a7c5d8622dad0a743e7c0acab979f9550</anchor>
      <arglist>(NonaryForEachVoxelBody &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody.html</anchorfile>
      <anchor>a926bf7f9a40b3070cd79a40cd03f7cd0</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody.html</anchorfile>
      <anchor>a8faf22d292ce6640bbc3f491dbe36d76</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody.html</anchorfile>
      <anchor>aa30cbdd425c2e1e41a84906d3cc02a13</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody.html</anchorfile>
      <anchor>a593bc507fe20d1848cf0e3d28a662840</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::NonaryForEachVoxelBody_1Const</name>
    <filename>structmirtk_1_1NonaryForEachVoxelBody__1Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>T8</templarg>
    <templarg>T9</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_1Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a3ae1096eb79001e14c80c56ad62963fe</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, GenericImage&lt; T9 &gt; &amp;im9, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_1Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a8a0b6374c725c8b5a27638d0baeb72b4</anchor>
      <arglist>(const NonaryForEachVoxelBody_1Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_1Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a5f9976a76db9172d96cc64142d330814</anchor>
      <arglist>(NonaryForEachVoxelBody_1Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a426cfbeba96b662be9e8d11b8f230e3e</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>ae81c2a4a92224cd1c5803080874a8634</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>ac1afd6103b0889de7c349cbad8702c72</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a489f0e36894aeab46fbce2091c6755f4</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::NonaryForEachVoxelBody_2Const</name>
    <filename>structmirtk_1_1NonaryForEachVoxelBody__2Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>T8</templarg>
    <templarg>T9</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_2Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a900228136afaaf9b5c40988f9a63ca35</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, GenericImage&lt; T9 &gt; &amp;im9, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_2Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>aeada51d598605731dec4a7b8be6ba1a9</anchor>
      <arglist>(const NonaryForEachVoxelBody_2Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_2Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>af1d191af0f632cc26bdf49dd7857ed49</anchor>
      <arglist>(NonaryForEachVoxelBody_2Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a037ead83319bbd172a4f263756d720ba</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a0ca974fba1eb9bd44e0be5373d15cedc</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a404e9b61543fd375f7209d4bf6955f39</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>affe8063492575da6485d1e0c1570809e</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::NonaryForEachVoxelBody_3Const</name>
    <filename>structmirtk_1_1NonaryForEachVoxelBody__3Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>T8</templarg>
    <templarg>T9</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_3Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>a2c8e755dda7ebc3c8efef1bb548eb8b1</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, GenericImage&lt; T9 &gt; &amp;im9, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_3Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>ae3e2c4f3b93f801614b05680d3a884fc</anchor>
      <arglist>(const NonaryForEachVoxelBody_3Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_3Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>a06468366a169a2d1b2423f86945b4a73</anchor>
      <arglist>(NonaryForEachVoxelBody_3Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>a6026357953024e7ff6708971c71d8882</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>a0279bbafa60c52603b9280becde0e945</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>a5d28e5b27463503efc3650a791c9ae9f</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>a0006c0122544a1913198edf16137bf48</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::NonaryForEachVoxelBody_4Const</name>
    <filename>structmirtk_1_1NonaryForEachVoxelBody__4Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>T8</templarg>
    <templarg>T9</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_4Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>a3d3e833786c6dfa236fac91abab4b2ca</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, GenericImage&lt; T9 &gt; &amp;im9, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_4Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>a4d7afa3130f951d5fc5d53a714f4caab</anchor>
      <arglist>(const NonaryForEachVoxelBody_4Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_4Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>a0c541a383350b634896aced7690178b7</anchor>
      <arglist>(NonaryForEachVoxelBody_4Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>acae698cfe0c88c5a5a3fca4013ac0aef</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>a3b35b58dbfb8bbf91d8a36e78c7d3574</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>a181a8c5630ce4d12dbcac6723e0892dc</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>a9442e382cc7a1a2ffb89b0464ff7706d</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::NonaryForEachVoxelBody_5Const</name>
    <filename>structmirtk_1_1NonaryForEachVoxelBody__5Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>T8</templarg>
    <templarg>T9</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_5Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>a8fe2973fcf140e721149ea7764c4b524</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, GenericImage&lt; T9 &gt; &amp;im9, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_5Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>a44d66902760bab5693759f82c8db835c</anchor>
      <arglist>(const NonaryForEachVoxelBody_5Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_5Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>a235ded3e31ce2c4e03a826ddbb3571d7</anchor>
      <arglist>(NonaryForEachVoxelBody_5Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>a1a5d99e75933e89d73a962ccab39d250</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>a510be4a40ad5224a3bd68838b36b5cc6</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>a335af0b53e4fa9454028615e4ac3e2fd</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>a47d87965f681e1f85fee1346dcb0d797</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::NonaryForEachVoxelBody_6Const</name>
    <filename>structmirtk_1_1NonaryForEachVoxelBody__6Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>T8</templarg>
    <templarg>T9</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_6Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__6Const.html</anchorfile>
      <anchor>ada45bee15536e7264c61f2de74841730</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, const GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, GenericImage&lt; T9 &gt; &amp;im9, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_6Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__6Const.html</anchorfile>
      <anchor>a9052f5dd6edae4a4a9665a24a67f8e6a</anchor>
      <arglist>(const NonaryForEachVoxelBody_6Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_6Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__6Const.html</anchorfile>
      <anchor>a5641b95b6d58a68cf3951d5bf6b2a77b</anchor>
      <arglist>(NonaryForEachVoxelBody_6Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__6Const.html</anchorfile>
      <anchor>ac0b31c4339529d1ade511ef0ff2fd2b8</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__6Const.html</anchorfile>
      <anchor>ab03ca2e518199ad8e54be2f21aac287b</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__6Const.html</anchorfile>
      <anchor>ab87dfa3411ec1723bed73366e48d2b1c</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__6Const.html</anchorfile>
      <anchor>ae619ccce651049d49dd586e29b13db34</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::NonaryForEachVoxelBody_7Const</name>
    <filename>structmirtk_1_1NonaryForEachVoxelBody__7Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>T8</templarg>
    <templarg>T9</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_7Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__7Const.html</anchorfile>
      <anchor>a5fbb8a260c1db2c6bf0fa0646087e279</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, const GenericImage&lt; T6 &gt; &amp;im6, const GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, GenericImage&lt; T9 &gt; &amp;im9, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_7Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__7Const.html</anchorfile>
      <anchor>a7378bd2bb1fef5782627bf530b786d1a</anchor>
      <arglist>(const NonaryForEachVoxelBody_7Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_7Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__7Const.html</anchorfile>
      <anchor>ad682940b37faabb79965eb7afb936870</anchor>
      <arglist>(NonaryForEachVoxelBody_7Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__7Const.html</anchorfile>
      <anchor>a15c4f4fb0576e80368256a6c1ddd6a4f</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__7Const.html</anchorfile>
      <anchor>aa5787ef3f887a599bacf5bffd65c4036</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__7Const.html</anchorfile>
      <anchor>a53c518a924ae83713ad5e386ea79d8ea</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__7Const.html</anchorfile>
      <anchor>a952cf236eba0f1bf6a2c8ad82c966be7</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::NonaryForEachVoxelBody_8Const</name>
    <filename>structmirtk_1_1NonaryForEachVoxelBody__8Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>T8</templarg>
    <templarg>T9</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_8Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__8Const.html</anchorfile>
      <anchor>aabf0641bf2c8d286735c61124845568a</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, const GenericImage&lt; T6 &gt; &amp;im6, const GenericImage&lt; T7 &gt; &amp;im7, const GenericImage&lt; T8 &gt; &amp;im8, GenericImage&lt; T9 &gt; &amp;im9, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_8Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__8Const.html</anchorfile>
      <anchor>a959509920da40408f89fb80a7e54ecab</anchor>
      <arglist>(const NonaryForEachVoxelBody_8Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_8Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__8Const.html</anchorfile>
      <anchor>a742c667bb6fb11e9eee6a9a4901ca2a5</anchor>
      <arglist>(NonaryForEachVoxelBody_8Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__8Const.html</anchorfile>
      <anchor>abf6ffeb85d66d5a5420503f91abbb7f0</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__8Const.html</anchorfile>
      <anchor>ab92fa9812fd292c12d934a32572cfa3d</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__8Const.html</anchorfile>
      <anchor>a9dbcf94944e8a9c1dce698e1a6b3856c</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__8Const.html</anchorfile>
      <anchor>a5b74e371138616dea53f72303c58ad15</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::NonaryForEachVoxelBody_Const</name>
    <filename>structmirtk_1_1NonaryForEachVoxelBody__Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>T8</templarg>
    <templarg>T9</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a1e1b20ac22ae04f7b640925da6218bb9</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, const GenericImage&lt; T6 &gt; &amp;im6, const GenericImage&lt; T7 &gt; &amp;im7, const GenericImage&lt; T8 &gt; &amp;im8, const GenericImage&lt; T9 &gt; &amp;im9, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a22c569321d966fe0d6f6cf21a9211160</anchor>
      <arglist>(const NonaryForEachVoxelBody_Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>ab05eaa3880f27986a19c527278eedf96</anchor>
      <arglist>(NonaryForEachVoxelBody_Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a8eacf306ab6a8378ff87397c844335f1</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>ae0734a7a65cb863ac7936742be36422b</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a6f2ed2f2537fcf84c9575a1209a9e69f</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a6e72e5a7a0cbf929c14a9ac4df284f7e</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::NonaryForEachVoxelIfBody</name>
    <filename>structmirtk_1_1NonaryForEachVoxelIfBody.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>T8</templarg>
    <templarg>T9</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody.html</anchorfile>
      <anchor>adea82e4df601dfae2783f379da962d71</anchor>
      <arglist>(GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, GenericImage&lt; T9 &gt; &amp;im9, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a60e2e4ccebc5e576f37266b60445dc1a</anchor>
      <arglist>(const NonaryForEachVoxelIfBody &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a3d5cb8d170970c8fe6bed9ab871309cd</anchor>
      <arglist>(NonaryForEachVoxelIfBody &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody.html</anchorfile>
      <anchor>ab79b687cf8c06fa7b752a805445a2c38</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a3e4890b955d76d6f9c95136ee6209402</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a5a16e582ea744138e6652b042bb48081</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a91d0e2177e97e7dbe2f91ddeef0e91bd</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::NonaryForEachVoxelIfBody_1Const</name>
    <filename>structmirtk_1_1NonaryForEachVoxelIfBody__1Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>T8</templarg>
    <templarg>T9</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_1Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a5dbf5f1724797765c72afcce2a1d9366</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, GenericImage&lt; T9 &gt; &amp;im9, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_1Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a85533fb3dd6ee87b37ebac10cc705ee4</anchor>
      <arglist>(const NonaryForEachVoxelIfBody_1Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_1Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>ad2cee6f7141260cb3527e274a3a63374</anchor>
      <arglist>(NonaryForEachVoxelIfBody_1Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>ae3d2d320dcd24125574a89a3d9d7d5f4</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>ab078e096e3226432c588455a18f2e175</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a8821b0af9fe1ed3fbabfd2b05cfc1285</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a4a695cb61dc75edc99857517a84ff378</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::NonaryForEachVoxelIfBody_2Const</name>
    <filename>structmirtk_1_1NonaryForEachVoxelIfBody__2Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>T8</templarg>
    <templarg>T9</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_2Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a342ab7b0e866f3382ad14566a3f0a7fe</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, GenericImage&lt; T9 &gt; &amp;im9, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_2Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a2b60b24a9bd7f8f930abfc838ba6418c</anchor>
      <arglist>(const NonaryForEachVoxelIfBody_2Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_2Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a0f027c7d4e26139e1d85e25bb34b5e1f</anchor>
      <arglist>(NonaryForEachVoxelIfBody_2Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a2ddcb6030d2731ac5c2eef6fd72f11c3</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a2dd8176de9f5570878425856c3258a2e</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a03ee0c27986bc500d98cd9d84f474aa6</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>aee4444a5bc7f94699835a6b1f60746ec</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::NonaryForEachVoxelIfBody_3Const</name>
    <filename>structmirtk_1_1NonaryForEachVoxelIfBody__3Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>T8</templarg>
    <templarg>T9</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_3Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>a51f2ac15334f81db0494638d6c35a303</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, GenericImage&lt; T9 &gt; &amp;im9, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_3Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>a1e8ba192756e1d6acfd3a0ca0f3904b8</anchor>
      <arglist>(const NonaryForEachVoxelIfBody_3Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_3Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>a1c002e7b7666de500b672c2f0e57e50c</anchor>
      <arglist>(NonaryForEachVoxelIfBody_3Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>acf7525fe35ead83a1d21554c1962a14c</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>addb482dfd8623b5981b9fae30c748506</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>a2d2b4768375b08c91404726d3bad2f80</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>a57d3a8fc3caf9638c58770eb80f2629c</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::NonaryForEachVoxelIfBody_4Const</name>
    <filename>structmirtk_1_1NonaryForEachVoxelIfBody__4Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>T8</templarg>
    <templarg>T9</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_4Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>ae0fa07970e92fff5a54fca4476cf92a7</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, GenericImage&lt; T9 &gt; &amp;im9, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_4Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>a8b4257f03f00f9cbe5b5b9de1dfd1a99</anchor>
      <arglist>(const NonaryForEachVoxelIfBody_4Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_4Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>adc8f923bba59811b54c20aa21228bd83</anchor>
      <arglist>(NonaryForEachVoxelIfBody_4Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>acdeaa0a10cd62f951f328900977fabe2</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>aa55287052d3c287c7367a1a8ce33bc05</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>a31d36dabbca45e32f6584b67ccc69b47</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>ac77f8e96d11b802a91c4f2034a87ffb7</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::NonaryForEachVoxelIfBody_5Const</name>
    <filename>structmirtk_1_1NonaryForEachVoxelIfBody__5Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>T8</templarg>
    <templarg>T9</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_5Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>a3502fba0c6116897172ee621495e8648</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, GenericImage&lt; T9 &gt; &amp;im9, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_5Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>a939ff495897fc2a0f7b96e5393052bcb</anchor>
      <arglist>(const NonaryForEachVoxelIfBody_5Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_5Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>ae3d7fbef97160c1768f7c980abd1b015</anchor>
      <arglist>(NonaryForEachVoxelIfBody_5Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>a5e6f04a433849374478d4bce3a2ccee3</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>aeed58b20b08a9bcc66a040db922961be</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>aa05b4346b7b5f1bad234b24cd070113e</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>a3bc01bd1caf345850940e7703172e091</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::NonaryForEachVoxelIfBody_6Const</name>
    <filename>structmirtk_1_1NonaryForEachVoxelIfBody__6Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>T8</templarg>
    <templarg>T9</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_6Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__6Const.html</anchorfile>
      <anchor>a537553215dce9afb80fdad3d097dd499</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, const GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, GenericImage&lt; T9 &gt; &amp;im9, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_6Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__6Const.html</anchorfile>
      <anchor>a4dbef5083404e0d3c09986c75e152da1</anchor>
      <arglist>(const NonaryForEachVoxelIfBody_6Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_6Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__6Const.html</anchorfile>
      <anchor>a5e11c232dde85cbb56000a4e57e87aff</anchor>
      <arglist>(NonaryForEachVoxelIfBody_6Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__6Const.html</anchorfile>
      <anchor>a960c074a0cdca6a10c75687e363ae5a5</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__6Const.html</anchorfile>
      <anchor>a1c6072e5ad8959a0da4d9b375dd73a17</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__6Const.html</anchorfile>
      <anchor>acb01df8fbefbc8a6a6556ace7c6e032c</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__6Const.html</anchorfile>
      <anchor>aba8829ba3403112768da94d211c6221e</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::NonaryForEachVoxelIfBody_7Const</name>
    <filename>structmirtk_1_1NonaryForEachVoxelIfBody__7Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>T8</templarg>
    <templarg>T9</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_7Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__7Const.html</anchorfile>
      <anchor>a23fb5682ff89e1cf64248aea964073a3</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, const GenericImage&lt; T6 &gt; &amp;im6, const GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, GenericImage&lt; T9 &gt; &amp;im9, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_7Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__7Const.html</anchorfile>
      <anchor>ab365f689f650b13fa8cbc0fff7acd2c4</anchor>
      <arglist>(const NonaryForEachVoxelIfBody_7Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_7Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__7Const.html</anchorfile>
      <anchor>aaaabd98a746b3609773b7cb4e0a69427</anchor>
      <arglist>(NonaryForEachVoxelIfBody_7Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__7Const.html</anchorfile>
      <anchor>a74154c628c750eb1b4328000ef91ad34</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__7Const.html</anchorfile>
      <anchor>a75b79c41057696d8b2c5d1b0b94de08d</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__7Const.html</anchorfile>
      <anchor>a0bc7502ae08d0e9d71f37be20c75b6c0</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__7Const.html</anchorfile>
      <anchor>a6a38232da1b66ad4d0a37248fec9a245</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::NonaryForEachVoxelIfBody_8Const</name>
    <filename>structmirtk_1_1NonaryForEachVoxelIfBody__8Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>T8</templarg>
    <templarg>T9</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_8Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__8Const.html</anchorfile>
      <anchor>a562b2fc089dffb76fafaa3d4abbbf663</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, const GenericImage&lt; T6 &gt; &amp;im6, const GenericImage&lt; T7 &gt; &amp;im7, const GenericImage&lt; T8 &gt; &amp;im8, GenericImage&lt; T9 &gt; &amp;im9, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_8Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__8Const.html</anchorfile>
      <anchor>a98ec6e1642926f650891c4d5262fca15</anchor>
      <arglist>(const NonaryForEachVoxelIfBody_8Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_8Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__8Const.html</anchorfile>
      <anchor>a435483c434df0246df9d9b031a23d7bb</anchor>
      <arglist>(NonaryForEachVoxelIfBody_8Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__8Const.html</anchorfile>
      <anchor>ad7e843978ce6f6fb190063fb5359769d</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__8Const.html</anchorfile>
      <anchor>a5dd44cebd8560ae7da681646a682561f</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__8Const.html</anchorfile>
      <anchor>a8448de2c7097e58106aa5515dddc3f68</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__8Const.html</anchorfile>
      <anchor>a06ab231732d35c39058ffdaf5da10acc</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::NonaryForEachVoxelIfBody_Const</name>
    <filename>structmirtk_1_1NonaryForEachVoxelIfBody__Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>T8</templarg>
    <templarg>T9</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>ad511537721454466ffb9d041aca4b6a0</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, const GenericImage&lt; T6 &gt; &amp;im6, const GenericImage&lt; T7 &gt; &amp;im7, const GenericImage&lt; T8 &gt; &amp;im8, const GenericImage&lt; T9 &gt; &amp;im9, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a9b010a03a762d25cc6c0f3a39bb0cc53</anchor>
      <arglist>(const NonaryForEachVoxelIfBody_Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>ac2e74a6b4fddac5a8cee3cbed4c54a72</anchor>
      <arglist>(NonaryForEachVoxelIfBody_Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a48651375070c3999c7ec1c87c9ac767e</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a4aefbdf6d70598160ac2d301b08defa7</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a9310378ebe1729ba85d001257312ae5e</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>aebd1e3b3d296e60f34d33ab4860067bb</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::NonSelfIntersectionConstraint</name>
    <filename>classmirtk_1_1NonSelfIntersectionConstraint.html</filename>
    <base>mirtk::SurfaceConstraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1NonSelfIntersectionConstraint.html</anchorfile>
      <anchor>a8f7a1f0fc9962d35487bd64c48c1ade2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonSelfIntersectionConstraint</name>
      <anchorfile>classmirtk_1_1NonSelfIntersectionConstraint.html</anchorfile>
      <anchor>a7118fc5d7f114d23a95edba7eff3441f</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonSelfIntersectionConstraint</name>
      <anchorfile>classmirtk_1_1NonSelfIntersectionConstraint.html</anchorfile>
      <anchor>ada91c335b6329cb2e0ea6a3adf8dea79</anchor>
      <arglist>(const NonSelfIntersectionConstraint &amp;)</arglist>
    </member>
    <member kind="function">
      <type>NonSelfIntersectionConstraint &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1NonSelfIntersectionConstraint.html</anchorfile>
      <anchor>ab07bb3fe3b31bf43c5b9fdf437763fc4</anchor>
      <arglist>(const NonSelfIntersectionConstraint &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1NonSelfIntersectionConstraint.html</anchorfile>
      <anchor>ac484214fdfe271865b56cb09a27986ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Reinitialize</name>
      <anchorfile>classmirtk_1_1NonSelfIntersectionConstraint.html</anchorfile>
      <anchor>aa658fcec862cf1eca070972dbc107a6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1NonSelfIntersectionConstraint.html</anchorfile>
      <anchor>af53e5d6683ebb0cf22cdaee44c419a8d</anchor>
      <arglist>(bool=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteDataSets</name>
      <anchorfile>classmirtk_1_1NonSelfIntersectionConstraint.html</anchorfile>
      <anchor>ab1e72493b374471a354f14c601185e08</anchor>
      <arglist>(const char *, const char *, bool=true) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NonSelfIntersectionConstraint</name>
      <anchorfile>classmirtk_1_1NonSelfIntersectionConstraint.html</anchorfile>
      <anchor>a8794dc8df36a71e8c933a4fa0e7ff07d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CopyAttributes</name>
      <anchorfile>classmirtk_1_1NonSelfIntersectionConstraint.html</anchorfile>
      <anchor>a2ce6dcd5e44d7b15a11069a7399f1421</anchor>
      <arglist>(const NonSelfIntersectionConstraint &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1NonSelfIntersectionConstraint.html</anchorfile>
      <anchor>a5fc8697dd845708031d7042a89233c02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1NonSelfIntersectionConstraint.html</anchorfile>
      <anchor>acf670dc44c345ff85ce08efa99d5ea7a</anchor>
      <arglist>(double *, double, double)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Init</name>
      <anchorfile>classmirtk_1_1NonSelfIntersectionConstraint.html</anchorfile>
      <anchor>a2a3115ccad5d3b48697d969c191ee0af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1NonSelfIntersectionConstraint.html</anchorfile>
      <anchor>aa7e99298ff846cabcbcd9b28c5d86c9e</anchor>
      <arglist>(SurfaceCollisions::CollisionsArray, Collisions)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1NonSelfIntersectionConstraint.html</anchorfile>
      <anchor>a128f2e34548d3e84448053216b4e381d</anchor>
      <arglist>(bool, FastCollisionTest)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1NonSelfIntersectionConstraint.html</anchorfile>
      <anchor>aac23ad034d22e466db17c898c9a21e21</anchor>
      <arglist>(double, MinDistance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1NonSelfIntersectionConstraint.html</anchorfile>
      <anchor>aab431ec7f58cb5857bf6ca2d3405f600</anchor>
      <arglist>(double, MaxAngle)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1NonSelfIntersectionConstraint.html</anchorfile>
      <anchor>ad6cbae03f49f808460d1ea9dfb1fc923</anchor>
      <arglist>(int, NumberOfCollisions)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithoutPrefix</name>
      <anchorfile>classmirtk_1_1NonSelfIntersectionConstraint.html</anchorfile>
      <anchor>aa20843a3b55f68a96b680100a29497b5</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::NonSymmetricWeightsSurfaceMapper</name>
    <filename>classmirtk_1_1NonSymmetricWeightsSurfaceMapper.html</filename>
    <base>mirtk::LinearFixedBoundarySurfaceMapper</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ComputeMap</name>
      <anchorfile>classmirtk_1_1NonSymmetricWeightsSurfaceMapper.html</anchorfile>
      <anchor>a1a2bf12f32e75533ac057f27fe241e0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonSymmetricWeightsSurfaceMapper</name>
      <anchorfile>classmirtk_1_1NonSymmetricWeightsSurfaceMapper.html</anchorfile>
      <anchor>a8916184049e12e6af8ffbf0afb39b98a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonSymmetricWeightsSurfaceMapper</name>
      <anchorfile>classmirtk_1_1NonSymmetricWeightsSurfaceMapper.html</anchorfile>
      <anchor>a5675ff7195a7525264472b19696f5ed6</anchor>
      <arglist>(const NonSymmetricWeightsSurfaceMapper &amp;)</arglist>
    </member>
    <member kind="function">
      <type>NonSymmetricWeightsSurfaceMapper &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1NonSymmetricWeightsSurfaceMapper.html</anchorfile>
      <anchor>a9622fff84c4aeb74d389f54bf60659cf</anchor>
      <arglist>(const NonSymmetricWeightsSurfaceMapper &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NonSymmetricWeightsSurfaceMapper</name>
      <anchorfile>classmirtk_1_1NonSymmetricWeightsSurfaceMapper.html</anchorfile>
      <anchor>acd15abf6da08a74ed8a159230e2e2786</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Weight</name>
      <anchorfile>classmirtk_1_1NonSymmetricWeightsSurfaceMapper.html</anchorfile>
      <anchor>aa06646a12532a5abc836059788fa78b0</anchor>
      <arglist>(int i, int j) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Weights</name>
      <anchorfile>classmirtk_1_1NonSymmetricWeightsSurfaceMapper.html</anchorfile>
      <anchor>a4b37e7de6446dcb08bbddebc5bd196c9</anchor>
      <arglist>(int i, const int *j, double *w, int d) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::NaryVoxelFunction::NOP</name>
    <filename>structmirtk_1_1NaryVoxelFunction_1_1NOP.html</filename>
    <base>mirtk::VoxelFunction</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1NOP.html</anchorfile>
      <anchor>a1feed7ca0808975498a83cc956b55d0f</anchor>
      <arglist>(const TImage &amp;, int, const void *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1NOP.html</anchorfile>
      <anchor>ab7819dce1b59ec60e4ff933cd3ef5703</anchor>
      <arglist>(int, int, int, int, const void *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1NOP.html</anchorfile>
      <anchor>a9a5b2f6271d47216466b406df84a736b</anchor>
      <arglist>(const TImage &amp;, int, const void *, const void *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1NOP.html</anchorfile>
      <anchor>aec85b990ebd802dc9c6e19e55ffd4788</anchor>
      <arglist>(int, int, int, int, const void *, const void *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1NOP.html</anchorfile>
      <anchor>ada4d7bf527c0562decb1c2037e101823</anchor>
      <arglist>(const TImage &amp;, int, const void *, const void *, const void *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1NOP.html</anchorfile>
      <anchor>a80601929ba742f322d53dd26df7463a7</anchor>
      <arglist>(int, int, int, int, const void *, const void *, const void *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1NOP.html</anchorfile>
      <anchor>a718af2cb9ff69e8b3c68f5386c24e715</anchor>
      <arglist>(const TImage &amp;, int, const void *, const void *, const void *, const void *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1NOP.html</anchorfile>
      <anchor>a55c26be3b1d1ae7d77033ee9fa5086f4</anchor>
      <arglist>(int, int, int, int, const void *, const void *, const void *, const void *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1NOP.html</anchorfile>
      <anchor>a837450d2493f0e2be7beb993d09b4b45</anchor>
      <arglist>(const TImage &amp;, int, const void *, const void *, const void *, const void *, const void *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1NOP.html</anchorfile>
      <anchor>a6f76d1e58b49a3c14e8734f79731fc41</anchor>
      <arglist>(int, int, int, int, const void *, const void *, const void *, const void *, const void *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1NOP.html</anchorfile>
      <anchor>a6b838e0b11c70b55a403bbf259a3a07b</anchor>
      <arglist>(const TImage &amp;, int, const void *, const void *, const void *, const void *, const void *, const void *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1NOP.html</anchorfile>
      <anchor>aa03f488dbc9b4e9fb69f066762e41f12</anchor>
      <arglist>(int, int, int, int, const void *, const void *, const void *, const void *, const void *, const void *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1NOP.html</anchorfile>
      <anchor>aa154e2e9e11dad29837019df36527251</anchor>
      <arglist>(const TImage &amp;, int, const void *, const void *, const void *, const void *, const void *, const void *, const void *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1NOP.html</anchorfile>
      <anchor>ae0e368461b1ac4517ab7c7ea1b8cac0e</anchor>
      <arglist>(int, int, int, int, const void *, const void *, const void *, const void *, const void *, const void *, const void *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1NOP.html</anchorfile>
      <anchor>a118a8973400a80817e55294ac82d9cbf</anchor>
      <arglist>(const TImage &amp;, int, const void *, const void *, const void *, const void *, const void *, const void *, const void *, const void *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1NOP.html</anchorfile>
      <anchor>ae31b6fb92506c6c553870cb3d41e51f5</anchor>
      <arglist>(int, int, int, int, const void *, const void *, const void *, const void *, const void *, const void *, const void *, const void *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1NOP.html</anchorfile>
      <anchor>a23b628af30c6a2f7a6f58bf2518e10a2</anchor>
      <arglist>(const TImage &amp;, int, const void *, const void *, const void *, const void *, const void *, const void *, const void *, const void *, const void *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1NOP.html</anchorfile>
      <anchor>a8357c69df164508d920189aac004eba1</anchor>
      <arglist>(int, int, int, int, const void *, const void *, const void *, const void *, const void *, const void *, const void *, const void *, const void *) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::statistic::NormalDistribution</name>
    <filename>classmirtk_1_1data_1_1statistic_1_1NormalDistribution.html</filename>
    <base>mirtk::data::statistic::MeanVar</base>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1data_1_1statistic_1_1NormalDistribution.html</anchorfile>
      <anchor>a7805f35230e23502b61dc0380dcf3e3f</anchor>
      <arglist>(Array&lt; double &gt; &amp;values, int n, const double *data, const bool *mask=nullptr) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::NormalForce</name>
    <filename>classmirtk_1_1NormalForce.html</filename>
    <base>mirtk::InternalForce</base>
    <member kind="function">
      <type></type>
      <name>NormalForce</name>
      <anchorfile>classmirtk_1_1NormalForce.html</anchorfile>
      <anchor>a0d7d634b835407aaa8d06ac16af4fa70</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NormalForce</name>
      <anchorfile>classmirtk_1_1NormalForce.html</anchorfile>
      <anchor>ae7ef14c02c76d4fec9c8d745fbb9c116</anchor>
      <arglist>(const NormalForce &amp;)</arglist>
    </member>
    <member kind="function">
      <type>NormalForce &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1NormalForce.html</anchorfile>
      <anchor>abf06a9f807a72593e63ddd3491acd377</anchor>
      <arglist>(const NormalForce &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NormalForce</name>
      <anchorfile>classmirtk_1_1NormalForce.html</anchorfile>
      <anchor>a4d44956ff1327d7e785a882990faf5bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1NormalForce.html</anchorfile>
      <anchor>afb2219c675fdcb70a79dfa6e43ac8a1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1NormalForce.html</anchorfile>
      <anchor>aae9e05ae4811e2937ee972dbe4d23e8c</anchor>
      <arglist>(double *, double, double)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::NormalizedGradientFieldSimilarity</name>
    <filename>classmirtk_1_1NormalizedGradientFieldSimilarity.html</filename>
    <base>mirtk::GradientFieldSimilarity</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1NormalizedGradientFieldSimilarity.html</anchorfile>
      <anchor>a8ec1bda70c48672806dc9c89b3602a4f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1NormalizedGradientFieldSimilarity.html</anchorfile>
      <anchor>a6ed7ae7c4f39062927c2b60256927d12</anchor>
      <arglist>(bool=true)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NormalizedGradientFieldSimilarity</name>
      <anchorfile>classmirtk_1_1NormalizedGradientFieldSimilarity.html</anchorfile>
      <anchor>a042efafdd1b0897886683304fec9b1fa</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NormalizedGradientFieldSimilarity</name>
      <anchorfile>classmirtk_1_1NormalizedGradientFieldSimilarity.html</anchorfile>
      <anchor>af0cd6fd3021d2205285b7c75c3d36796</anchor>
      <arglist>(const NormalizedGradientFieldSimilarity &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithPrefix</name>
      <anchorfile>classmirtk_1_1NormalizedGradientFieldSimilarity.html</anchorfile>
      <anchor>a25d962d3b6d832219aea25df76165a25</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~NormalizedGradientFieldSimilarity</name>
      <anchorfile>classmirtk_1_1NormalizedGradientFieldSimilarity.html</anchorfile>
      <anchor>affe8f1d011d0052c4edac508d40eab79</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::NormalizedIntensityCrossCorrelation</name>
    <filename>classmirtk_1_1NormalizedIntensityCrossCorrelation.html</filename>
    <base>mirtk::ImageSimilarity</base>
    <member kind="enumeration">
      <type></type>
      <name>Units</name>
      <anchorfile>classmirtk_1_1NormalizedIntensityCrossCorrelation.html</anchorfile>
      <anchor>a451d4e62574b18e313960eedf1044b65</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Exclude</name>
      <anchorfile>classmirtk_1_1NormalizedIntensityCrossCorrelation.html</anchorfile>
      <anchor>ac134d8031bc5319c60a2261235b3904f</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Include</name>
      <anchorfile>classmirtk_1_1NormalizedIntensityCrossCorrelation.html</anchorfile>
      <anchor>af6b4c85742ea67d74618be11277a6ded</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1NormalizedIntensityCrossCorrelation.html</anchorfile>
      <anchor>a26fe064648134a719599cc12f3f42f89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NormalizedIntensityCrossCorrelation</name>
      <anchorfile>classmirtk_1_1NormalizedIntensityCrossCorrelation.html</anchorfile>
      <anchor>a859d0f8be161e615d7c7c1b097c5fc24</anchor>
      <arglist>(const char *=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NormalizedIntensityCrossCorrelation</name>
      <anchorfile>classmirtk_1_1NormalizedIntensityCrossCorrelation.html</anchorfile>
      <anchor>a83f2cbe04c3a1c087b8d733bb637e653</anchor>
      <arglist>(const NormalizedIntensityCrossCorrelation &amp;)</arglist>
    </member>
    <member kind="function">
      <type>NormalizedIntensityCrossCorrelation &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1NormalizedIntensityCrossCorrelation.html</anchorfile>
      <anchor>a47e5b5fe5ec857387c798144d2aa516e</anchor>
      <arglist>(const NormalizedIntensityCrossCorrelation &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1NormalizedIntensityCrossCorrelation.html</anchorfile>
      <anchor>a09dd84149a3dbeab370483cf689bdda2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1NormalizedIntensityCrossCorrelation.html</anchorfile>
      <anchor>a76b83839bd9e5f19c751337d0d7723cc</anchor>
      <arglist>(Indent=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>RawValue</name>
      <anchorfile>classmirtk_1_1NormalizedIntensityCrossCorrelation.html</anchorfile>
      <anchor>ae51ee985f0fca3384204361e984e9f42</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetKernelToBoxWindow</name>
      <anchorfile>classmirtk_1_1NormalizedIntensityCrossCorrelation.html</anchorfile>
      <anchor>a208c1ce9995882479f391fcb8ed5f004</anchor>
      <arglist>(double, double=-1, double=-1, Units=UNITS_MM)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetKernelToGaussian</name>
      <anchorfile>classmirtk_1_1NormalizedIntensityCrossCorrelation.html</anchorfile>
      <anchor>af18de4c4b44d0ade4ab5ee0c34b3709f</anchor>
      <arglist>(double, double=-1, double=-1, Units=UNITS_MM)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1NormalizedIntensityCrossCorrelation.html</anchorfile>
      <anchor>a5193ba7e57da8fa98d1ccf93272a3833</anchor>
      <arglist>(bool=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteDataSets</name>
      <anchorfile>classmirtk_1_1NormalizedIntensityCrossCorrelation.html</anchorfile>
      <anchor>a71ed0c11bab7eabd193ed9037e6fb910</anchor>
      <arglist>(const char *, const char *, bool=true) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NormalizedIntensityCrossCorrelation</name>
      <anchorfile>classmirtk_1_1NormalizedIntensityCrossCorrelation.html</anchorfile>
      <anchor>a19a7e04db692ce235ee98e5acda57029</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>ComputeStatistics</name>
      <anchorfile>classmirtk_1_1NormalizedIntensityCrossCorrelation.html</anchorfile>
      <anchor>a675c9698100ba07b068dad4ec28170d5</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;, const RegisteredImage *, RealImage *, RealImage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>ComputeWeightedAverage</name>
      <anchorfile>classmirtk_1_1NormalizedIntensityCrossCorrelation.html</anchorfile>
      <anchor>ac8975747ba87c670359bf7bafab6a1bb</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;, RealImage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1NormalizedIntensityCrossCorrelation.html</anchorfile>
      <anchor>a7409deeeb81b93016723d8d0da1b3cc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>NonParametricGradient</name>
      <anchorfile>classmirtk_1_1NormalizedIntensityCrossCorrelation.html</anchorfile>
      <anchor>afde5597601c9adb8b3b709cd1697a8f4</anchor>
      <arglist>(const RegisteredImage *, GradientImageType *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithPrefix</name>
      <anchorfile>classmirtk_1_1NormalizedIntensityCrossCorrelation.html</anchorfile>
      <anchor>af24d37a3590c412062dfe09d6dbe042f</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::NormalizedMutualImageInformation</name>
    <filename>classmirtk_1_1NormalizedMutualImageInformation.html</filename>
    <base>mirtk::HistogramImageSimilarity</base>
    <member kind="function">
      <type></type>
      <name>NormalizedMutualImageInformation</name>
      <anchorfile>classmirtk_1_1NormalizedMutualImageInformation.html</anchorfile>
      <anchor>abf8f83b121a87699d8f3f21fa85a2c4f</anchor>
      <arglist>(const char *=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NormalizedMutualImageInformation</name>
      <anchorfile>classmirtk_1_1NormalizedMutualImageInformation.html</anchorfile>
      <anchor>a228f7dac83df44d6f6e3baeb70dc22ac</anchor>
      <arglist>(const NormalizedMutualImageInformation &amp;)</arglist>
    </member>
    <member kind="function">
      <type>NormalizedMutualImageInformation &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1NormalizedMutualImageInformation.html</anchorfile>
      <anchor>ae53d469ca43a0fb987ae1d708e084008</anchor>
      <arglist>(const NormalizedMutualImageInformation &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>RawValue</name>
      <anchorfile>classmirtk_1_1NormalizedMutualImageInformation.html</anchorfile>
      <anchor>aa17c6bfe450b1c3f668f9fc61fb696a4</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1NormalizedMutualImageInformation.html</anchorfile>
      <anchor>a4bb04c75f82f8d7fe8c69eaa21ea4491</anchor>
      <arglist>(bool=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NormalizedMutualImageInformation</name>
      <anchorfile>classmirtk_1_1NormalizedMutualImageInformation.html</anchorfile>
      <anchor>aee03f23ce91e691650c399b39e084a20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1NormalizedMutualImageInformation.html</anchorfile>
      <anchor>aedfe8af5aabbbc9ab4f784c398f358b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>NonParametricGradient</name>
      <anchorfile>classmirtk_1_1NormalizedMutualImageInformation.html</anchorfile>
      <anchor>ae7fd55df220a06c84544f5d476aa7ad4</anchor>
      <arglist>(const RegisteredImage *, GradientImageType *)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ForEachVoxelDomain::NotBackgroundValue</name>
    <filename>structmirtk_1_1ForEachVoxelDomain_1_1NotBackgroundValue.html</filename>
  </compound>
  <compound kind="class">
    <name>mirtk::data::select::NotEqual</name>
    <filename>classmirtk_1_1data_1_1select_1_1NotEqual.html</filename>
    <base>mirtk::data::SelectionCriterium</base>
    <member kind="function">
      <type></type>
      <name>NotEqual</name>
      <anchorfile>classmirtk_1_1data_1_1select_1_1NotEqual.html</anchorfile>
      <anchor>ae1b70b36467819d49b6e904479ef7615</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Select</name>
      <anchorfile>classmirtk_1_1data_1_1select_1_1NotEqual.html</anchorfile>
      <anchor>a802292529f0b1ad0573d8c62f6ca59d5</anchor>
      <arglist>(double value) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::Object</name>
    <filename>classmirtk_1_1Object.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>NameOfClass</name>
      <anchorfile>classmirtk_1_1Object.html</anchorfile>
      <anchor>adbbe169b1436bff81554e85baafa1129</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1Object.html</anchorfile>
      <anchor>ad6657825e3aaf517b3d18cf454c90fab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1Object.html</anchorfile>
      <anchor>a3ec92202d063597bac120fc2bb58da1d</anchor>
      <arglist>(const ParameterList &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1Object.html</anchorfile>
      <anchor>a204a7fffedfe83c143aaace90ea12fc4</anchor>
      <arglist>(const char *name, const char *value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Object</name>
      <anchorfile>classmirtk_1_1Object.html</anchorfile>
      <anchor>ae6c2b72b48e8f47492ca782c7b9efd17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>NameOfType</name>
      <anchorfile>classmirtk_1_1Object.html</anchorfile>
      <anchor>af87485100639f1b2aa741ce4687f302c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Throw</name>
      <anchorfile>classmirtk_1_1Object.html</anchorfile>
      <anchor>af7241b7a3faefee567a7b01a256a7b8d</anchor>
      <arglist>(ErrorType err, const char *func, Args... args) const</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>ThrowStatic</name>
      <anchorfile>classmirtk_1_1Object.html</anchorfile>
      <anchor>a3a641c8bf0ae47f8cbb2d0bc62242272</anchor>
      <arglist>(ErrorType err, const char *cls, const char *func, Args... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ObjectFactory</name>
    <filename>classmirtk_1_1ObjectFactory.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Interface *(*</type>
      <name>Creator</name>
      <anchorfile>classmirtk_1_1ObjectFactory.html</anchorfile>
      <anchor>a64fb851af4a4b479edb3c6fc67cd24d9</anchor>
      <arglist>)()</arglist>
    </member>
    <member kind="typedef">
      <type>TId</type>
      <name>Id</name>
      <anchorfile>classmirtk_1_1ObjectFactory.html</anchorfile>
      <anchor>a104bce05191da4c0f58a540d9788c8f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ObjectFactory&lt; Id, Interface &gt;</type>
      <name>InstanceType</name>
      <anchorfile>classmirtk_1_1ObjectFactory.html</anchorfile>
      <anchor>ac6aab1bd501442386b9bed80779145bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TInterface</type>
      <name>Interface</name>
      <anchorfile>classmirtk_1_1ObjectFactory.html</anchorfile>
      <anchor>a130a5211876c03a4b6b319d7dc0330c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Interface *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1ObjectFactory.html</anchorfile>
      <anchor>a283b541b2a311c5de1314b3630e91b88</anchor>
      <arglist>(Id type_id) const</arglist>
    </member>
    <member kind="function">
      <type>Interface *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1ObjectFactory.html</anchorfile>
      <anchor>a94e1e7c817975dc590660cc2dc96483f</anchor>
      <arglist>(const char *type_name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Register</name>
      <anchorfile>classmirtk_1_1ObjectFactory.html</anchorfile>
      <anchor>a72996725bde135643145153f7875ad5d</anchor>
      <arglist>(Id type_id, const char *type_name, Creator creator)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ObjectFactory</name>
      <anchorfile>classmirtk_1_1ObjectFactory.html</anchorfile>
      <anchor>a1713bf053e6938dce0be5564618b66b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ObjectFactory</name>
      <anchorfile>classmirtk_1_1ObjectFactory.html</anchorfile>
      <anchor>ad060b5438d57cecdbc7f3225afcf2d76</anchor>
      <arglist>(const ObjectFactory &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1ObjectFactory.html</anchorfile>
      <anchor>a9916ab3dfc3a81be642c5319d51703a3</anchor>
      <arglist>(const ObjectFactory &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ObjectFactory</name>
      <anchorfile>classmirtk_1_1ObjectFactory.html</anchorfile>
      <anchor>ac03ceff2bc78d51341816c8683153c8c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ObjectiveFunction</name>
    <filename>classmirtk_1_1ObjectiveFunction.html</filename>
    <base>mirtk::Observable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AddConstraintGradient</name>
      <anchorfile>classmirtk_1_1ObjectiveFunction.html</anchorfile>
      <anchor>aecfa625311953b6c9be1387bbe3fbf2e</anchor>
      <arglist>(double *dx, double step=.0, bool *sgn_chg=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DataFidelityGradient</name>
      <anchorfile>classmirtk_1_1ObjectiveFunction.html</anchorfile>
      <anchor>aac48a345dbc665e48261f550c0164b31</anchor>
      <arglist>(double *dx, double step=.0, bool *sgn_chg=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1ObjectiveFunction.html</anchorfile>
      <anchor>ae5b20b998ba45d393644c06558d13ed7</anchor>
      <arglist>(double *dx=NULL, double step=.0, bool *sgn_chg=NULL)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1ObjectiveFunction.html</anchorfile>
      <anchor>a764048edaff0a3374475b90e98e1b71d</anchor>
      <arglist>(int i) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1ObjectiveFunction.html</anchorfile>
      <anchor>aedfd70021668d45eec7afbe6caf7a61c</anchor>
      <arglist>(double *x) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Gradient</name>
      <anchorfile>classmirtk_1_1ObjectiveFunction.html</anchorfile>
      <anchor>af975d90f492714477726f0f9ecb390aa</anchor>
      <arglist>(double *dx, double step=.0, bool *sgn_chg=nullptr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>GradientNorm</name>
      <anchorfile>classmirtk_1_1ObjectiveFunction.html</anchorfile>
      <anchor>a7b5a56fd95a9fa063276d2ef09897454</anchor>
      <arglist>(const double *dx) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GradientStep</name>
      <anchorfile>classmirtk_1_1ObjectiveFunction.html</anchorfile>
      <anchor>aba946f96adfdc650c515c65ed8f8cc13</anchor>
      <arglist>(const double *dx, double &amp;min, double &amp;max) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>NumberOfDOFs</name>
      <anchorfile>classmirtk_1_1ObjectiveFunction.html</anchorfile>
      <anchor>ac06563f438eac319d050f8430f421864</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1ObjectiveFunction.html</anchorfile>
      <anchor>a4fb9402ffeb10ead4bbbab568280bf6b</anchor>
      <arglist>(const double *x)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>Step</name>
      <anchorfile>classmirtk_1_1ObjectiveFunction.html</anchorfile>
      <anchor>a483021ecccded5b3d6a06f6df3780011</anchor>
      <arglist>(double *dx)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1ObjectiveFunction.html</anchorfile>
      <anchor>a20a7199ae3c3554a5ae2385f7976d6f6</anchor>
      <arglist>(bool gradient=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Upgrade</name>
      <anchorfile>classmirtk_1_1ObjectiveFunction.html</anchorfile>
      <anchor>af5cd22f38f93b741b6cd1f05f95dcaf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>Value</name>
      <anchorfile>classmirtk_1_1ObjectiveFunction.html</anchorfile>
      <anchor>a494735e2a6e5c041a11dfb791445f26c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>~ObjectiveFunction</name>
      <anchorfile>classmirtk_1_1ObjectiveFunction.html</anchorfile>
      <anchor>a31980bb0fcca66494f1a764e7fd5626a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1ObjectiveFunction.html</anchorfile>
      <anchor>a493a30bc248b61fbefd024a99354f458</anchor>
      <arglist>(double, StepLength)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::Observable</name>
    <filename>classmirtk_1_1Observable.html</filename>
    <base>mirtk::Object</base>
    <member kind="function">
      <type>void</type>
      <name>AddObserver</name>
      <anchorfile>classmirtk_1_1Observable.html</anchorfile>
      <anchor>a0d984efaa333fb33b6ee9b2453c917ab</anchor>
      <arglist>(Observer &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Broadcast</name>
      <anchorfile>classmirtk_1_1Observable.html</anchorfile>
      <anchor>aa22bce883eb810cfeecb32d547b19a65</anchor>
      <arglist>(Event, const void *=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearObservers</name>
      <anchorfile>classmirtk_1_1Observable.html</anchorfile>
      <anchor>a7d7de1b38cc50633ec3deadd413cbae3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DeleteObserver</name>
      <anchorfile>classmirtk_1_1Observable.html</anchorfile>
      <anchor>a9a5c87c242aabb2b57edc79c6d5f60d9</anchor>
      <arglist>(Observer &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NotifyObservers</name>
      <anchorfile>classmirtk_1_1Observable.html</anchorfile>
      <anchor>a15582958f18e00d11ecaf6804fa3d21d</anchor>
      <arglist>(Event, const void *=NULL)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfObservers</name>
      <anchorfile>classmirtk_1_1Observable.html</anchorfile>
      <anchor>a362894e4efc8e4b54a86879381eb88b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Observable</name>
      <anchorfile>classmirtk_1_1Observable.html</anchorfile>
      <anchor>a362a0bbd622ce66727c1de8ecd6288a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Observable</name>
      <anchorfile>classmirtk_1_1Observable.html</anchorfile>
      <anchor>a162d76b2c08fbe70dbe623be5e21fb8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Observable</name>
      <anchorfile>classmirtk_1_1Observable.html</anchorfile>
      <anchor>a858ea3278b5635d07053172fbe74d965</anchor>
      <arglist>(const Observable &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Observable &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1Observable.html</anchorfile>
      <anchor>ae3413459ace0fa61465fa1293a84b687</anchor>
      <arglist>(const Observable &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::Observer</name>
    <filename>classmirtk_1_1Observer.html</filename>
    <base>mirtk::Object</base>
    <member kind="function">
      <type>void</type>
      <name>ClearObservables</name>
      <anchorfile>classmirtk_1_1Observer.html</anchorfile>
      <anchor>a638353f8ad6e2d9d68bec0e87dede6f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>HandleEvent</name>
      <anchorfile>classmirtk_1_1Observer.html</anchorfile>
      <anchor>a14885af022697525f174ce262b347570</anchor>
      <arglist>(Observable *, Event, const void *=NULL)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Observer</name>
      <anchorfile>classmirtk_1_1Observer.html</anchorfile>
      <anchor>aa7b1a854d45f34c30b16d76be84193bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Observer</name>
      <anchorfile>classmirtk_1_1Observer.html</anchorfile>
      <anchor>a9c3ad314e5e13c64d0ff9e4614eb563e</anchor>
      <arglist>(const Observer &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Observer &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1Observer.html</anchorfile>
      <anchor>a73f7c6cf29582d13009a50457cb3b8eb</anchor>
      <arglist>(const Observer &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Observer</name>
      <anchorfile>classmirtk_1_1Observer.html</anchorfile>
      <anchor>aee963ab298c8f484314024c95194ac5d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::OctaryForEachVoxelBody</name>
    <filename>structmirtk_1_1OctaryForEachVoxelBody.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>T8</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody.html</anchorfile>
      <anchor>aed7bad87da4823efb37b0edde531169d</anchor>
      <arglist>(GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody.html</anchorfile>
      <anchor>a69e13490f7cda83f01264753f49f1e52</anchor>
      <arglist>(const OctaryForEachVoxelBody &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody.html</anchorfile>
      <anchor>a9f7fe783eb437f05a181878c928ae299</anchor>
      <arglist>(OctaryForEachVoxelBody &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody.html</anchorfile>
      <anchor>ab0da24600714be38df1e7c800162654f</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody.html</anchorfile>
      <anchor>af1589d139b4c04d570b29d7cd1736b1a</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody.html</anchorfile>
      <anchor>a1f4cbb2b1681208eaee5dc73c2a75e14</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody.html</anchorfile>
      <anchor>afc014e42e9716c8e4aa5ed6fecdc03e2</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::OctaryForEachVoxelBody_1Const</name>
    <filename>structmirtk_1_1OctaryForEachVoxelBody__1Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>T8</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody_1Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a3c1b3408ee167feb9a9920f686e49d51</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody_1Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>ac4b3d0b00598346ce3d63906f31786c5</anchor>
      <arglist>(const OctaryForEachVoxelBody_1Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody_1Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a4ccc83319cd5dd23bc48fa35000457ea</anchor>
      <arglist>(OctaryForEachVoxelBody_1Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>abce6963c0caa16ed890ac0f1f2174a27</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>af005e9c88b68560b77f20454a72dfc96</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a9398b9a02e273bcd83ebcd98c531208d</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>ac3496fdb69d6d4f3dd50131d8ad82836</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::OctaryForEachVoxelBody_2Const</name>
    <filename>structmirtk_1_1OctaryForEachVoxelBody__2Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>T8</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody_2Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>ac7f85bb386cfe30f7304923280d66cdb</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody_2Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a9e8de496b03434748aa6df98d8c584df</anchor>
      <arglist>(const OctaryForEachVoxelBody_2Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody_2Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>ac19e517c051409654546d37929526ae9</anchor>
      <arglist>(OctaryForEachVoxelBody_2Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>aef6803357c3241af494b2afb94ac6988</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a4236e371634d80ab0548dbbf9264bdc3</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>add1f0e17cd6e80cb0297959ef18bf080</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a5a181687768d5af23718a056a7534743</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::OctaryForEachVoxelBody_3Const</name>
    <filename>structmirtk_1_1OctaryForEachVoxelBody__3Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>T8</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody_3Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>ab41a3ae09e32987436d64a2ee12e325e</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody_3Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>af8b479ef48d61e6cda3f75cbb7e77db7</anchor>
      <arglist>(const OctaryForEachVoxelBody_3Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody_3Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>ae5e6a888e617330d83aed31e1f648b36</anchor>
      <arglist>(OctaryForEachVoxelBody_3Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>a7208e9d860c4ce9a9735137a6521e7c6</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>a8ba0c3e0ce672f6228dbcad825608fc9</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>a0f265f33d05e6d7bc9b4a83f377e0159</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>a4a5cb70ebdc6eff3bf9da27ef3184ed3</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::OctaryForEachVoxelBody_4Const</name>
    <filename>structmirtk_1_1OctaryForEachVoxelBody__4Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>T8</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody_4Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>ab17c89370b2ff8a4f5f68729b555630d</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody_4Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>a4269e753109ea0c6cc0c561aa72f7703</anchor>
      <arglist>(const OctaryForEachVoxelBody_4Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody_4Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>a0d473a689648e7d2ab06d1b15bb529af</anchor>
      <arglist>(OctaryForEachVoxelBody_4Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>a15fc344d53c7556582d895301020ee23</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>a5bf1c9f8f9109c36152b1d5b0ef3ad2f</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>af0a4ac93e5f02d35121a059469b1d759</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>a03ef175eb5c9e9c94e9af37599b081aa</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::OctaryForEachVoxelBody_5Const</name>
    <filename>structmirtk_1_1OctaryForEachVoxelBody__5Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>T8</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody_5Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>a54dcd655cbf37581ac0a1bfbff3768d3</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody_5Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>a5882612354e920402013e48a76c8bafc</anchor>
      <arglist>(const OctaryForEachVoxelBody_5Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody_5Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>a2c78d82ef2f4abaa3597561092a6824a</anchor>
      <arglist>(OctaryForEachVoxelBody_5Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>a2763bcfe5fad9aa0fabbc30daa8eef08</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>afc6c7bf2f0903681ebaa19f58d3b33f0</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>a0c3cda61b2a1a2dc4e47354d0f79d426</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>ac91743ebc7ca55d0fa0b58ffffb498a8</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::OctaryForEachVoxelBody_6Const</name>
    <filename>structmirtk_1_1OctaryForEachVoxelBody__6Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>T8</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody_6Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__6Const.html</anchorfile>
      <anchor>abb3551904d9c04b58281f9e4c8d53a75</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, const GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody_6Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__6Const.html</anchorfile>
      <anchor>ac2aa8da57f3def1e4faec0f7f80cf500</anchor>
      <arglist>(const OctaryForEachVoxelBody_6Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody_6Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__6Const.html</anchorfile>
      <anchor>a7a861d9fc599b02c6fa34e076549b4df</anchor>
      <arglist>(OctaryForEachVoxelBody_6Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__6Const.html</anchorfile>
      <anchor>a69831f5960b297d3f9602897d7962679</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__6Const.html</anchorfile>
      <anchor>adf37e9ddc161565d08cd774cc1c0be15</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__6Const.html</anchorfile>
      <anchor>aa17b1ab93806d607bdf641c646490944</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__6Const.html</anchorfile>
      <anchor>ab5488063432bc2e22953fc0c28c2c4e7</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::OctaryForEachVoxelBody_7Const</name>
    <filename>structmirtk_1_1OctaryForEachVoxelBody__7Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>T8</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody_7Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__7Const.html</anchorfile>
      <anchor>a9428e2c565bb225592cc156527278516</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, const GenericImage&lt; T6 &gt; &amp;im6, const GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody_7Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__7Const.html</anchorfile>
      <anchor>a85020fa785f869290fb275640db06fc0</anchor>
      <arglist>(const OctaryForEachVoxelBody_7Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody_7Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__7Const.html</anchorfile>
      <anchor>a451ffb257a8ee1d274797a04dffb5b5e</anchor>
      <arglist>(OctaryForEachVoxelBody_7Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__7Const.html</anchorfile>
      <anchor>ab6db6a7c6f3ebb58dd0b6b55dc7f82d9</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__7Const.html</anchorfile>
      <anchor>a88843dde23ec9896ff8d35ba923e58e5</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__7Const.html</anchorfile>
      <anchor>adc5ed00976605c35da746653802653b5</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__7Const.html</anchorfile>
      <anchor>aef1c3749f462c5c7a1df30180bb5546c</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::OctaryForEachVoxelBody_Const</name>
    <filename>structmirtk_1_1OctaryForEachVoxelBody__Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>T8</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a7f5222cc37d9a0cbb7938bc66ad8bd42</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, const GenericImage&lt; T6 &gt; &amp;im6, const GenericImage&lt; T7 &gt; &amp;im7, const GenericImage&lt; T8 &gt; &amp;im8, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>ab1ffc07fbec4ef15dac2078845db13d5</anchor>
      <arglist>(const OctaryForEachVoxelBody_Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a5c892c2cfdad3a0bd63d2ad2bbb51b26</anchor>
      <arglist>(OctaryForEachVoxelBody_Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>ae6d83b2f2356fe64dfeb512136d125e3</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a199a10a1df839669e919971a69b1e0aa</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a99582baa8c48016c5b5b03af8a644b80</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a345eef88a6db923a5d72c7b365a1f8a5</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::OctaryForEachVoxelIfBody</name>
    <filename>structmirtk_1_1OctaryForEachVoxelIfBody.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>T8</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a1779e6947ae939977c1e57aa3b507cb6</anchor>
      <arglist>(GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a564d73d6f398bce92c4b0cac9e423ea6</anchor>
      <arglist>(const OctaryForEachVoxelIfBody &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a2a4edba1ab7908444842e509b77d17a9</anchor>
      <arglist>(OctaryForEachVoxelIfBody &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody.html</anchorfile>
      <anchor>adbf1094cefdd6d9e22a32b5a87499547</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a8e067bb89dcddb304c085199341369d2</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a7054c5ae59cc401934b1ec92e8f4bc9c</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a9e312667a5e6d17f26268d1c0d5e21a8</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::OctaryForEachVoxelIfBody_1Const</name>
    <filename>structmirtk_1_1OctaryForEachVoxelIfBody__1Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>T8</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody_1Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a3120b274bf5864acb5a9731a5e5a9fb9</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody_1Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a3f998ffd3a4ac61cd61e17beb8ca8166</anchor>
      <arglist>(const OctaryForEachVoxelIfBody_1Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody_1Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a0552708d7617dcc58a9404236fe233cc</anchor>
      <arglist>(OctaryForEachVoxelIfBody_1Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a38f1c28f71da34dc7d23faa0a4d53e40</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>aaa6a0a0bc042b80eb9ccd0535938e2da</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>adb36936c921964af8a9970a8c34f452a</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a92f70ba8112f44d6bc9f910666447378</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::OctaryForEachVoxelIfBody_2Const</name>
    <filename>structmirtk_1_1OctaryForEachVoxelIfBody__2Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>T8</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody_2Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>ada20fbe0caa7d09052154cc4c5370940</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody_2Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>af049f296e0d27c2da9566a4f0abd55fa</anchor>
      <arglist>(const OctaryForEachVoxelIfBody_2Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody_2Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a612371bc6ad6486d933a8ea9b21252bd</anchor>
      <arglist>(OctaryForEachVoxelIfBody_2Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a334ccc891d7173b57b5f1d47ac7e9dfa</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a63549148d8f814d705b41ea6c7b2050c</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>ac58485bdfdd9df39affc4ac383ab9757</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a02cf3012a5162ee368e9b08524544399</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::OctaryForEachVoxelIfBody_3Const</name>
    <filename>structmirtk_1_1OctaryForEachVoxelIfBody__3Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>T8</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody_3Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>ad7d9c8a205b3111e47fe5c3e9cc33d2d</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody_3Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>a6c1474c8417e9b0ac6c6713329f88e14</anchor>
      <arglist>(const OctaryForEachVoxelIfBody_3Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody_3Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>a60fb608a02c98fd6ee3a6e31ac577fd8</anchor>
      <arglist>(OctaryForEachVoxelIfBody_3Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>a935726f9885b54509ae30d18a65f7382</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>a2000af372d6e9d2957b473af3510798e</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>a3d32da5b77452b865033e54d3a2131c5</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>aed926db6db953af62c3e57a47074c212</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::OctaryForEachVoxelIfBody_4Const</name>
    <filename>structmirtk_1_1OctaryForEachVoxelIfBody__4Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>T8</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody_4Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>ae525a5053b1683a7350af7ff75532804</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody_4Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>a0e2eb2df02bca8c08f9a8d28c1efb541</anchor>
      <arglist>(const OctaryForEachVoxelIfBody_4Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody_4Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>a9a60374f1ae068dd2c22a8a7d9ef21b2</anchor>
      <arglist>(OctaryForEachVoxelIfBody_4Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>ac6fdbbbf0858e0d38285ebdc822ba538</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>ad7335c5839e1e283726ab07fe55bd01e</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>ae2ff6064642b96531a5e1973c8348a44</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>a2238e2ae594fca52cee3ec3c07979634</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::OctaryForEachVoxelIfBody_5Const</name>
    <filename>structmirtk_1_1OctaryForEachVoxelIfBody__5Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>T8</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody_5Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>a1b8d3f5ad49546a2642724b50fb2a8b6</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody_5Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>a37af4c67e6f907724560ea481cf28f79</anchor>
      <arglist>(const OctaryForEachVoxelIfBody_5Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody_5Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>a55c89b05a25aa2cd00a2e8a5d6167884</anchor>
      <arglist>(OctaryForEachVoxelIfBody_5Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>adb820d4606d98a395ab54cc0066140c7</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>ab0dda6e049efe2a5679e77f8645b690d</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>a1e51a870fa72676d9362c06feef1208e</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>ab15ce3081b3b377f3bb6ee3c8b3b9ace</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::OctaryForEachVoxelIfBody_6Const</name>
    <filename>structmirtk_1_1OctaryForEachVoxelIfBody__6Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>T8</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody_6Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__6Const.html</anchorfile>
      <anchor>a93b345d81429a0dff87fa7595f9dd97a</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, const GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody_6Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__6Const.html</anchorfile>
      <anchor>ad03a98eb309122247f680def80b8e17a</anchor>
      <arglist>(const OctaryForEachVoxelIfBody_6Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody_6Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__6Const.html</anchorfile>
      <anchor>acfedd3e773fbff542c3d57838c17ff31</anchor>
      <arglist>(OctaryForEachVoxelIfBody_6Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__6Const.html</anchorfile>
      <anchor>ab5857a5ae6a61325ed8dfa1effcf2eea</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__6Const.html</anchorfile>
      <anchor>ae5b20f14c44a2e7d125e0358bb58c27b</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__6Const.html</anchorfile>
      <anchor>a51b47cbed0d1415e34e01a581c436446</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__6Const.html</anchorfile>
      <anchor>adc52d1a0c488d849ac998b2eb3d7e3db</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::OctaryForEachVoxelIfBody_7Const</name>
    <filename>structmirtk_1_1OctaryForEachVoxelIfBody__7Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>T8</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody_7Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__7Const.html</anchorfile>
      <anchor>ab38c7323249671caa8349cb2e2631c42</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, const GenericImage&lt; T6 &gt; &amp;im6, const GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody_7Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__7Const.html</anchorfile>
      <anchor>a8661588beb9be1051ce48f9a6cd4b7e9</anchor>
      <arglist>(const OctaryForEachVoxelIfBody_7Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody_7Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__7Const.html</anchorfile>
      <anchor>afddac99742773bda643e430f23c6f8c7</anchor>
      <arglist>(OctaryForEachVoxelIfBody_7Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__7Const.html</anchorfile>
      <anchor>a18b432f56d777daf529ba37f2e8843bb</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__7Const.html</anchorfile>
      <anchor>adceaca70cb29be00c3c7f52653b6d57f</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__7Const.html</anchorfile>
      <anchor>a292450e4c6d44d7b1811b4085dcc7743</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__7Const.html</anchorfile>
      <anchor>a945a8d14cfdd67d93f97275fc3332f94</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::OctaryForEachVoxelIfBody_Const</name>
    <filename>structmirtk_1_1OctaryForEachVoxelIfBody__Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>T8</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>aaf79f8fe5b35793bb4d481de307475d2</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, const GenericImage&lt; T6 &gt; &amp;im6, const GenericImage&lt; T7 &gt; &amp;im7, const GenericImage&lt; T8 &gt; &amp;im8, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a0a59b73c3e777f81570936a4997958ea</anchor>
      <arglist>(const OctaryForEachVoxelIfBody_Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a93ce03b99a6e6c73dea5ec6b1b3d7912</anchor>
      <arglist>(OctaryForEachVoxelIfBody_Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>ae004c8f00e969ad4efbc96290e8690f7</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a7425b11c0c8faec93cd687166b2fa0a0</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>af89db9c13e8b7d2bbb369c2e0400b7e9</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>ae4975b4dd0fc10b1808d01ab32f27d60</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::Op</name>
    <filename>classmirtk_1_1data_1_1Op.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1Op.html</anchorfile>
      <anchor>aa1429eeb16992aa12ed3ef7cf05c7878</anchor>
      <arglist>(int, double *, bool *=NULL)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Op</name>
      <anchorfile>classmirtk_1_1data_1_1Op.html</anchorfile>
      <anchor>a4064e24e845aa41ce3eb2eeffd2291d1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::OpenCellData</name>
    <filename>classmirtk_1_1OpenCellData.html</filename>
    <base>mirtk::CellDataFilter</base>
    <member kind="function">
      <type></type>
      <name>OpenCellData</name>
      <anchorfile>classmirtk_1_1OpenCellData.html</anchorfile>
      <anchor>a2c0be1705744b97938d2923a2ff93444</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OpenCellData</name>
      <anchorfile>classmirtk_1_1OpenCellData.html</anchorfile>
      <anchor>acc66dc63d4f8fd69b5be3c4b1b2d265a</anchor>
      <arglist>(const OpenCellData &amp;)</arglist>
    </member>
    <member kind="function">
      <type>OpenCellData &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1OpenCellData.html</anchorfile>
      <anchor>ab544cc8b5a39492c2c7baf3bca8af2b0</anchor>
      <arglist>(const OpenCellData &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OpenCellData</name>
      <anchorfile>classmirtk_1_1OpenCellData.html</anchorfile>
      <anchor>af7849c689fa1afb42b6fa9e29ef5b96a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Execute</name>
      <anchorfile>classmirtk_1_1OpenCellData.html</anchorfile>
      <anchor>ae02bd1575f68f29ddc88b89dd2e69dfe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1OpenCellData.html</anchorfile>
      <anchor>ada1cb00a824c407edfa54b9be1c6fd63</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::OpenPointData</name>
    <filename>classmirtk_1_1OpenPointData.html</filename>
    <base>mirtk::PointDataFilter</base>
    <member kind="function">
      <type></type>
      <name>OpenPointData</name>
      <anchorfile>classmirtk_1_1OpenPointData.html</anchorfile>
      <anchor>a632b7eff09274765eeb4517bcfafbdf0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OpenPointData</name>
      <anchorfile>classmirtk_1_1OpenPointData.html</anchorfile>
      <anchor>a2a1aaa04d82e287685685dbb1d5ab9b1</anchor>
      <arglist>(const OpenPointData &amp;)</arglist>
    </member>
    <member kind="function">
      <type>OpenPointData &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1OpenPointData.html</anchorfile>
      <anchor>a5ea940049ea18f0387b193ed3dbabda5</anchor>
      <arglist>(const OpenPointData &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OpenPointData</name>
      <anchorfile>classmirtk_1_1OpenPointData.html</anchorfile>
      <anchor>a313d08402c120387590202f1b425b971</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Execute</name>
      <anchorfile>classmirtk_1_1OpenPointData.html</anchorfile>
      <anchor>a72d3e89fb5ffa2addf6cbe7ec39e738b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1OpenPointData.html</anchorfile>
      <anchor>af493edd6d9b743d5f3d080460248c5ac</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::PartialAffineTransformation</name>
    <filename>classmirtk_1_1PartialAffineTransformation.html</filename>
    <base>mirtk::AffineTransformation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasSameDOFsAs</name>
      <anchorfile>classmirtk_1_1PartialAffineTransformation.html</anchorfile>
      <anchor>ac7f416cd2d0b1d0342938ab61090a68e</anchor>
      <arglist>(const class Transformation *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1PartialAffineTransformation.html</anchorfile>
      <anchor>ae8e86927ac9fd0d7d52901782cacd734</anchor>
      <arglist>(const GenericImage&lt; double &gt; *, double *, const WorldCoordsImage *=NULL, const WorldCoordsImage *=NULL, double=0, double=1) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PartialAffineTransformation</name>
      <anchorfile>classmirtk_1_1PartialAffineTransformation.html</anchorfile>
      <anchor>acb0d64949b6116e0371ab724f1ff132a</anchor>
      <arglist>(HomogeneousTransformation *=NULL, double=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Transformation</name>
      <anchorfile>classmirtk_1_1PartialAffineTransformation.html</anchorfile>
      <anchor>ae4d1c97b78a8f775ba1134711789e1ff</anchor>
      <arglist>(HomogeneousTransformation *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PartialAffineTransformation</name>
      <anchorfile>classmirtk_1_1PartialAffineTransformation.html</anchorfile>
      <anchor>a59f5a669365bc3760c949997a9852ee8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::PartialBSplineFreeFormTransformationSV</name>
    <filename>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</filename>
    <base>mirtk::Transformation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Add</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>ab13aa85df8fe37eef9ad51d8b170e8f5</anchor>
      <arglist>(const DOFValue *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a4a315f8454e1276b75cc21a550f16bde</anchor>
      <arglist>(const class Transformation *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>ae850e18506ecaa5c73ac5f9d5aa61b4c</anchor>
      <arglist>(GenericImage&lt; double &gt; &amp;, double, double=NaN, const WorldCoordsImage *=NULL) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a856286d4bafeb0b19766b7a91f43f43a</anchor>
      <arglist>(GenericImage&lt; float &gt; &amp;, double, double=NaN, const WorldCoordsImage *=NULL) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a26535a8778a34c4886aa118a3edda647</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a4931a72d667e7105499c32c1c916f577</anchor>
      <arglist>(DOFValue *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DOFStatus</type>
      <name>GetStatus</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>af39c8a1a62d64293b95c27db78c66ef3</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GlobalHessian</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a47a9664d82adb92b5496fd4006e35d06</anchor>
      <arglist>(Matrix [3], double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GlobalInverse</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a3336684ce73a8dfd1cc471895b429982</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GlobalJacobian</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a606dccb0c18cf69a2788beba1c309b54</anchor>
      <arglist>(Matrix &amp;, double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GlobalTransform</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a9595ec1010e27b69936849922dceb6c5</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasSameDOFsAs</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>ae4fb8fbd27d41a766e7c0c4ce2fcf473</anchor>
      <arglist>(const class Transformation *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Hessian</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a36c16c4c22fbc43b1f02bf71fc0e2955</anchor>
      <arglist>(Matrix [3], double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Inverse</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>acf831cf7ee2da42128cde3da835d0221</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InverseDisplacement</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a8f690dd8edc319712ca64dede2d3aa6b</anchor>
      <arglist>(GenericImage&lt; double &gt; &amp;, double, double=NaN, const WorldCoordsImage *=NULL) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InverseDisplacement</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>ac27b3d8385d2fa37bc5abe2a5cfbad37</anchor>
      <arglist>(GenericImage&lt; float &gt; &amp;, double, double=NaN, const WorldCoordsImage *=NULL) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIdentity</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a2f172e5e56b3c162d061a69e4825265c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Jacobian</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a64ccc6a4da067d3b79f48c2bfb96a8bc</anchor>
      <arglist>(Matrix &amp;, double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a0f7240f84fa7d52ef0c50788932be09d</anchor>
      <arglist>(double [3], int, double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalHessian</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a9561cebbf69a3bf25911490902c20cef</anchor>
      <arglist>(Matrix [3], double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LocalInverse</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a3e957cd6c5e364d3f8797749e271e96b</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalJacobian</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a7129d235fcfab3781002d2bebbb8d937</anchor>
      <arglist>(Matrix &amp;, double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalTransform</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a85d0700193c3d86dbe8bbf87491a0a6e</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumberOfDOFs</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a3f0c8dd7812c0dbf206d288befa82a41</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a437ab68dbb9467112144ec42e0551ed5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a53bc89cd80e3732d742a984599fa25c1</anchor>
      <arglist>(const GenericImage&lt; double &gt; *, double *, const WorldCoordsImage *, const WorldCoordsImage *, double=NaN, double=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a03a0b2e29cc541f698cee93456574d46</anchor>
      <arglist>(const GenericImage&lt; double &gt; **, int, double *, const WorldCoordsImage *, const WorldCoordsImage *, const double *=NULL, double=1) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PartialBSplineFreeFormTransformationSV</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>acdf86745b62f8ad552729870debbec4d</anchor>
      <arglist>(BSplineFreeFormTransformationSV *=NULL, double=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PartialBSplineFreeFormTransformationSV</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>aa690ea157afc2838379c843fbae6b40e</anchor>
      <arglist>(const PartialBSplineFreeFormTransformationSV &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a160f11563983003a2b7907e3f4c331ff</anchor>
      <arglist>(ostream &amp;, Indent=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>aa3989fbd157b18de105bd4ceb2a2287a</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a6564855df948f2441232b09f65f88b54</anchor>
      <arglist>(const DOFValue *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutStatus</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>aa2a67f6d001ce4536274a5ef98124cf2</anchor>
      <arglist>(int, DOFStatus)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cifstream &amp;</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a37a5b26ef4ba0d1029224753ff483243</anchor>
      <arglist>(Cifstream &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>RequiresCachingOfDisplacements</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a91f38df437de5ddaa4cf06e4ce44ef9d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a43778442f98c3aeef4caac84d9907e98</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Transform</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a1ae204406276bff9f9c3b68fe2fe8f8c</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>ace5c71d162c4e8e3018baa1714c156c1</anchor>
      <arglist>(const DOFValue *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cofstream &amp;</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>ae160ad2f839da0f89fcf98f4e5741ee3</anchor>
      <arglist>(Cofstream &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PartialBSplineFreeFormTransformationSV</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a53b685f79aecdef29971b126dac191a9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::PartialMultiLevelStationaryVelocityTransformation</name>
    <filename>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</filename>
    <base>mirtk::MultiLevelTransformation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Add</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a64653c19cfc7efa8b9873891dbacc35d</anchor>
      <arglist>(const DOFValue *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>CombineLocalTransformation</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a4be23cd7ff409cd6773b7e877d0cdf02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a3d79393ec266498191c3bf57077ee145</anchor>
      <arglist>(const class Transformation *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>abd647748facb78f471c93985a13ef407</anchor>
      <arglist>(int, int, GenericImage&lt; double &gt; &amp;, double, double=1, const WorldCoordsImage *=NULL) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>ac3f936298d15feadd923697453fd2473</anchor>
      <arglist>(int, int, GenericImage&lt; float &gt; &amp;, double, double=1, const WorldCoordsImage *=NULL) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a80377986fce408c4741f75f9101c66ad</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>af7c35a12798e82706004aff1fbada522</anchor>
      <arglist>(DOFValue *) const</arglist>
    </member>
    <member kind="function">
      <type>AffineTransformation *</type>
      <name>GetGlobalTransformation</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a210158961bcc60f1a261bdd8941ba734</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const AffineTransformation *</type>
      <name>GetGlobalTransformation</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a8d2246e6948f38d4f4b04fd7a9dee5b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FreeFormTransformation *</type>
      <name>GetLocalTransformation</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a56690290b1c9e081dfd3a8589f6c929b</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const FreeFormTransformation *</type>
      <name>GetLocalTransformation</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a6921251db059cabf3f834c95ca444e0d</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DOFStatus</type>
      <name>GetStatus</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a87dd887777719ce29105bb7154d0adea</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GlobalInverse</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>ac9c1cf1d794116592cd4175654b676e0</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GlobalTransform</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a7106db4f9fe34b76561786399128c2cf</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasSameDOFsAs</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>aefe778fa2923ea62574c55d8b7ef9d2a</anchor>
      <arglist>(const class Transformation *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InsertLocalTransformation</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a717d56002e6a03b36096e1e08123b94f</anchor>
      <arglist>(FreeFormTransformation *, int=0, bool=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Inverse</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a8cb0741479701007673d45839707ee18</anchor>
      <arglist>(int, int, double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InverseDisplacement</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a48ad64f5724ab1083ddd33a59617ffcc</anchor>
      <arglist>(int, int, GenericImage&lt; double &gt; &amp;, double, double=1, const WorldCoordsImage *=NULL) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InverseDisplacement</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a16b604ce72a9f9bcee1778eb3c23d2f9</anchor>
      <arglist>(int, int, GenericImage&lt; float &gt; &amp;, double, double=1, const WorldCoordsImage *=NULL) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIdentity</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a8120578424a888edf202ab118cc7459a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LocalInverse</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>aa40fcc469b47a569eef41fa562da735a</anchor>
      <arglist>(int, int, double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalTransform</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a95ba9e7b2cdcad5268a88e63e24b70d0</anchor>
      <arglist>(int, int, double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>MergeGlobalIntoLocalDisplacement</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a1f3b67991228945e2ce663747ef7f0ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumberOfDOFs</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>ad24b8eabd8361a4a57349b0f8d3f3f07</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfLevels</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a38661fabc95299e5a947cbcddc732127</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a43f3355b72558a0e22e747871780f878</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a482b943a345ae2b94fbc7c8ce8613f57</anchor>
      <arglist>(const GenericImage&lt; double &gt; *, double *, const WorldCoordsImage *, const WorldCoordsImage *, double=NaN, double=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>ad5df9681823e88156737b8cbfe9639bb</anchor>
      <arglist>(const GenericImage&lt; double &gt; **, int, double *, const WorldCoordsImage *, const WorldCoordsImage *, const double *=NULL, double=1) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PartialMultiLevelStationaryVelocityTransformation</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>ad3c109462afe3e281059a93f3492ada5</anchor>
      <arglist>(MultiLevelStationaryVelocityTransformation *=NULL, double=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PartialMultiLevelStationaryVelocityTransformation</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>ac9da933b6a217911114acdb7c136b4ca</anchor>
      <arglist>(const PartialMultiLevelStationaryVelocityTransformation &amp;)</arglist>
    </member>
    <member kind="function">
      <type>FreeFormTransformation *</type>
      <name>PopLocalTransformation</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a17b02da59224507d85be653f97536e3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a3802eefb6caa21196fbd88a39675ffb9</anchor>
      <arglist>(ostream &amp;, Indent=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PushLocalTransformation</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>ab10826028e977b1e4762deb5742d6c9d</anchor>
      <arglist>(FreeFormTransformation *, bool=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>acbdb4c33d8098e05dbbfc940493f3647</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a376f806f640653f9c492ab8a9fcfd5e6</anchor>
      <arglist>(const DOFValue *)</arglist>
    </member>
    <member kind="function">
      <type>FreeFormTransformation *</type>
      <name>PutLocalTransformation</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a08c22e07b66ff82b6a2e28e8bb20a24f</anchor>
      <arglist>(FreeFormTransformation *, int, bool=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutStatus</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>aba5bdacde8c4458cf2109880e4d3d35d</anchor>
      <arglist>(int, DOFStatus)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cifstream &amp;</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>aa947eefe3b3a444d120240ba966cfae0</anchor>
      <arglist>(Cifstream &amp;)</arglist>
    </member>
    <member kind="function">
      <type>FreeFormTransformation *</type>
      <name>RemoveLocalTransformation</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a62218b14d25854c20b89b12b6ea1d26a</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>RequiresCachingOfDisplacements</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a78f4cf719dc1afc2415a321d20630e61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a81512f9813e1b59d40b9cb42686509c2</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Transform</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a9a5c1d8104e9223ffae2be61073f9d32</anchor>
      <arglist>(int, int, double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a965d69d66947e3d252d77eee64d91356</anchor>
      <arglist>(const DOFValue *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cofstream &amp;</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a6f02cfdfa188345b4e996b9183160be8</anchor>
      <arglist>(Cofstream &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PartialMultiLevelStationaryVelocityTransformation</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a562f87dca37384e3e4995fe5624dd7cd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::PeakSignalToNoiseRatio</name>
    <filename>classmirtk_1_1PeakSignalToNoiseRatio.html</filename>
    <base>mirtk::SumOfSquaredIntensityDifferences</base>
    <member kind="function">
      <type>PeakSignalToNoiseRatio &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1PeakSignalToNoiseRatio.html</anchorfile>
      <anchor>a7f2c352ee21f761069a0aff54a32efe5</anchor>
      <arglist>(const PeakSignalToNoiseRatio &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PeakSignalToNoiseRatio</name>
      <anchorfile>classmirtk_1_1PeakSignalToNoiseRatio.html</anchorfile>
      <anchor>a99f20d48a2e9ee66eaa7eb325f14a86d</anchor>
      <arglist>(const char *=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PeakSignalToNoiseRatio</name>
      <anchorfile>classmirtk_1_1PeakSignalToNoiseRatio.html</anchorfile>
      <anchor>a76adb421fe4c719a61cc917a2149fdb3</anchor>
      <arglist>(const PeakSignalToNoiseRatio &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>RawValue</name>
      <anchorfile>classmirtk_1_1PeakSignalToNoiseRatio.html</anchorfile>
      <anchor>ae9be4e9b19e4432d40e776a03a4ebbf8</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PeakSignalToNoiseRatio</name>
      <anchorfile>classmirtk_1_1PeakSignalToNoiseRatio.html</anchorfile>
      <anchor>a197c2d1e4967209aa611de8eb0dc597c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1PeakSignalToNoiseRatio.html</anchorfile>
      <anchor>ada42e251e8ffac0f0f261de9a48b9489</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::statistic::Percentile</name>
    <filename>classmirtk_1_1data_1_1statistic_1_1Percentile.html</filename>
    <base>mirtk::data::Statistic</base>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1data_1_1statistic_1_1Percentile.html</anchorfile>
      <anchor>ae00f5701185ccd0701e2fe5ce7466e4b</anchor>
      <arglist>(Array&lt; double &gt; &amp;values, int n, const double *data, const bool *mask=nullptr) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::PeronaMalikErrorFunction</name>
    <filename>classmirtk_1_1PeronaMalikErrorFunction.html</filename>
    <base>mirtk::RadialErrorFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Derivative</name>
      <anchorfile>classmirtk_1_1PeronaMalikErrorFunction.html</anchorfile>
      <anchor>a734190aff192a7f48e08fa23dd300bc6</anchor>
      <arglist>(double d) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RadialErrorFunction *</type>
      <name>NewInstance</name>
      <anchorfile>classmirtk_1_1PeronaMalikErrorFunction.html</anchorfile>
      <anchor>a01f0958ff89dbcd0d4fc551c01d129d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1PeronaMalikErrorFunction.html</anchorfile>
      <anchor>a658e906e242e81260a3775121ebcc034</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PeronaMalikErrorFunction</name>
      <anchorfile>classmirtk_1_1PeronaMalikErrorFunction.html</anchorfile>
      <anchor>ade3fba0dc835782a3e582a6c88f8d15f</anchor>
      <arglist>(double threshold=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PeronaMalikErrorFunction</name>
      <anchorfile>classmirtk_1_1PeronaMalikErrorFunction.html</anchorfile>
      <anchor>ac999d699536df8bf9d28f21a832b9b1e</anchor>
      <arglist>(const PeronaMalikErrorFunction &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1PeronaMalikErrorFunction.html</anchorfile>
      <anchor>a170eb354b51997493d9e5d0169b5d9d2</anchor>
      <arglist>(const char *name, const char *value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TypeId</type>
      <name>Type</name>
      <anchorfile>classmirtk_1_1PeronaMalikErrorFunction.html</anchorfile>
      <anchor>ab8bc40b9033eb278af0940b3de94100f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Value</name>
      <anchorfile>classmirtk_1_1PeronaMalikErrorFunction.html</anchorfile>
      <anchor>ac7da46bc20e3596f4eb590c214e93b9f</anchor>
      <arglist>(double d) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PeronaMalikErrorFunction</name>
      <anchorfile>classmirtk_1_1PeronaMalikErrorFunction.html</anchorfile>
      <anchor>a18eac5827c0c16ddc6566f620b051e9e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::PGMImageReader</name>
    <filename>classmirtk_1_1PGMImageReader.html</filename>
    <base>mirtk::ImageReader</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CanRead</name>
      <anchorfile>classmirtk_1_1PGMImageReader.html</anchorfile>
      <anchor>ab60a2e0ea73962de2ed89ea34e388e4e</anchor>
      <arglist>(const char *) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>CheckHeader</name>
      <anchorfile>classmirtk_1_1PGMImageReader.html</anchorfile>
      <anchor>a6acce254991c897ef5ce597fc7cf0e1f</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>ReadHeader</name>
      <anchorfile>classmirtk_1_1PGMImageReader.html</anchorfile>
      <anchor>a4bc31d0001ce2e82aac1655cde336fd8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::PGMImageWriter</name>
    <filename>classmirtk_1_1PGMImageWriter.html</filename>
    <base>mirtk::ImageWriter</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1PGMImageWriter.html</anchorfile>
      <anchor>a6e12c9e6db4e66af215197e1d269f7bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Array&lt; string &gt;</type>
      <name>Extensions</name>
      <anchorfile>classmirtk_1_1PGMImageWriter.html</anchorfile>
      <anchor>a9d812d2fcec7f58989b0e441a45892a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1PGMImageWriter.html</anchorfile>
      <anchor>a08aaaee5aea7cfca9f55403c1e7614e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::PiecewiseLinearMap</name>
    <filename>classmirtk_1_1PiecewiseLinearMap.html</filename>
    <base>mirtk::Mapping</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1PiecewiseLinearMap.html</anchorfile>
      <anchor>a167e8c0eff7422a8229ea6cb4b2484da</anchor>
      <arglist>(double &amp;x1, double &amp;y1, double &amp;z1, double &amp;x2, double &amp;y2, double &amp;z2) const</arglist>
    </member>
    <member kind="function">
      <type>vtkSmartPointer&lt; vtkDataSet &gt;</type>
      <name>Codomain</name>
      <anchorfile>classmirtk_1_1PiecewiseLinearMap.html</anchorfile>
      <anchor>a90852f6cf7d50904049ec2e82ba49698</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1PiecewiseLinearMap.html</anchorfile>
      <anchor>acaff6f61eaa5b3208607b7cf734dda01</anchor>
      <arglist>(double *v, double x, double y, double z=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1PiecewiseLinearMap.html</anchorfile>
      <anchor>a5f39f88f964f80a5dfd3a9ed2a9164db</anchor>
      <arglist>(double x, double y, double z=0, int l=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetPoint</name>
      <anchorfile>classmirtk_1_1PiecewiseLinearMap.html</anchorfile>
      <anchor>ae497f54f23ee61619678aa5e646d6e38</anchor>
      <arglist>(int i, double &amp;x, double &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetPoint</name>
      <anchorfile>classmirtk_1_1PiecewiseLinearMap.html</anchorfile>
      <anchor>a7d58bd7211f2b00bbeee2c17bc08e9bc</anchor>
      <arglist>(int i, double &amp;x, double &amp;y, double &amp;z) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetPoint</name>
      <anchorfile>classmirtk_1_1PiecewiseLinearMap.html</anchorfile>
      <anchor>ab2c2c0ac33dfe8eae6e3bda48c8afea2</anchor>
      <arglist>(int i, double p[3]) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetValue</name>
      <anchorfile>classmirtk_1_1PiecewiseLinearMap.html</anchorfile>
      <anchor>afcc9019af538e3cc8a3a755a37732105</anchor>
      <arglist>(int i, double *v) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1PiecewiseLinearMap.html</anchorfile>
      <anchor>a501e03f20f836dc9d7f105884415b167</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Mapping *</type>
      <name>NewCopy</name>
      <anchorfile>classmirtk_1_1PiecewiseLinearMap.html</anchorfile>
      <anchor>acd65c69364ea73fa8729232303d7d34b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumberOfComponents</name>
      <anchorfile>classmirtk_1_1PiecewiseLinearMap.html</anchorfile>
      <anchor>a4633bd8fa62fb762d0825a131fdd60f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfPoints</name>
      <anchorfile>classmirtk_1_1PiecewiseLinearMap.html</anchorfile>
      <anchor>a6f1afc94caa8a195032af35749d8350e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PiecewiseLinearMap &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1PiecewiseLinearMap.html</anchorfile>
      <anchor>afeb29a665d734dbd39052fac01ae4c85</anchor>
      <arglist>(const PiecewiseLinearMap &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PiecewiseLinearMap</name>
      <anchorfile>classmirtk_1_1PiecewiseLinearMap.html</anchorfile>
      <anchor>ad49aa0453457866cd76807ad5da4393e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PiecewiseLinearMap</name>
      <anchorfile>classmirtk_1_1PiecewiseLinearMap.html</anchorfile>
      <anchor>a597e34bb8afca7954b576403c44d34e0</anchor>
      <arglist>(const PiecewiseLinearMap &amp;)</arglist>
    </member>
    <member kind="function">
      <type>class Point</type>
      <name>Point</name>
      <anchorfile>classmirtk_1_1PiecewiseLinearMap.html</anchorfile>
      <anchor>a7b7f81e64f967344a5ea9954ca66f97b</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1PiecewiseLinearMap.html</anchorfile>
      <anchor>ad51cd188674c2cd4b47e51d9ebf1ec43</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Value</name>
      <anchorfile>classmirtk_1_1PiecewiseLinearMap.html</anchorfile>
      <anchor>adb8913cb4aa8da172ee67a7fdaefdd41</anchor>
      <arglist>(int i, int l=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1PiecewiseLinearMap.html</anchorfile>
      <anchor>ab763fc0817b5295727692b22bc5942a1</anchor>
      <arglist>(const char *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PiecewiseLinearMap</name>
      <anchorfile>classmirtk_1_1PiecewiseLinearMap.html</anchorfile>
      <anchor>a870e9625b822524f558657073388cd61</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::Plane</name>
    <filename>classmirtk_1_1Plane.html</filename>
    <base>mirtk::Object</base>
    <member kind="function">
      <type>double</type>
      <name>Distance</name>
      <anchorfile>classmirtk_1_1Plane.html</anchorfile>
      <anchor>aef9b3a7c1998cea7f946ec5beab086f7</anchor>
      <arglist>(const Point &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Distance</name>
      <anchorfile>classmirtk_1_1Plane.html</anchorfile>
      <anchor>a0cafa7924ba55af7fed372fb6f2689bb</anchor>
      <arglist>(const double p[3]) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Distance</name>
      <anchorfile>classmirtk_1_1Plane.html</anchorfile>
      <anchor>acfd17ac96f93db3a66432859eb2f91b3</anchor>
      <arglist>(double x, double y, double z) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1Plane.html</anchorfile>
      <anchor>a1897253e965addccc1209a8c1f43bdc5</anchor>
      <arglist>(const Point &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1Plane.html</anchorfile>
      <anchor>af1ccfe8c332a1bc726425aabe743280d</anchor>
      <arglist>(const double p[3]) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1Plane.html</anchorfile>
      <anchor>a98b6c36fcbd88ad8eb377abafde92d0d</anchor>
      <arglist>(double x, double y, double z) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Fit</name>
      <anchorfile>classmirtk_1_1Plane.html</anchorfile>
      <anchor>a6beffc3d1b0bd8f86b7088cf1e660323</anchor>
      <arglist>(const PointSet &amp;points)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Normal</name>
      <anchorfile>classmirtk_1_1Plane.html</anchorfile>
      <anchor>a492a709d19137d124f1cfae44c5f1375</anchor>
      <arglist>(const Vector3 &amp;n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Normal</name>
      <anchorfile>classmirtk_1_1Plane.html</anchorfile>
      <anchor>a196ceff7ff5457b8108c95f21c10f33d</anchor>
      <arglist>(double n[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Normal</name>
      <anchorfile>classmirtk_1_1Plane.html</anchorfile>
      <anchor>a7b54d079eca45fe15aaafdd15a24620f</anchor>
      <arglist>(double nx, double ny, double nz)</arglist>
    </member>
    <member kind="function">
      <type>Plane &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1Plane.html</anchorfile>
      <anchor>a39362ff65cbc8004bba5e9eb8ab67edd</anchor>
      <arglist>(const Plane &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Plane</name>
      <anchorfile>classmirtk_1_1Plane.html</anchorfile>
      <anchor>ac25f07a2566d2608a65327a74a9c7652</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Plane</name>
      <anchorfile>classmirtk_1_1Plane.html</anchorfile>
      <anchor>a556d9668165b19cd234213871bb3b273</anchor>
      <arglist>(const Vector3 &amp;n, double b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Plane</name>
      <anchorfile>classmirtk_1_1Plane.html</anchorfile>
      <anchor>acd3e1079f38bca6949c37607aa5241ba</anchor>
      <arglist>(double n[3], double b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Plane</name>
      <anchorfile>classmirtk_1_1Plane.html</anchorfile>
      <anchor>ab808c72bf5ef02a8487c87ea5548c41e</anchor>
      <arglist>(double nx, double ny, double nz, double b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Plane</name>
      <anchorfile>classmirtk_1_1Plane.html</anchorfile>
      <anchor>a883e29ad91e32c2d831fc75293423b19</anchor>
      <arglist>(const Plane &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1Plane.html</anchorfile>
      <anchor>a7471a7743dc95bf2e0db0e5e4a48e296</anchor>
      <arglist>(ostream &amp;os, Indent=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1Plane.html</anchorfile>
      <anchor>a004707438f80d30589f04a6828c58a39</anchor>
      <arglist>(Indent=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Project</name>
      <anchorfile>classmirtk_1_1Plane.html</anchorfile>
      <anchor>a1b57c60edcc9c326371cf828063656d3</anchor>
      <arglist>(const Point &amp;p, double &amp;u, double &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Project</name>
      <anchorfile>classmirtk_1_1Plane.html</anchorfile>
      <anchor>a3c5e47952c7d84a2c3376e81c0b54ab9</anchor>
      <arglist>(const double p[3], double &amp;u, double &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Project</name>
      <anchorfile>classmirtk_1_1Plane.html</anchorfile>
      <anchor>a0061deb66c6188d46dca68ed30607156</anchor>
      <arglist>(double x, double y, double z, double &amp;u, double &amp;v) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Plane</name>
      <anchorfile>classmirtk_1_1Plane.html</anchorfile>
      <anchor>a74e26ee34f35dda20903afd5e3aff2ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UpdateOrigin</name>
      <anchorfile>classmirtk_1_1Plane.html</anchorfile>
      <anchor>a0ce0704f0472c8b76e16797882b485fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UpdateTangents</name>
      <anchorfile>classmirtk_1_1Plane.html</anchorfile>
      <anchor>ad0cd10d3fa0cc313a958bc0fdcfffa65</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::PNGImageWriter</name>
    <filename>classmirtk_1_1PNGImageWriter.html</filename>
    <base>mirtk::ImageWriter</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1PNGImageWriter.html</anchorfile>
      <anchor>a0a027e7642f26901a006205bb7735ec7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Array&lt; string &gt;</type>
      <name>Extensions</name>
      <anchorfile>classmirtk_1_1PNGImageWriter.html</anchorfile>
      <anchor>a1a23194207ec5d826cd77f31b7a20e4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1PNGImageWriter.html</anchorfile>
      <anchor>afb718b841395a9d3e05ebcacb828c30c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::Point</name>
    <filename>classmirtk_1_1Point.html</filename>
    <member kind="function">
      <type>double</type>
      <name>Distance</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>a3af5c252ff3e0d3519171c5e160ca4ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Distance</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>a6204eaf973d3a2ddd8677012b0d07a49</anchor>
      <arglist>(const Point &amp;) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const double *</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>ac89418234ad82ee306daeae94a1c1787</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator double *</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>a5322ce5128ee82f29035869a39ef488f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>aa57fe2e6c934a8dc07e98b43d1eedce7</anchor>
      <arglist>(const Point &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>ab6d50f5402cfaac8f425edd051d263d3</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>a25a77cb83d22f485bad68f2a105fd0ef</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>a9cb101a6efc20ac5cb85daff6f525d52</anchor>
      <arglist>(const Point &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>a299dd7b0c22209e70cfb3c1dc5e2ee88</anchor>
      <arglist>(const Matrix &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Point &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>a5f8668fbc7d7860fea2a955871859e9a</anchor>
      <arglist>(const Point &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Point &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>a8b020c7a8babe01fd50e664f4308cacc</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>Point &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>af7a12a2436c5bb941d7cad7a4b04f7b8</anchor>
      <arglist>(const Vector3 &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Point &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>a26054013c9590a308a06453b21dca430</anchor>
      <arglist>(const Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Point &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>ac92168e12f3bc7c3ebe400cc1c777335</anchor>
      <arglist>(const Matrix &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>a99ec96bd755ad2331bc164ad9c9081de</anchor>
      <arglist>(const Point &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Point &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>a96a8bb1bad6648bed5e5974cb956e730</anchor>
      <arglist>(const Point &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Point &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>a834440ac66b2993079c5f8107f230350</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>Point &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>a7186b254e48cdde0a3f30eb96460d63b</anchor>
      <arglist>(const Vector3 &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Point &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>aea0d1653f9708d5ea913cd2ccfbf9281</anchor>
      <arglist>(const Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>a0f290ef5d5d0d5fce1d2d9aabd29d4ea</anchor>
      <arglist>(const Point &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Point &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>a04fdf0520bedf8a428025e84ea4a01a3</anchor>
      <arglist>(const Point &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Point &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>acbcfe3823f48689384e7331f60297f70</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>Point &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>a853a3c507185d0c4d3e019756d190a78</anchor>
      <arglist>(const Vector3 &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Point &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>a480fc60c48b450242e6a6e49b6fb2035</anchor>
      <arglist>(const Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>a9f15a86edf686a981e096c020a39b542</anchor>
      <arglist>(const Point &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Point &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>ac74248ee429de5548a892eb5577e7f41</anchor>
      <arglist>(const Point &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Point &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>ad1f5812b7102c5e6e6bf1b0a50cf2123</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>Point &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>ad817e4fcd0b705c8aad5fe1bbe147edb</anchor>
      <arglist>(const Vector3 &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Point &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>a241593c1ba2ef96c68ffaf069225e9c1</anchor>
      <arglist>(const Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>af1a7f06963864fa92fa29651830c832c</anchor>
      <arglist>(const Point &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Point &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>ac535e4f61e74da02a2e0090d65dd9110</anchor>
      <arglist>(const Point &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Point &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>a48b78e1a7e79f79be6ca3574d81e12ee</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>Point &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>ada9957a75a0089539dfa03d50eb22925</anchor>
      <arglist>(const Vector3 &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Point &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>a71edfad3c3a883b0a497988d11059a75</anchor>
      <arglist>(const Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>ab7f8aa4a6480ddb209bb430ef51e6fa2</anchor>
      <arglist>(const Point &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>a95ac89b970960fbe8f28c79dadafbb7a</anchor>
      <arglist>(const Point &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>a03f157abf6e49a3d7446fa70d982807f</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>a52ad70477a0ab3febeae92e12632ee4d</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>a7beccea412f44437b0e3e80c7c3db58d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>abac286d92657f4b2b9124b1d1a386539</anchor>
      <arglist>(double, double, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>aaec5b506af0291021b1252dc7b3dc3b2</anchor>
      <arglist>(const double [3])</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>af463e49f23a1d94a5e1d54d9dae91777</anchor>
      <arglist>(const Point &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>a95d41e08c159c5e113d668b8e646ac52</anchor>
      <arglist>(const Vector3 &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>a4fb6ff6f545158c01856d0d12ce60405</anchor>
      <arglist>(const Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SquaredDistance</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>ae645f343ac5e0dbbaafdda26dc6d28e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SquaredDistance</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>af63aa9e5c4f92520b6368e0030435f29</anchor>
      <arglist>(const Point &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Point</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>a1db495d5ac273b1ff2907432e1d42321</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_x</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>abbec5091fde53c7456dd4ab7b661f7c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_y</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>abc4e09fdfc4a10bb06030967e1d4f293</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_z</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>acdd777bac348760a6c3d66b64bf1b777</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::PointCorrespondence</name>
    <filename>classmirtk_1_1PointCorrespondence.html</filename>
    <base>mirtk::Observable</base>
    <member kind="enumvalue">
      <name>ClosestCell</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a395d3a470b911e2432a5ad75f0bd0474ab37a6b65179543fc2e6bd307e4004d07</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ClosestPoint</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a395d3a470b911e2432a5ad75f0bd0474a25e32b9e68e9197611a20740d8cebed5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ClosestPointLabel</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a395d3a470b911e2432a5ad75f0bd0474a5c8b4ef0cb3aca8af17728b503b2baf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Direction</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>afb7156341fb06e67b0f1e1698dc32308</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PointLocator::FeatureInfo</type>
      <name>FeatureInfo</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a61ba7b60a045465f467aff311bf7f405</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PointLocator::FeatureList</type>
      <name>FeatureList</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a0eaec4c367495549f8511732a988b5ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FiducialMatch</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a395d3a470b911e2432a5ad75f0bd0474a9567e3bfae427f887bb9a063350b49b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RobustClosestPoint</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a395d3a470b911e2432a5ad75f0bd0474aa0265f4046c4b43ea734712ee843de42</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RobustPointMatch</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a395d3a470b911e2432a5ad75f0bd0474a9fa78903ca2a55d8ed35a8f9f015e4f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SpectralMatch</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a395d3a470b911e2432a5ad75f0bd0474ac7d506bd6141cad69f75ad3151762303</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TypeId</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a395d3a470b911e2432a5ad75f0bd0474</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Unknown</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a395d3a470b911e2432a5ad75f0bd0474ade15c7f969acbdd4b4dda19d4d2bd274</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FiducialMatch</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a395d3a470b911e2432a5ad75f0bd0474a9567e3bfae427f887bb9a063350b49b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ClosestPoint</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a395d3a470b911e2432a5ad75f0bd0474a25e32b9e68e9197611a20740d8cebed5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ClosestPointLabel</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a395d3a470b911e2432a5ad75f0bd0474a5c8b4ef0cb3aca8af17728b503b2baf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ClosestCell</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a395d3a470b911e2432a5ad75f0bd0474ab37a6b65179543fc2e6bd307e4004d07</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SpectralMatch</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a395d3a470b911e2432a5ad75f0bd0474ac7d506bd6141cad69f75ad3151762303</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RobustClosestPoint</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a395d3a470b911e2432a5ad75f0bd0474aa0265f4046c4b43ea734712ee843de42</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RobustPointMatch</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a395d3a470b911e2432a5ad75f0bd0474a9fa78903ca2a55d8ed35a8f9f015e4f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Unknown</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a395d3a470b911e2432a5ad75f0bd0474ade15c7f969acbdd4b4dda19d4d2bd274</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AddFeature</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>aee3e0d7f098408fdfac1bbf8a1433c96</anchor>
      <arglist>(const char *name, double weight=1.0, double slope=1.0, double intercept=.0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetIndex</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>aebdeedc70ecc6727ccd4b728d6233837</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetInputPoint</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a466565a5a5844cbdb6115f1607c6f224</anchor>
      <arglist>(int, Point &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>GetInputSourcePoint</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a5a3e426d37b4d675fe9e473d0f64db9b</anchor>
      <arglist>(int, Point &amp;) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>GetInputTargetPoint</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a0cee1cfde66245e33058c1269f2e393d</anchor>
      <arglist>(int, Point &amp;) const =0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetPoint</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a7960dac684667a6a7b0384a181da46a6</anchor>
      <arglist>(int, Point &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetSourceIndex</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>af13ea5332cfc0152a55dc55f81f2e646</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>GetSourcePoint</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a42887ced4ce8803fef0d75a7dbab5416</anchor>
      <arglist>(int, Point &amp;) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetTargetIndex</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>acb815dff20798fbddf6c7fefd68bca3b</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>GetTargetPoint</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>aa11e32b4db746fe6299bb81574ab577c</anchor>
      <arglist>(int, Point &amp;) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a2a2b1f108b3e11182b11ffc67b42c694</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PointCorrespondence *</type>
      <name>NewInstance</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a9a9ba2d366fb9602f7f263322a65d665</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>af0dfb57df8be79cf66151f652e941251</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Reinitialize</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>af6069f07863bfb2e93b136f002ba9742</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveFeature</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a6aef292d37059a926b89cd92a1e2bf4e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>aafc233d7021c33e8f868e06b6da985ea</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TypeId</type>
      <name>Type</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>ab79746b7e6dd806ea612b0fd51deec44</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>aa6abd95f25fcd3a2e90403f7a3d82078</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Upgrade</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a7fd8285e5664ae554efce234f26f4377</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteDataSets</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a2cb52e3d2e594d7e96d79e3928648a81</anchor>
      <arglist>(const char *, const char *, bool=true) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteSpectralPoints</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a3cc74cc55541463fbec49b427ea58737</anchor>
      <arglist>(const char *, vtkPointSet *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PointCorrespondence</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>aebaeab48f3848d19ba720abb27a65961</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>Distance2BetweenPoints</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a62fa89608d1095e3d9d3e92f0608f33d</anchor>
      <arglist>(const double *a, const double *b, int d=3)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>GetNumberOfPoints</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a540864dfd643a3509a4e4711ed58df23</anchor>
      <arglist>(vtkPointSet *dataset, const Array&lt; int &gt; *sample=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>GetNumberOfPoints</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a8c06e10554be49bac0b36415f706b7a0</anchor>
      <arglist>(const RegisteredPointSet *dataset, const Array&lt; int &gt; *sample=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GetPoint</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>af519dedef6501e0256526b01b4131e72</anchor>
      <arglist>(Point &amp;point, vtkPointSet *dataset, const Array&lt; int &gt; *sample, int index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GetPoint</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a5429c1497f98db84db7559daa239f474</anchor>
      <arglist>(Point &amp;point, const RegisteredPointSet *dataset, const Array&lt; int &gt; *sample, int index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GetPoint</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>aebfcd39706aca9318d024bbca9641147</anchor>
      <arglist>(double *point, vtkPointSet *dataset, const Array&lt; int &gt; *sample, int index, const FeatureList *feature=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GetPoint</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a9e07c36b92c6925990b6818a1506208c</anchor>
      <arglist>(double *point, const RegisteredPointSet *dataset, const Array&lt; int &gt; *sample, int index, const FeatureList *feature=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>GetPointDataIndexByCaseInsensitiveName</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>acae7020459530ebc49c1c73eaefd435c</anchor>
      <arglist>(vtkPointData *, const string &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>GetPointDimension</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>aacb01952f480c79d2de8152820a17c24</anchor>
      <arglist>(vtkPointSet *dataset, const FeatureList *feature)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>GetPointDimension</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a0bab2652554ce6f41aaac501a4b4f7c6</anchor>
      <arglist>(const RegisteredPointSet *dataset, const FeatureList *feature)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>GetPointIndex</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>af986f52b78e87bb87acb2ff387956cb1</anchor>
      <arglist>(vtkPointSet *dataset, const Array&lt; int &gt; *sample, int index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>GetPointIndex</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a3ad30284407ab15eb7159b01be2d9cff</anchor>
      <arglist>(const RegisteredPointSet *dataset, const Array&lt; int &gt; *sample, int index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static vtkSmartPointer&lt; vtkPoints &gt;</type>
      <name>GetPoints</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>ab17653ad2ca5376b878c277accbaed26</anchor>
      <arglist>(vtkPointSet *dataset, const Array&lt; int &gt; *sample)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static vtkSmartPointer&lt; vtkPoints &gt;</type>
      <name>GetPoints</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>ab490cb025f92e4e7479aa8b968b241ea</anchor>
      <arglist>(const RegisteredPointSet *dataset, const Array&lt; int &gt; *sample)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static vtkSmartPointer&lt; vtkPointSet &gt;</type>
      <name>GetPointSet</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a5b0a3d05c3bf301eac41bf2e327e1396</anchor>
      <arglist>(vtkPointSet *dataset, const Array&lt; int &gt; *sample)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static vtkSmartPointer&lt; vtkPointSet &gt;</type>
      <name>GetPointSet</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a47f17c42c91a74d3427454d01924c058</anchor>
      <arglist>(const RegisteredPointSet *dataset, const Array&lt; int &gt; *sample)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PointCorrespondence *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a0c5400cc70383e493b1347d0cacf2015</anchor>
      <arglist>(TypeId)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PointCorrespondence *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a3571977cf26619973e0af2cfc9110cb0</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CompleteFeatureInfo</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>ac6622ff396866aeadffcbf209a21cc8c</anchor>
      <arglist>(const RegisteredPointSet *, FeatureList &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Init</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a0b475028ac31b65dcd074865717727c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a4104620ac58ec77fde55951b087b15b0</anchor>
      <arglist>(int, M)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>af0b5bf7c9f0c45b492a6c3907c287fb6</anchor>
      <arglist>(int, N)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>ae6b9658a8a863a4b0fcf16d29c5450a4</anchor>
      <arglist>(Vector, TargetEigenvalues)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a132378476f199863e55decc692c8ff49</anchor>
      <arglist>(Vector, SourceEigenvalues)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>aad6607033824500a330906af558949b6</anchor>
      <arglist>(const RegisteredPointSet, Target)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a6629b8027ea0456dc3299ea87840dfc6</anchor>
      <arglist>(const Array&lt; int &gt;, TargetSample)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a5f2bd348263c6ed89a274b1c2730be54</anchor>
      <arglist>(const RegisteredPointSet, Source)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a3c04a03be3a5362bc7e4cc54a3682542</anchor>
      <arglist>(const Array&lt; int &gt;, SourceSample)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a6f797d132850a8597c9482ff05e2494d</anchor>
      <arglist>(FeatureList, TargetFeatures)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>acdd3d027dfbfcf7b0084a58c23969608</anchor>
      <arglist>(FeatureList, SourceFeatures)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a27c0edf8cefc3bba94f798098404a84e</anchor>
      <arglist>(int, DimensionOfSpectralPoints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>ae501b172ca8b6eb64ae683a5a96db658</anchor>
      <arglist>(bool, DiffeomorphicSpectralDecomposition)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a6986815802c5c8b4b5c18fe4add4a255</anchor>
      <arglist>(bool, UpdateSpectralPoints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a98486699f38a7def6c33b0619d2ce8c6</anchor>
      <arglist>(bool, FromTargetToSource)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>abc10692b127b3bb6222f5f08cffba3f6</anchor>
      <arglist>(bool, FromSourceToTarget)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>aaaf8d80550ccd436241ea382d83b2d96</anchor>
      <arglist>(Direction, DefaultDirection)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>ae4f8435f568587bad50f33720db78fff</anchor>
      <arglist>(int, NumberOfFeatures)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PointCorrespondence</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a63b5d58fbcca99be402419ff2bc5b284</anchor>
      <arglist>(const RegisteredPointSet *=NULL, const RegisteredPointSet *=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PointCorrespondence</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a53e1e862491af4bf44fcf42e0817aad4</anchor>
      <arglist>(const PointCorrespondence &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::PointCorrespondenceDistance</name>
    <filename>classmirtk_1_1PointCorrespondenceDistance.html</filename>
    <base>mirtk::PointSetDistance</base>
    <member kind="function">
      <type>bool</type>
      <name>DoEvaluateSourceError</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>abef1b8f2501e940e07b85a5257b7e2c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DoEvaluateTargetError</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>a5790a66f41dc2d8405307a7a17a44acf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>a17f3ea2e21385ac2164390c1c3f0ee3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PointCorrespondenceDistance &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>a43acafcfaf25704ff75adf40db19097f</anchor>
      <arglist>(const PointCorrespondenceDistance &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>a8b010d60233dda95702f43012e3f2d1f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointCorrespondenceDistance</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>a03083447905c9b5df81d3ec86bee33db</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointCorrespondenceDistance</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>a0028b8d7455603092adecdf0a77494b7</anchor>
      <arglist>(const PointCorrespondenceDistance &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Reinitialize</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>a55a742289c674140c065746c6da30000</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>a45d70e5334acc0af217fd1fcbf1c553b</anchor>
      <arglist>(bool=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Upgrade</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>a3d2f103d2a0159df8060517203d50e0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteDataSets</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>af6fa3eae3ffcf278a67a409b6192a544</anchor>
      <arglist>(const char *, const char *, bool=true) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteGradient</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>a2ea5927afcf927c09ea131e936c6a856</anchor>
      <arglist>(const char *, const char *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PointCorrespondenceDistance</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>a082513bcd9f83b581f420a75b5ca1d38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>aa637abc18c69e0e4b78b61ac6189945f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>a1e1c8792a3f4e77fffe9b6a63b4628e7</anchor>
      <arglist>(double *gradient, double step, double weight)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ForwardEvent</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>a5e2cca25c7fdf4573e34d66fd5bce31d</anchor>
      <arglist>(Observable *, Event, const void *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>aa4e435eaa212bf56aed4eea331150afd</anchor>
      <arglist>(Array&lt; int &gt;, TargetSample)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>af2a88f8c3695a697aa4d93f9ebb2571f</anchor>
      <arglist>(Array&lt; int &gt;, SourceSample)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>aacc0b927699ee427f60df06b386464f2</anchor>
      <arglist>(int, NumberOfUpdates)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkComponentMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>ae1289b9fd1fb679664b235703833a431</anchor>
      <arglist>(PointCorrespondence, Correspondence)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkComponentMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>aebdd3375122a64a91d26cee3d178e318</anchor>
      <arglist>(RadialErrorFunction, ErrorFunction)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>a0e22ae936c4001aed63a2d73a506f14d</anchor>
      <arglist>(double, TargetSampleDistance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>a27cb2405ca26dfb38808b4df1f9ffbbb</anchor>
      <arglist>(double, SourceSampleDistance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>a7c0d27087763041cdae3c7a6a3190bab</anchor>
      <arglist>(int, NumberOfTargetSamples)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>a7d3976887b43fb7c92c27a0d1577060b</anchor>
      <arglist>(int, NumberOfSourceSamples)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>a92d319e3648939d9fe2c9720e400b2ac</anchor>
      <arglist>(int, UpdatePeriod)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>a47669765c201ebbee3325a32ab0c30c8</anchor>
      <arglist>(bool, EvaluateTargetError)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>a5c4a400bd55b767140b67bbe082e34fa</anchor>
      <arglist>(bool, EvaluateSourceError)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>NonParametricGradient</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>a9589cd848ca3231bd06b6dedc6457246</anchor>
      <arglist>(const RegisteredPointSet *source, GradientType *gradient)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>adc1f063e4224d57e34d4348459830b17</anchor>
      <arglist>(const RegisteredPointSet *source, const GradientType *np_gradient, double *gradient, double weight)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PointCorrespondenceDistance</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>aa45c9227d23748fb1f94bfa4ef98b998</anchor>
      <arglist>(const char *, double, PointCorrespondence *, RadialErrorFunction *=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SamplePoints</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>afe4511b870eb96184f676352f75ff6af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithoutPrefix</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>a7a1a6ed6f12d354bef1d3e5d4a98f701</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteDataSet</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>a906c90dfa2f255f7fe7c069395da9e2c</anchor>
      <arglist>(const char *, const RegisteredPointSet *, const Array&lt; int &gt; &amp;, const PointCorrespondence *) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EventDelegate</type>
      <name>_EventDelegate</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>a20710e5774b26cf707488aae6885ae4d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::PointDataFilter</name>
    <filename>classmirtk_1_1PointDataFilter.html</filename>
    <base>mirtk::MeshFilter</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1PointDataFilter.html</anchorfile>
      <anchor>ae17bf7f2aece740aeac12db31af38785</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PointDataFilter &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1PointDataFilter.html</anchorfile>
      <anchor>aa865ba953be7aec8ac7476a61141d431</anchor>
      <arglist>(const PointDataFilter &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PointDataFilter</name>
      <anchorfile>classmirtk_1_1PointDataFilter.html</anchorfile>
      <anchor>a94a4dc0b4afada0373bf8599eb53fd42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PointDataFilter</name>
      <anchorfile>classmirtk_1_1PointDataFilter.html</anchorfile>
      <anchor>a1a19f9d49cc2c889c8ac608a68a007e6</anchor>
      <arglist>(const PointDataFilter &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PointDataFilter</name>
      <anchorfile>classmirtk_1_1PointDataFilter.html</anchorfile>
      <anchor>a85dd5717cb91e98551e92772ceaf5866</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::PointLocator</name>
    <filename>classmirtk_1_1PointLocator.html</filename>
    <base>mirtk::Object</base>
    <class kind="struct">mirtk::PointLocator::FeatureInfo</class>
    <member kind="typedef">
      <type>Array&lt; FeatureInfo &gt;</type>
      <name>FeatureList</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a223bc2b679c824e8e74a4be5511842a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>FindClosestNPoints</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>aac4422bf71bf00fa65135377a750766f</anchor>
      <arglist>(int k, double *point, Array&lt; double &gt; *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>FindClosestNPoints</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a5cc6810978d3bdb4fa91133c0bf4406b</anchor>
      <arglist>(int k, vtkPointSet *dataset, const Array&lt; int &gt; *sample, int index, const FeatureList *features, Array&lt; double &gt; *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>FindClosestNPoints</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a98d4104a9a66ffca238644c36e309f1f</anchor>
      <arglist>(int k, vtkPointSet *dataset, const Array&lt; int &gt; *sample, int index, Array&lt; double &gt; *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>FindClosestNPoints</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>aeb3e3b361a1a8f8cf77fb04156585b8b</anchor>
      <arglist>(int k, vtkPointSet *dataset, int index, const FeatureList *features, Array&lt; double &gt; *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>FindClosestNPoints</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>af77e556807eae7e97a974730fffb6ee0</anchor>
      <arglist>(int k, vtkPointSet *dataset, int index, Array&lt; double &gt; *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; Array&lt; int &gt; &gt;</type>
      <name>FindClosestNPoints</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a6db98773ac0a0c4611cef5efddc0a86c</anchor>
      <arglist>(int k, vtkPointSet *dataset, const Array&lt; int &gt; *sample, const FeatureList *features, Array&lt; Array&lt; double &gt; &gt; *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; Array&lt; int &gt; &gt;</type>
      <name>FindClosestNPoints</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a87484ae58426bfbf383410c2ec6a744e</anchor>
      <arglist>(int k, vtkPointSet *dataset, const Array&lt; int &gt; *sample, Array&lt; Array&lt; double &gt; &gt; *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; Array&lt; int &gt; &gt;</type>
      <name>FindClosestNPoints</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a67c79b754ba371ee8ed74bb9b309c92d</anchor>
      <arglist>(int k, vtkPointSet *dataset, const FeatureList *features, Array&lt; Array&lt; double &gt; &gt; *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; Array&lt; int &gt; &gt;</type>
      <name>FindClosestNPoints</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a6868f9113f906ff8fbc6d3ef797622d4</anchor>
      <arglist>(int k, vtkPointSet *dataset, Array&lt; Array&lt; double &gt; &gt; *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>FindClosestPoint</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>aa59af4402463080f30d11d09b5430ddb</anchor>
      <arglist>(double *point, double *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>FindClosestPoint</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>ab953f81b32a4aef5f6b1e26a527ad3e4</anchor>
      <arglist>(vtkPointSet *dataset, const Array&lt; int &gt; *sample, int index, const FeatureList *features, double *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>FindClosestPoint</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a6a4527788b9d6c2aa99b403e7f306c79</anchor>
      <arglist>(vtkPointSet *dataset, int index, const FeatureList *features, double *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>FindClosestPoint</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a5801f00855d7db4dd55dabf6194836ec</anchor>
      <arglist>(vtkPointSet *dataset, const Array&lt; int &gt; *sample, int index, double *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>FindClosestPoint</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a71263b5c8df684810a0851b1c0195b4b</anchor>
      <arglist>(vtkPointSet *dataset, int index, double *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>FindClosestPoint</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>abeba3f9b00276733f645a65af938ff1e</anchor>
      <arglist>(vtkPointSet *dataset, const Array&lt; int &gt; *sample, const FeatureList *features, Array&lt; double &gt; *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>FindClosestPoint</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>aa4a62e8914d0f897509cdb9474b67043</anchor>
      <arglist>(vtkPointSet *dataset, const FeatureList *features, Array&lt; double &gt; *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>FindClosestPoint</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a0e2e4a8f6b291330763c8ca1656f4fab</anchor>
      <arglist>(vtkPointSet *dataset, const Array&lt; int &gt; *sample, Array&lt; double &gt; *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>FindClosestPoint</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a225b192018f65ca1c49cbd150aca90db</anchor>
      <arglist>(vtkPointSet *dataset, Array&lt; double &gt; *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>FindPointsWithinRadius</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a4e7f2bf7ef97ef302a283e860957340b</anchor>
      <arglist>(double radius, double *point, Array&lt; double &gt; *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>FindPointsWithinRadius</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>abe088743fe4b42e6805794da5bf38b29</anchor>
      <arglist>(double radius, vtkPointSet *dataset, const Array&lt; int &gt; *sample, int index, const FeatureList *features, Array&lt; double &gt; *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>FindPointsWithinRadius</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a3ff1f8f4564010f6e84c406f3ccbfba4</anchor>
      <arglist>(double radius, vtkPointSet *dataset, const Array&lt; int &gt; *sample, int index, Array&lt; double &gt; *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>FindPointsWithinRadius</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a6bd2c30e628b36104e5a148852d47af3</anchor>
      <arglist>(double radius, vtkPointSet *dataset, int index, const FeatureList *features, Array&lt; double &gt; *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>FindPointsWithinRadius</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>aa62f8e7ddd9bb3568c907012c8700de4</anchor>
      <arglist>(double radius, vtkPointSet *dataset, int index, Array&lt; double &gt; *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; Array&lt; int &gt; &gt;</type>
      <name>FindPointsWithinRadius</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>af77b0b33c60ba22c5f7471f04d9c7b0b</anchor>
      <arglist>(double radius, vtkPointSet *dataset, const Array&lt; int &gt; *sample, const FeatureList *features, Array&lt; Array&lt; double &gt; &gt; *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; Array&lt; int &gt; &gt;</type>
      <name>FindPointsWithinRadius</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a5038db85ec476d83986feea97034dea2</anchor>
      <arglist>(double radius, vtkPointSet *dataset, const Array&lt; int &gt; *sample, Array&lt; Array&lt; double &gt; &gt; *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; Array&lt; int &gt; &gt;</type>
      <name>FindPointsWithinRadius</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a61300fddf5bc39510f5472b750f8b5df</anchor>
      <arglist>(double radius, vtkPointSet *dataset, const FeatureList *features, Array&lt; Array&lt; double &gt; &gt; *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; Array&lt; int &gt; &gt;</type>
      <name>FindPointsWithinRadius</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>abbfed432d0303ee3046735efc8d1c5a4</anchor>
      <arglist>(double radius, vtkPointSet *dataset, Array&lt; Array&lt; double &gt; &gt; *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>af02cc5cd3320550b6fae22c3011c34bb</anchor>
      <arglist>(vtkPointSet, DataSet)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>ac53c47cf93b9183fdf999b4540b5116e</anchor>
      <arglist>(const Array&lt; int &gt;, Sample)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>ab6a953a44b7c2f96e2be106e0a49e695</anchor>
      <arglist>(FeatureList, Features)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>acb7e8cb621c55a3acdb567c160df10eb</anchor>
      <arglist>(bool, GlobalIndices)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>aaa48085675db9992ee099252f00a904e</anchor>
      <arglist>(int, NumberOfPoints)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a654f94bd06ff49e5c8500242651eb172</anchor>
      <arglist>(int, PointDimension)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PointLocator</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a673e705decc9177c6c349bc99134282c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>Distance2BetweenPoints</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a1cb192914abd1eb7ba9a1124bd02aa91</anchor>
      <arglist>(const double *a, const double *b, int d=3)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Array&lt; Array&lt; int &gt; &gt;</type>
      <name>FindClosestNPoints</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a35d8b4f813a315cf3be858f2248ba3ae</anchor>
      <arglist>(int k, vtkPointSet *dataset1, const Array&lt; int &gt; *sample1, const FeatureList *features1, vtkPointSet *dataset2, const Array&lt; int &gt; *sample2, const FeatureList *features2, Array&lt; Array&lt; double &gt; &gt; *dist2=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Array&lt; int &gt;</type>
      <name>FindClosestPoint</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a32c1be96ce6a429d7d637af53e6fc037</anchor>
      <arglist>(vtkPointSet *dataset1, const Array&lt; int &gt; *sample1, const FeatureList *features1, vtkPointSet *dataset2, const Array&lt; int &gt; *sample2, const FeatureList *features2, Array&lt; double &gt; *dist2=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Array&lt; Array&lt; int &gt; &gt;</type>
      <name>FindPointsWithinRadius</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a204f2aca704e1bb8b6b828913fe69a5b</anchor>
      <arglist>(double radius, vtkPointSet *dataset1, const Array&lt; int &gt; *sample1, const FeatureList *features1, vtkPointSet *dataset2, const Array&lt; int &gt; *sample2, const FeatureList *features2, Array&lt; Array&lt; double &gt; &gt; *dist2=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static vtkDataArray *</type>
      <name>GetDataArray</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a561299988588afa210051d49d1c2ee6f</anchor>
      <arglist>(vtkPointSet *dataset, const FeatureInfo &amp;feature)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>GetNumberOfPoints</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a6803325cdf02b1c3343b2b3d1c6997e1</anchor>
      <arglist>(vtkPointSet *dataset, const Array&lt; int &gt; *sample=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GetPoint</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a5d5ccd5ec5662f067aa5b3af1b76e12b</anchor>
      <arglist>(Point &amp;point, vtkPointSet *dataset, const Array&lt; int &gt; *sample, int index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GetPoint</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>ad5a2807aa59e4a997e68cb7a119198f6</anchor>
      <arglist>(double *point, vtkPointSet *dataset, const Array&lt; int &gt; *sample, int index, const FeatureList *feature=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GetPoint</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a56a50500abe1063f256a765b43ce7411</anchor>
      <arglist>(double *point, vtkPointSet *dataset, int index, const FeatureList *feature=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>GetPointDimension</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a370995fc7a96287b3401aaf039f53088</anchor>
      <arglist>(vtkPointSet *dataset, const FeatureList *feature)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>GetPointIndex</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>addc75e2abaee9241f52e09f5448240fe</anchor>
      <arglist>(vtkPointSet *dataset, const Array&lt; int &gt; *sample, int index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PointLocator *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>aab222f2ab8c6788677bf6f62b03793d2</anchor>
      <arglist>(vtkPointSet *dataset, const Array&lt; int &gt; *sample=NULL, const FeatureList *feature=NULL)</arglist>
    </member>
    <member kind="variable">
      <type>SharedPtr&lt; FlannPointLocator &gt;</type>
      <name>_FlannLocator</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a5c96ed37b43e7bae7324ed0d7923a060</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vtkSmartPointer&lt; vtkOctreePointLocator &gt;</type>
      <name>_VtkLocator</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>ab956b592e88e66c54694a8597f90a0c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a65b56d4cdda9f2afcf164e597eb4fb2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PointLocator</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>ad1ad6053c98da1fe8f881cd42927f109</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::PointSamples</name>
    <filename>classmirtk_1_1PointSamples.html</filename>
    <base>mirtk::PointSet</base>
    <member kind="function">
      <type></type>
      <name>PointSamples</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>aed836e586cff0bf024fbdbd3ee89fd65</anchor>
      <arglist>(int n=0, int seed=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleGaussian</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>adef59332f63a623c81d49084c81291e6</anchor>
      <arglist>(double s=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleGaussian</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>af8d595129d718e81abe4aec4c08f129d</anchor>
      <arglist>(double m, double s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleGaussian</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>aab9d2b381d0a96be8699d3867cfdfa22</anchor>
      <arglist>(double mx, double my, double mz, double s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleGaussian</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>a666c8da6b4725701b58d48d3b15bf218</anchor>
      <arglist>(const Point &amp;m, double s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleGaussian</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>a0fe39b64344a01418761ba3145449600</anchor>
      <arglist>(const Point &amp;m, double sx, double sy, double sz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleGaussian</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>a5e67321ffc05fccab4c9aa97264aec7a</anchor>
      <arglist>(double mx, double my, double mz, double sx, double sy, double sz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleGrid</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>ad27f81aa2b68390b1cffa195a73efbcf</anchor>
      <arglist>(const Point &amp;p1, const Point &amp;p2, int nx, int ny, int nz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleGrid</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>a84b56e6ad3097e3385ea478789f63459</anchor>
      <arglist>(const Point &amp;p1, const Point &amp;p2, double dx, double dy, double dz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleGrid</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>aa4d125b48f379fe597c9f397b6dc1170</anchor>
      <arglist>(double x1, double y1, double z1, double x2, double y2, double z2, int nx, int ny, int nz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleGrid</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>a52441010e373107999062ecf9452b6df</anchor>
      <arglist>(double x1, double y1, double z1, double x2, double y2, double z2, double dx, double dy, double dz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleRegularHalfSphere</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>a1366d6bbb6f901f392890cc33f00e2a4</anchor>
      <arglist>(double r=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleRegularHalfSphere</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>abb95381ad335ad40d8a2a756c91f1aba</anchor>
      <arglist>(double c, double r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleRegularHalfSphere</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>a394b3bb36b4895d7145ba7e2e5c2ff03</anchor>
      <arglist>(const Point &amp;c, double r=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleRegularHalfSphere</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>ab890fd66152a20a6edf03806a5d80207</anchor>
      <arglist>(const Point &amp;c, double rx, double ry, double rz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleRegularHalfSphere</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>a2f106dfcd6bf68d83b92f63cbfcc019b</anchor>
      <arglist>(double cx, double cy, double cz, double r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleRegularHalfSphere</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>afa0adb127924168062da0b18e28816f3</anchor>
      <arglist>(double cx, double cy, double cz, double rx, double ry, double rz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleRegularSphere</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>a1ccaa754ab5b6ef15a247274b8adaa6f</anchor>
      <arglist>(double r=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleRegularSphere</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>acb6493467b7896effbea64e4c98e9a89</anchor>
      <arglist>(double c, double r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleRegularSphere</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>ab18df2023f90c927fe0f5225a7e80d81</anchor>
      <arglist>(const Point &amp;c, double r=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleRegularSphere</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>ae5629f56362038605a0a89c4596ee2ba</anchor>
      <arglist>(const Point &amp;c, double rx, double ry, double rz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleRegularSphere</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>a00628f575911c76a4a2abfb4afb0bd2d</anchor>
      <arglist>(double cx, double cy, double cz, double r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleRegularSphere</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>a24a6315f191d4f67d67558d536153a3d</anchor>
      <arglist>(double cx, double cy, double cz, double rx, double ry, double rz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleSphere</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>abe8421d8c964d0c7092e6de68668ac7f</anchor>
      <arglist>(double r=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleSphere</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>a14454af6cddc887a5397b4427d2ceab9</anchor>
      <arglist>(double c, double r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleSphere</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>a160660928f78335d38dcddcd09e0d000</anchor>
      <arglist>(const Point &amp;c, double r=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleSphere</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>a8429da8727984b1c340091d7d250b0be</anchor>
      <arglist>(const Point &amp;c, double rx, double ry, double rz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleSphere</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>a51d2f165563ef14fc59d2e90d6583081</anchor>
      <arglist>(double cx, double cy, double cz, double r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleSphere</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>ad48f26324aa81c3e3b23d8fb3ed715f2</anchor>
      <arglist>(double cx, double cy, double cz, double rx, double ry, double rz)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PointSamples</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>ac41ca1ab3941556f4e906cd958c27160</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::PointSet</name>
    <filename>classmirtk_1_1PointSet.html</filename>
    <base>mirtk::Object</base>
    <member kind="function">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a3e1b8b6915105b06a093cda61a7af8d5</anchor>
      <arglist>(const Point &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a5671db168d14f020ebb53b267d593f6f</anchor>
      <arglist>(const PointSet &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>ada02d0b63cbdb05e88e9b84730e0236b</anchor>
      <arglist>(double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVTK</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>ac2f1a6b45359a38bba10e571679524ea</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a5111529d287d0b26ed5127ce3254e75b</anchor>
      <arglist>(Point &amp;, Point &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Capacity</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>abf58c1ad2288603aac0955776f42ea7d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Point</type>
      <name>CenterOfGravity</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a0fe36def1dedcdf912ba81e8f4076df3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>Centroid</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a09714a1f2905af19d8ecba84694e3e18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a4c5ce5c6f875f213faf9c76e319b46ba</anchor>
      <arglist>(bool deallocate=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Point</type>
      <name>ClosestPoint</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a1534d118d6a688e21d25a40dda7a66bc</anchor>
      <arglist>(Point &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Del</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a047088059e3e51170ad0338af5aae53f</anchor>
      <arglist>(const Point &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Del</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a0454c0207c330ae10a69a53f6bd79b51</anchor>
      <arglist>(const PointSet &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Del</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>ac07a0d176d38a297e8f9c709e4645dad</anchor>
      <arglist>(double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Del</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>ac1a89dcc17bc9072855ed34fa6572372</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Point &amp;</type>
      <name>GetPoint</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a242f50212ffd8d1476fb1bb2c8de01dc</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const Point &amp;</type>
      <name>GetPoint</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a52b91ad7c2df9375390543ef8013f157</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetPoint</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a208057c40243133d14b6305ab8bc733f</anchor>
      <arglist>(int, Point &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetPoint</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a7d132eb55991bea906376fdf7b90225c</anchor>
      <arglist>(int, double [3]) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>IsInside</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>ad10582e325e969a29815465825c739f5</anchor>
      <arglist>(double, double) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a37391f9083621c8bfd3e6944d1541c0a</anchor>
      <arglist>(const PointSet &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Point &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>acf4fd5f40a02a546574605d69c52319f</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const Point &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a5f03483d370f5e28b7c8e7cb9b3c11bc</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>PointSet</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a87ad2d4bfc1fe2ff382d920eb89dc738</anchor>
      <arglist>(int, int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a0d3f214fad7892734cc81eb0de026b1e</anchor>
      <arglist>(const PointSet &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>PointDistance</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>ac15404b1a2c75c8394fbd354583527f5</anchor>
      <arglist>(Point &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointSet</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a6e99b2f3ec864825970a3cb76c8795ad</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointSet</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a152862b297dbf807225fb7b462b8be0d</anchor>
      <arglist>(const PointSet &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointSet</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a251f3103e7d5a16c6457879dbd66b97a</anchor>
      <arglist>(const PointSet &amp;, const Array&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointSet</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>aca5ce22371b81742363b13995b79b275</anchor>
      <arglist>(const PointSet &amp;, const OrderedSet&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a781842ad73126a88e7a10c559d76edde</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ReadVTK</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>ad5a2c757c2d3e3d7b96218b21fa6e001</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reserve</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a828b91245963f47e29b9cc1eb0a6c3c0</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Resize</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a505fb3c1c4c9e29c1326d627ecd00bc2</anchor>
      <arglist>(int, const Point &amp;=Point())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPoint</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a559a7c20d7a9e47d73dd071d34852864</anchor>
      <arglist>(int, const Point &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPoint</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a178e6d104147f96bceec17fad10b496e</anchor>
      <arglist>(int, const double [3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ShrinkToFit</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a678cdcf02d7c8e4363b47f071606c7f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Size</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a3b5869e1a036adbbc6dcdc94ac81ab92</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>ad9d64c26ed78deac19e73ca4fcd17b87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>StandardDeviationEllipsoid</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a27874ba696fd98296e0c7c3a006373f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a264e8a82ba60cff36ca8159542acc176</anchor>
      <arglist>(const char *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WriteVTK</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>aa336d7615d9c7aedd51840ff38bf722c</anchor>
      <arglist>(const char *, vtkAbstractArray *=NULL) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PointSet</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>af232d843ed1201e09f374b46ee0f0e91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point *</type>
      <name>_data</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a950bb461b9e0160329a20ffa1a331518</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_m</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a53064828897ed0189dadf17577ee2e93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_n</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a588571960833f696873f3e51b6242c10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::GenericRegistrationFilter::PointSetConstraintInfo</name>
    <filename>structmirtk_1_1GenericRegistrationFilter_1_1PointSetConstraintInfo.html</filename>
    <member kind="variable">
      <type>EnergyMeasure</type>
      <name>_Measure</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1PointSetConstraintInfo.html</anchorfile>
      <anchor>a81ede7b6dd7a237e40539d35d67e572c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>_Name</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1PointSetConstraintInfo.html</anchorfile>
      <anchor>a55f30a4567ce671c87825a92b3f0e773</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_PointSetIndex</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1PointSetConstraintInfo.html</anchorfile>
      <anchor>ac59ac3da6a9c88c5592d8b9145012650</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TransformationInfo</type>
      <name>_Transformation</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1PointSetConstraintInfo.html</anchorfile>
      <anchor>ad66867e3f5f170d6fa41e965b8bb736e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_Weight</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1PointSetConstraintInfo.html</anchorfile>
      <anchor>a332360533152466e60af267b10e0b8e4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::PointSetDistance</name>
    <filename>classmirtk_1_1PointSetDistance.html</filename>
    <base>mirtk::DataFidelity</base>
    <member kind="typedef">
      <type>Vector3D&lt; double &gt;</type>
      <name>GradientType</name>
      <anchorfile>classmirtk_1_1PointSetDistance.html</anchorfile>
      <anchor>a7cb71b5c3d106cb4c8398775708b38a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1PointSetDistance.html</anchorfile>
      <anchor>a3e15dbf4d65cc0097a9e5c7483529d9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Reinitialize</name>
      <anchorfile>classmirtk_1_1PointSetDistance.html</anchorfile>
      <anchor>a026f65bb47a0a5eadf285af124ed17b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1PointSetDistance.html</anchorfile>
      <anchor>ab4dc3331bbd4720f13a387cac47145fd</anchor>
      <arglist>(bool=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteDataSets</name>
      <anchorfile>classmirtk_1_1PointSetDistance.html</anchorfile>
      <anchor>a8d997d607900cfdbf48fa441344278c6</anchor>
      <arglist>(const char *, const char *, bool=true) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteGradient</name>
      <anchorfile>classmirtk_1_1PointSetDistance.html</anchorfile>
      <anchor>a849ea013758583faa72a907c2283c64e</anchor>
      <arglist>(const char *, const char *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PointSetDistance</name>
      <anchorfile>classmirtk_1_1PointSetDistance.html</anchorfile>
      <anchor>a5fb801520d1d4cc4165353d40a3be3a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PointSetDistance *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1PointSetDistance.html</anchorfile>
      <anchor>a85564c49a0cbf63b1c0882369c616846</anchor>
      <arglist>(PointSetDistanceMeasure, const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AllocateGradientWrtSource</name>
      <anchorfile>classmirtk_1_1PointSetDistance.html</anchorfile>
      <anchor>a7f487fed9d70a461fc01be7893bcf14e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AllocateGradientWrtTarget</name>
      <anchorfile>classmirtk_1_1PointSetDistance.html</anchorfile>
      <anchor>ab252d1176202371c8d82437dba6f6c40</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CopyAttributes</name>
      <anchorfile>classmirtk_1_1PointSetDistance.html</anchorfile>
      <anchor>afe8841175e1f7c41afb9c92d9d73c8a1</anchor>
      <arglist>(const PointSetDistance &amp;, int=-1, int=-1)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1PointSetDistance.html</anchorfile>
      <anchor>a7b611477556bb89cff4a763f129a4618</anchor>
      <arglist>(double *gradient, double step, double weight)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1PointSetDistance.html</anchorfile>
      <anchor>a16adb8cf314f03db63d4d4638239bfe6</anchor>
      <arglist>(int, int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointSetDistance.html</anchorfile>
      <anchor>a0f170b0f875a1f29f9ca3df951ef5366</anchor>
      <arglist>(bool, InitialUpdate)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkComponentMacro</name>
      <anchorfile>classmirtk_1_1PointSetDistance.html</anchorfile>
      <anchor>a7e25bd555dd8d3e4b11b283ea3b1a9ee</anchor>
      <arglist>(GradientType, GradientWrtTarget)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkComponentMacro</name>
      <anchorfile>classmirtk_1_1PointSetDistance.html</anchorfile>
      <anchor>ab325c3ecba47745a477eeed8711d8250</anchor>
      <arglist>(GradientType, GradientWrtSource)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1PointSetDistance.html</anchorfile>
      <anchor>a4e6774e3e35641eba96771121bdbaed5</anchor>
      <arglist>(RegisteredPointSet, Target)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1PointSetDistance.html</anchorfile>
      <anchor>a61fb2321d76b21cb32c27f758e7a610e</anchor>
      <arglist>(RegisteredPointSet, Source)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>NonParametricGradient</name>
      <anchorfile>classmirtk_1_1PointSetDistance.html</anchorfile>
      <anchor>a25f07ee21c190633397e9962f3c6db5a</anchor>
      <arglist>(const RegisteredPointSet *target, GradientType *gradient)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PointSetDistance &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1PointSetDistance.html</anchorfile>
      <anchor>aabb5c515e9541b305f6a0e0c81c8cfb3</anchor>
      <arglist>(const PointSetDistance &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1PointSetDistance.html</anchorfile>
      <anchor>a7f8a9107e566da6169a0bda67a95965b</anchor>
      <arglist>(const RegisteredPointSet *target, const GradientType *np_gradient, double *gradient, double weight)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PointSetDistance</name>
      <anchorfile>classmirtk_1_1PointSetDistance.html</anchorfile>
      <anchor>a36602968204556747cdc0543db8169a6</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PointSetDistance</name>
      <anchorfile>classmirtk_1_1PointSetDistance.html</anchorfile>
      <anchor>a9524cb10b0d96b9676af9d9f2ea9fbf7</anchor>
      <arglist>(const PointSetDistance &amp;, int=-1, int=-1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Reinitialize</name>
      <anchorfile>classmirtk_1_1PointSetDistance.html</anchorfile>
      <anchor>aa08b59f87b5585427ab5b6a6acd55c36</anchor>
      <arglist>(int, int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteGradient</name>
      <anchorfile>classmirtk_1_1PointSetDistance.html</anchorfile>
      <anchor>a5583c5fbbdd4bc23ef6f906d6eeb325c</anchor>
      <arglist>(const char *, const RegisteredPointSet *, const GradientType *, const Array&lt; int &gt; *=NULL) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::GenericRegistrationFilter::PointSetDistanceInfo</name>
    <filename>structmirtk_1_1GenericRegistrationFilter_1_1PointSetDistanceInfo.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>_DefaultSign</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1PointSetDistanceInfo.html</anchorfile>
      <anchor>a04ab473678ef621dddbc15693c415603</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PointSetDistanceMeasure</type>
      <name>_Measure</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1PointSetDistanceInfo.html</anchorfile>
      <anchor>afec27f6074f041cd76b860ecb22e8e8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>_Name</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1PointSetDistanceInfo.html</anchorfile>
      <anchor>a7984608469f58de802d40c323b39f08f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_SourceIndex</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1PointSetDistanceInfo.html</anchorfile>
      <anchor>a9908f835454b241b59fe65c4a8331384</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TransformationInfo</type>
      <name>_SourceTransformation</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1PointSetDistanceInfo.html</anchorfile>
      <anchor>a0e2e06828c133d817f239820d13fedb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_TargetIndex</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1PointSetDistanceInfo.html</anchorfile>
      <anchor>a5f26772392439142fcb10b19953330b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TransformationInfo</type>
      <name>_TargetTransformation</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1PointSetDistanceInfo.html</anchorfile>
      <anchor>a7cb89d3f8aa8b9abf54e23acccebf803</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_Weight</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1PointSetDistanceInfo.html</anchorfile>
      <anchor>a4c54b36ad5ee10d82afd3c7295128298</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::PointSetForce</name>
    <filename>classmirtk_1_1PointSetForce.html</filename>
    <base>mirtk::EnergyTerm</base>
    <member kind="typedef">
      <type>RegisteredPointSet::EdgeTable</type>
      <name>EdgeTable</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>a6471b81cb62c05f1f6a62dac362adceb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector3D&lt; double &gt;</type>
      <name>GradientType</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>a15295643915ce2d8c6aafb72afde4a6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RegisteredPointSet::NodeNeighbors</type>
      <name>NodeNeighbors</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>a2898d103170bf914108ada6493360f5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>adb8888b7c6f4a9291c57c37a937cd03b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Reinitialize</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>a0cca412de0d255935a6789bc6270b33b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>a9a13c4a398f35f28019583592ea028dd</anchor>
      <arglist>(bool=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteDataSets</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>a22b2ba23c6af957c5dde21ccdbe3ef20</anchor>
      <arglist>(const char *, const char *, bool=true) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteGradient</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>a6d988a00a6fb03829bed7fd3b25b429c</anchor>
      <arglist>(const char *, const char *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PointSetForce</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>ab833c28125296573c79e21c11b9f4a3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AddPointData</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>a25a97602afab97c25859b2b0041d4ff6</anchor>
      <arglist>(const char *name, vtkSmartPointer&lt; vtkDataArray &gt; &amp;data, bool global=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>vtkDataArray *</type>
      <name>AddPointData</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>ad529ea5ecf7b36c518156def7b28414b</anchor>
      <arglist>(const char *name, int c=1, int type=VTK_FLOAT, bool global=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AllocateCount</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>aa0f8d3ee1153f25106e4af28deefb168</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AllocateGradient</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>a65a226af2475c56dd0c6f09cded9a147</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CopyAttributes</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>a8ee57a5417264e7afdbccdac6795335b</anchor>
      <arglist>(const PointSetForce &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>vtkPointSet *</type>
      <name>DeformedPointSet</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>aa9aff06981dbc0fa4b7829686ec7165c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>vtkPolyData *</type>
      <name>DeformedSurface</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>a6669659d23effae8c5bd29350cac4f98</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const EdgeTable *</type>
      <name>Edges</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>ac9ecebe7f60656364d84e7402dd78d80</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>a769225f0fb176eaf3dc1d2d955266571</anchor>
      <arglist>(double *gradient, double step, double weight)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>vtkSmartPointer&lt; vtkPoints &gt;</type>
      <name>GetInitialPoints</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>a62b9dc76e17cde1cbc646a88302a5b69</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Init</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>add8fd138c517624f3894636ead441310</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>vtkDataArray *</type>
      <name>InitialStatus</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>a10af3e1a8b023a7cec6ada902099886b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAggregateMacro</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>af47a029c6707ba061c43c0bfa0685a56</anchor>
      <arglist>(int, Count)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>a717c41fa688de69b2e4ac6014d94b007</anchor>
      <arglist>(int, GradientSize)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>a494f390793c4445e2565d9c24a065c96</anchor>
      <arglist>(int, CountSize)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>a97d22b9970c344108af5c36b6c97fb3f</anchor>
      <arglist>(bool, InitialUpdate)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkComponentMacro</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>a1912cb7187565792c9b8262789add658</anchor>
      <arglist>(GradientType, Gradient)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>a3897865e8dc8e566e9e4fa9b35b50526</anchor>
      <arglist>(RegisteredPointSet, PointSet)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>afa181a5552414427c2f2e8e83bc1acf1</anchor>
      <arglist>(int, GradientAveraging)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>a9a87680bc5ea629d2c24eafd4558f494</anchor>
      <arglist>(bool, AverageSignedGradients)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>a3febd7aa8b1f1574864920ecea8d9ec9</anchor>
      <arglist>(bool, AverageGradientMagnitude)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>ad2ebdf2e2c930d6d69434ecc80b7c603</anchor>
      <arglist>(bool, SurfaceForce)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>a56a1ae0672a1fb760f74c0b6ca529d3b</anchor>
      <arglist>(int, NumberOfPoints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const NodeNeighbors *</type>
      <name>Neighbors</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>add288dd85fadaa1e39b2a218e284a376</anchor>
      <arglist>(int=-1) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>vtkDataArray *</type>
      <name>Normals</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>a0de80b89b8087d845543918d3d406b7a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PointSetForce &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>a32e9b5cb932370b727a18d8318a33c3e</anchor>
      <arglist>(const PointSetForce &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>vtkPointSet *</type>
      <name>OriginalPointSet</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>a0b1fb749da0bbce07f5297240e786ef8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>vtkPolyData *</type>
      <name>OriginalSurface</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>a3213b9e5927f35060a371d4d19c0a8bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>vtkPointData *</type>
      <name>PointData</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>a1c93c555679cb7c9ca47eff0f76fffc9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>vtkDataArray *</type>
      <name>PointData</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>a62a86e712ac99b55a7e10a67e5d03f9d</anchor>
      <arglist>(const char *name, bool optional=false) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>vtkPoints *</type>
      <name>Points</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>ac29fcd844ec14186b97ebf16c7611216</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PointSetForce</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>afb8c7ceba76d61b4160eb1d89c44132e</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PointSetForce</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>a72bd3e04d6cd5c7333700e68db1843f6</anchor>
      <arglist>(const PointSetForce &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>RemovePointData</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>a8cad4c924bc9db9987e44808ed15021c</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SharedPtr&lt; const EdgeTable &gt;</type>
      <name>SharedEdgeTable</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>a463d264163f8e4b7b06998235fa5d42d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>vtkDataArray *</type>
      <name>Status</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>a3a8e31dba0662e7f7f6814889e62798b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::GenericRegistrationFilter::PointSetOutputInfo</name>
    <filename>structmirtk_1_1GenericRegistrationFilter_1_1PointSetOutputInfo.html</filename>
  </compound>
  <compound kind="class">
    <name>mirtk::Polyhedron</name>
    <filename>classmirtk_1_1Polyhedron.html</filename>
    <base>mirtk::Object</base>
    <member kind="function">
      <type>void</type>
      <name>GetPoint</name>
      <anchorfile>classmirtk_1_1Polyhedron.html</anchorfile>
      <anchor>aa8c0357cb99c65190dc9ef800b979043</anchor>
      <arglist>(int, double &amp;, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetPoint</name>
      <anchorfile>classmirtk_1_1Polyhedron.html</anchorfile>
      <anchor>a8c5305a0926b5168e47f22147b596be5</anchor>
      <arglist>(int, double [3]) const</arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>GetPoint</name>
      <anchorfile>classmirtk_1_1Polyhedron.html</anchorfile>
      <anchor>ae36c4cd7dc47842f92c0793574e9433e</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInside</name>
      <anchorfile>classmirtk_1_1Polyhedron.html</anchorfile>
      <anchor>a3963e437ea3c0cd25b0ffda81dce3a43</anchor>
      <arglist>(double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInside</name>
      <anchorfile>classmirtk_1_1Polyhedron.html</anchorfile>
      <anchor>ac464b06958aae31b1ab7bb4be4b16351</anchor>
      <arglist>(double [3]) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInside</name>
      <anchorfile>classmirtk_1_1Polyhedron.html</anchorfile>
      <anchor>a40a9e31cde1b6902339bb1cac8eedb8b</anchor>
      <arglist>(const Point &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfPoints</name>
      <anchorfile>classmirtk_1_1Polyhedron.html</anchorfile>
      <anchor>a94a885a615730bf12567ce8fb328840c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Polyhedron &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1Polyhedron.html</anchorfile>
      <anchor>aa597f2201cd351be00d29be38bec63f8</anchor>
      <arglist>(const Polyhedron &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Polyhedron</name>
      <anchorfile>classmirtk_1_1Polyhedron.html</anchorfile>
      <anchor>abf5a11e1c03f251e6a62626c3c574231</anchor>
      <arglist>(vtkPolyData *=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Polyhedron</name>
      <anchorfile>classmirtk_1_1Polyhedron.html</anchorfile>
      <anchor>a36c555ca4e110f69a7ec1bd4b76db4cd</anchor>
      <arglist>(const Polyhedron &amp;)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Volume</name>
      <anchorfile>classmirtk_1_1Polyhedron.html</anchorfile>
      <anchor>a073fc4a2aceb476372782de5444607eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>WindingNumber</name>
      <anchorfile>classmirtk_1_1Polyhedron.html</anchorfile>
      <anchor>a4f488639d6d3995e96f34f537338a175</anchor>
      <arglist>(double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>WindingNumber</name>
      <anchorfile>classmirtk_1_1Polyhedron.html</anchorfile>
      <anchor>aa7fa563bf56417927d6c4ed147664740</anchor>
      <arglist>(double [3]) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>WindingNumber</name>
      <anchorfile>classmirtk_1_1Polyhedron.html</anchorfile>
      <anchor>afb2f7f1a7bf59a5e4e08d77e61227c15</anchor>
      <arglist>(const Point &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Polyhedron</name>
      <anchorfile>classmirtk_1_1Polyhedron.html</anchorfile>
      <anchor>a850d2abb8938d97371fb1dd732abefa4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>IsInside</name>
      <anchorfile>classmirtk_1_1Polyhedron.html</anchorfile>
      <anchor>a93ed2ffc89f5acce4582b4b080e9ade7</anchor>
      <arglist>(vtkPolyData *, double, double, double)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>IsInside</name>
      <anchorfile>classmirtk_1_1Polyhedron.html</anchorfile>
      <anchor>ab4f82d96119e117f16905a466f737bf7</anchor>
      <arglist>(vtkPolyData *, double [3])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>IsInside</name>
      <anchorfile>classmirtk_1_1Polyhedron.html</anchorfile>
      <anchor>a43ed3e9a052053f1f2eb0394d78cfe46</anchor>
      <arglist>(vtkPolyData *, const Point &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>Volume</name>
      <anchorfile>classmirtk_1_1Polyhedron.html</anchorfile>
      <anchor>acbfd743c1d73dfee7ebf49a0f56fbf9d</anchor>
      <arglist>(vtkPolyData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>WindingNumber</name>
      <anchorfile>classmirtk_1_1Polyhedron.html</anchorfile>
      <anchor>a4bfbe5692ad2538bbc9d2423c1e65853</anchor>
      <arglist>(vtkPolyData *, double, double, double)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>WindingNumber</name>
      <anchorfile>classmirtk_1_1Polyhedron.html</anchorfile>
      <anchor>a4d57b8cfd00c9dd0bd4555a5525870ff</anchor>
      <arglist>(vtkPolyData *, double [3])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>WindingNumber</name>
      <anchorfile>classmirtk_1_1Polyhedron.html</anchorfile>
      <anchor>a699643bd89bc5347a3bec11a91f7a573</anchor>
      <arglist>(vtkPolyData *, const Point &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::Polynomial</name>
    <filename>classmirtk_1_1Polynomial.html</filename>
    <base>mirtk::Object</base>
    <member kind="function">
      <type>void</type>
      <name>Coefficient</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>aa1885886c79a75ef9ac904d3bb22f675</anchor>
      <arglist>(int i, double c)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Coefficient</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a6ecd5a7e6170d98f99a14d703aa8d89d</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Coefficients</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a81245b459835602c025807a6952f87bf</anchor>
      <arglist>(const Vector &amp;coeff)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a715befbbd56dd706723f6c06d1e944a7</anchor>
      <arglist>(const Matrix &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a030578c2c3edbcc8aee7317665312079</anchor>
      <arglist>(const PointSet &amp;x, bool twoD=false) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a8dd1851d10b6f1474e25e6ab8f0e5256</anchor>
      <arglist>(const Vector &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a63eb6770378431a3c3981588500ea5f4</anchor>
      <arglist>(const Point &amp;x, bool twoD=false) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>aca9761b96a8f3ca95fe67762fd5b7a0b</anchor>
      <arglist>(double x, double y, double z) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>af5a3aabc49b90c75da3b127f115fba23</anchor>
      <arglist>(double x, double y) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>aa2e0f64f186df4253cc24d479858b97e</anchor>
      <arglist>(double x) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>Evaluate1stOrderDerivative</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a22c1aa505b8f3671739df314ca60ed0a</anchor>
      <arglist>(int j, const Matrix &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>Evaluate1stOrderDerivative</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a0db825da9bd774e129cfd977c71e8342</anchor>
      <arglist>(int j, const PointSet &amp;x, bool twoD=false) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>Evaluate1stOrderDerivative</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>ac139d31bc985d17a3cbcf51e8cfd6c08</anchor>
      <arglist>(int j, const Vector &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Evaluate1stOrderDerivative</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a8beb35720d718785df2aff4d677ff87a</anchor>
      <arglist>(int j, const Point &amp;x, bool twoD=false) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Evaluate1stOrderDerivative</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a934ae0ce813f506dba60244a19bb1200</anchor>
      <arglist>(int j, double x) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>Evaluate2ndOrderDerivative</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a74a313cddd6c2a10eee6a20256f5c177</anchor>
      <arglist>(int j1, int j2, const Matrix &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>Evaluate2ndOrderDerivative</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a4524a62503945ab3bdac1f4f88452327</anchor>
      <arglist>(int j1, int j2, const PointSet &amp;x, bool twoD=false) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>Evaluate2ndOrderDerivative</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a891df5ebecf62a60f433cf8a73bd0e14</anchor>
      <arglist>(int j1, int j2, const Vector &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Evaluate2ndOrderDerivative</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a0412136269832886bb8f493d63caf949</anchor>
      <arglist>(int j1, int j2, const Point &amp;x, bool twoD=false) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Evaluate2ndOrderDerivative</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a365f90bfcbbfc92fa615e8c601298d06</anchor>
      <arglist>(int j1, int j2, double x) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>EvaluateGaussianCurvature</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a21728dfe7a0bf638c625f198d6ab3c24</anchor>
      <arglist>(const Point &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>aa2230f3fd125695a875113eb98bb1805</anchor>
      <arglist>(const Point &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3x3</type>
      <name>EvaluateHessian</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a113651c9e36debf06f13ef172ff4a682</anchor>
      <arglist>(const Point &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>EvaluateMeanCurvature</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>af5ec425e7cbe49b8832f4cd8512df030</anchor>
      <arglist>(const Point &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>EvaluateTaubinDistance</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a5bd84a1a947a2da453eb7a5a3e2eddff</anchor>
      <arglist>(const Point &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Exponent</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>acf57144cc03c3e9cc32f788d5c225708</anchor>
      <arglist>(int i, int j=0) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Fit</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a3cac136a15a3875060392cfa124616ac</anchor>
      <arglist>(const Matrix &amp;x, const Vector &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Fit</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a0c426296734a1fe73842b67db6883733</anchor>
      <arglist>(const Matrix &amp;x, const Vector &amp;y, const Array&lt; int &gt; &amp;subset)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Fit</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>ad9c6908b9d8147f73eeea4b076ff44a3</anchor>
      <arglist>(const Matrix &amp;x, const Vector &amp;y, const OrderedSet&lt; int &gt; &amp;subset)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Fit</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a70edbd5f595f7c8ebf6ddbf3f6d18b22</anchor>
      <arglist>(const PointSet &amp;x, const Vector &amp;y, bool twoD=false)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Fit</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a13e9d0b6154decc76a0b700b3ccf211b</anchor>
      <arglist>(const Vector &amp;x, const Vector &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>FitSurface</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a6e968ba8d415557e8ca6777f86d15b0c</anchor>
      <arglist>(const PointSet &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>FitSurface</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>adeb685594a0a976edebabcd05b97d570</anchor>
      <arglist>(const PointSet &amp;x, const Array&lt; int &gt; &amp;subset)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>FitSurface</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a243d5c4c867be9946414568c51486a42</anchor>
      <arglist>(const PointSet &amp;x, const OrderedSet&lt; int &gt; &amp;subset)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>FitSurface</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>af0d77963551066b98c5720adba973fc8</anchor>
      <arglist>(const PointSet &amp;x, const PointSet &amp;n, double c=1.0)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>FitSurface</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a6cd0f8e51b6e5847271c3e6ac97c9615</anchor>
      <arglist>(const PointSet &amp;x, const PointSet &amp;n, const Array&lt; int &gt; &amp;subset, double c=1.0)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>FitSurface</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a718b493b34e8d6921f32279ca1d2cf9d</anchor>
      <arglist>(const PointSet &amp;x, const PointSet &amp;n, const OrderedSet&lt; int &gt; &amp;subset, double c=1.0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a7d821d51edece5704a6a3e647e8d5926</anchor>
      <arglist>(int p, int order=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsConstant</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a9a5c3d25b27b8efe6fef10ec8446dcba</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfActiveTerms</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a00e715597f730507912ad04df81d9da7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfPassiveTerms</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>afb7cf232987d8bef29c95a0a74505207</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfTerms</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a1802566d3236b8bc5a007d1415b8aa2b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Polynomial &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a021856d86f28bbf288ccf07fa5a3465c</anchor>
      <arglist>(const Polynomial &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Polynomial</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>afca11134127d8592645c2f0f9234af60</anchor>
      <arglist>(int order=2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Polynomial</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a1a1241dd9f98cb7fe9260c19cf64d60c</anchor>
      <arglist>(int p, int order, const Vector &amp;coeff=Vector())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Polynomial</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>ae06c2b11337f72ec82610dd9713e432e</anchor>
      <arglist>(const Polynomial &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a38e3971a07786ef30dd2debba009ed62</anchor>
      <arglist>(ostream &amp;os, Indent=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>afac8101f1150c3906d1ae93ee41d2e10</anchor>
      <arglist>(Indent=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetCoefficientsToZero</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>adb0fcea09a78d43913ffba1789c926de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetConstantCoefficient</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>ae43aaef7568384bf53392d2a30a1ae1b</anchor>
      <arglist>(double value, enum Status status=Passive)</arglist>
    </member>
    <member kind="function">
      <type>enum Status</type>
      <name>Status</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a3de71046ff4b6f46f9e0e3145b6c07e6</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Status</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>abf930146254a1492496edd5641accdea</anchor>
      <arglist>(int i, enum Status s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Polynomial</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>aa1cde6d1770cebe2d75413f147bb632d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::Pow</name>
    <filename>classmirtk_1_1data_1_1op_1_1Pow.html</filename>
    <base>mirtk::data::op::ElementWiseUnaryOp</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Op</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Pow.html</anchorfile>
      <anchor>aaaf29c4423d940e7a146d2ca0c0d938c</anchor>
      <arglist>(double value, bool &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Pow.html</anchorfile>
      <anchor>a08bb9f28f553cacbb31ce80de1eab1a9</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::QuadraticCurvatureConstraint</name>
    <filename>classmirtk_1_1QuadraticCurvatureConstraint.html</filename>
    <base>mirtk::SurfaceConstraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1QuadraticCurvatureConstraint.html</anchorfile>
      <anchor>a5c0ff0d1baf24d4d9e546a1e3840b7fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>QuadraticCurvatureConstraint &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1QuadraticCurvatureConstraint.html</anchorfile>
      <anchor>afcda3eb134fd388eba421036a1486da0</anchor>
      <arglist>(const QuadraticCurvatureConstraint &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuadraticCurvatureConstraint</name>
      <anchorfile>classmirtk_1_1QuadraticCurvatureConstraint.html</anchorfile>
      <anchor>abce53d0e722282ffde6dee9092aa6846</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuadraticCurvatureConstraint</name>
      <anchorfile>classmirtk_1_1QuadraticCurvatureConstraint.html</anchorfile>
      <anchor>ac468f2537626a7895260794602eab811</anchor>
      <arglist>(const QuadraticCurvatureConstraint &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1QuadraticCurvatureConstraint.html</anchorfile>
      <anchor>ac581bbf33d9355feb504c39ed29aee3d</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~QuadraticCurvatureConstraint</name>
      <anchorfile>classmirtk_1_1QuadraticCurvatureConstraint.html</anchorfile>
      <anchor>a4d823a7e623fd537e41596ca84df033e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1QuadraticCurvatureConstraint.html</anchorfile>
      <anchor>a03dffa808ae927a5460386d1699c32b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1QuadraticCurvatureConstraint.html</anchorfile>
      <anchor>a6988253ae55d025221d5d6fc223564f3</anchor>
      <arglist>(double *, double, double)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::QuaternaryForEachVoxelBody</name>
    <filename>structmirtk_1_1QuaternaryForEachVoxelBody.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody.html</anchorfile>
      <anchor>a3c54e700c3b7bab668c0d89d25ccbaea</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody.html</anchorfile>
      <anchor>a7beaaf6e6c7ec516a3762a8467ffa1c8</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody.html</anchorfile>
      <anchor>aafd7e35ad0a443962a1b39b381d0bced</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody.html</anchorfile>
      <anchor>af681edc795d7bde78e5638be65e1b4ad</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody.html</anchorfile>
      <anchor>a4b9ac6b947c672bcdba7c99dec8586b9</anchor>
      <arglist>(GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody.html</anchorfile>
      <anchor>a8ace30e0014eedfad18c389f43cdfa2a</anchor>
      <arglist>(const QuaternaryForEachVoxelBody &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody.html</anchorfile>
      <anchor>aad0984fa5cde3ce27de4359d7223a165</anchor>
      <arglist>(QuaternaryForEachVoxelBody &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::QuaternaryForEachVoxelBody_1Const</name>
    <filename>structmirtk_1_1QuaternaryForEachVoxelBody__1Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a0b586919681cca8b9eb1f4d0393bfa60</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a4f2275b69efcf63c27c6696f4a816e16</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a73edf8c3e8bc127ca11d70a862f0a3b8</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a3eaedb82ee492bccb0f189edab6a877d</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelBody_1Const</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>aa0d3dc7540cfc86eae606c0eed9ed0a5</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelBody_1Const</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a877e32e58fa24ddd4f691d4719b506f6</anchor>
      <arglist>(const QuaternaryForEachVoxelBody_1Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelBody_1Const</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a0aee4ad31433bbbe758a24fce6798797</anchor>
      <arglist>(QuaternaryForEachVoxelBody_1Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::QuaternaryForEachVoxelBody_2Const</name>
    <filename>structmirtk_1_1QuaternaryForEachVoxelBody__2Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a2f34fd89471b19e19633244f32dfd491</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>ab99a06dbd81db4542cfbb7565a37071f</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a6459ccea8c08c414d0d4bd53449d0b58</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a2a7cae2c319175c49cf6570b33e04adc</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelBody_2Const</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>ab2701b20a21d3e6eff74e2e107a52a87</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelBody_2Const</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a61cfe20f86434be0a6d16989311156d0</anchor>
      <arglist>(const QuaternaryForEachVoxelBody_2Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelBody_2Const</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a8b1238766910d83a9ff51d653ad55960</anchor>
      <arglist>(QuaternaryForEachVoxelBody_2Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::QuaternaryForEachVoxelBody_3Const</name>
    <filename>structmirtk_1_1QuaternaryForEachVoxelBody__3Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>a702ad5b8283592e74c0e65a36d8517fa</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>a6841a79d0806c196e1c2693bfdb0afd9</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>ad2d00416b657f75f89fa047b5215fecf</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>a0f788cab1e5b70ba735e112224e019a3</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelBody_3Const</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>a15c4b0cb3a390ef4ae2ece437a616194</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelBody_3Const</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>acc7fc3213edd0283ed1aeff85c25ea99</anchor>
      <arglist>(const QuaternaryForEachVoxelBody_3Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelBody_3Const</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>aa45a0b391779a885d66237b1235d5a5f</anchor>
      <arglist>(QuaternaryForEachVoxelBody_3Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::QuaternaryForEachVoxelBody_Const</name>
    <filename>structmirtk_1_1QuaternaryForEachVoxelBody__Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a1c894fbb7c8433dea4d96b30530873e4</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>ad9c041c3eb0ebcd131467f8123801a84</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a9d84085a1986f0b39949589fa3287b60</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a14f3d3fd65d6f27a6117b5fa44b13fba</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a8c2a3884639ae5cd0656220e0e4f7252</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a81671d1a949eb42e385167e0043f4396</anchor>
      <arglist>(const QuaternaryForEachVoxelBody_Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>ad7a7a5a9316b0e9c20bdb6bf8fb7d99d</anchor>
      <arglist>(QuaternaryForEachVoxelBody_Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::QuaternaryForEachVoxelIfBody</name>
    <filename>structmirtk_1_1QuaternaryForEachVoxelIfBody.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a5715b2ca512747477bb31727cc2488d9</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a341e871b6f8330f9df2d1ea0b66f19d8</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a7cc931a6fe20e543057f7fe7686938d9</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a7c12549cf427ca037848b4aafadb4283</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody.html</anchorfile>
      <anchor>ad0debaaecab91bfb92becd8465874fcf</anchor>
      <arglist>(GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a10dda6fba82ab794d6dba4a8d1c55810</anchor>
      <arglist>(const QuaternaryForEachVoxelIfBody &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a3b7a17de119d6aace3d918fa0f26788f</anchor>
      <arglist>(QuaternaryForEachVoxelIfBody &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::QuaternaryForEachVoxelIfBody_1Const</name>
    <filename>structmirtk_1_1QuaternaryForEachVoxelIfBody__1Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a820403661c6491fb2b9a2f9158aa2849</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a978166f69261ef315d0d48d31d469129</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a72e359897a19650f4d6f3e77b446dc78</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>af04341a1cfc81138581f7d04b0f13293</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelIfBody_1Const</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>ae6aed0a36ac70abc2ed21ba479157acb</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelIfBody_1Const</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a5f980dec4f494d1bc40ebb75d4d7d48b</anchor>
      <arglist>(const QuaternaryForEachVoxelIfBody_1Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelIfBody_1Const</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>ad311fcdc185fa56675894a0b6d94d570</anchor>
      <arglist>(QuaternaryForEachVoxelIfBody_1Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::QuaternaryForEachVoxelIfBody_2Const</name>
    <filename>structmirtk_1_1QuaternaryForEachVoxelIfBody__2Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a45d648f7f8f787933c2f48dbbec411d2</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a6b2150b33747027cfa81f9e2cb385ba3</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>aa88df9c2579cce913f0b0ea3789fdaab</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a7a5a7afae2c390799d7d9ef95c8cbe91</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelIfBody_2Const</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a7bb1965cb2d9c2f48f8a11283bffca0a</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelIfBody_2Const</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>ae49497d8fe512e84e70c34ae94840549</anchor>
      <arglist>(const QuaternaryForEachVoxelIfBody_2Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelIfBody_2Const</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a765665c91ecc02967d2630373ff125bd</anchor>
      <arglist>(QuaternaryForEachVoxelIfBody_2Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::QuaternaryForEachVoxelIfBody_3Const</name>
    <filename>structmirtk_1_1QuaternaryForEachVoxelIfBody__3Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>ae7540d900c3503889fcf6ac2d11dd7b6</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>a6a75b73f4c1c44750de47a49312f407c</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>a23e341357c05a11df146b366b25b8bd7</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>abea6c88726dae9b7b4343da4e74c3761</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelIfBody_3Const</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>aa00955acafe68a4eaaa74408901d6200</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelIfBody_3Const</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>abb6a83e2ee92d2193a06674d5c52329b</anchor>
      <arglist>(const QuaternaryForEachVoxelIfBody_3Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelIfBody_3Const</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>ad9c083e126f7919888451084a7b179b9</anchor>
      <arglist>(QuaternaryForEachVoxelIfBody_3Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::QuaternaryForEachVoxelIfBody_Const</name>
    <filename>structmirtk_1_1QuaternaryForEachVoxelIfBody__Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a88d0e8efc1de2798ff7e266313894cce</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>aee3d461758af61ba0386b06e97f834b1</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a1db63a871a60863c77a659a809fd2e62</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>aa74adcc4a49ffce2c197de3a676e3ee1</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a48b51fb6051038f33ae2b1e1a335c5d3</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a34373acf1c96d51532103daffeaa9156</anchor>
      <arglist>(const QuaternaryForEachVoxelIfBody_Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>afd705a3af4792a6543d9ac1e738241fb</anchor>
      <arglist>(QuaternaryForEachVoxelIfBody_Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::QuinaryForEachVoxelBody</name>
    <filename>structmirtk_1_1QuinaryForEachVoxelBody.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody.html</anchorfile>
      <anchor>a3179d9e6110012701606fde4248f372d</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody.html</anchorfile>
      <anchor>a4905c79f1e6f30cc71f8b4d10a95d43d</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody.html</anchorfile>
      <anchor>a602a875690cb121274f89783ee26d7c9</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody.html</anchorfile>
      <anchor>a446613d6e75922138f703321b86105f7</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody.html</anchorfile>
      <anchor>a419a2d290d5f007187eadb7287acc97f</anchor>
      <arglist>(GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody.html</anchorfile>
      <anchor>a330b97c80035a2aec986189bc23d2eeb</anchor>
      <arglist>(const QuinaryForEachVoxelBody &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody.html</anchorfile>
      <anchor>afe35b1b52cb48dd02822a332eb0fb9c5</anchor>
      <arglist>(QuinaryForEachVoxelBody &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::QuinaryForEachVoxelBody_1Const</name>
    <filename>structmirtk_1_1QuinaryForEachVoxelBody__1Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>ab65e8a02bbdbfc35053d78e965edd7e0</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a6deafcd9293fee10260f0bc1e2127030</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a3dceb109cf7dc8fb9fa730ce2cd0768f</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a8a45d46a44090b95e0f751953aacd556</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelBody_1Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a949ced0e48d0b66d8024549c1b0e0a42</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelBody_1Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a81750a399d3fdda0f9a058d38d920b89</anchor>
      <arglist>(const QuinaryForEachVoxelBody_1Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelBody_1Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>abd614b5338d49640050a1b7c45d5b27a</anchor>
      <arglist>(QuinaryForEachVoxelBody_1Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::QuinaryForEachVoxelBody_2Const</name>
    <filename>structmirtk_1_1QuinaryForEachVoxelBody__2Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a36600694269dfa8b5a10becd47dc2b9f</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a98e3230fe4165c5df996683601f55c22</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a847250c1b5a66d7f022d983f739ca403</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a03dd8bf74864c1159b43da746ec02161</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelBody_2Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a2a01f372b76c5978cd6c2853182c6671</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelBody_2Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a52ac3695433e2da5f08de255b03ea76f</anchor>
      <arglist>(const QuinaryForEachVoxelBody_2Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelBody_2Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a0a1e2d313c338254eb1b32be8bb702c9</anchor>
      <arglist>(QuinaryForEachVoxelBody_2Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::QuinaryForEachVoxelBody_3Const</name>
    <filename>structmirtk_1_1QuinaryForEachVoxelBody__3Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>a47f55fe7bfda82f31d5b0141b8029821</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>a6883903a9ab3319e9a1c624ee32f043f</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>ac17e432fdd245f14332cbaa25ab4c871</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>ab62c73110e924ec73909ac4ee8e7f050</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelBody_3Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>a64adca48711b92833ba6d05ee1698bfb</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelBody_3Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>a482a019e905bf065b68f2d0be223f476</anchor>
      <arglist>(const QuinaryForEachVoxelBody_3Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelBody_3Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>ad4df02f15e17d424e5fd1e9b61a5455c</anchor>
      <arglist>(QuinaryForEachVoxelBody_3Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::QuinaryForEachVoxelBody_4Const</name>
    <filename>structmirtk_1_1QuinaryForEachVoxelBody__4Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>a2fffb9ddd9b9fb4ce8c92cb3ddea6672</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>a97da9b988b1e797c7a3386855df46beb</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>a9d86d49720748fdb95fc404ab4778cd1</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>acbd7ad6084b3fc1623ca1d072269e105</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelBody_4Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>af9ac7ee7723999c3cf926554d94a2ec0</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelBody_4Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>ac82deb5ceac1cf2526e657c9e60e9fd7</anchor>
      <arglist>(const QuinaryForEachVoxelBody_4Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelBody_4Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>aedf5ddebd2e6790dea58dcc160e2cf59</anchor>
      <arglist>(QuinaryForEachVoxelBody_4Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::QuinaryForEachVoxelBody_Const</name>
    <filename>structmirtk_1_1QuinaryForEachVoxelBody__Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>ad63b113420f0b5758186b6c79f6ba83b</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>ae8e2f04ce985102b413ac22305bdd74b</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a791a3b31a6fbe59f7d83cbb6dc31530a</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a7ad19e22e5881e710a2198e16d8077c4</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a0d9d9f3c02372a5920416ebb0715ea74</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a80be0c01b5a70dfc0e1c1d838df55805</anchor>
      <arglist>(const QuinaryForEachVoxelBody_Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a0546277e2a14b70dbe8025248dea349d</anchor>
      <arglist>(QuinaryForEachVoxelBody_Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::QuinaryForEachVoxelIfBody</name>
    <filename>structmirtk_1_1QuinaryForEachVoxelIfBody.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a5fe165d3d53330f96a6f20d4e87f31a1</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody.html</anchorfile>
      <anchor>ac0d743b8203c054daa7e1459d797aed7</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody.html</anchorfile>
      <anchor>aee03dc5ed22de37e23b6075747de71ea</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a70ce826fb6cca3c769fa45463c40d48c</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody.html</anchorfile>
      <anchor>ad40bedf57c2816d1124e45204e6f41f4</anchor>
      <arglist>(GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody.html</anchorfile>
      <anchor>aaa977862a567c53010cf3b0fd2b7fbef</anchor>
      <arglist>(const QuinaryForEachVoxelIfBody &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a052fc0e797f590cd5421506de958a52b</anchor>
      <arglist>(QuinaryForEachVoxelIfBody &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::QuinaryForEachVoxelIfBody_1Const</name>
    <filename>structmirtk_1_1QuinaryForEachVoxelIfBody__1Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a39b3181bb1f627511440e222f3095a5c</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a85f27720524b381867015749c03acee9</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a7e1a7ed17a91e9b6a8a0ed3e97ffa2b8</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a948e8af2efb6f6a5cfdd4edf19b0c3e5</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelIfBody_1Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a009a3370b65c98a3d4350b4fbfb07eb3</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelIfBody_1Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a8afe98606117475fac2ab7c82d190dc6</anchor>
      <arglist>(const QuinaryForEachVoxelIfBody_1Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelIfBody_1Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a4fd766ebe38834843f3815851f315a0a</anchor>
      <arglist>(QuinaryForEachVoxelIfBody_1Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::QuinaryForEachVoxelIfBody_2Const</name>
    <filename>structmirtk_1_1QuinaryForEachVoxelIfBody__2Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>af54d71d7eacf757f8ce1d99a18dc7c63</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a3a90543e8f009305205573f625cbbd3c</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>af1370ffbe970bb1be040893332ecde84</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>af098514a527e12c7c4b64d8fed5df87f</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelIfBody_2Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>adcf0f9d0c4a367e46066a747b15150f1</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelIfBody_2Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a0b0ba46337354b9b3ef91a6b71cfde3c</anchor>
      <arglist>(const QuinaryForEachVoxelIfBody_2Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelIfBody_2Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a8d43b9cadf3f989ed64d06c9afc7380b</anchor>
      <arglist>(QuinaryForEachVoxelIfBody_2Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::QuinaryForEachVoxelIfBody_3Const</name>
    <filename>structmirtk_1_1QuinaryForEachVoxelIfBody__3Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>a8613b9130e813b00044c9f62500fa20a</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>a15a360ccfe5504bb42021ce82b8a7fa7</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>a7279e4ed7698e15f07581880b4637060</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>a19f61c667213e3b5cd1c994bd079d07f</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelIfBody_3Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>a8377f44542ab3afd023eab9d769cad6e</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelIfBody_3Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>af715ba64fcafee15f13bd69887b9ed89</anchor>
      <arglist>(const QuinaryForEachVoxelIfBody_3Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelIfBody_3Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>a8f13d32af0abe9afb9b4a0424d6b8ac8</anchor>
      <arglist>(QuinaryForEachVoxelIfBody_3Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::QuinaryForEachVoxelIfBody_4Const</name>
    <filename>structmirtk_1_1QuinaryForEachVoxelIfBody__4Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>ae9f23b53136770ddbe91be403ec73c5c</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>a9454aa7e88c71089ef495ef1d5bded33</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>ad83cf99ed1dba1c07f1432c33a85ffe5</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>a1bda0496f2fdf905e7e2ca2d6a940000</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelIfBody_4Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>a03d6892303b7925368c06cc2b0ffa5d9</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelIfBody_4Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>aa7cb95d7c84af2885008f55b8402d351</anchor>
      <arglist>(const QuinaryForEachVoxelIfBody_4Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelIfBody_4Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>ab884a34e9fa930d3a639364fbf6e8a2d</anchor>
      <arglist>(QuinaryForEachVoxelIfBody_4Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::QuinaryForEachVoxelIfBody_Const</name>
    <filename>structmirtk_1_1QuinaryForEachVoxelIfBody__Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a069cb501111197fcd7330568e1181c39</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>aee2eb4dca3b938e708e5f6f963bd2351</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>abb1a8d92fa8f9038883f71c2b574264a</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>aba3d68359a75cb736d532d53cd2e4601</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a90075ace44177814a2bec7af20829bdb</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a1edb26b601e248d847f1cbc5fd10313d</anchor>
      <arglist>(const QuinaryForEachVoxelIfBody_Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a4c1f77d25b3e5f6fa355ba732a793e64</anchor>
      <arglist>(QuinaryForEachVoxelIfBody_Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::RadialErrorFunction</name>
    <filename>classmirtk_1_1RadialErrorFunction.html</filename>
    <base>mirtk::Object</base>
    <member kind="enumvalue">
      <name>Charbonnier</name>
      <anchorfile>classmirtk_1_1RadialErrorFunction.html</anchorfile>
      <anchor>aaedf1ab900d502f62829a058a1430cf5a5ba1a80144bc1c38cdd61734157b36ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Distance</name>
      <anchorfile>classmirtk_1_1RadialErrorFunction.html</anchorfile>
      <anchor>aaedf1ab900d502f62829a058a1430cf5a26957a35aafd400883fd31062dceab5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Gaussian</name>
      <anchorfile>classmirtk_1_1RadialErrorFunction.html</anchorfile>
      <anchor>aaedf1ab900d502f62829a058a1430cf5ae24678dc9d5dc43aa6c7559426cc61b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PeronaMalik</name>
      <anchorfile>classmirtk_1_1RadialErrorFunction.html</anchorfile>
      <anchor>aaedf1ab900d502f62829a058a1430cf5a8eff0cbc3f741528576f7b6553a4ddab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Squared</name>
      <anchorfile>classmirtk_1_1RadialErrorFunction.html</anchorfile>
      <anchor>aaedf1ab900d502f62829a058a1430cf5a8742850f0c175551e369b2387294e9b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TypeId</name>
      <anchorfile>classmirtk_1_1RadialErrorFunction.html</anchorfile>
      <anchor>aaedf1ab900d502f62829a058a1430cf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Unknown</name>
      <anchorfile>classmirtk_1_1RadialErrorFunction.html</anchorfile>
      <anchor>aaedf1ab900d502f62829a058a1430cf5aeba9a8fa930e6e3e597c9ee74d56299d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Distance</name>
      <anchorfile>classmirtk_1_1RadialErrorFunction.html</anchorfile>
      <anchor>aaedf1ab900d502f62829a058a1430cf5a26957a35aafd400883fd31062dceab5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Squared</name>
      <anchorfile>classmirtk_1_1RadialErrorFunction.html</anchorfile>
      <anchor>aaedf1ab900d502f62829a058a1430cf5a8742850f0c175551e369b2387294e9b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Gaussian</name>
      <anchorfile>classmirtk_1_1RadialErrorFunction.html</anchorfile>
      <anchor>aaedf1ab900d502f62829a058a1430cf5ae24678dc9d5dc43aa6c7559426cc61b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Charbonnier</name>
      <anchorfile>classmirtk_1_1RadialErrorFunction.html</anchorfile>
      <anchor>aaedf1ab900d502f62829a058a1430cf5a5ba1a80144bc1c38cdd61734157b36ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PeronaMalik</name>
      <anchorfile>classmirtk_1_1RadialErrorFunction.html</anchorfile>
      <anchor>aaedf1ab900d502f62829a058a1430cf5a8eff0cbc3f741528576f7b6553a4ddab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Unknown</name>
      <anchorfile>classmirtk_1_1RadialErrorFunction.html</anchorfile>
      <anchor>aaedf1ab900d502f62829a058a1430cf5aeba9a8fa930e6e3e597c9ee74d56299d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>Derivative</name>
      <anchorfile>classmirtk_1_1RadialErrorFunction.html</anchorfile>
      <anchor>a992df9d3a9d940683226bc7a63cc4f8c</anchor>
      <arglist>(double d) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual RadialErrorFunction *</type>
      <name>NewInstance</name>
      <anchorfile>classmirtk_1_1RadialErrorFunction.html</anchorfile>
      <anchor>aa8243a59319b0457558cbafc455d8545</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TypeId</type>
      <name>Type</name>
      <anchorfile>classmirtk_1_1RadialErrorFunction.html</anchorfile>
      <anchor>a15d7e4ecda35be2c670d1114663510c8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>Value</name>
      <anchorfile>classmirtk_1_1RadialErrorFunction.html</anchorfile>
      <anchor>ada9ff5c4920ef6e6a19cdfaa6cbd29fa</anchor>
      <arglist>(double d) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>~RadialErrorFunction</name>
      <anchorfile>classmirtk_1_1RadialErrorFunction.html</anchorfile>
      <anchor>aa68e7cc575e15a554fc1c32f94130487</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RadialErrorFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1RadialErrorFunction.html</anchorfile>
      <anchor>a12f4aa06c9a826cc6f8571581377af6f</anchor>
      <arglist>(TypeId)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RadialErrorFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1RadialErrorFunction.html</anchorfile>
      <anchor>ac14450e173b6430ba85589a0b2c0193f</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RadialErrorFunction</name>
      <anchorfile>classmirtk_1_1RadialErrorFunction.html</anchorfile>
      <anchor>aa1de9b25182557e99866054a790eadb8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::statistic::Range</name>
    <filename>classmirtk_1_1data_1_1statistic_1_1Range.html</filename>
    <base>mirtk::data::Statistic</base>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1data_1_1statistic_1_1Range.html</anchorfile>
      <anchor>aaf0a2ceb4bc5e8e80ed35f5f9c56294f</anchor>
      <arglist>(Array&lt; double &gt; &amp;values, int n, const double *data, const bool *mask=nullptr) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::RegisteredImage</name>
    <filename>classmirtk_1_1RegisteredImage.html</filename>
    <base>GenericImage&lt; double &gt;</base>
    <member kind="enumeration">
      <type></type>
      <name>Channel</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>abb33060de7bcee413f23d324b7fd74b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericImage&lt; double &gt;</type>
      <name>DisplacementImageType</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>ab6ba35d7a5e01bc34f4dd87dfbe6952c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericImage&lt; VoxelType &gt;</type>
      <name>InputGradientType</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>aa517497ccc6263ceba8de59964d0818d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericImage&lt; VoxelType &gt;</type>
      <name>InputHessianType</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>aa386e1f6823a3a30f09f8f16db29b17c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericImage&lt; VoxelType &gt;</type>
      <name>InputImageType</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a2a1cb3792c306a4ed8bd6331cf3e97d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>enum InterpolationMode</type>
      <name>GetInterpolationMode</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>aa63df57a8392d2539ac1e50fac684467</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>aab25f56dc4e5b10ffa743e09f0a5a850</anchor>
      <arglist>(const ImageAttributes &amp;, int=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkComponentMacro</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a5b1fdd4a26a23abbdbc1cc8df5254895</anchor>
      <arglist>(DisplacementImageType, FixedDisplacement)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkComponentMacro</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>ab4dc19076a37883b7474d7189df707eb</anchor>
      <arglist>(DisplacementImageType, Displacement)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>ab6c7d445567baa56f73791bf5643b8fc</anchor>
      <arglist>(InputImageType, InputImage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a81d465cb261564d15f2a8fee4361090b</anchor>
      <arglist>(const class Transformation, Transformation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a450d384516409ec72970ce44ef5f04e8</anchor>
      <arglist>(WorldCoordsImage, WorldCoordinates)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a47c2047aeb42b284533a78c7b0243406</anchor>
      <arglist>(DisplacementImageType, ExternalDisplacement)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a5bd453140b7150f00f847f801602622b</anchor>
      <arglist>(enum InterpolationMode, InterpolationMode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a2c80063487b8980d848ccdd23b50b7a1</anchor>
      <arglist>(enum ExtrapolationMode, ExtrapolationMode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a51acbd711e502990fec2cced6e31b5bc</anchor>
      <arglist>(bool, CacheWorldCoordinates)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>af066353579d5ea15c648141e603b57f0</anchor>
      <arglist>(bool, CacheFixedDisplacement)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a77e55fd97ff4e906108e953552a9fa2d</anchor>
      <arglist>(bool, CacheDisplacement)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a518e6a32ce711ab87d5af50dbf0167d7</anchor>
      <arglist>(bool, SelfUpdate)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>ae124ae19bba5c4194ee462a1740bec2d</anchor>
      <arglist>(double, MinIntensity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>abd744061c9a4ae4fefb5a99aa8689324</anchor>
      <arglist>(double, MaxIntensity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>afe5cf5e0d8ed700451677960e923cdb2</anchor>
      <arglist>(double, GradientSigma)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a458a04d775291663a4980815d8748441</anchor>
      <arglist>(double, HessianSigma)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a5b0b433c1c4e0110efba84eff8ab1835</anchor>
      <arglist>(bool, PrecomputeDerivatives)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>ae7d99ec3f0f8c9fb9037e246d95594ee</anchor>
      <arglist>(int, MaxGradientPercentile)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>ab06e56cb4fb0cc5b52f95112eca4ef9b</anchor>
      <arglist>(double, MaxGradientMagnitude)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicComponentMacro</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a0aea2f29d6bc825d79a5e4593744559c</anchor>
      <arglist>(InputGradientType, InputGradient)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicComponentMacro</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a3150746d8756f469cb173b080926211a</anchor>
      <arglist>(InputHessianType, InputHessian)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicComponentMacro</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>ac6cb6cfa4c613e956dbb77042900a41b</anchor>
      <arglist>(WorldCoordsImage, ImageToWorld)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a726801d566934c1e25f9f2e4a3f77716</anchor>
      <arglist>(double, MinInputIntensity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>aad166194b32c8fde6971c5c3d9b37ad9</anchor>
      <arglist>(double, MaxInputIntensity)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfChannels</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a40ae5c02b94841edfe9f8d239c23210a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfVoxels</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a4605a35669003ac6e4ac54b444a5a743</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Offset</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>ab9bb52adaaafb1e9e048708322d02e26</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>RegisteredImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a39b4059e0f20fc3eed861e8de6e0fcf6</anchor>
      <arglist>(const RegisteredImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Recompute</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a591b922314b2f4422df42662a16c6820</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;region)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Recompute</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a64e1e59fc49ebc31b3afcf412d668194</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RegisteredImage</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a5a93bddc7e1a7506396a81b8a040a589</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RegisteredImage</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>af1446f0f6d88923113cbcfc843d66fba</anchor>
      <arglist>(const RegisteredImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>aa15d395c3526c231e42e4d161dffa04a</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;region, bool intensity=true, bool gradient=false, bool hessian=false, bool force=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a82c1e2a3d6313f573d8f19e357fb76c8</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;region, const DisplacementImageType *disp, bool intensity=true, bool gradient=false, bool hessian=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a0398dcdd016f3d5ca8d1307586697ef6</anchor>
      <arglist>(bool intensity=true, bool gradient=false, bool hessian=false, bool force=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RegisteredImage</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a5459cdaf1e53e2b64a905695d2c11609</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ComputeInputGradient</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a43d21503daefbcaab892a43a43fdb8ba</anchor>
      <arglist>(double sigma)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ComputeInputHessian</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a7c446dbac893cd238c8e560428bd0cae</anchor>
      <arglist>(double sigma)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_NumberOfActiveLevels</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a95db76b8a0540ae54359aa0d4e7d1e8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_NumberOfPassiveLevels</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>ad8be2db3847d2e7f91d044f453a09050</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_Offset</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>ae0989ea6922fb1e1c5e119ade2cdba63</anchor>
      <arglist>[13]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::RegisteredPointSet</name>
    <filename>classmirtk_1_1RegisteredPointSet.html</filename>
    <base>mirtk::Object</base>
    <class kind="struct">mirtk::RegisteredPointSet::ScalingFunction</class>
    <member kind="typedef">
      <type>mirtk::EdgeTable</type>
      <name>EdgeTable</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a6146fe3b457808b7ce82bd9f075ee9a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EdgeConnectivity</type>
      <name>NodeNeighbors</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>ad8a3f4a4d4152bf1abe027e6a7cb3163</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Array&lt; ScalingFunction &gt;</type>
      <name>ScalingFunctions</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>aec21313110030f4b11d996b874317301</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BuildEdgeTables</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a89d261713ae52055ed5983438287480a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BuildLocators</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a2c377c00ad8c921cb637d163e1eff2de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BuildNeighborhoodTables</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>ada2d4af0f6edb69a9cf663690c6d83af</anchor>
      <arglist>(int n=-1)</arglist>
    </member>
    <member kind="function">
      <type>vtkAbstractCellLocator *</type>
      <name>CellLocator</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a78ed0d11d29584d92c0b491bf258cab5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>DefaultExtension</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a47e4d11665a5c55ea0bc441b7b0d7593</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const EdgeTable *</type>
      <name>Edges</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>ab3275fa9b04848d0cd6369daadc43be0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetInputPoint</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>aa59167464ffa3cfafcd355821473273f</anchor>
      <arglist>(int, double &amp;, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetInputPoint</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a35cf73a50ff44e6bef1c329fbec2df8c</anchor>
      <arglist>(int, double *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetInputPoint</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a214a18a37774f13077d5f103d2353d91</anchor>
      <arglist>(int, Point &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetInputPoints</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>abb888767cbe1d48cf1968f648644f15a</anchor>
      <arglist>(class PointSet &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetInputSurfacePoint</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a81722fb3366fed66ad4401da8fe55ced</anchor>
      <arglist>(int, double &amp;, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetInputSurfacePoint</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>ad0f7b024589fded9b6d45aa21ebae391</anchor>
      <arglist>(int, double *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetInputSurfacePoint</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>ae09656a692fe610e76195c7b9493fb0f</anchor>
      <arglist>(int, Point &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetInputSurfacePoints</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>aeb4a09b7467a16445db0030c8ff3271e</anchor>
      <arglist>(class PointSet &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetPoint</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a9bf59f267f3bfd6b80602c5851448894</anchor>
      <arglist>(int, double &amp;, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetPoint</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a716b9eea9cdc70649bfdbdaf378c7683</anchor>
      <arglist>(int, double *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetPoint</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a788122da1cc6adc1336c49ccc9168f6d</anchor>
      <arglist>(int, Point &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetPoints</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>af16bb8717c1b2c18ef7669a249a1d195</anchor>
      <arglist>(class PointSet &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetSurfacePoint</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a78aec32a8d266bb5493a14cab0e81d54</anchor>
      <arglist>(int, double &amp;, double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetSurfacePoint</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a1e5c12470d97b9d41454857a8d8b2b08</anchor>
      <arglist>(int, double *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetSurfacePoint</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a8ded44cc805f0d29498c2f406d8af329</anchor>
      <arglist>(int, Point &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetSurfacePoints</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>ab2e94b723fbd22623a6f92e28d724b19</anchor>
      <arglist>(class PointSet &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a4d0af240f9c0c27ccb3c9088b51bd10a</anchor>
      <arglist>(bool deep_copy_points=false)</arglist>
    </member>
    <member kind="function">
      <type>vtkDataArray *</type>
      <name>InitialStatus</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a0879e6f682c73e7fff851ea851b44ce0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>vtkDataArray *</type>
      <name>InitialSurfaceStatus</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a9159a7442c2aa70c236d16382ec142f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InputPointsChanged</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a8c8b02499555b8332ef302fa6e4ca052</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>InputSurfaceArea</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a56e154974bb6817e49b4af072c2ab5cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const class PointSet &amp;</type>
      <name>InputSurfacePoints</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a333f436f7cbe015ef6d757aecbe21c3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSurface</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a606e1077a111d3319ab8225e1c6d61ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const NodeNeighbors *</type>
      <name>Neighbors</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a52cd28b34ee0e4e5c825a52910d2b977</anchor>
      <arglist>(int=-1) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfCells</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a6e3f5eb7238ead7bb20128f0fa642871</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfEdges</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a5fde1fe9999fb71bfedb955e54e3ee11</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfPoints</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a60d8274f2f7103936e8ca69d977e3221</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfSurfaceCells</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a45d02981107e0b3e70a02cc4542cba8b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfSurfaceEdges</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a3753366044fb5011bab45ee79374ea3f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfSurfacePoints</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>aeef43d6f251d3cd8baf91ecbda937672</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator vtkDataSet *</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a334d65bfe2f3a2cbc526fb0776377276</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator vtkPointSet *</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a398356433fa96e4b7d7846a1d1535762</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RegisteredPointSet &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>aac7919cf7417bd735abe3106efcbc487</anchor>
      <arglist>(const RegisteredPointSet &amp;)</arglist>
    </member>
    <member kind="function">
      <type>vtkIdTypeArray *</type>
      <name>OriginalSurfaceCellIds</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a6c751093b32360ca64e3bd6268eb8e59</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>vtkIdTypeArray *</type>
      <name>OriginalSurfacePointIds</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>ad9c7b60e60633ecf9374a62bdb0cde05</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>vtkAbstractPointLocator *</type>
      <name>PointLocator</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a9678ec1e84297280b67d16fb20571731</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>vtkPoints *</type>
      <name>Points</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a99e77315885c9ca3a80831ed4d7e8c2f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PointsChanged</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>ab0cbdd400b5600ed8758a7d040dc7f50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>vtkPointSet *</type>
      <name>PointSet</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a3ca36460fd8301fd185ff2b4a8a2f7a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RegisteredPointSet</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>ad47ff3618b9bcd438ee192a6f324c2f9</anchor>
      <arglist>(vtkPointSet *=NULL, const class Transformation *=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RegisteredPointSet</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>aafba1a59bcdd703ca74373c790024bbb</anchor>
      <arglist>(const RegisteredPointSet &amp;)</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr&lt; const EdgeTable &gt;</type>
      <name>SharedEdgeTable</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>ad8fe76ebcfb3d96501ea429a8ea3962c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr&lt; const EdgeTable &gt;</type>
      <name>SharedSurfaceEdgeTable</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>ac09ec403b759b056234464753c192c95</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>vtkDataArray *</type>
      <name>Status</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>ab429aa0645041dfda10cfda4570e2fe9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>vtkPolyData *</type>
      <name>Surface</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>aad579172948eab6c43eded3018705451</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SurfaceArea</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>ac7c4ee240331402dfcba35a5236b693d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>vtkAbstractCellLocator *</type>
      <name>SurfaceCellLocator</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a7effb11fef40d19448f1550a5a7ceefd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const EdgeTable *</type>
      <name>SurfaceEdges</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>aee3dce177670023f3b018bf18f356f12</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>vtkDataArray *</type>
      <name>SurfaceFaceNormals</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a78ddca8c1e1bc42506814f2019b1681f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const NodeNeighbors *</type>
      <name>SurfaceNeighbors</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>aeebaa24fda33a15291d8acc553dcdf59</anchor>
      <arglist>(int=-1) const</arglist>
    </member>
    <member kind="function">
      <type>vtkDataArray *</type>
      <name>SurfaceNormals</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>aef960ae6ca4fa77648815d8e93358944</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>vtkAbstractPointLocator *</type>
      <name>SurfacePointLocator</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>ad9a899d506d078c38eb520d6ee73ed8d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>vtkPoints *</type>
      <name>SurfacePoints</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a9fe8c355bb18ee43fa575c52175c1c0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>vtkDataArray *</type>
      <name>SurfaceStatus</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a6e12a59dbb057d697528e9bf93331c77</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a126444ac6571083e191e7922ddfbf96a</anchor>
      <arglist>(bool force=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>ac77d6314cb4ee6d05da6dc6fb0cd44de</anchor>
      <arglist>(const char *, vtkAbstractArray *=NULL, vtkAbstractArray *=NULL) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a436b631fc8086e9e8fb96e2e3ba31ff7</anchor>
      <arglist>(const char *, vtkAbstractArray **, int, vtkAbstractArray **=NULL, int=0) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RegisteredPointSet</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a4c126a55f84fa828eb818cebb2660c5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CopyAttributes</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>afddd7b4a01fa46099ecf2e0cf61b1aba</anchor>
      <arglist>(const RegisteredPointSet &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkComponentMacro</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>acf9ed3dab6c36b2878a26edd8c55462e</anchor>
      <arglist>(GenericImage&lt; double &gt;, Displacement)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>ad6597ddf104eece0da189fc34ca9fa5d</anchor>
      <arglist>(const class Transformation, Transformation)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a11c33dc7917ded92e8092a5bbd2b243b</anchor>
      <arglist>(GenericImage&lt; double &gt;, ExternalDisplacement)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a24aa8af178679c5198c0246596160e2e</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPointSet &gt;, InputPointSet)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a4722c57a025a284a3933438c8b2b383b</anchor>
      <arglist>(double, InputTime)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>aad52e293e8e077e241a8ed65c151b4c0</anchor>
      <arglist>(double, Time)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a8bf5675bd88a6c1d29ae0028ba09c300</anchor>
      <arglist>(ScalingFunctions, PointDataToCopy)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a9dac4a6b4e063eb8338b22c9b0db9bdf</anchor>
      <arglist>(bool, CopyAll)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>afdec3ac3ddc2d0b7836ddb62e202fa03</anchor>
      <arglist>(int, NeighborhoodRadius)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a92b8e69f98317441aab72fa119bc7d52</anchor>
      <arglist>(bool, SelfUpdate)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a05da7ea6ec47c7e544a94cf36d41da23</anchor>
      <arglist>(bool, UpdateSurfaceNormals)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>ac7493af4340bc4e48e63213b769f4868</anchor>
      <arglist>(bool, UpdateSurfaceFaceNormals)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a68ee4a525b606b7459447d18b2bd01cb</anchor>
      <arglist>(ImageAttributes, Domain)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a0f98366d9f17890095b2dca885b53bca</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPolyData &gt;, InputSurface)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>aee46c7d0c2222a391003b28680130433</anchor>
      <arglist>(bool, IsSurfaceMesh)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>afa7a9bb82b2c4441f50a14e4f1055d47</anchor>
      <arglist>(class PointSet, InputPoints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a9f0b5c22321da0c68f5529937c32cd25</anchor>
      <arglist>(double, AverageInputEdgeLength)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>ad616ee2a79ba789aee0de68d9bfbb229</anchor>
      <arglist>(double, AverageInputSurfaceEdgeLength)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a579f91c4a01e269e6836e21e367e1724</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPointSet &gt;, OutputPointSet)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>aa2f3529d279962c03ecd3356daf7aeef</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPolyData &gt;, OutputSurface)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a4eb8d5048aa01ee124ae76a9e58713e6</anchor>
      <arglist>(double, InputDiameter)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a6c2a1fe5bb85324602b7be80a0462480</anchor>
      <arglist>(double, Diameter)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vtkSmartPointer&lt; vtkAbstractCellLocator &gt;</type>
      <name>_CellLocator</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a763b34c9673c6c7ca8414e780b1708b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SharedPtr&lt; const EdgeTable &gt;</type>
      <name>_EdgeTable</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a9bf3c46291bda943b7d63b7d38e72019</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_InputSurfaceArea</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a9d77aba4d0aab1064925504563c2e67b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>class PointSet *</type>
      <name>_InputSurfacePoints</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a6cf57ec5cacc1841abd281aff47267b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeNeighbors</type>
      <name>_NodeNeighbors</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a7cd6d82ed70f90f87c1a02c694cab889</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vtkSmartPointer&lt; vtkAbstractPointLocator &gt;</type>
      <name>_PointLocator</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a3e151ddff3a04d10239d04caa1343d80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_SurfaceArea</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a223ae12bd7a3e67a079d1c2dfe8515ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vtkSmartPointer&lt; vtkAbstractCellLocator &gt;</type>
      <name>_SurfaceCellLocator</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>ab9097debd4bbbb4e7257c6669908b2d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SharedPtr&lt; const EdgeTable &gt;</type>
      <name>_SurfaceEdgeTable</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>accc2ba4230fb5baadee3b609721c44e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeNeighbors</type>
      <name>_SurfaceNodeNeighbors</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a41b83cec6228a19d93507ca13eb16766</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vtkSmartPointer&lt; vtkAbstractPointLocator &gt;</type>
      <name>_SurfacePointLocator</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a66247f6796b46bc0ebc06ebd8d221952</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::RegisteredSurface</name>
    <filename>classmirtk_1_1RegisteredSurface.html</filename>
    <base>mirtk::RegisteredPointSet</base>
    <member kind="function">
      <type>void</type>
      <name>GetCellPoints</name>
      <anchorfile>classmirtk_1_1RegisteredSurface.html</anchorfile>
      <anchor>ab65032461e3431d7a32559da0d9ec161</anchor>
      <arglist>(int, vtkIdType &amp;, const vtkIdType *&amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1RegisteredSurface.html</anchorfile>
      <anchor>a13dd979b0d34667c21973ff06283c45b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InputSurface</name>
      <anchorfile>classmirtk_1_1RegisteredSurface.html</anchorfile>
      <anchor>ac2478be7ec3e680fd741ed022aa47a9d</anchor>
      <arglist>(vtkPolyData *)</arglist>
    </member>
    <member kind="function">
      <type>vtkCellArray *</type>
      <name>Lines</name>
      <anchorfile>classmirtk_1_1RegisteredSurface.html</anchorfile>
      <anchor>a0cce82ba4e98b9cd8f1d1923417f04ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfLines</name>
      <anchorfile>classmirtk_1_1RegisteredSurface.html</anchorfile>
      <anchor>a887b04181bf788919c3513c6b709861b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfPolys</name>
      <anchorfile>classmirtk_1_1RegisteredSurface.html</anchorfile>
      <anchor>aea70796a3921c558fd9567f6059fb7f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfStrips</name>
      <anchorfile>classmirtk_1_1RegisteredSurface.html</anchorfile>
      <anchor>ac827f3e6bc8087322d0cf530d0b233de</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfVerts</name>
      <anchorfile>classmirtk_1_1RegisteredSurface.html</anchorfile>
      <anchor>a346f4779b0d695d82421aa113b27f3fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RegisteredSurface &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1RegisteredSurface.html</anchorfile>
      <anchor>aa92a9e250a90492211841e02978b808a</anchor>
      <arglist>(const RegisteredSurface &amp;)</arglist>
    </member>
    <member kind="function">
      <type>vtkPolyData *</type>
      <name>PolyData</name>
      <anchorfile>classmirtk_1_1RegisteredSurface.html</anchorfile>
      <anchor>a19e674924a648202fc5fd842d8931445</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>vtkCellArray *</type>
      <name>Polys</name>
      <anchorfile>classmirtk_1_1RegisteredSurface.html</anchorfile>
      <anchor>a22daebc5d2ce23d145c1e07163350644</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RegisteredSurface</name>
      <anchorfile>classmirtk_1_1RegisteredSurface.html</anchorfile>
      <anchor>a24a1c02e738798c8e8e97afdf0431647</anchor>
      <arglist>(vtkPolyData *=NULL, const class Transformation *=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RegisteredSurface</name>
      <anchorfile>classmirtk_1_1RegisteredSurface.html</anchorfile>
      <anchor>a5a6f8e5b1e675472520ca25ab045cefd</anchor>
      <arglist>(const RegisteredSurface &amp;)</arglist>
    </member>
    <member kind="function">
      <type>vtkCellArray *</type>
      <name>Strips</name>
      <anchorfile>classmirtk_1_1RegisteredSurface.html</anchorfile>
      <anchor>ab4125f106641bb21aff24e82948dddf6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>vtkCellArray *</type>
      <name>Verts</name>
      <anchorfile>classmirtk_1_1RegisteredSurface.html</anchorfile>
      <anchor>a54f364f104f8450c86038bc0711350b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RegisteredSurface</name>
      <anchorfile>classmirtk_1_1RegisteredSurface.html</anchorfile>
      <anchor>ab2a6556ed0a5054e54cead8bf0d50025</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::RegistrationEnergy</name>
    <filename>classmirtk_1_1RegistrationEnergy.html</filename>
    <base>mirtk::ObjectiveFunction</base>
    <member kind="typedef">
      <type>FastDelegate1&lt; bool &gt;</type>
      <name>PreUpdateFunctionType</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>ae6eb68d776a6588036cafad85837478e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>a71d2e666e3b4d6ad60e0ae02969cc9d3</anchor>
      <arglist>(EnergyTerm *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AddConstraintGradient</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>aa9d3fb24d715e9307b88e254c84c1a4f</anchor>
      <arglist>(double *dx, double step=.0, bool *sgn_chg=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>a8329d6c83cf141b73051b82d23df30de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DataFidelityGradient</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>a1fd52ff34ddcb53b3375c5bea9bf2601</anchor>
      <arglist>(double *dx, double step=.0, bool *sgn_chg=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Empty</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>a55c58e33adc77882c7a9c2b5ffa057c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>afe0f36a880e35fd5723a2769597ff9a9</anchor>
      <arglist>(double *dx=NULL, double step=.0, bool *sgn_chg=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>a0a9d5d7e02a67f5518c4f070b82b0b4a</anchor>
      <arglist>(double *x) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>a89c4b2317afcf57bf178b971f3ed87ce</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Gradient</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>aca3e4a4007986d7404fcbd751342ee68</anchor>
      <arglist>(double *dx, double step=.0, bool *sgn_chg=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GradientNorm</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>a892e15c6cf934f3e7ab0b7c6b2c21956</anchor>
      <arglist>(const double *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GradientStep</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>a85257e6d05790e18fd0ae5c91943fee1</anchor>
      <arglist>(const double *dx, double &amp;min, double &amp;max) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>a298b48a67772e34ce0224a9a02ef64b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>InitialValue</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>af0c3840473d343074db0ccf2d74247ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>InitialValue</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>a4cb77ba912c3f5c0f9ba20add7c6aa21</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsActive</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>a4c69c767c470ac1fcf1204b25d57e9c2</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsConstraint</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>a9aee9c28f9a721d1d93cafdac3001819</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsDataTerm</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>acb660017224f22b57c0ba582227d4fc5</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSparsityConstraint</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>ab7d6fd8cd5049551802cc22b204ba633</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NormalizeGradient</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>a2a1fdd723a2ab954a99d75db80f46965</anchor>
      <arglist>(double *dx)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfActiveTerms</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>a6115287fe12278a7abe4fcef69fed58a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfConstraints</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>a99817195ddd76acb08bf9fe342d6c699</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfDataTerms</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>aa0411e5a91047bac360483f34866f06f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumberOfDOFs</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>a89e6a54cd00d4387f40b33310d7ad7d8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfTerms</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>a906431e21a1b85e84ba1c0582518237b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>a909a941a95e1bc60fa66851ce20555db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>ad11f1850b6c3be4a960c2b0a2be8cbfb</anchor>
      <arglist>(const double *x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RawValue</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>ab6ba65f95ac32cc74eb50aa0f3b21b60</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RegistrationEnergy</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>a3d02262c93fa7e1f5b5edd560f8a10ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>ac8a0de26054702f1099fc67bbb49d2b9</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Step</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>a0b422cb0f285df394b31ebcb692712f6</anchor>
      <arglist>(double *dx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Sub</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>ad6e0b6bb35ed5ae712cc13e584a8382f</anchor>
      <arglist>(EnergyTerm *)</arglist>
    </member>
    <member kind="function">
      <type>EnergyTerm *</type>
      <name>Term</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>a09bdd6c30e328394999748bc216a1a4b</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>afcf02966c91c9846cb7b1c7286da852d</anchor>
      <arglist>(bool=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Upgrade</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>a0ab528eb9fa8f440a5bc26cb31cec842</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Value</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>ab29c5fd49e7d22fddfc1d59688c55e0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Value</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>a0d58be4d877a32bf7ca88c637892b51a</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteDataSets</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>a98729975e7e145bee6306c2c82563d54</anchor>
      <arglist>(const char *, const char *, bool=true) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteGradient</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>ab32ed27e9149edbbae3380f762fede60</anchor>
      <arglist>(const char *, const char *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RegistrationEnergy</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>ac8f323300a3e8b49b8a4dcfef806d52d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::RegistrationEnergyParser</name>
    <filename>classmirtk_1_1RegistrationEnergyParser.html</filename>
    <member kind="function">
      <type>void</type>
      <name>ParseEnergyFormula</name>
      <anchorfile>classmirtk_1_1RegistrationEnergyParser.html</anchorfile>
      <anchor>a07701409ef672216abaf1288bae22fe4</anchor>
      <arglist>(const string &amp;energy_formula, int nimages=-1, int npsets=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RegistrationEnergyParser</name>
      <anchorfile>classmirtk_1_1RegistrationEnergyParser.html</anchorfile>
      <anchor>a80450874d412ec05deebbe8d69dcad05</anchor>
      <arglist>(GenericRegistrationFilter *filter)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static string</type>
      <name>Substitute</name>
      <anchorfile>classmirtk_1_1RegistrationEnergyParser.html</anchorfile>
      <anchor>a70927545245b88ea17c4785841819328</anchor>
      <arglist>(const string &amp;s, const char *var, T value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ParseEnergyTerm</name>
      <anchorfile>classmirtk_1_1RegistrationEnergyParser.html</anchorfile>
      <anchor>a4681cbd4583bf40160373ec1b5e4e070</anchor>
      <arglist>(istream &amp;in, Token &amp;token, int nimages, int npsets)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>string</type>
      <name>TermName</name>
      <anchorfile>classmirtk_1_1RegistrationEnergyParser.html</anchorfile>
      <anchor>a0b54caac46cfcc511d90fe9aad5ca0c8</anchor>
      <arglist>(const string &amp;str, const ImageSimilarityInfo &amp;info, int i=-1) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>string</type>
      <name>TermName</name>
      <anchorfile>classmirtk_1_1RegistrationEnergyParser.html</anchorfile>
      <anchor>a4f233ced3e1ae06d12e517ba4bcc6992</anchor>
      <arglist>(const string &amp;str, const PointSetDistanceInfo &amp;info, int i=-1) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>string</type>
      <name>TermName</name>
      <anchorfile>classmirtk_1_1RegistrationEnergyParser.html</anchorfile>
      <anchor>a3333dbd2c68c36e94acc327d90599124</anchor>
      <arglist>(const string &amp;str, const PointSetConstraintInfo &amp;info, int i=-1) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::RegistrationFilter</name>
    <filename>classmirtk_1_1RegistrationFilter.html</filename>
    <base>mirtk::Observable</base>
    <member kind="function">
      <type>void</type>
      <name>Output</name>
      <anchorfile>classmirtk_1_1RegistrationFilter.html</anchorfile>
      <anchor>a18a4dfb175fe5d787f53ef35c574708d</anchor>
      <arglist>(Transformation **)</arglist>
    </member>
    <member kind="function">
      <type>Transformation *</type>
      <name>Output</name>
      <anchorfile>classmirtk_1_1RegistrationFilter.html</anchorfile>
      <anchor>ae22ad7975fab295713abd9a55c11d378</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1RegistrationFilter.html</anchorfile>
      <anchor>a46b8858c2c1a014f45d00f98f60fb2e7</anchor>
      <arglist>(const char *, bool=false)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1RegistrationFilter.html</anchorfile>
      <anchor>a0a0c09c309bddf17abdb6c837448fdb9</anchor>
      <arglist>(istream &amp;, bool=false)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1RegistrationFilter.html</anchorfile>
      <anchor>a8524a8326a3becf61c8ce5ed7fb2a1d5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1RegistrationFilter.html</anchorfile>
      <anchor>a9d1671c484b949d2a7246c99a9a04b35</anchor>
      <arglist>(const char *) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>~RegistrationFilter</name>
      <anchorfile>classmirtk_1_1RegistrationFilter.html</anchorfile>
      <anchor>ad54bbdbf04128f8624acda57a453bf88</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>Output</name>
      <anchorfile>classmirtk_1_1RegistrationFilter.html</anchorfile>
      <anchor>a47afc2b3674f0309f4daa691ff684c28</anchor>
      <arglist>(Transformation *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RegistrationFilter</name>
      <anchorfile>classmirtk_1_1RegistrationFilter.html</anchorfile>
      <anchor>a30de2bfa828a055877186230584233ed</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::RepeatExtrapolateImageFunction</name>
    <filename>classmirtk_1_1RepeatExtrapolateImageFunction.html</filename>
    <base>GenericRepeatExtrapolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>RepeatExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1RepeatExtrapolateImageFunction.html</anchorfile>
      <anchor>abec51648e12444f4bb782ba46b46ca7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RepeatExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1RepeatExtrapolateImageFunction.html</anchorfile>
      <anchor>a0d8557b0d065ae98f8f464b608db7b98</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::RepulsiveForce</name>
    <filename>classmirtk_1_1RepulsiveForce.html</filename>
    <base>mirtk::SurfaceConstraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1RepulsiveForce.html</anchorfile>
      <anchor>a20c2ef247b3cac1fa3601fb17a3ae943</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RepulsiveForce &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1RepulsiveForce.html</anchorfile>
      <anchor>af2a67d9af586b9d70c8a3d6e89ef4b30</anchor>
      <arglist>(const RepulsiveForce &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1RepulsiveForce.html</anchorfile>
      <anchor>a3064689c6a77075dae61934cb50dd17a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Reinitialize</name>
      <anchorfile>classmirtk_1_1RepulsiveForce.html</anchorfile>
      <anchor>a0b2fb108779cc3a419693a4ed1d6df78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RepulsiveForce</name>
      <anchorfile>classmirtk_1_1RepulsiveForce.html</anchorfile>
      <anchor>a698db272f56a395c344c04f9ff267301</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RepulsiveForce</name>
      <anchorfile>classmirtk_1_1RepulsiveForce.html</anchorfile>
      <anchor>a31f6b9a2d9537db24d8d8e608bc7e4a5</anchor>
      <arglist>(const RepulsiveForce &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1RepulsiveForce.html</anchorfile>
      <anchor>a0599d5cf8f5ce8538572b64ca94804dc</anchor>
      <arglist>(bool=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RepulsiveForce</name>
      <anchorfile>classmirtk_1_1RepulsiveForce.html</anchorfile>
      <anchor>a18565b06d51c867e528937eb74998162</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1RepulsiveForce.html</anchorfile>
      <anchor>acbffa4740ec73f3eb9e455407abce7cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1RepulsiveForce.html</anchorfile>
      <anchor>a70b81bcffb2f4673b8878b8ef969b51d</anchor>
      <arglist>(double *, double, double)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithoutPrefix</name>
      <anchorfile>classmirtk_1_1RepulsiveForce.html</anchorfile>
      <anchor>ac50b36f7201d730a542631383d76c082</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::Resampling</name>
    <filename>classmirtk_1_1Resampling.html</filename>
    <templarg></templarg>
    <base>mirtk::ImageToImage</base>
    <member kind="function">
      <type></type>
      <name>Resampling</name>
      <anchorfile>classmirtk_1_1Resampling.html</anchorfile>
      <anchor>abecef9772a36fc7d2e69ca9ed1c66212</anchor>
      <arglist>(double, double, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Resampling</name>
      <anchorfile>classmirtk_1_1Resampling.html</anchorfile>
      <anchor>a0787ed6237826e7aa4036ca89cdcffad</anchor>
      <arglist>(int, int, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Resampling</name>
      <anchorfile>classmirtk_1_1Resampling.html</anchorfile>
      <anchor>a1083de1867ce3ebf2b5369d967a83010</anchor>
      <arglist>(int, int, int, double, double, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1Resampling.html</anchorfile>
      <anchor>ae258a94795419c187d1c22163a9ebb9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1Resampling.html</anchorfile>
      <anchor>a7eecc28a1421480a9116ce0b52c79dbc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>InitializeOutput</name>
      <anchorfile>classmirtk_1_1Resampling.html</anchorfile>
      <anchor>a6f00244045e307d2c4e514699bec3a40</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ResamplingWithPadding</name>
    <filename>classmirtk_1_1ResamplingWithPadding.html</filename>
    <templarg></templarg>
    <base>mirtk::Resampling</base>
    <member kind="function">
      <type></type>
      <name>ResamplingWithPadding</name>
      <anchorfile>classmirtk_1_1ResamplingWithPadding.html</anchorfile>
      <anchor>a1f19fd6ffbdf151292fba8349dd8e28a</anchor>
      <arglist>(double, double, double, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ResamplingWithPadding</name>
      <anchorfile>classmirtk_1_1ResamplingWithPadding.html</anchorfile>
      <anchor>a8cdfbf3bfc612e571d0fcb125809f3d7</anchor>
      <arglist>(int, int, int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ResamplingWithPadding</name>
      <anchorfile>classmirtk_1_1ResamplingWithPadding.html</anchorfile>
      <anchor>a8d880834bbd473fed6128e8303006658</anchor>
      <arglist>(int, int, int, double, double, double, VoxelType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1ResamplingWithPadding.html</anchorfile>
      <anchor>a1b0a81ff7093e6f6da2e54b39084a582</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1ResamplingWithPadding.html</anchorfile>
      <anchor>a27a0ee0a4d81d243bd3f3df7865f7ed7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1ResamplingWithPadding.html</anchorfile>
      <anchor>afb3fe7c3c75ecfbb62cc34c29ecc0214</anchor>
      <arglist>(VoxelType, PaddingValue)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::Rescale</name>
    <filename>classmirtk_1_1data_1_1op_1_1Rescale.html</filename>
    <base>mirtk::data::Op</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Rescale.html</anchorfile>
      <anchor>ac15148cf2d600eccadd94f96f5bbd6d4</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::ResetMask</name>
    <filename>classmirtk_1_1data_1_1op_1_1ResetMask.html</filename>
    <base>mirtk::data::Op</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1ResetMask.html</anchorfile>
      <anchor>a7dd8b39f5eb8d21f65a7059b063e5814</anchor>
      <arglist>(int n, double *, bool *mask=nullptr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::RigidTransformation</name>
    <filename>classmirtk_1_1RigidTransformation.html</filename>
    <base>mirtk::HomogeneousTransformation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFs</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>a331c03f8b2add3b5343eded749491360</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DeriveJacobianWrtDOF</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>af8054280cc67b784960103a9ce675533</anchor>
      <arglist>(Matrix &amp;, int, double, double, double, double=0, double=-1) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetRotationX</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>ad75b12d3314e22ea1532c55e105a4c5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetRotationY</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>a26a800faa5e794dec7878d3457f7cace</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetRotationZ</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>a5e006a28c40d1bdb9aca4df94eb92052</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetTranslationX</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>addaf31626f95a1669a063936ccdb5ce6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetTranslationY</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>af2a9102caed014caa543a3118d50e429</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetTranslationZ</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>a3655776ee002132c30da15bf26462842</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>ac840cbed7a226be8db6249dc66bacea2</anchor>
      <arglist>(double [3], int, double, double, double, double=0, double=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>a9b3a84c9c0f915441df67928fd4e55b9</anchor>
      <arglist>(ostream &amp;, Indent=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutRotationX</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>a762749204acf043218b64bfddc7c4ebb</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutRotationY</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>a6093723ad60a5a17d7be91a6f26ce2fe</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutRotationZ</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>ad58415bf89e5e664ddf5cc7688a2a63d</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutTranslationX</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>af2d2d06521ae217522cbc787333ab35b</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutTranslationY</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>a333943fc226b3791aa954f82dfecbb87</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutTranslationZ</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>a14afb19a7a3626381dd0a80fab1c7ded</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RigidTransformation</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>a912344127f05611681bd23842cddb0c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RigidTransformation</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>a9e64c77500a635f74bdecd40432117d0</anchor>
      <arglist>(const RigidTransformation &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Rotate</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>a341ebea4128a0e2480072b3c044f3cf8</anchor>
      <arglist>(double &amp;x, double &amp;y, double &amp;z) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetParameters</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>abdad1d00782cfcb31d7d99eb50c5d78f</anchor>
      <arglist>(double *params)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Translate</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>aab63483c05110dbc2302ddfee4719c90</anchor>
      <arglist>(double &amp;x, double &amp;y, double &amp;z) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>UpdateDOFs</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>a5da6f062c162183a16e766abd93b7839</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>UpdateMatrix</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>a79f397c05a95713e627e7e2bbc8f0b9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RigidTransformation</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>aa1cf45d18126a77225ec51a14519a2e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix</type>
      <name>DOFs2Matrix</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>a46d4fa924af2abbb947c8631d55fc804</anchor>
      <arglist>(const double *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Matrix2DOFs</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>a9c0970dbf55e285ef516969e5947a06b</anchor>
      <arglist>(const Matrix &amp;, double *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RigidTransformation</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>ae2d1507004778829609b47b9f8e92032</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RigidTransformation</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>a819adc99ee7db09bc0741c206bbca57e</anchor>
      <arglist>(const RigidTransformation &amp;, int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UpdateRotationSineCosine</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>af787e626d769a682cf962dcbc713594e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_cosrx</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>a44fe5cb09edf099378eb1cf68c6e4005</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_cosry</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>aad6563225c1be3d361722e7656170260</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_cosrz</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>ad0fe7363ac53a2be4daaf5fcfed8423e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_sinrx</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>ad71639c04dea0bb64f8206dad2d98d6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_sinry</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>a003b9241b5073dbcfdd977a56f5878c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_sinrz</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>aae87b041ff243b2bc5503c99c7420636</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::RobustClosestPoint</name>
    <filename>classmirtk_1_1RobustClosestPoint.html</filename>
    <base>mirtk::FuzzyCorrespondence</base>
    <member kind="function" virtualness="virtual">
      <type>virtual PointCorrespondence *</type>
      <name>NewInstance</name>
      <anchorfile>classmirtk_1_1RobustClosestPoint.html</anchorfile>
      <anchor>abc095263374443938c1767863d0409c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1RobustClosestPoint.html</anchorfile>
      <anchor>a14c57fe633f3e78a946923a0a121b586</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RobustClosestPoint</name>
      <anchorfile>classmirtk_1_1RobustClosestPoint.html</anchorfile>
      <anchor>ab02ca820b3d81e36962f3217f7049be6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RobustClosestPoint</name>
      <anchorfile>classmirtk_1_1RobustClosestPoint.html</anchorfile>
      <anchor>a563cb2ce523efe20b64c647ce92643ec</anchor>
      <arglist>(const RegisteredPointSet *, const RegisteredPointSet *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RobustClosestPoint</name>
      <anchorfile>classmirtk_1_1RobustClosestPoint.html</anchorfile>
      <anchor>ae8ef810e74caf291e97ffdbdf4bddf0b</anchor>
      <arglist>(const RobustClosestPoint &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1RobustClosestPoint.html</anchorfile>
      <anchor>a9a694b96cd47fdb78806de1598c18358</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TypeId</type>
      <name>Type</name>
      <anchorfile>classmirtk_1_1RobustClosestPoint.html</anchorfile>
      <anchor>acccc105c072566bff47035f1388af120</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RobustClosestPoint</name>
      <anchorfile>classmirtk_1_1RobustClosestPoint.html</anchorfile>
      <anchor>a09f382d66d67589b803d9595aa5c5dba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>CalculateWeights</name>
      <anchorfile>classmirtk_1_1RobustClosestPoint.html</anchorfile>
      <anchor>a5678241e9cbb8f14eaf262907504290c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1RobustClosestPoint.html</anchorfile>
      <anchor>a4799d74020d229b72fdaf9027ade06be</anchor>
      <arglist>(double, Sigma)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::statistic::RobustMean</name>
    <filename>classmirtk_1_1data_1_1statistic_1_1RobustMean.html</filename>
    <base>mirtk::data::statistic::Percentile</base>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1data_1_1statistic_1_1RobustMean.html</anchorfile>
      <anchor>a3d366757b690ce4dd952f016f18f0cc8</anchor>
      <arglist>(Array&lt; double &gt; &amp;values, int n, const double *data, const bool *mask=nullptr) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::RobustPointMatch</name>
    <filename>classmirtk_1_1RobustPointMatch.html</filename>
    <base>mirtk::FuzzyCorrespondence</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1RobustPointMatch.html</anchorfile>
      <anchor>abe2490b39cfc5615fb359b709bc376ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PointCorrespondence *</type>
      <name>NewInstance</name>
      <anchorfile>classmirtk_1_1RobustPointMatch.html</anchorfile>
      <anchor>af052f325148a1ef25c5981d2da360391</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1RobustPointMatch.html</anchorfile>
      <anchor>a3b65c2ec86f1750d2b11ec72c0dc83dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RobustPointMatch</name>
      <anchorfile>classmirtk_1_1RobustPointMatch.html</anchorfile>
      <anchor>acf5f129256ac184fbaa3fc226931c121</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RobustPointMatch</name>
      <anchorfile>classmirtk_1_1RobustPointMatch.html</anchorfile>
      <anchor>ad8902fdb642f88c9bdb41cd4a57cbe2d</anchor>
      <arglist>(const RegisteredPointSet *, const RegisteredPointSet *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RobustPointMatch</name>
      <anchorfile>classmirtk_1_1RobustPointMatch.html</anchorfile>
      <anchor>aa72feb3d44b5322278bbd151e39577fd</anchor>
      <arglist>(const RobustPointMatch &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1RobustPointMatch.html</anchorfile>
      <anchor>a64fe4fdb6a9afd377a77ae0ff4f9360a</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TypeId</type>
      <name>Type</name>
      <anchorfile>classmirtk_1_1RobustPointMatch.html</anchorfile>
      <anchor>a8a72c924672afe7d56434cd6de4e1af0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Upgrade</name>
      <anchorfile>classmirtk_1_1RobustPointMatch.html</anchorfile>
      <anchor>a742fc680699818c7aeef3b563543dbee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RobustPointMatch</name>
      <anchorfile>classmirtk_1_1RobustPointMatch.html</anchorfile>
      <anchor>a66c1e3652f9f85eab3ab4764bb0af262</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>CalculateWeights</name>
      <anchorfile>classmirtk_1_1RobustPointMatch.html</anchorfile>
      <anchor>a4304504301ed305036b74bf8805e44e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>InitializeAnnealing</name>
      <anchorfile>classmirtk_1_1RobustPointMatch.html</anchorfile>
      <anchor>ae1c6cd315e22e397af272abd15f58e17</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::LieBracketImageFilter2DUtils::Run</name>
    <filename>classmirtk_1_1LieBracketImageFilter2DUtils_1_1Run.html</filename>
    <templarg>VoxelType</templarg>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter2DUtils_1_1Run.html</anchorfile>
      <anchor>adf02fe1ca42df139e05023a040399236</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;r) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter2DUtils_1_1Run.html</anchorfile>
      <anchor>a95d5d3dd441ae7e0a4020cf32dfaeb10</anchor>
      <arglist>(FilterType *filter, ImageType *output)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::LieBracketImageFilter3DUtils::Run</name>
    <filename>classmirtk_1_1LieBracketImageFilter3DUtils_1_1Run.html</filename>
    <templarg>VoxelType</templarg>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter3DUtils_1_1Run.html</anchorfile>
      <anchor>ad2cb1da33db8c70d35e539be0fac325d</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;r) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter3DUtils_1_1Run.html</anchorfile>
      <anchor>a703a208df20ffbea51d5f72451dbd7db</anchor>
      <arglist>(FilterType *filter, ImageType *output)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ScalarFunction</name>
    <filename>classmirtk_1_1ScalarFunction.html</filename>
    <base>mirtk::Object</base>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1ScalarFunction.html</anchorfile>
      <anchor>aafc5c13ab6c322554b1b85e68eec39a2</anchor>
      <arglist>(double x, double y, double z)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ScalarFunction</name>
      <anchorfile>classmirtk_1_1ScalarFunction.html</anchorfile>
      <anchor>a4d7bd6574a7c73fc7d274108972b4e98</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ScalarFunctionToImage</name>
    <filename>classmirtk_1_1ScalarFunctionToImage.html</filename>
    <templarg></templarg>
    <base>mirtk::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1ScalarFunctionToImage.html</anchorfile>
      <anchor>a62a3df0991e0b7f6326dd5321c24358d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalarFunctionToImage</name>
      <anchorfile>classmirtk_1_1ScalarFunctionToImage.html</anchorfile>
      <anchor>a1d1e8c39e192a52eab6a8fc50506dd21</anchor>
      <arglist>(bool=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ScalarFunctionToImage</name>
      <anchorfile>classmirtk_1_1ScalarFunctionToImage.html</anchorfile>
      <anchor>a774e0a9468d2f25eeb7b64310c357d96</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ScalarGaussian</name>
    <filename>classmirtk_1_1ScalarGaussian.html</filename>
    <base>mirtk::ScalarFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1ScalarGaussian.html</anchorfile>
      <anchor>a2425f192755dc32c079c4d865d53b981</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1ScalarGaussian.html</anchorfile>
      <anchor>af769e7105254bcea27b1bbea9ec3bb72</anchor>
      <arglist>(double, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1ScalarGaussian.html</anchorfile>
      <anchor>a600bc01cfe8bd62796fc763f6510ffb5</anchor>
      <arglist>(double, double, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1ScalarGaussian.html</anchorfile>
      <anchor>ab94f20b7652dcb8eb506e6cc5273a2dd</anchor>
      <arglist>(double, double, double, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalarGaussian</name>
      <anchorfile>classmirtk_1_1ScalarGaussian.html</anchorfile>
      <anchor>a7fc0bee0392a4e2de2df01c3b7213af7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalarGaussian</name>
      <anchorfile>classmirtk_1_1ScalarGaussian.html</anchorfile>
      <anchor>ad3755aef48edbc3281def97056789271</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalarGaussian</name>
      <anchorfile>classmirtk_1_1ScalarGaussian.html</anchorfile>
      <anchor>a91926e798fe2a38df7546c0a92a344f1</anchor>
      <arglist>(double, double, double, double=.0, double=.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalarGaussian</name>
      <anchorfile>classmirtk_1_1ScalarGaussian.html</anchorfile>
      <anchor>a9c2d0a1b17c6c2f369932393a7f9211d</anchor>
      <arglist>(double, double, double, double, double, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalarGaussian</name>
      <anchorfile>classmirtk_1_1ScalarGaussian.html</anchorfile>
      <anchor>ab6485e0d98db94e8780fb3332f1559a3</anchor>
      <arglist>(double, double, double, double, double, double, double, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ScalarGaussian</name>
      <anchorfile>classmirtk_1_1ScalarGaussian.html</anchorfile>
      <anchor>aa409ff331e441ac0cfa731beed347296</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ComputeNorm</name>
      <anchorfile>classmirtk_1_1ScalarGaussian.html</anchorfile>
      <anchor>aa3c8e4cfbde0e1ae199744f54733762c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector4D&lt; double &gt;</type>
      <name>_Center</name>
      <anchorfile>classmirtk_1_1ScalarGaussian.html</anchorfile>
      <anchor>abac4853838d6bc1d2377ead37bcbf73b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_Norm</name>
      <anchorfile>classmirtk_1_1ScalarGaussian.html</anchorfile>
      <anchor>aaeddbf5db5c0a80d1ec1da079173977e</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector4D&lt; double &gt;</type>
      <name>_Variance</name>
      <anchorfile>classmirtk_1_1ScalarGaussian.html</anchorfile>
      <anchor>acfb6cc061e52d8cd2cb9864aa8921485</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ScalingAndSquaring</name>
    <filename>classmirtk_1_1ScalingAndSquaring.html</filename>
    <templarg></templarg>
    <base>mirtk::Object</base>
    <member kind="typedef">
      <type>GenericNearestNeighborExtrapolateImageFunction&lt; ImageType &gt;</type>
      <name>Extrapolator</name>
      <anchorfile>classmirtk_1_1ScalingAndSquaring.html</anchorfile>
      <anchor>a7c95c164e6da660135fa17ed078509a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericImage&lt; TReal &gt;</type>
      <name>ImageType</name>
      <anchorfile>classmirtk_1_1ScalingAndSquaring.html</anchorfile>
      <anchor>ae38d18113b6f8ea41bd1c434d27dcaa0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericLinearInterpolateImageFunction&lt; ImageType &gt;</type>
      <name>VectorField</name>
      <anchorfile>classmirtk_1_1ScalingAndSquaring.html</anchorfile>
      <anchor>a497b10c65613392ae00960f6c2d32393</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericFastCubicBSplineInterpolateImageFunction&lt; ImageType &gt;</type>
      <name>VelocityField</name>
      <anchorfile>classmirtk_1_1ScalingAndSquaring.html</anchorfile>
      <anchor>a4a38aaf961e2163b36312467ea3c5b9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1ScalingAndSquaring.html</anchorfile>
      <anchor>a95d4d897850e0ee19ba1ffbd16195a81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalingAndSquaring</name>
      <anchorfile>classmirtk_1_1ScalingAndSquaring.html</anchorfile>
      <anchor>a07e1341336df088ffef925b16ea77c14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ScalingAndSquaring</name>
      <anchorfile>classmirtk_1_1ScalingAndSquaring.html</anchorfile>
      <anchor>a60b3dd1376f0e58190c9b6227612b9b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1ScalingAndSquaring.html</anchorfile>
      <anchor>adbd8aff85a5229007ea048aa927a38c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>FinalizeDetJacobian</name>
      <anchorfile>classmirtk_1_1ScalingAndSquaring.html</anchorfile>
      <anchor>aace212b85f2b7c70c20bff66ea60d3d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>FinalizeDisplacement</name>
      <anchorfile>classmirtk_1_1ScalingAndSquaring.html</anchorfile>
      <anchor>aac2e360c581303358d35344e24aabcd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>FinalizeJacobian</name>
      <anchorfile>classmirtk_1_1ScalingAndSquaring.html</anchorfile>
      <anchor>a070aa54fa437b4430a81748bdcbe774a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>FinalizeLogJacobian</name>
      <anchorfile>classmirtk_1_1ScalingAndSquaring.html</anchorfile>
      <anchor>aca2738f918ec9d1458b38c0216b22a47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1ScalingAndSquaring.html</anchorfile>
      <anchor>aa0c1f81cbfbcef1ae96b06913f9b413a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Resample</name>
      <anchorfile>classmirtk_1_1ScalingAndSquaring.html</anchorfile>
      <anchor>a5b0194b3233b5a07a58bc7345646f02f</anchor>
      <arglist>(ImageType *, ImageType *, bool=false)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::RegisteredPointSet::ScalingFunction</name>
    <filename>structmirtk_1_1RegisteredPointSet_1_1ScalingFunction.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>_InputIndex</name>
      <anchorfile>structmirtk_1_1RegisteredPointSet_1_1ScalingFunction.html</anchorfile>
      <anchor>a6a6d157ef2be667ecfcbaad6d34cb093</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_Intercept</name>
      <anchorfile>structmirtk_1_1RegisteredPointSet_1_1ScalingFunction.html</anchorfile>
      <anchor>a97a34ef6d314fe0667a6706aa52f22b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_OutputIndex</name>
      <anchorfile>structmirtk_1_1RegisteredPointSet_1_1ScalingFunction.html</anchorfile>
      <anchor>a1bc7d69df96d4e2f542d662ba4f49e93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_Slope</name>
      <anchorfile>structmirtk_1_1RegisteredPointSet_1_1ScalingFunction.html</anchorfile>
      <anchor>a4a2df87cee70ec1ed06e8f50a2c8cf3f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::SelectionCriterium</name>
    <filename>classmirtk_1_1data_1_1SelectionCriterium.html</filename>
    <base>mirtk::data::Selector</base>
    <member kind="function" virtualness="virtual">
      <type>virtual Selection</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1data_1_1SelectionCriterium.html</anchorfile>
      <anchor>aa5cb9cf812f93495e24cb0bb0e26dcde</anchor>
      <arglist>(const Array&lt; double &gt; &amp;values) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>Select</name>
      <anchorfile>classmirtk_1_1data_1_1SelectionCriterium.html</anchorfile>
      <anchor>af45278f5f770acc1606d3313d2d1ac56</anchor>
      <arglist>(double) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::Selector</name>
    <filename>classmirtk_1_1data_1_1Selector.html</filename>
    <base>mirtk::Object</base>
    <member kind="function" virtualness="pure">
      <type>virtual Selection</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1data_1_1Selector.html</anchorfile>
      <anchor>a030412393ca8423cd59df5979729b500</anchor>
      <arglist>(const Array&lt; double &gt; &amp;values) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Selector</name>
      <anchorfile>classmirtk_1_1data_1_1Selector.html</anchorfile>
      <anchor>a42a934199465344284fe544a865fd65b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SenaryForEachVoxelBody</name>
    <filename>structmirtk_1_1SenaryForEachVoxelBody.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody.html</anchorfile>
      <anchor>a296ff125c8b668ec0bf3f23b2602f3fa</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody.html</anchorfile>
      <anchor>acee23e843b11f8ea2aed6747278aea01</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody.html</anchorfile>
      <anchor>ae597a8f5bb9556d2f8f925ec8eb4a754</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody.html</anchorfile>
      <anchor>a510313f62c1edcecdd2ed8639a8d9904</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody.html</anchorfile>
      <anchor>af5a20cd160e94685317793b27fcdbf90</anchor>
      <arglist>(GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody.html</anchorfile>
      <anchor>a4fd3ff211227441a8742d93fb37564e0</anchor>
      <arglist>(const SenaryForEachVoxelBody &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody.html</anchorfile>
      <anchor>a4057deb97f8b2420b1ba3a7f10eac64a</anchor>
      <arglist>(SenaryForEachVoxelBody &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SenaryForEachVoxelBody_1Const</name>
    <filename>structmirtk_1_1SenaryForEachVoxelBody__1Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>acb9186b74a5162e46cef88f7059110d7</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a51950705ae7575ad202eae48973ec405</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>abbb6d2b1db254f2087ae1706e789aa0c</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a48ae58524710ae5f39cc5915a485270e</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelBody_1Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a86759e34782ad37b08bda7881f0a6d09</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelBody_1Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a8a23730a172df91b436d33c4b6b9e8f2</anchor>
      <arglist>(const SenaryForEachVoxelBody_1Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelBody_1Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a8773f5a396b038a97d5c9a0543599050</anchor>
      <arglist>(SenaryForEachVoxelBody_1Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SenaryForEachVoxelBody_2Const</name>
    <filename>structmirtk_1_1SenaryForEachVoxelBody__2Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>ad83b549f197c761985c539192633d587</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a8c8addb25eb61574d375eae8e6176008</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a48ebffb14d658df6e84007ce776af385</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a8bc9a9e38928a639201f7be13799de4f</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelBody_2Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>aa90474c1b37d18d2b60a87449a55cc05</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelBody_2Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a6ad75545022fc969c5b702b0f82b8c17</anchor>
      <arglist>(const SenaryForEachVoxelBody_2Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelBody_2Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>af560a8481c803d6c3eae71a48c5b2f38</anchor>
      <arglist>(SenaryForEachVoxelBody_2Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SenaryForEachVoxelBody_3Const</name>
    <filename>structmirtk_1_1SenaryForEachVoxelBody__3Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>ad58351603eb3276eb9907ed2ddc5d522</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>ae1098e58f246bb66331adae3e08451ec</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>a3f7a5c7d651168c99062a6acf22ab349</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>acbd37c91d9a12d3f2c4a3215591048e1</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelBody_3Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>ab013c34516b3549ee5f729633bad4b14</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelBody_3Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>a3d7fe9d00cd2b5ca236fed989247f8aa</anchor>
      <arglist>(const SenaryForEachVoxelBody_3Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelBody_3Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>ad6282eb45e0f9345c13a04f2a52cc270</anchor>
      <arglist>(SenaryForEachVoxelBody_3Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SenaryForEachVoxelBody_4Const</name>
    <filename>structmirtk_1_1SenaryForEachVoxelBody__4Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>a4b97069dd90b0e0976bbb00ea891097f</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>a6ba39f0503337faca9b12ea49dd38e11</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>a3714405ca0cc4561e0da9a5c189f107d</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>a09403b250049b89df9c6a215f8fd4f35</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelBody_4Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>ae36e7c9bbf3eeec1567ed71f0af98ea3</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelBody_4Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>addc2a86b267428cfc921f22fda9ff6b7</anchor>
      <arglist>(const SenaryForEachVoxelBody_4Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelBody_4Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>a014cec0f7d7a522c26827cc8b0854539</anchor>
      <arglist>(SenaryForEachVoxelBody_4Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SenaryForEachVoxelBody_5Const</name>
    <filename>structmirtk_1_1SenaryForEachVoxelBody__5Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>a5133a6b1dd252415f297b1f7e4732f8b</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>aa810fd001cc2e5e33278b3271cd47697</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>a0da8f774590929a9afad32a81986df62</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>a580fa3fd59aa3a7eb3ed432a3f42d865</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelBody_5Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>a6285a5fac67ebefd72b9b3f16a903f13</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelBody_5Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>a164458b27bd1664f8e673998e410beac</anchor>
      <arglist>(const SenaryForEachVoxelBody_5Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelBody_5Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>aa825a583f472a99d388ff77313b66f29</anchor>
      <arglist>(SenaryForEachVoxelBody_5Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SenaryForEachVoxelBody_Const</name>
    <filename>structmirtk_1_1SenaryForEachVoxelBody__Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>ad2c53082e3a40bd5a8c34114ed9eeae9</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a4bce27c04d2f8a8a2b598e9a82cfdc5e</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a380d028bd2c6d236814c89833bf0227a</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>ad647893cfdbd7d3dd9be41845e31531b</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>abbedd6bee41447abfa72b278910ce808</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, const GenericImage&lt; T6 &gt; &amp;im6, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a0c94426ed55834483b965e4f5374edff</anchor>
      <arglist>(const SenaryForEachVoxelBody_Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a7317b6f2c6d95be2d740c59ac28ef51a</anchor>
      <arglist>(SenaryForEachVoxelBody_Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SenaryForEachVoxelIfBody</name>
    <filename>structmirtk_1_1SenaryForEachVoxelIfBody.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a53b44c1a47be060425d6fd37da6c1540</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a35341ac6fc93431c375897ddd0e0cd92</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a0e13a99a58e196e9788d6ef2aa50345c</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a7a003a4159278a9af97e1f951fea7880</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a21f4b9bf52744c66f1dd82f7047fd2e6</anchor>
      <arglist>(GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a93070008de390e2818ff8cd0c787e030</anchor>
      <arglist>(const SenaryForEachVoxelIfBody &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody.html</anchorfile>
      <anchor>ab41d13890082f6fa9771c69ef599411c</anchor>
      <arglist>(SenaryForEachVoxelIfBody &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SenaryForEachVoxelIfBody_1Const</name>
    <filename>structmirtk_1_1SenaryForEachVoxelIfBody__1Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a1f575cc1f31e84eb4c0b4cecb702c00c</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a718468bc87d7206ff916c4c26e26cb2d</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>aca57950e0024439a61881b73d236fa04</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>af8919449acd7a89fdd81c322433a1e05</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelIfBody_1Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>ac360aeb51efade31b8e960d9487a393a</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelIfBody_1Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a1a5e7f6d191ff5541d0831eb0a24cc0b</anchor>
      <arglist>(const SenaryForEachVoxelIfBody_1Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelIfBody_1Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>aa848ddd3d74521499e1494ce3a446d3b</anchor>
      <arglist>(SenaryForEachVoxelIfBody_1Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SenaryForEachVoxelIfBody_2Const</name>
    <filename>structmirtk_1_1SenaryForEachVoxelIfBody__2Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a8e7d2a66a3b60959a350e2f2c39273c5</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a96b3a7ea42f988924b8f3f17b9c1b000</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a263c86393bb3b76c537bb98fd5d0509c</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a03cbba1277f53f583b0f12d958c82c63</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelIfBody_2Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>aeab1c1316df4f26424e85202d563fa4c</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelIfBody_2Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a7a4efcafcc816a7efc2d73c7c1ae6284</anchor>
      <arglist>(const SenaryForEachVoxelIfBody_2Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelIfBody_2Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a5ea8f153c20fa1e59f8bafd0e595710a</anchor>
      <arglist>(SenaryForEachVoxelIfBody_2Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SenaryForEachVoxelIfBody_3Const</name>
    <filename>structmirtk_1_1SenaryForEachVoxelIfBody__3Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>a7ce7ec39f3d44381ccdfb8b414dbefdd</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>aeaff23fb8f00217eff2ca7466d98b46a</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>a30910e2806d277532b2207ddd5949008</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>aaab0ae7b8f0ea203855387fdeb818187</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelIfBody_3Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>a8f13a054607036be0d46fa2a99012df2</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelIfBody_3Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>ab0c177b07966f8072c246bc71599a527</anchor>
      <arglist>(const SenaryForEachVoxelIfBody_3Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelIfBody_3Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>a9a3af54c63229336e58d5dc401aa0306</anchor>
      <arglist>(SenaryForEachVoxelIfBody_3Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SenaryForEachVoxelIfBody_4Const</name>
    <filename>structmirtk_1_1SenaryForEachVoxelIfBody__4Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>a59c4e52522388a1731d08dddcc54b259</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>a804504645623a5dc6f303daa02d68ad8</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>a7d32312b30aff0ea2f22f388040eac53</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>a000402b3b997c3642473e5dce5c4e8fb</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelIfBody_4Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>ac8897e70431c6257b8bbd334be2eec6b</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelIfBody_4Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>a0ccf17b2a5c07076e4fcc3cc26018639</anchor>
      <arglist>(const SenaryForEachVoxelIfBody_4Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelIfBody_4Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>a0f7377dd3890352f51a2af8b74d6a04c</anchor>
      <arglist>(SenaryForEachVoxelIfBody_4Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SenaryForEachVoxelIfBody_5Const</name>
    <filename>structmirtk_1_1SenaryForEachVoxelIfBody__5Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>ac0cf3cb1424648fe45f08730d2d3b1eb</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>aed2d87336913ee65af1231fb3ece82e9</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>a62f01f22fdbed3df565fd20b7c1a325a</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>ab5288ac126058bfc2560a78250568dd2</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelIfBody_5Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>afc24e92bfcd3dd95207ba01c4850d511</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelIfBody_5Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>aa75f71eb90f127ce7cd7ec8a390b9dc8</anchor>
      <arglist>(const SenaryForEachVoxelIfBody_5Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelIfBody_5Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>ab0ace08f35b66561d075392bbcd32be5</anchor>
      <arglist>(SenaryForEachVoxelIfBody_5Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SenaryForEachVoxelIfBody_Const</name>
    <filename>structmirtk_1_1SenaryForEachVoxelIfBody__Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a2a6be653de1174e6d3a613538412a604</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>ac5ec85758ee6b7d20baa84b0be56f2d4</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a0838001d64d5ed6128bd74ba1c057586</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a3bd26c01dbecd0777a0b36c617f96596</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a06cb81cbd59827f3e0957fe17b86c6a2</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, const GenericImage&lt; T6 &gt; &amp;im6, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>ab2305f3f6e949edaaf636af9945d3daf</anchor>
      <arglist>(const SenaryForEachVoxelIfBody_Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>ab88ea1f10a65069dc9f7ac7b79e97456</anchor>
      <arglist>(SenaryForEachVoxelIfBody_Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::SeparableConvolution</name>
    <filename>classmirtk_1_1SeparableConvolution.html</filename>
    <templarg>TVoxel</templarg>
    <templarg>TKernel</templarg>
    <base>mirtk::ImageToImage</base>
    <member kind="typedef">
      <type>GenericImage&lt; TKernel &gt;</type>
      <name>KernelType</name>
      <anchorfile>classmirtk_1_1SeparableConvolution.html</anchorfile>
      <anchor>acf0cb9c87a552f61f6af7fa3253ea7a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CheckKernel</name>
      <anchorfile>classmirtk_1_1SeparableConvolution.html</anchorfile>
      <anchor>a5434ca1ff0627f490b45dfa5fab70a62</anchor>
      <arglist>(const KernelType *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Kernel</name>
      <anchorfile>classmirtk_1_1SeparableConvolution.html</anchorfile>
      <anchor>acea7114436115aaa81d826946085d006</anchor>
      <arglist>(const KernelType *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1SeparableConvolution.html</anchorfile>
      <anchor>a0700203bbfb1a14b92668fb55f1d3364</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>RunT</name>
      <anchorfile>classmirtk_1_1SeparableConvolution.html</anchorfile>
      <anchor>a668ee4238049fe2c4a9fb6bd14d41846</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>RunX</name>
      <anchorfile>classmirtk_1_1SeparableConvolution.html</anchorfile>
      <anchor>a5e3cef9314f6583dce36fb7f58c7c09e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>RunY</name>
      <anchorfile>classmirtk_1_1SeparableConvolution.html</anchorfile>
      <anchor>ad9415c44bacf9b8afa97cb6a897fc9a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>RunZ</name>
      <anchorfile>classmirtk_1_1SeparableConvolution.html</anchorfile>
      <anchor>a3a472f580bf0dbad3f944033b2ed42e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeparableConvolution</name>
      <anchorfile>classmirtk_1_1SeparableConvolution.html</anchorfile>
      <anchor>ad24ef628f5e55e3df86b2144953aae42</anchor>
      <arglist>(const KernelType *k=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeparableConvolution</name>
      <anchorfile>classmirtk_1_1SeparableConvolution.html</anchorfile>
      <anchor>aa248528cc000004c60caee48680c1bd1</anchor>
      <arglist>(const KernelType *kx, const KernelType *ky, const KernelType *kz=nullptr, const KernelType *kt=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SeparableConvolution</name>
      <anchorfile>classmirtk_1_1SeparableConvolution.html</anchorfile>
      <anchor>ad760c37175a45a22e82a391174fc2b9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1SeparableConvolution.html</anchorfile>
      <anchor>a98a687cd6348202da9b7a61d8f2b12b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1SeparableConvolution.html</anchorfile>
      <anchor>a117e7e79e257801d694ef41af20e2318</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1SeparableConvolution.html</anchorfile>
      <anchor>a6da71c6638b204d01f61278f062e5881</anchor>
      <arglist>(const KernelType, KernelX)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1SeparableConvolution.html</anchorfile>
      <anchor>a0af938bb4e7a8ef2024e80b14453261e</anchor>
      <arglist>(const KernelType, KernelY)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1SeparableConvolution.html</anchorfile>
      <anchor>a2e330d3e356f72a6fe8ec052c2e0f441</anchor>
      <arglist>(const KernelType, KernelZ)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1SeparableConvolution.html</anchorfile>
      <anchor>ab740f5e08276e1185345fa07ad4ceeff</anchor>
      <arglist>(const KernelType, KernelT)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1SeparableConvolution.html</anchorfile>
      <anchor>a6eb26c21de994abe9e2d4d53c33d5b48</anchor>
      <arglist>(bool, Normalize)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1SeparableConvolution.html</anchorfile>
      <anchor>a37a8cefef5df7dac51823d1d943d20fe</anchor>
      <arglist>(bool, UseBackgroundMask)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1SeparableConvolution.html</anchorfile>
      <anchor>abddda6db23c2fca146ecb721a0faad5a</anchor>
      <arglist>(bool, UseBackgroundValue)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1SeparableConvolution.html</anchorfile>
      <anchor>a066db33c0face9b341b1f5c1e7d2d1d5</anchor>
      <arglist>(bool, UsePaddingValue)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1SeparableConvolution.html</anchorfile>
      <anchor>a20d9728f8d10f13fd3a72dde47261373</anchor>
      <arglist>(double, PaddingValue)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1SeparableConvolution.html</anchorfile>
      <anchor>ae846922723cff8e8cfc3940c691d1d88</anchor>
      <arglist>(int, Components)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SeparableConvolution&lt; TVoxel &gt;</name>
    <filename>classmirtk_1_1SeparableConvolution.html</filename>
    <base>mirtk::ImageToImage</base>
    <member kind="typedef">
      <type>GenericImage&lt; RealPixel &gt;</type>
      <name>KernelType</name>
      <anchorfile>classmirtk_1_1SeparableConvolution.html</anchorfile>
      <anchor>acf0cb9c87a552f61f6af7fa3253ea7a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CheckKernel</name>
      <anchorfile>classmirtk_1_1SeparableConvolution.html</anchorfile>
      <anchor>a5434ca1ff0627f490b45dfa5fab70a62</anchor>
      <arglist>(const KernelType *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Kernel</name>
      <anchorfile>classmirtk_1_1SeparableConvolution.html</anchorfile>
      <anchor>acea7114436115aaa81d826946085d006</anchor>
      <arglist>(const KernelType *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1SeparableConvolution.html</anchorfile>
      <anchor>a0700203bbfb1a14b92668fb55f1d3364</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>RunT</name>
      <anchorfile>classmirtk_1_1SeparableConvolution.html</anchorfile>
      <anchor>a668ee4238049fe2c4a9fb6bd14d41846</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>RunX</name>
      <anchorfile>classmirtk_1_1SeparableConvolution.html</anchorfile>
      <anchor>a5e3cef9314f6583dce36fb7f58c7c09e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>RunY</name>
      <anchorfile>classmirtk_1_1SeparableConvolution.html</anchorfile>
      <anchor>ad9415c44bacf9b8afa97cb6a897fc9a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>RunZ</name>
      <anchorfile>classmirtk_1_1SeparableConvolution.html</anchorfile>
      <anchor>a3a472f580bf0dbad3f944033b2ed42e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeparableConvolution</name>
      <anchorfile>classmirtk_1_1SeparableConvolution.html</anchorfile>
      <anchor>ad24ef628f5e55e3df86b2144953aae42</anchor>
      <arglist>(const KernelType *k=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeparableConvolution</name>
      <anchorfile>classmirtk_1_1SeparableConvolution.html</anchorfile>
      <anchor>aa248528cc000004c60caee48680c1bd1</anchor>
      <arglist>(const KernelType *kx, const KernelType *ky, const KernelType *kz=nullptr, const KernelType *kt=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SeparableConvolution</name>
      <anchorfile>classmirtk_1_1SeparableConvolution.html</anchorfile>
      <anchor>ad760c37175a45a22e82a391174fc2b9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1SeparableConvolution.html</anchorfile>
      <anchor>a98a687cd6348202da9b7a61d8f2b12b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1SeparableConvolution.html</anchorfile>
      <anchor>a117e7e79e257801d694ef41af20e2318</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1SeparableConvolution.html</anchorfile>
      <anchor>a6da71c6638b204d01f61278f062e5881</anchor>
      <arglist>(const KernelType, KernelX)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1SeparableConvolution.html</anchorfile>
      <anchor>a0af938bb4e7a8ef2024e80b14453261e</anchor>
      <arglist>(const KernelType, KernelY)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1SeparableConvolution.html</anchorfile>
      <anchor>a2e330d3e356f72a6fe8ec052c2e0f441</anchor>
      <arglist>(const KernelType, KernelZ)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1SeparableConvolution.html</anchorfile>
      <anchor>ab740f5e08276e1185345fa07ad4ceeff</anchor>
      <arglist>(const KernelType, KernelT)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1SeparableConvolution.html</anchorfile>
      <anchor>a6eb26c21de994abe9e2d4d53c33d5b48</anchor>
      <arglist>(bool, Normalize)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1SeparableConvolution.html</anchorfile>
      <anchor>a37a8cefef5df7dac51823d1d943d20fe</anchor>
      <arglist>(bool, UseBackgroundMask)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1SeparableConvolution.html</anchorfile>
      <anchor>abddda6db23c2fca146ecb721a0faad5a</anchor>
      <arglist>(bool, UseBackgroundValue)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1SeparableConvolution.html</anchorfile>
      <anchor>a066db33c0face9b341b1f5c1e7d2d1d5</anchor>
      <arglist>(bool, UsePaddingValue)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1SeparableConvolution.html</anchorfile>
      <anchor>a20d9728f8d10f13fd3a72dde47261373</anchor>
      <arglist>(double, PaddingValue)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1SeparableConvolution.html</anchorfile>
      <anchor>ae846922723cff8e8cfc3940c691d1d88</anchor>
      <arglist>(int, Components)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SeptenaryForEachVoxelBody</name>
    <filename>structmirtk_1_1SeptenaryForEachVoxelBody.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody.html</anchorfile>
      <anchor>ab2fe111ef5f69ed86ad570c217c77e7f</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody.html</anchorfile>
      <anchor>a39f80c87ffdb2d4f50d2fad399e91d49</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody.html</anchorfile>
      <anchor>aaaa0e6249d89fde911f9e34fa19e94e8</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody.html</anchorfile>
      <anchor>a7e4b9ab9864c17d2bd8d873f5036a16b</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody.html</anchorfile>
      <anchor>ab0648650950f11237594d768b9e47562</anchor>
      <arglist>(GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody.html</anchorfile>
      <anchor>a7a603498fbadfd80c9d686cd029b4228</anchor>
      <arglist>(const SeptenaryForEachVoxelBody &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody.html</anchorfile>
      <anchor>ae3c59bb23b67c5777c59d1ca2e349079</anchor>
      <arglist>(SeptenaryForEachVoxelBody &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SeptenaryForEachVoxelBody_1Const</name>
    <filename>structmirtk_1_1SeptenaryForEachVoxelBody__1Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>ae3a4c3c858d3f8637567480f047b57c8</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a9e412f05084631e75d32c0f51ab04e40</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a9c2fa3c62c230cb446ef5b8d58135d59</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>affff6feae1d5d6b7460056780684538c</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelBody_1Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a3e8f64ebb165e9e363926a7ea4ae5180</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelBody_1Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>af30fc256a8204e854841fc43be87d1db</anchor>
      <arglist>(const SeptenaryForEachVoxelBody_1Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelBody_1Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>ae3a1f9f694d2b46f96a6e045195ae84e</anchor>
      <arglist>(SeptenaryForEachVoxelBody_1Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SeptenaryForEachVoxelBody_2Const</name>
    <filename>structmirtk_1_1SeptenaryForEachVoxelBody__2Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a18c27db8ccaada4a474eb92a87637352</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a7dc7aed786e526a181f4adab3b2e092e</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>ad688047c23f71b770041a07fbd55a27f</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a856f3c8f6e25ab4af6480def9ebd0fc7</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelBody_2Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>af109f490add4eba1df731956cd775ba2</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelBody_2Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a2ab0b70ecfd711e0f3df181bd8f469d4</anchor>
      <arglist>(const SeptenaryForEachVoxelBody_2Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelBody_2Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a767287659f9c5eaf43bfe060aa10e367</anchor>
      <arglist>(SeptenaryForEachVoxelBody_2Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SeptenaryForEachVoxelBody_3Const</name>
    <filename>structmirtk_1_1SeptenaryForEachVoxelBody__3Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>a7ab26d415583d829cc29ffdd1c037053</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>aa2a9478470ff90d2447d6751b24e2d94</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>af4a47a29fe965580026357124637a256</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>a5b17c70c58af502e1e29afc3aed937b1</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelBody_3Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>aec8e64365beea0d68367553ad5bf2728</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelBody_3Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>ab5f646e752fe60d1b518ccf1a02586fa</anchor>
      <arglist>(const SeptenaryForEachVoxelBody_3Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelBody_3Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>a571ed63b19683bd595fe417a3e95c38b</anchor>
      <arglist>(SeptenaryForEachVoxelBody_3Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SeptenaryForEachVoxelBody_4Const</name>
    <filename>structmirtk_1_1SeptenaryForEachVoxelBody__4Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>a4b7229df303f346b858fa4a8a4e0bd7c</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>a066c6f5a4c126ff3e8f7378ba2b2174a</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>a329b794d02db5b4a4102a9b720b0e2fa</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>a043da8dc9a28bf0f94b5e25f3bdf85fa</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelBody_4Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>a2951ee71b4e39fad27ca4da256209e99</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelBody_4Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>af3c631ce14be257aeb7f9e80497acd30</anchor>
      <arglist>(const SeptenaryForEachVoxelBody_4Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelBody_4Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>a54ff0fdcb811507d9fe4729f7002d528</anchor>
      <arglist>(SeptenaryForEachVoxelBody_4Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SeptenaryForEachVoxelBody_5Const</name>
    <filename>structmirtk_1_1SeptenaryForEachVoxelBody__5Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>aef5b26b19cfa5fe52fed9d4a2aa1b510</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>a83cd70b0769ed93a2c74284c119a5149</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>a20cdc512d10731e19e3f92b73044dd87</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>af5a8a2705baeb36c92e0ba25c110ce69</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelBody_5Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>a5096eba0b10fbae159d5ff3ee937dd41</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelBody_5Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>a6351335593d227c4e4e6aa7b864c6266</anchor>
      <arglist>(const SeptenaryForEachVoxelBody_5Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelBody_5Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>aabda24936b696e52de8d0e2d99a67420</anchor>
      <arglist>(SeptenaryForEachVoxelBody_5Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SeptenaryForEachVoxelBody_6Const</name>
    <filename>structmirtk_1_1SeptenaryForEachVoxelBody__6Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__6Const.html</anchorfile>
      <anchor>abf9dcc67524b60005acac827d991cd13</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__6Const.html</anchorfile>
      <anchor>a44056d242c71b42ca30e733ffdb3448b</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__6Const.html</anchorfile>
      <anchor>a917f130b1ca3848d06f9cd720c1eb741</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__6Const.html</anchorfile>
      <anchor>a87fa0d1207ddf8ccf48f3644c60a2ba1</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelBody_6Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__6Const.html</anchorfile>
      <anchor>a952de3de332e331350d181d176971d78</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, const GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelBody_6Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__6Const.html</anchorfile>
      <anchor>adb2c15c0c0daa7eb79e2389eec41c088</anchor>
      <arglist>(const SeptenaryForEachVoxelBody_6Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelBody_6Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__6Const.html</anchorfile>
      <anchor>a4cc68d06f803ea6e40e7a6788aef1545</anchor>
      <arglist>(SeptenaryForEachVoxelBody_6Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SeptenaryForEachVoxelBody_Const</name>
    <filename>structmirtk_1_1SeptenaryForEachVoxelBody__Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a5f043b0d47f8adfc54b7fdd95c4b6ded</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a5c05ae503822935b9b8e58a1129feade</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a7196500191513ff83b82ed8efa4443b8</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a4d9b13cbe50a6995740def7c0fe8e094</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a25b912a7b2d96cba9bfce13e684b7078</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, const GenericImage&lt; T6 &gt; &amp;im6, const GenericImage&lt; T7 &gt; &amp;im7, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>ac85c9ab21112e56a080d2dc46f42a5a1</anchor>
      <arglist>(const SeptenaryForEachVoxelBody_Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a9c700129fd2eb7d916c0115b63ff8952</anchor>
      <arglist>(SeptenaryForEachVoxelBody_Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SeptenaryForEachVoxelIfBody</name>
    <filename>structmirtk_1_1SeptenaryForEachVoxelIfBody.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody.html</anchorfile>
      <anchor>ab51ad5817aac9b9e203e6298a91fcfc6</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a2b55015aa0936ecb043033084d969d7c</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody.html</anchorfile>
      <anchor>af4949e67d244d8ef8425c668a1e138c5</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a85f9fb176f534a9d9d3418c3beb8f589</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a7d8df6a64fa3500fee007adda980933c</anchor>
      <arglist>(GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a038440cd20a31bcee45caaab24a36c32</anchor>
      <arglist>(const SeptenaryForEachVoxelIfBody &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a380771135982e9193f94339b84ece168</anchor>
      <arglist>(SeptenaryForEachVoxelIfBody &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SeptenaryForEachVoxelIfBody_1Const</name>
    <filename>structmirtk_1_1SeptenaryForEachVoxelIfBody__1Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>ad7f1df56b22471f2a3fc7f24b0e69265</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a666dce4abb51a66e357f5891149aa08a</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>adfe81958eff7e674ee77d632e73f6f4a</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a8dfa865a819fd054d3b5c71bbb5216da</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelIfBody_1Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a1a905351749eff14c5cc976709a1d755</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelIfBody_1Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a9888b50734633b0f498db67665a0cf1f</anchor>
      <arglist>(const SeptenaryForEachVoxelIfBody_1Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelIfBody_1Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>af86068ccb5c35c7a3b5a8caf7434c306</anchor>
      <arglist>(SeptenaryForEachVoxelIfBody_1Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SeptenaryForEachVoxelIfBody_2Const</name>
    <filename>structmirtk_1_1SeptenaryForEachVoxelIfBody__2Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a7852a9cb92b37cf9096ad5dc9b1bce7c</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>ad830fd1363d94ca9419469964a6a8a3a</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>ad6d70976f0cc84a9ac2ff22b73f71993</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a3d5be6c76be9cb0171e6177b19b28dcc</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelIfBody_2Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>aaee05e52c1d59cea2397502a8f2199fa</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelIfBody_2Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a61d90d8bb471f7bfc022ece6d5485122</anchor>
      <arglist>(const SeptenaryForEachVoxelIfBody_2Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelIfBody_2Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>ad7426f47278d142e5d7b64b3d393b59e</anchor>
      <arglist>(SeptenaryForEachVoxelIfBody_2Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SeptenaryForEachVoxelIfBody_3Const</name>
    <filename>structmirtk_1_1SeptenaryForEachVoxelIfBody__3Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>aafac8ba694e28d2c84802735bc245817</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>a9f405fdc7db2b1c27db91e4be29df1c3</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>afc4f691251c29e39b776acf2fdd61ec1</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>a6358b9788725320306881f2b707a7603</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelIfBody_3Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>a9db3127f51ad11dae70b99ce9c7bf68e</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelIfBody_3Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>a83053e653b98915b5edf95f47dd100c0</anchor>
      <arglist>(const SeptenaryForEachVoxelIfBody_3Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelIfBody_3Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>af4dfc3059f28e2df38330511ec39cdba</anchor>
      <arglist>(SeptenaryForEachVoxelIfBody_3Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SeptenaryForEachVoxelIfBody_4Const</name>
    <filename>structmirtk_1_1SeptenaryForEachVoxelIfBody__4Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>a0a2c780199fa9efd66eed83bc3c4e688</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>a639d70d6732a7e3f65575e811bec490c</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>afd83eacc00a1f7f58c1067dda1dba3c2</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>a9c3e616ad5faa7e9b3b824004c9c209d</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelIfBody_4Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>a09de611cc1d1fce16c89f23b3e43cc7d</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelIfBody_4Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>a11cd714c7773e51609b3c9943a7014dc</anchor>
      <arglist>(const SeptenaryForEachVoxelIfBody_4Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelIfBody_4Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>aec1bd535256e91bc2a27c647bb277dc1</anchor>
      <arglist>(SeptenaryForEachVoxelIfBody_4Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SeptenaryForEachVoxelIfBody_5Const</name>
    <filename>structmirtk_1_1SeptenaryForEachVoxelIfBody__5Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>a5e78108d0f8530f224f90af9946c02c3</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>ac590151a6673d0955e881ffca0cc0609</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>a1870df6c5abd08d0f5f29ed9c47bfeaa</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>af310635adb9b312b03c9d9381fda14ed</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelIfBody_5Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>ae45df7b6e6e1a7d0b8b53a635b7e5c81</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelIfBody_5Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>a61c8081015deaa2300c1b0d429393136</anchor>
      <arglist>(const SeptenaryForEachVoxelIfBody_5Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelIfBody_5Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>a05de3c82d0d9e4ed77f67034573efb3e</anchor>
      <arglist>(SeptenaryForEachVoxelIfBody_5Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SeptenaryForEachVoxelIfBody_6Const</name>
    <filename>structmirtk_1_1SeptenaryForEachVoxelIfBody__6Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__6Const.html</anchorfile>
      <anchor>af9b7d1ba421b14c3e702fb6d07590046</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__6Const.html</anchorfile>
      <anchor>aa67b26af00150e45ff0f8fd52fc220ea</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__6Const.html</anchorfile>
      <anchor>a46082fd0ae0e1f0c394c917dad314ce6</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__6Const.html</anchorfile>
      <anchor>af85eb4b3869d9d316de7663dff01b620</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelIfBody_6Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__6Const.html</anchorfile>
      <anchor>a9fdb98abcfcec240dbbb3416d95edd1c</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, const GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelIfBody_6Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__6Const.html</anchorfile>
      <anchor>ad63194b828f30b33abcc590df3ae10cf</anchor>
      <arglist>(const SeptenaryForEachVoxelIfBody_6Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelIfBody_6Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__6Const.html</anchorfile>
      <anchor>a5a4e1b08f1eb2db7620880ddcf2306d1</anchor>
      <arglist>(SeptenaryForEachVoxelIfBody_6Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SeptenaryForEachVoxelIfBody_Const</name>
    <filename>structmirtk_1_1SeptenaryForEachVoxelIfBody__Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <templarg>T5</templarg>
    <templarg>T6</templarg>
    <templarg>T7</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a26b97ca5972bf918316ddca9c922ef11</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a1a4ab59633d26c1048c8b5d43533f0ca</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a10f0ac99ce1f77824568e41a81f3cc64</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a8c249e84b8343af3cd03e3373d1b466b</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>af2fbcedec93b402f493fea0e936b4654</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, const GenericImage&lt; T6 &gt; &amp;im6, const GenericImage&lt; T7 &gt; &amp;im7, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a532c4caca77232a50fa63703ddf05e63</anchor>
      <arglist>(const SeptenaryForEachVoxelIfBody_Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>ac730ed46ea140179e87ea25fdfcaf964</anchor>
      <arglist>(SeptenaryForEachVoxelIfBody_Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::SetInsideValue</name>
    <filename>classmirtk_1_1data_1_1op_1_1SetInsideValue.html</filename>
    <base>mirtk::data::Op</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1SetInsideValue.html</anchorfile>
      <anchor>a43c32a7787cadaed3ce9e94654737857</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::SetOutsideValue</name>
    <filename>classmirtk_1_1data_1_1op_1_1SetOutsideValue.html</filename>
    <base>mirtk::data::Op</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1SetOutsideValue.html</anchorfile>
      <anchor>aebd8b1c8ddd0962dac752031945ace3f</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ShapeBasedInterpolateImageFunction</name>
    <filename>classmirtk_1_1ShapeBasedInterpolateImageFunction.html</filename>
    <base>mirtk::InterpolateImageFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingInterval</name>
      <anchorfile>classmirtk_1_1ShapeBasedInterpolateImageFunction.html</anchorfile>
      <anchor>a8eb45a8f0359bf4bb3506a57edde273c</anchor>
      <arglist>(double, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>EvaluateInside</name>
      <anchorfile>classmirtk_1_1ShapeBasedInterpolateImageFunction.html</anchorfile>
      <anchor>a88acdd4cb9cf427ff4af1c809677180f</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateInside</name>
      <anchorfile>classmirtk_1_1ShapeBasedInterpolateImageFunction.html</anchorfile>
      <anchor>aaab6e87edb2b3759aa89f6af20187f40</anchor>
      <arglist>(Vector &amp;, double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>EvaluateInsideLinear</name>
      <anchorfile>classmirtk_1_1ShapeBasedInterpolateImageFunction.html</anchorfile>
      <anchor>a0b69bfc7abc152ff892a461b341deb2b</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>EvaluateLinear</name>
      <anchorfile>classmirtk_1_1ShapeBasedInterpolateImageFunction.html</anchorfile>
      <anchor>a49d5eee09684c67cc01d5dc599dce014</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>EvaluateOutside</name>
      <anchorfile>classmirtk_1_1ShapeBasedInterpolateImageFunction.html</anchorfile>
      <anchor>ac6c38bc0321b32e1dde119e831333a1b</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateOutside</name>
      <anchorfile>classmirtk_1_1ShapeBasedInterpolateImageFunction.html</anchorfile>
      <anchor>a76f732c73385e66969f7d6bdcd353e1c</anchor>
      <arglist>(Vector &amp;, double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>EvaluateOutsideLinear</name>
      <anchorfile>classmirtk_1_1ShapeBasedInterpolateImageFunction.html</anchorfile>
      <anchor>a46aed33c2315bd9e035a00609b9fb377</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>EvaluateWithPaddingInside</name>
      <anchorfile>classmirtk_1_1ShapeBasedInterpolateImageFunction.html</anchorfile>
      <anchor>a6719b7dca6a1cdda6b0cf5bd2f99c45b</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateWithPaddingInside</name>
      <anchorfile>classmirtk_1_1ShapeBasedInterpolateImageFunction.html</anchorfile>
      <anchor>af3791cf5ece6c3edfe7b52b025891e11</anchor>
      <arglist>(Vector &amp;, double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>EvaluateWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1ShapeBasedInterpolateImageFunction.html</anchorfile>
      <anchor>a6bc615f194c192e5104fd5d39680c11a</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1ShapeBasedInterpolateImageFunction.html</anchorfile>
      <anchor>aff3ffdb56ff5fde135da1097e60ab240</anchor>
      <arglist>(Vector &amp;, double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1ShapeBasedInterpolateImageFunction.html</anchorfile>
      <anchor>af6be274014b895557deacaf6de30e5b2</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ShapeBasedInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1ShapeBasedInterpolateImageFunction.html</anchorfile>
      <anchor>a63e54576cc3817f3a022ca470cc89330</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ShapeBasedInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1ShapeBasedInterpolateImageFunction.html</anchorfile>
      <anchor>af2a4107d9ffeafa3d0b30f7acc971c5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Refine</name>
      <anchorfile>classmirtk_1_1ShapeBasedInterpolateImageFunction.html</anchorfile>
      <anchor>a22a7f539093eddcc925b6e84afe9aa96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealImage</type>
      <name>_dmap</name>
      <anchorfile>classmirtk_1_1ShapeBasedInterpolateImageFunction.html</anchorfile>
      <anchor>a984deed038147bea026f33a125969f20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LinearInterpolateImageFunction</type>
      <name>_linear_interpolator</name>
      <anchorfile>classmirtk_1_1ShapeBasedInterpolateImageFunction.html</anchorfile>
      <anchor>ae89d1b6f9e47179a05d8ef7f3f7a7a9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NearestNeighborInterpolateImageFunction</type>
      <name>_nn_interpolator</name>
      <anchorfile>classmirtk_1_1ShapeBasedInterpolateImageFunction.html</anchorfile>
      <anchor>aece249d54ee9e22db5ff223665a26e7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealImage</type>
      <name>_rcdmap</name>
      <anchorfile>classmirtk_1_1ShapeBasedInterpolateImageFunction.html</anchorfile>
      <anchor>a5cc57a0067e7a927b69183b95feba851</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealImage</type>
      <name>_rdmap</name>
      <anchorfile>classmirtk_1_1ShapeBasedInterpolateImageFunction.html</anchorfile>
      <anchor>a8c7a20e6af4b711f3a83d7983a444fc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealImage</type>
      <name>_rinput</name>
      <anchorfile>classmirtk_1_1ShapeBasedInterpolateImageFunction.html</anchorfile>
      <anchor>a6770e3a180338ef52b4643b00360e7b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealImage</type>
      <name>_tinput</name>
      <anchorfile>classmirtk_1_1ShapeBasedInterpolateImageFunction.html</anchorfile>
      <anchor>a9ce89856b8281722cc6978c3ecbc7953</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ShapePreservingSurfaceMapper</name>
    <filename>classmirtk_1_1ShapePreservingSurfaceMapper.html</filename>
    <base>mirtk::NonSymmetricWeightsSurfaceMapper</base>
    <member kind="function">
      <type>ShapePreservingSurfaceMapper &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1ShapePreservingSurfaceMapper.html</anchorfile>
      <anchor>a60a75e6752b0c206d46b1734f3b4c02d</anchor>
      <arglist>(const ShapePreservingSurfaceMapper &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ShapePreservingSurfaceMapper</name>
      <anchorfile>classmirtk_1_1ShapePreservingSurfaceMapper.html</anchorfile>
      <anchor>ae3997e329cf83c8e8f245229afcf972b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ShapePreservingSurfaceMapper</name>
      <anchorfile>classmirtk_1_1ShapePreservingSurfaceMapper.html</anchorfile>
      <anchor>ac85643e9e98f958fe0a9ba4e44278b79</anchor>
      <arglist>(const ShapePreservingSurfaceMapper &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ShapePreservingSurfaceMapper</name>
      <anchorfile>classmirtk_1_1ShapePreservingSurfaceMapper.html</anchorfile>
      <anchor>a236895c79a63b8424eca9915797ff7bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Weights</name>
      <anchorfile>classmirtk_1_1ShapePreservingSurfaceMapper.html</anchorfile>
      <anchor>a94f5e4757c260fa37d0758d2b90774cd</anchor>
      <arglist>(int i, const int *j, double *w, int d) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::SimilarityTransformation</name>
    <filename>classmirtk_1_1SimilarityTransformation.html</filename>
    <base>mirtk::RigidTransformation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFs</name>
      <anchorfile>classmirtk_1_1SimilarityTransformation.html</anchorfile>
      <anchor>a41895b12cafabc8241ad2592feafdf65</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CanRead</name>
      <anchorfile>classmirtk_1_1SimilarityTransformation.html</anchorfile>
      <anchor>adafbeb244fb896bababe66628bed7525</anchor>
      <arglist>(TransformationType) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1SimilarityTransformation.html</anchorfile>
      <anchor>acb45daecae419e2d6f58bb34a0c6c041</anchor>
      <arglist>(const Transformation *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DeriveJacobianWrtDOF</name>
      <anchorfile>classmirtk_1_1SimilarityTransformation.html</anchorfile>
      <anchor>a95fc821f5034da09428bfaeaa400db11</anchor>
      <arglist>(Matrix &amp;, int, double, double, double, double=0, double=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetScale</name>
      <anchorfile>classmirtk_1_1SimilarityTransformation.html</anchorfile>
      <anchor>ab34491e5ba17c1e093f99d4a717c5562</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1SimilarityTransformation.html</anchorfile>
      <anchor>ab0b57de9ace366832c8b29f7e4ec965d</anchor>
      <arglist>(double [3], int, double, double, double, double=0, double=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1SimilarityTransformation.html</anchorfile>
      <anchor>a5aa0ae11ab3184a604a4e446d0fe4e9b</anchor>
      <arglist>(ostream &amp;, Indent=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutScale</name>
      <anchorfile>classmirtk_1_1SimilarityTransformation.html</anchorfile>
      <anchor>a7685435472cd7d049b1a8731b00bdb6a</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimilarityTransformation</name>
      <anchorfile>classmirtk_1_1SimilarityTransformation.html</anchorfile>
      <anchor>a85108eb1f836b495c9bf6097266ba173</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimilarityTransformation</name>
      <anchorfile>classmirtk_1_1SimilarityTransformation.html</anchorfile>
      <anchor>a8799bfc54e3637cdf18c45488b951c82</anchor>
      <arglist>(const RigidTransformation &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimilarityTransformation</name>
      <anchorfile>classmirtk_1_1SimilarityTransformation.html</anchorfile>
      <anchor>ac6d91e86a358958fc37638af3beec212</anchor>
      <arglist>(const SimilarityTransformation &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cofstream &amp;</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1SimilarityTransformation.html</anchorfile>
      <anchor>a57876556e0d323262d0d3cb77407fbcf</anchor>
      <arglist>(Cofstream &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SimilarityTransformation</name>
      <anchorfile>classmirtk_1_1SimilarityTransformation.html</anchorfile>
      <anchor>a51365c44de74d5c6f57df93c193610e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix</type>
      <name>DOFs2Matrix</name>
      <anchorfile>classmirtk_1_1SimilarityTransformation.html</anchorfile>
      <anchor>aaca637a664388fef8263008be640bcad</anchor>
      <arglist>(const double *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Cifstream &amp;</type>
      <name>ReadDOFs</name>
      <anchorfile>classmirtk_1_1SimilarityTransformation.html</anchorfile>
      <anchor>a111cf37852c6147c75e8c17a1537394e</anchor>
      <arglist>(Cifstream &amp;, TransformationType)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SimilarityTransformation</name>
      <anchorfile>classmirtk_1_1SimilarityTransformation.html</anchorfile>
      <anchor>ab890b67d501d1910c3c8fcd61d4780ea</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SimilarityTransformation</name>
      <anchorfile>classmirtk_1_1SimilarityTransformation.html</anchorfile>
      <anchor>a24356af7920f0eff1b1f4dfe6dc5c0b9</anchor>
      <arglist>(const RigidTransformation &amp;, int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SimilarityTransformation</name>
      <anchorfile>classmirtk_1_1SimilarityTransformation.html</anchorfile>
      <anchor>af10ae3191ecd52e77a3042771c542042</anchor>
      <arglist>(const SimilarityTransformation &amp;, int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>UpdateDOFs</name>
      <anchorfile>classmirtk_1_1SimilarityTransformation.html</anchorfile>
      <anchor>acbec79d334ce3ecd12b27f53bb0fc345</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>UpdateMatrix</name>
      <anchorfile>classmirtk_1_1SimilarityTransformation.html</anchorfile>
      <anchor>a1574f1ae9313e0d6a0d4ee1b9063f402</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::Sinc</name>
    <filename>classmirtk_1_1Sinc.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>TReal</type>
      <name>Real</name>
      <anchorfile>classmirtk_1_1Sinc.html</anchorfile>
      <anchor>a0a9546e5f1c8011aa2e1c2f35adc6bfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1Sinc.html</anchorfile>
      <anchor>a28f7e653030446d451f75a69bb4a36a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API Real</type>
      <name>Lookup</name>
      <anchorfile>classmirtk_1_1Sinc.html</anchorfile>
      <anchor>afd582fbff4f0ecd2edf45c1a300d87b6</anchor>
      <arglist>(TReal)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MIRTKCU_API const int</type>
      <name>KernelSize</name>
      <anchorfile>classmirtk_1_1Sinc.html</anchorfile>
      <anchor>a95ee318065577532e197cf81462eba9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>MIRTK_Numerics_EXPORT static MIRTKCU_API Real *</type>
      <name>LookupTable</name>
      <anchorfile>classmirtk_1_1Sinc.html</anchorfile>
      <anchor>aa8b3d5f82d3ebfed9a62b392f334ecc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MIRTKCU_API const int</type>
      <name>LookupTableSize</name>
      <anchorfile>classmirtk_1_1Sinc.html</anchorfile>
      <anchor>a4ec3042a8370f54a684d846f0e9562c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MIRTKCU_API const int</type>
      <name>Radius</name>
      <anchorfile>classmirtk_1_1Sinc.html</anchorfile>
      <anchor>a1aeb66fa15dad1ef7fa1dff409f2abe3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::SincInterpolateImageFunction</name>
    <filename>classmirtk_1_1SincInterpolateImageFunction.html</filename>
    <base>GenericSincInterpolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>SincInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1SincInterpolateImageFunction.html</anchorfile>
      <anchor>a55648eaf99800d5c0049fb776463031f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::SincInterpolateImageFunction2D</name>
    <filename>classmirtk_1_1SincInterpolateImageFunction2D.html</filename>
    <base>GenericSincInterpolateImageFunction2D&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>SincInterpolateImageFunction2D</name>
      <anchorfile>classmirtk_1_1SincInterpolateImageFunction2D.html</anchorfile>
      <anchor>afdebbe25e4f18b4117aa29f736f29fda</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::SincInterpolateImageFunction3D</name>
    <filename>classmirtk_1_1SincInterpolateImageFunction3D.html</filename>
    <base>GenericSincInterpolateImageFunction3D&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>SincInterpolateImageFunction3D</name>
      <anchorfile>classmirtk_1_1SincInterpolateImageFunction3D.html</anchorfile>
      <anchor>ac3cb073c49f91638b1409ab3162d97d8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::SincInterpolateImageFunction4D</name>
    <filename>classmirtk_1_1SincInterpolateImageFunction4D.html</filename>
    <base>GenericSincInterpolateImageFunction4D&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>SincInterpolateImageFunction4D</name>
      <anchorfile>classmirtk_1_1SincInterpolateImageFunction4D.html</anchorfile>
      <anchor>a422811b74571a08139ee6edf47cc2f69</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::SmoothnessConstraint</name>
    <filename>classmirtk_1_1SmoothnessConstraint.html</filename>
    <base>mirtk::TransformationConstraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1SmoothnessConstraint.html</anchorfile>
      <anchor>ae8e8fcb4fc4c4e71207b47bda4deac7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1SmoothnessConstraint.html</anchorfile>
      <anchor>ab4d7c3260e12d53cbdb45d2d06e8c265</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SmoothnessConstraint</name>
      <anchorfile>classmirtk_1_1SmoothnessConstraint.html</anchorfile>
      <anchor>ad4ab07bd2d596ed3e7d23f87d283bf09</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Upgrade</name>
      <anchorfile>classmirtk_1_1SmoothnessConstraint.html</anchorfile>
      <anchor>a08866a73248f82985520fb799b6a982f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteGradient</name>
      <anchorfile>classmirtk_1_1SmoothnessConstraint.html</anchorfile>
      <anchor>a5d9ee1637df119bc03d24531805c4813</anchor>
      <arglist>(const char *, const char *) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1SmoothnessConstraint.html</anchorfile>
      <anchor>a153dc16ab0b01872757c7a8023ec71b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1SmoothnessConstraint.html</anchorfile>
      <anchor>a2228b8330509ceaf00ba129049797849</anchor>
      <arglist>(double *, double, double)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithoutPrefix</name>
      <anchorfile>classmirtk_1_1SmoothnessConstraint.html</anchorfile>
      <anchor>a557c57de787d1bb4372c0dc35aca412f</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::SparsityConstraint</name>
    <filename>classmirtk_1_1SparsityConstraint.html</filename>
    <base>mirtk::TransformationConstraint</base>
    <member kind="function">
      <type>void</type>
      <name>Gradient</name>
      <anchorfile>classmirtk_1_1SparsityConstraint.html</anchorfile>
      <anchor>a61084ef7e73654195c294ebb8a88d466</anchor>
      <arglist>(double *gradient, double step, bool *sgn_chg=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GradientStep</name>
      <anchorfile>classmirtk_1_1SparsityConstraint.html</anchorfile>
      <anchor>a0456a407f202472c826e61803ff9e265</anchor>
      <arglist>(const double *gradient, double &amp;min, double &amp;max) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparsityConstraint</name>
      <anchorfile>classmirtk_1_1SparsityConstraint.html</anchorfile>
      <anchor>a6407ffea7db56a9ded5e7eee2d2c1d54</anchor>
      <arglist>(const char *=&quot;&quot;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1SparsityConstraint.html</anchorfile>
      <anchor>a65a8ed39c10e4bfba154f6ada94f3864</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1SparsityConstraint.html</anchorfile>
      <anchor>a008a250ab9f10fc3c0dcab9ec801dca6</anchor>
      <arglist>(double *, double, double)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1SparsityConstraint.html</anchorfile>
      <anchor>a9b32d94ac7cf42ff2366140254978c3d</anchor>
      <arglist>(double *, double, double, bool *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::atlas::spatiotemporal::SpatioTemporalAtlas</name>
    <filename>classmirtk_1_1atlas_1_1spatiotemporal_1_1SpatioTemporalAtlas.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__getitem__</name>
      <anchorfile>classmirtk_1_1atlas_1_1spatiotemporal_1_1SpatioTemporalAtlas.html</anchorfile>
      <anchor>a06883354ba0617e1d5505ac6c2deaf3d</anchor>
      <arglist>(self, i)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classmirtk_1_1atlas_1_1spatiotemporal_1_1SpatioTemporalAtlas.html</anchorfile>
      <anchor>a034678702b77782d0b1a994c7a827709</anchor>
      <arglist>(self, config, root=None, step=-1, verbose=1, threads=-1, exit_on_error=False)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__len__</name>
      <anchorfile>classmirtk_1_1atlas_1_1spatiotemporal_1_1SpatioTemporalAtlas.html</anchorfile>
      <anchor>ad912c5c539551d16d263f6e432d376fd</anchor>
      <arglist>(self)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>affdof</name>
      <anchorfile>classmirtk_1_1atlas_1_1spatiotemporal_1_1SpatioTemporalAtlas.html</anchorfile>
      <anchor>ac054ce11705e0bbbf35f3565bfdcb29c</anchor>
      <arglist>(self, imgid)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>age</name>
      <anchorfile>classmirtk_1_1atlas_1_1spatiotemporal_1_1SpatioTemporalAtlas.html</anchorfile>
      <anchor>a01b60c11c991cabe991c18a3a3b18ef9</anchor>
      <arglist>(self, imgid)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>ages</name>
      <anchorfile>classmirtk_1_1atlas_1_1spatiotemporal_1_1SpatioTemporalAtlas.html</anchorfile>
      <anchor>a7dad7f8c2fcbc8e40f7a47d6f9896353</anchor>
      <arglist>(self)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>avgdof</name>
      <anchorfile>classmirtk_1_1atlas_1_1spatiotemporal_1_1SpatioTemporalAtlas.html</anchorfile>
      <anchor>a0dffc9ed72af40491f30427e2e2dde63</anchor>
      <arglist>(self, t, path=None, step=-1, force=False, create=True, batch=False)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>avgdofs</name>
      <anchorfile>classmirtk_1_1atlas_1_1spatiotemporal_1_1SpatioTemporalAtlas.html</anchorfile>
      <anchor>a162197d1b64cf2c80bf9560779ced774</anchor>
      <arglist>(self, step=-1, force=False, create=True, queue=None, batchname=&quot;avgdofs&quot;)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>avgimg</name>
      <anchorfile>classmirtk_1_1atlas_1_1spatiotemporal_1_1SpatioTemporalAtlas.html</anchorfile>
      <anchor>acd5c82a6cdc74ee6e24671628feddcfd</anchor>
      <arglist>(self, t, channel=None, label=0, path=None, sharpen=True, outdir=None, step=-1, decomposed=True, force=False, create=True, batch=False)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>avgimgs</name>
      <anchorfile>classmirtk_1_1atlas_1_1spatiotemporal_1_1SpatioTemporalAtlas.html</anchorfile>
      <anchor>a4d648f342299fa0cc4818e1d52c93782</anchor>
      <arglist>(self, step=-1, ages=[], channels=[], labels={}, sharpen=True, outdir=None, decomposed=True, force=False, create=True, queue=None, batchname=&quot;avgimgs&quot;)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>compose</name>
      <anchorfile>classmirtk_1_1atlas_1_1spatiotemporal_1_1SpatioTemporalAtlas.html</anchorfile>
      <anchor>a3a227d227cd4217883a836d2231a6469</anchor>
      <arglist>(self, step=-1, ages=[], allpairs=False, force=False, create=True, queue=None, batchname=&quot;compose&quot;)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>construct</name>
      <anchorfile>classmirtk_1_1atlas_1_1spatiotemporal_1_1SpatioTemporalAtlas.html</anchorfile>
      <anchor>a9753208232b884d32208fa09f2d0ce35</anchor>
      <arglist>(self, start=-1, niter=10, outdir=None, force=False, queue=None)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>defimg</name>
      <anchorfile>classmirtk_1_1atlas_1_1spatiotemporal_1_1SpatioTemporalAtlas.html</anchorfile>
      <anchor>aca47dfca8f1713741e0142b5aaef3ccb</anchor>
      <arglist>(self, imgid, t, channel=None, path=None, step=-1, decomposed=True, force=False, create=True, batch=False)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>defimgs</name>
      <anchorfile>classmirtk_1_1atlas_1_1spatiotemporal_1_1SpatioTemporalAtlas.html</anchorfile>
      <anchor>aa69c35eba3b30237aac6b448d3828c5d</anchor>
      <arglist>(self, ages=[], channels=[], step=-1, decomposed=True, force=False, create=True, queue=None, batchname=&quot;defimgs&quot;)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>deform</name>
      <anchorfile>classmirtk_1_1atlas_1_1spatiotemporal_1_1SpatioTemporalAtlas.html</anchorfile>
      <anchor>a77f919cb283f159c6b35973570759c96</anchor>
      <arglist>(self, i, t, path=None, channel=None, force=False, create=True)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>deformation</name>
      <anchorfile>classmirtk_1_1atlas_1_1spatiotemporal_1_1SpatioTemporalAtlas.html</anchorfile>
      <anchor>a3ff7f82dcb0b0b87c538b9a6416292ad</anchor>
      <arglist>(self, i, t=None, force=False, create=True)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>doftable</name>
      <anchorfile>classmirtk_1_1atlas_1_1spatiotemporal_1_1SpatioTemporalAtlas.html</anchorfile>
      <anchor>a5b718dcc72b82918c41d5dbc3b781505</anchor>
      <arglist>(self, t, step=-1, force=False, create=True, batch=False)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>evaluate</name>
      <anchorfile>classmirtk_1_1atlas_1_1spatiotemporal_1_1SpatioTemporalAtlas.html</anchorfile>
      <anchor>ab7f7d8d40e1d2bae181e895d88a2c17e</anchor>
      <arglist>(self, ages=[], step=-1, force=False, queue=None)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>growth</name>
      <anchorfile>classmirtk_1_1atlas_1_1spatiotemporal_1_1SpatioTemporalAtlas.html</anchorfile>
      <anchor>a55e25ed79d38968368cafeb6897cbf05</anchor>
      <arglist>(self, t1, t2, step=-1, force=False, create=True, batch=False)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>image</name>
      <anchorfile>classmirtk_1_1atlas_1_1spatiotemporal_1_1SpatioTemporalAtlas.html</anchorfile>
      <anchor>a1d1b620f35f11522b628923d5a081679</anchor>
      <arglist>(self, imgid, channel=None, label=0, force=False, create=True)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>imgdof</name>
      <anchorfile>classmirtk_1_1atlas_1_1spatiotemporal_1_1SpatioTemporalAtlas.html</anchorfile>
      <anchor>a26da94a1a48a9b41db5e0689cabedcd3</anchor>
      <arglist>(self, imgid, t, step=-1, decomposed=False, force=False, create=True, batch=False)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>imgdofs</name>
      <anchorfile>classmirtk_1_1atlas_1_1spatiotemporal_1_1SpatioTemporalAtlas.html</anchorfile>
      <anchor>a42ce992350bb296291b454ef46576fbb</anchor>
      <arglist>(self, ages=[], step=-1, force=False, create=True, queue=None, batchname=&quot;imgdofs&quot;)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>imgtable</name>
      <anchorfile>classmirtk_1_1atlas_1_1spatiotemporal_1_1SpatioTemporalAtlas.html</anchorfile>
      <anchor>a1986fbe0fed0ee291d62d39aad422bfd</anchor>
      <arglist>(self, t, channel=None, step=-1, decomposed=True, force=False, create=True, batch=False)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>info</name>
      <anchorfile>classmirtk_1_1atlas_1_1spatiotemporal_1_1SpatioTemporalAtlas.html</anchorfile>
      <anchor>a58f0ac2380f33090ed6c53c32680f723</anchor>
      <arglist>(self, msg, step=-1)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>interpolate</name>
      <anchorfile>classmirtk_1_1atlas_1_1spatiotemporal_1_1SpatioTemporalAtlas.html</anchorfile>
      <anchor>a95e137f7fff90debe46a96b9edc6280f</anchor>
      <arglist>(self, t, path=None, channel=None, interp=&quot;default&quot;, deform=False, sigma=0, force=False, create=True)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>normtime</name>
      <anchorfile>classmirtk_1_1atlas_1_1spatiotemporal_1_1SpatioTemporalAtlas.html</anchorfile>
      <anchor>a0ce1f990e1cff69dd8b9fe5a8203e47e</anchor>
      <arglist>(self, t)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>parin</name>
      <anchorfile>classmirtk_1_1atlas_1_1spatiotemporal_1_1SpatioTemporalAtlas.html</anchorfile>
      <anchor>acf9ce03eeff250c7f1efe1655c1ca4e2</anchor>
      <arglist>(self, step=-1, force=False, create=True)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>regcfg</name>
      <anchorfile>classmirtk_1_1atlas_1_1spatiotemporal_1_1SpatioTemporalAtlas.html</anchorfile>
      <anchor>a0442b132c39d08924d9261ddaca890ec</anchor>
      <arglist>(self, step=-1)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>regdof</name>
      <anchorfile>classmirtk_1_1atlas_1_1spatiotemporal_1_1SpatioTemporalAtlas.html</anchorfile>
      <anchor>aeb68d93baecd70a40db9122e237ae5ce</anchor>
      <arglist>(self, imgid, t=None, step=-1, path=None, force=False, create=True, batch=False)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>regdofs</name>
      <anchorfile>classmirtk_1_1atlas_1_1spatiotemporal_1_1SpatioTemporalAtlas.html</anchorfile>
      <anchor>ab197838d8eae03f19511e00cfd0813e2</anchor>
      <arglist>(self, step=-1, force=False, create=True, queue=None, batchname=&quot;register&quot;)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>rmtemp</name>
      <anchorfile>classmirtk_1_1atlas_1_1spatiotemporal_1_1SpatioTemporalAtlas.html</anchorfile>
      <anchor>a1f661fbe3b3bc36397def322a314c952</anchor>
      <arglist>(self)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>splitchannel</name>
      <anchorfile>classmirtk_1_1atlas_1_1spatiotemporal_1_1SpatioTemporalAtlas.html</anchorfile>
      <anchor>a4382c1e783eab587a88d657bceffa6d5</anchor>
      <arglist>(self, channel=None)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>stdev</name>
      <anchorfile>classmirtk_1_1atlas_1_1spatiotemporal_1_1SpatioTemporalAtlas.html</anchorfile>
      <anchor>a22a83c0387f8a525bfe40b1b7d3a2855</anchor>
      <arglist>(self, t)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>subdir</name>
      <anchorfile>classmirtk_1_1atlas_1_1spatiotemporal_1_1SpatioTemporalAtlas.html</anchorfile>
      <anchor>ac60ae39b07d6cab6d989d2bbe7705264</anchor>
      <arglist>(self, step=-1)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>template</name>
      <anchorfile>classmirtk_1_1atlas_1_1spatiotemporal_1_1SpatioTemporalAtlas.html</anchorfile>
      <anchor>a3d841f7ac5be98d177d77a2a394c435a</anchor>
      <arglist>(self, i, channel=None)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>timeindex</name>
      <anchorfile>classmirtk_1_1atlas_1_1spatiotemporal_1_1SpatioTemporalAtlas.html</anchorfile>
      <anchor>a259fe31e28e56d8cff3640ccd2e34239</anchor>
      <arglist>(self, t)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>timename</name>
      <anchorfile>classmirtk_1_1atlas_1_1spatiotemporal_1_1SpatioTemporalAtlas.html</anchorfile>
      <anchor>a672620034572eab58071075705c691d6</anchor>
      <arglist>(self, t1, t2=None)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>view</name>
      <anchorfile>classmirtk_1_1atlas_1_1spatiotemporal_1_1SpatioTemporalAtlas.html</anchorfile>
      <anchor>ae157431a3ffc53d6a6f0747a5b14396d</anchor>
      <arglist>(self, i=None, channel=None)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>wait</name>
      <anchorfile>classmirtk_1_1atlas_1_1spatiotemporal_1_1SpatioTemporalAtlas.html</anchorfile>
      <anchor>a22059cbcf67b6933429a1d451e734dc8</anchor>
      <arglist>(self, jobs, interval=60, verbose=5)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>weight</name>
      <anchorfile>classmirtk_1_1atlas_1_1spatiotemporal_1_1SpatioTemporalAtlas.html</anchorfile>
      <anchor>a1323f4968b2c5b3f505c548e5aa071aa</anchor>
      <arglist>(self, t, mean, sigma=0, normalize=True, epsilon=None)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>weights</name>
      <anchorfile>classmirtk_1_1atlas_1_1spatiotemporal_1_1SpatioTemporalAtlas.html</anchorfile>
      <anchor>a5f56c457ea600f06feb43693e872eb98</anchor>
      <arglist>(self, mean=None, sigma=0, zero=False)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::SpectralConformalSurfaceMapper</name>
    <filename>classmirtk_1_1SpectralConformalSurfaceMapper.html</filename>
    <base>mirtk::FreeBoundarySurfaceMapper</base>
    <member kind="function">
      <type>void</type>
      <name>AddFixedPoint</name>
      <anchorfile>classmirtk_1_1SpectralConformalSurfaceMapper.html</anchorfile>
      <anchor>aa9b815b99988e5a0ee452097e4774f10</anchor>
      <arglist>(int i, double u, double v)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>FixedPointId</name>
      <anchorfile>classmirtk_1_1SpectralConformalSurfaceMapper.html</anchorfile>
      <anchor>a5e4b1c729c762c138741fcb2cfdf59a5</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>FixedPointIndex</name>
      <anchorfile>classmirtk_1_1SpectralConformalSurfaceMapper.html</anchorfile>
      <anchor>a19b4fe74f7003acc9756b52993360b9a</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>FreePointId</name>
      <anchorfile>classmirtk_1_1SpectralConformalSurfaceMapper.html</anchorfile>
      <anchor>ae9873293b57c7c1d66ddae0460020855</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>FreePointIndex</name>
      <anchorfile>classmirtk_1_1SpectralConformalSurfaceMapper.html</anchorfile>
      <anchor>a710b58f392182b7d2025a42416f05667</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetFixedValue</name>
      <anchorfile>classmirtk_1_1SpectralConformalSurfaceMapper.html</anchorfile>
      <anchor>a2737d2916c3c5ddab87a93c68c4bde06</anchor>
      <arglist>(int i, int j=0) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetFreeValue</name>
      <anchorfile>classmirtk_1_1SpectralConformalSurfaceMapper.html</anchorfile>
      <anchor>a6402955a4b16c16ea30d7274a6fd731e</anchor>
      <arglist>(int i, int j=0) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetValue</name>
      <anchorfile>classmirtk_1_1SpectralConformalSurfaceMapper.html</anchorfile>
      <anchor>a93f6146327004436c6be7fc90161f76d</anchor>
      <arglist>(int i, int j=0) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsFixedPoint</name>
      <anchorfile>classmirtk_1_1SpectralConformalSurfaceMapper.html</anchorfile>
      <anchor>a514d046c711182648e8fca3e566ae732</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsFreePoint</name>
      <anchorfile>classmirtk_1_1SpectralConformalSurfaceMapper.html</anchorfile>
      <anchor>a44c7a91f250b4a770de163c00aee55c3</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfFixedPoints</name>
      <anchorfile>classmirtk_1_1SpectralConformalSurfaceMapper.html</anchorfile>
      <anchor>af9d2a65a10feb0693fc56a80a7e8ea88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfFreePoints</name>
      <anchorfile>classmirtk_1_1SpectralConformalSurfaceMapper.html</anchorfile>
      <anchor>a805d4528e4ff7edb41f168f5194c86e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SpectralConformalSurfaceMapper &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1SpectralConformalSurfaceMapper.html</anchorfile>
      <anchor>a353a93988760a6794c012468d9305421</anchor>
      <arglist>(const SpectralConformalSurfaceMapper &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpectralConformalSurfaceMapper</name>
      <anchorfile>classmirtk_1_1SpectralConformalSurfaceMapper.html</anchorfile>
      <anchor>afd999a2454a4b582b07a960fcb539253</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpectralConformalSurfaceMapper</name>
      <anchorfile>classmirtk_1_1SpectralConformalSurfaceMapper.html</anchorfile>
      <anchor>a2ad2150cb3f27725085cc2461a0a4c79</anchor>
      <arglist>(const SpectralConformalSurfaceMapper &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SpectralConformalSurfaceMapper</name>
      <anchorfile>classmirtk_1_1SpectralConformalSurfaceMapper.html</anchorfile>
      <anchor>a148030fc6b52e6b5dc335458b1ae1101</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>ComputeMap</name>
      <anchorfile>classmirtk_1_1SpectralConformalSurfaceMapper.html</anchorfile>
      <anchor>a7b3b0384d019dbe144df81e9974ab751</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1SpectralConformalSurfaceMapper.html</anchorfile>
      <anchor>abb39b07a721f3154dcec2cbe2825e587</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1SpectralConformalSurfaceMapper.html</anchorfile>
      <anchor>acb95c40bedd4ee72c0744dd8c71e1e29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetFreeValue</name>
      <anchorfile>classmirtk_1_1SpectralConformalSurfaceMapper.html</anchorfile>
      <anchor>a13399c688dcf9f7e03b9d7af062fcbe3</anchor>
      <arglist>(int i, double v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetFreeValue</name>
      <anchorfile>classmirtk_1_1SpectralConformalSurfaceMapper.html</anchorfile>
      <anchor>a0d92fcfe66528f0ae89c33d26c58e0b0</anchor>
      <arglist>(int i, int j, double v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classmirtk_1_1SpectralConformalSurfaceMapper.html</anchorfile>
      <anchor>a50c3df990f6a5d091138c68e54c49a89</anchor>
      <arglist>(int i, double v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classmirtk_1_1SpectralConformalSurfaceMapper.html</anchorfile>
      <anchor>ad185bad887976adb4fc1bdde4664541d</anchor>
      <arglist>(int i, int j, double v)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Weight</name>
      <anchorfile>classmirtk_1_1SpectralConformalSurfaceMapper.html</anchorfile>
      <anchor>a0372a1cc15b393dd4a8e939c1841e718</anchor>
      <arglist>(int i, int j) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::SpectralMatch</name>
    <filename>classmirtk_1_1SpectralMatch.html</filename>
    <base>mirtk::PointCorrespondence</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetInputSourcePoint</name>
      <anchorfile>classmirtk_1_1SpectralMatch.html</anchorfile>
      <anchor>afcac46867574d9f1c4850f3758e9d8b3</anchor>
      <arglist>(int, Point &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetInputTargetPoint</name>
      <anchorfile>classmirtk_1_1SpectralMatch.html</anchorfile>
      <anchor>adc2796ae5e00bf091b5552caa07c408b</anchor>
      <arglist>(int, Point &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetSourcePoint</name>
      <anchorfile>classmirtk_1_1SpectralMatch.html</anchorfile>
      <anchor>a5b3c1ea51fa863abf9728928eab5dc88</anchor>
      <arglist>(int, Point &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetTargetPoint</name>
      <anchorfile>classmirtk_1_1SpectralMatch.html</anchorfile>
      <anchor>ac169c868a0be5c4ce94139812e6d817f</anchor>
      <arglist>(int, Point &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1SpectralMatch.html</anchorfile>
      <anchor>aea6beebd1abbdbd0ccac6d960b1139d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PointCorrespondence *</type>
      <name>NewInstance</name>
      <anchorfile>classmirtk_1_1SpectralMatch.html</anchorfile>
      <anchor>a6ab45812090fc638e82224ff62c92222</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1SpectralMatch.html</anchorfile>
      <anchor>a70b60082350aad7e82a42d2972ff17f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1SpectralMatch.html</anchorfile>
      <anchor>aca3032676565a591a56f4e0667073c68</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpectralMatch</name>
      <anchorfile>classmirtk_1_1SpectralMatch.html</anchorfile>
      <anchor>a699fde52afb558f13b3800ee2f652fe8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpectralMatch</name>
      <anchorfile>classmirtk_1_1SpectralMatch.html</anchorfile>
      <anchor>ac26efae7558a574009c5dab1a0759ad8</anchor>
      <arglist>(const SpectralMatch &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TypeId</type>
      <name>Type</name>
      <anchorfile>classmirtk_1_1SpectralMatch.html</anchorfile>
      <anchor>a14cbea86c8c5b90e48b3b0c546750fab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1SpectralMatch.html</anchorfile>
      <anchor>ab058339ca4b9b6fa33ae401d562610df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Upgrade</name>
      <anchorfile>classmirtk_1_1SpectralMatch.html</anchorfile>
      <anchor>a9ba1df961415f2b405e372a922727468</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SpectralMatch</name>
      <anchorfile>classmirtk_1_1SpectralMatch.html</anchorfile>
      <anchor>ad4dc5b99a2e1688df7c505ce2ccd8c46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1SpectralMatch.html</anchorfile>
      <anchor>a400bf311d9423e574526029b7911edf8</anchor>
      <arglist>(PointSet, TargetPoints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1SpectralMatch.html</anchorfile>
      <anchor>a3624c28dc54406a74a6d5b36787ad48c</anchor>
      <arglist>(PointSet, SourcePoints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1SpectralMatch.html</anchorfile>
      <anchor>afd953d3d97734b377ea331ed2e566614</anchor>
      <arglist>(int, NumberOfNeighbors)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1SpectralMatch.html</anchorfile>
      <anchor>a0b6ad8239bddf7035d4bd2f3d1f7bce6</anchor>
      <arglist>(double, Sigma)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::SphericalSurfaceMapper</name>
    <filename>classmirtk_1_1SphericalSurfaceMapper.html</filename>
    <base>mirtk::SurfaceMapper</base>
    <member kind="function">
      <type>int</type>
      <name>NumberOfComponents</name>
      <anchorfile>classmirtk_1_1SphericalSurfaceMapper.html</anchorfile>
      <anchor>a1e9a88da9b9b6938d762c97ab399ecff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SphericalSurfaceMapper</name>
      <anchorfile>classmirtk_1_1SphericalSurfaceMapper.html</anchorfile>
      <anchor>aeb6173542809e9af248504fd4cf47fc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1SphericalSurfaceMapper.html</anchorfile>
      <anchor>a1123997254187ddf2af19c62c3efd934</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SphericalSurfaceMapper &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1SphericalSurfaceMapper.html</anchorfile>
      <anchor>a3ca4cc7cc080b0c05f59ed997fc40972</anchor>
      <arglist>(const SphericalSurfaceMapper &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SphericalSurfaceMapper</name>
      <anchorfile>classmirtk_1_1SphericalSurfaceMapper.html</anchorfile>
      <anchor>a923d4ccd1eec9205bbcd2c5d55ab2fd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SphericalSurfaceMapper</name>
      <anchorfile>classmirtk_1_1SphericalSurfaceMapper.html</anchorfile>
      <anchor>a08ae8263b3e4065ee97e165b127d13b8</anchor>
      <arglist>(const SphericalSurfaceMapper &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::split</name>
    <filename>structmirtk_1_1split.html</filename>
  </compound>
  <compound kind="class">
    <name>mirtk::SpringForce</name>
    <filename>classmirtk_1_1SpringForce.html</filename>
    <base>mirtk::SurfaceConstraint</base>
    <member kind="function">
      <type>SpringForce &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1SpringForce.html</anchorfile>
      <anchor>a9f454f46966dcf46207d071cab0ff889</anchor>
      <arglist>(const SpringForce &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpringForce</name>
      <anchorfile>classmirtk_1_1SpringForce.html</anchorfile>
      <anchor>a0b1019bec4f6bc18dde63aecf8aff62e</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpringForce</name>
      <anchorfile>classmirtk_1_1SpringForce.html</anchorfile>
      <anchor>aee02f266d1a8c93f36cf591f9d45ea24</anchor>
      <arglist>(const SpringForce &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SpringForce</name>
      <anchorfile>classmirtk_1_1SpringForce.html</anchorfile>
      <anchor>aec9731e20a7b60532b0bb992d943e16d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1SpringForce.html</anchorfile>
      <anchor>ab77150a4d82571d4c15cc0b9e8aef730</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1SpringForce.html</anchorfile>
      <anchor>afa932b9107e9b621a1f10894f8d8d420</anchor>
      <arglist>(double *, double, double)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::UnaryVoxelFunction::Sqrt</name>
    <filename>structmirtk_1_1UnaryVoxelFunction_1_1Sqrt.html</filename>
    <base>mirtk::VoxelFunction</base>
  </compound>
  <compound kind="class">
    <name>mirtk::SquaredErrorFunction</name>
    <filename>classmirtk_1_1SquaredErrorFunction.html</filename>
    <base>mirtk::RadialErrorFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Derivative</name>
      <anchorfile>classmirtk_1_1SquaredErrorFunction.html</anchorfile>
      <anchor>a887395e1cf7148b140105294e02f2bb8</anchor>
      <arglist>(double d) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RadialErrorFunction *</type>
      <name>NewInstance</name>
      <anchorfile>classmirtk_1_1SquaredErrorFunction.html</anchorfile>
      <anchor>a8548f2ad93636e888a53313f865d25d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SquaredErrorFunction</name>
      <anchorfile>classmirtk_1_1SquaredErrorFunction.html</anchorfile>
      <anchor>a97ceae609663406677f3625a737e55cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SquaredErrorFunction</name>
      <anchorfile>classmirtk_1_1SquaredErrorFunction.html</anchorfile>
      <anchor>a25d6b229f78654e66b80d46c58a81345</anchor>
      <arglist>(const SquaredErrorFunction &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TypeId</type>
      <name>Type</name>
      <anchorfile>classmirtk_1_1SquaredErrorFunction.html</anchorfile>
      <anchor>ae767befcd579673574d25bb47cc7a270</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Value</name>
      <anchorfile>classmirtk_1_1SquaredErrorFunction.html</anchorfile>
      <anchor>aa58b37dc3234b2d452b1bda1c252d75c</anchor>
      <arglist>(double d) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SquaredErrorFunction</name>
      <anchorfile>classmirtk_1_1SquaredErrorFunction.html</anchorfile>
      <anchor>a94c225d361be96179fbcee9e8bf3e423</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::BinaryVoxelFunction::SSD</name>
    <filename>structmirtk_1_1BinaryVoxelFunction_1_1SSD.html</filename>
    <base>mirtk::VoxelReduction</base>
  </compound>
  <compound kind="class">
    <name>mirtk::data::Statistic</name>
    <filename>classmirtk_1_1data_1_1Statistic.html</filename>
    <base>mirtk::data::Op</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1data_1_1Statistic.html</anchorfile>
      <anchor>a2fb5fd48974872925dd3d9bf2042750c</anchor>
      <arglist>(Array&lt; double &gt; &amp;, int, const double *, const bool *=nullptr) const =0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkOnOffMacro</name>
      <anchorfile>classmirtk_1_1data_1_1Statistic.html</anchorfile>
      <anchor>a80a8e015bd8dbe1855219be486d6e41b</anchor>
      <arglist>(Hidden)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1data_1_1Statistic.html</anchorfile>
      <anchor>a942754b0c4ac8013d31e6ecc00ebfbb0</anchor>
      <arglist>(ostream &amp;os=cout, int digits=5, const char *prefix=&quot;&quot;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classmirtk_1_1data_1_1Statistic.html</anchorfile>
      <anchor>ac5b1c463edc9b0e5a852737cd32f6719</anchor>
      <arglist>(ostream &amp;os=cout, const char *delimiter=&quot;,&quot;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintValues</name>
      <anchorfile>classmirtk_1_1data_1_1Statistic.html</anchorfile>
      <anchor>ab63133df0ddc7af441200c5d9604b899</anchor>
      <arglist>(ostream &amp;os=cout, int digits=5, const char *delimiter=&quot;,&quot;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1Statistic.html</anchorfile>
      <anchor>a3d5f82e9134afb2173f3bcfc7189ebdc</anchor>
      <arglist>(int n, double *data, bool *mask=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const double &amp;</type>
      <name>Value</name>
      <anchorfile>classmirtk_1_1data_1_1Statistic.html</anchorfile>
      <anchor>a2f6c590ad223842eb9db6fd9afd73a33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Statistic</name>
      <anchorfile>classmirtk_1_1data_1_1Statistic.html</anchorfile>
      <anchor>afdd59d717cd5c5d90a16214bea672bf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Statistic</name>
      <anchorfile>classmirtk_1_1data_1_1Statistic.html</anchorfile>
      <anchor>a6265988be25611b8f14c950c1fe8a96a</anchor>
      <arglist>(int nvalues, const char *desc=nullptr, const Array&lt; string &gt; *names=nullptr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Value</name>
      <anchorfile>classmirtk_1_1data_1_1Statistic.html</anchorfile>
      <anchor>a1aad44ded537a9652b9bc3a71e1f5522</anchor>
      <arglist>(double v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::statistic::StDev</name>
    <filename>classmirtk_1_1data_1_1statistic_1_1StDev.html</filename>
    <base>mirtk::data::statistic::MeanVar</base>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1data_1_1statistic_1_1StDev.html</anchorfile>
      <anchor>a5a3dbaad97e6bacb814f2bd0b293d303</anchor>
      <arglist>(Array&lt; double &gt; &amp;values, int n, const double *data, const bool *mask=nullptr) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::StoppingCriterion</name>
    <filename>classmirtk_1_1StoppingCriterion.html</filename>
    <base>mirtk::Object</base>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>Fulfilled</name>
      <anchorfile>classmirtk_1_1StoppingCriterion.html</anchorfile>
      <anchor>a37b0a19277f07f132567a01c71e37de3</anchor>
      <arglist>(int iter, double value, const double *delta)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1StoppingCriterion.html</anchorfile>
      <anchor>ac4f58d778fea92e208508a631736731b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual StoppingCriterion *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1StoppingCriterion.html</anchorfile>
      <anchor>a6d4237250e3fe7e71e4628ff47c6b036</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1StoppingCriterion.html</anchorfile>
      <anchor>a215910177627ba221b77c91c5df7afeb</anchor>
      <arglist>(ostream &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StoppingCriterion</name>
      <anchorfile>classmirtk_1_1StoppingCriterion.html</anchorfile>
      <anchor>a301b4f6609921f359917d38e598e1235</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>StoppingCriterion &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1StoppingCriterion.html</anchorfile>
      <anchor>afc41082953264aae8e323d32be180f6a</anchor>
      <arglist>(const StoppingCriterion &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StoppingCriterion</name>
      <anchorfile>classmirtk_1_1StoppingCriterion.html</anchorfile>
      <anchor>aaf1ea37853fbc1903009dbbfaa00d311</anchor>
      <arglist>(const ObjectiveFunction *=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StoppingCriterion</name>
      <anchorfile>classmirtk_1_1StoppingCriterion.html</anchorfile>
      <anchor>af60b98c419f10eaf55a7fafc32d97f01</anchor>
      <arglist>(const LocalOptimizer *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StoppingCriterion</name>
      <anchorfile>classmirtk_1_1StoppingCriterion.html</anchorfile>
      <anchor>a1a78216534ee5b9f2bc30a4865ecd19f</anchor>
      <arglist>(const StoppingCriterion &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::StretchingForce</name>
    <filename>classmirtk_1_1StretchingForce.html</filename>
    <base>mirtk::InternalForce</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1StretchingForce.html</anchorfile>
      <anchor>ac61f8c717e3f7e17e990b6a94736ad0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StretchingForce &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1StretchingForce.html</anchorfile>
      <anchor>a4374798b2c851f12f5a65a15722343b7</anchor>
      <arglist>(const StretchingForce &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1StretchingForce.html</anchorfile>
      <anchor>a3238da0fb1d0bc88f021a7c7b457bd53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Reinitialize</name>
      <anchorfile>classmirtk_1_1StretchingForce.html</anchorfile>
      <anchor>a7f27e8feade596bf4a8fe68f96818f19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StretchingForce</name>
      <anchorfile>classmirtk_1_1StretchingForce.html</anchorfile>
      <anchor>ab66b847618ccdf8cd41f04d6ef3f3780</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StretchingForce</name>
      <anchorfile>classmirtk_1_1StretchingForce.html</anchorfile>
      <anchor>a805df71316ae6e87f050d6270e917538</anchor>
      <arglist>(const StretchingForce &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1StretchingForce.html</anchorfile>
      <anchor>ada7ec3c49e0538e593268913e43acbff</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StretchingForce</name>
      <anchorfile>classmirtk_1_1StretchingForce.html</anchorfile>
      <anchor>ad30fc58e08e2617fcaffdc16a20d8f89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1StretchingForce.html</anchorfile>
      <anchor>a03fd402f68d73a4ad994d7366674ae79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1StretchingForce.html</anchorfile>
      <anchor>aaa1460853fc244b30896567421dde3a7</anchor>
      <arglist>(double *, double, double)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Init</name>
      <anchorfile>classmirtk_1_1StretchingForce.html</anchorfile>
      <anchor>a1e96fcbd87cbe1b27eef1c8a32bebda3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithoutPrefix</name>
      <anchorfile>classmirtk_1_1StretchingForce.html</anchorfile>
      <anchor>a1f880324ec6fc69657d511fd49c64426</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::Stripper</name>
    <filename>classmirtk_1_1Stripper.html</filename>
    <base>mirtk::MeshFilter</base>
    <member kind="function">
      <type></type>
      <name>mirtkOnOffMacro</name>
      <anchorfile>classmirtk_1_1Stripper.html</anchorfile>
      <anchor>ad4690b9b5030d5a985cfc1cbb3712b1c</anchor>
      <arglist>(StripLines)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkOnOffMacro</name>
      <anchorfile>classmirtk_1_1Stripper.html</anchorfile>
      <anchor>ad4405ac470395d09bc62cb8650a62f03</anchor>
      <arglist>(StripTriangles)</arglist>
    </member>
    <member kind="function">
      <type>Stripper &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1Stripper.html</anchorfile>
      <anchor>afc4312c11395cec17eb449f36e083d46</anchor>
      <arglist>(const Stripper &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Stripper</name>
      <anchorfile>classmirtk_1_1Stripper.html</anchorfile>
      <anchor>a57d38939de3e6b8bf213499f38636190</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Stripper</name>
      <anchorfile>classmirtk_1_1Stripper.html</anchorfile>
      <anchor>a5507f1022f4e91795522a26399da9b97</anchor>
      <arglist>(const Stripper &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Stripper</name>
      <anchorfile>classmirtk_1_1Stripper.html</anchorfile>
      <anchor>a95e6769e4c0e67470d3b5ee9d6c0824a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Execute</name>
      <anchorfile>classmirtk_1_1Stripper.html</anchorfile>
      <anchor>a37ae15d843e242eebb95aa613b72b90c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::Sub</name>
    <filename>classmirtk_1_1data_1_1op_1_1Sub.html</filename>
    <base>mirtk::data::op::ElementWiseBinaryOp</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Op</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Sub.html</anchorfile>
      <anchor>a71197599ae4b0d5917621fd54838215b</anchor>
      <arglist>(double value, double constant, bool &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Sub.html</anchorfile>
      <anchor>a3380a01b951d6a3aa345192cbd7c05fc</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Sub</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Sub.html</anchorfile>
      <anchor>ad36e2c57ec9a8d894ce2077f0c5d9ae2</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Sub</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Sub.html</anchorfile>
      <anchor>adfda65d165f2c291bf1c3cd86bc7093c</anchor>
      <arglist>(const double *value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Sub</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Sub.html</anchorfile>
      <anchor>ac214eb003b9d96b8b3f0cf40ab812526</anchor>
      <arglist>(const char *fname)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::BinaryVoxelFunction::Sub</name>
    <filename>structmirtk_1_1BinaryVoxelFunction_1_1Sub.html</filename>
    <base>mirtk::VoxelFunction</base>
  </compound>
  <compound kind="class">
    <name>mirtk::TransformationUtils::SubDisplacements</name>
    <filename>classmirtk_1_1TransformationUtils_1_1SubDisplacements.html</filename>
  </compound>
  <compound kind="class">
    <name>mirtk::SubdividedBoundarySegmentParameterizer</name>
    <filename>classmirtk_1_1SubdividedBoundarySegmentParameterizer.html</filename>
    <base>mirtk::BoundarySegmentParameterizer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual BoundarySegmentParameterizer *</type>
      <name>NewCopy</name>
      <anchorfile>classmirtk_1_1SubdividedBoundarySegmentParameterizer.html</anchorfile>
      <anchor>ab82340a4a7f621f86bfb611edfb9f36c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SubdividedBoundarySegmentParameterizer &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1SubdividedBoundarySegmentParameterizer.html</anchorfile>
      <anchor>a88297d319157d42798769c51eac6a420</anchor>
      <arglist>(const SubdividedBoundarySegmentParameterizer &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SubdividedBoundarySegmentParameterizer</name>
      <anchorfile>classmirtk_1_1SubdividedBoundarySegmentParameterizer.html</anchorfile>
      <anchor>a0e2b3e640b1a5ab0070dbec27578f6bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SubdividedBoundarySegmentParameterizer</name>
      <anchorfile>classmirtk_1_1SubdividedBoundarySegmentParameterizer.html</anchorfile>
      <anchor>a512ed4c00382b4306a820b4d5ab0619a</anchor>
      <arglist>(const SubdividedBoundarySegmentParameterizer &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SubdividedBoundarySegmentParameterizer</name>
      <anchorfile>classmirtk_1_1SubdividedBoundarySegmentParameterizer.html</anchorfile>
      <anchor>a4c4c1f9af5f3d3b6cd9cd5edf8d099a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Parameterize</name>
      <anchorfile>classmirtk_1_1SubdividedBoundarySegmentParameterizer.html</anchorfile>
      <anchor>a55f93ced6d7e4aa21eafcda02ea01fb2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::TernaryVoxelFunction::Sum</name>
    <filename>structmirtk_1_1TernaryVoxelFunction_1_1Sum.html</filename>
    <base>mirtk::VoxelFunction</base>
  </compound>
  <compound kind="class">
    <name>mirtk::data::statistic::Sum</name>
    <filename>classmirtk_1_1data_1_1statistic_1_1Sum.html</filename>
    <base>mirtk::data::Statistic</base>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1data_1_1statistic_1_1Sum.html</anchorfile>
      <anchor>ab49419e0b8f0f30c801f54cfb4ab8bec</anchor>
      <arglist>(Array&lt; double &gt; &amp;values, int n, const double *data, const bool *mask=nullptr) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::SumOfSquaredIntensityDifferences</name>
    <filename>classmirtk_1_1SumOfSquaredIntensityDifferences.html</filename>
    <base>mirtk::ImageSimilarity</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1SumOfSquaredIntensityDifferences.html</anchorfile>
      <anchor>a8b537a2b00933a7c5c8efd4b4bdb1a81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SumOfSquaredIntensityDifferences &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1SumOfSquaredIntensityDifferences.html</anchorfile>
      <anchor>a0a594c2bae2486f83c1172ae3056f6d0</anchor>
      <arglist>(const SumOfSquaredIntensityDifferences &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SumOfSquaredIntensityDifferences</name>
      <anchorfile>classmirtk_1_1SumOfSquaredIntensityDifferences.html</anchorfile>
      <anchor>aadc60d41dec942a1ca95c92f4c503365</anchor>
      <arglist>(const char *=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SumOfSquaredIntensityDifferences</name>
      <anchorfile>classmirtk_1_1SumOfSquaredIntensityDifferences.html</anchorfile>
      <anchor>aa38be5c27482b0eb46735f9aacfe9c13</anchor>
      <arglist>(const SumOfSquaredIntensityDifferences &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1SumOfSquaredIntensityDifferences.html</anchorfile>
      <anchor>a9c8f060fa97cd8151d0f40b7d4ca34ad</anchor>
      <arglist>(bool=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SumOfSquaredIntensityDifferences</name>
      <anchorfile>classmirtk_1_1SumOfSquaredIntensityDifferences.html</anchorfile>
      <anchor>ab560061eb438290f0024001f4a889226</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1SumOfSquaredIntensityDifferences.html</anchorfile>
      <anchor>a844def15f74c869c05387873670079ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Exclude</name>
      <anchorfile>classmirtk_1_1SumOfSquaredIntensityDifferences.html</anchorfile>
      <anchor>aa20da1fb9029d44432d00d9f2e845a62</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Include</name>
      <anchorfile>classmirtk_1_1SumOfSquaredIntensityDifferences.html</anchorfile>
      <anchor>a23dd0c53d822d1ca29e5b449671f519b</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>NonParametricGradient</name>
      <anchorfile>classmirtk_1_1SumOfSquaredIntensityDifferences.html</anchorfile>
      <anchor>a7c001b53bc160de157de35711f784f62</anchor>
      <arglist>(const RegisteredImage *, GradientImageType *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::SurfaceBoundary</name>
    <filename>classmirtk_1_1SurfaceBoundary.html</filename>
    <base>mirtk::Object</base>
    <member kind="function">
      <type>bool</type>
      <name>Contains</name>
      <anchorfile>classmirtk_1_1SurfaceBoundary.html</anchorfile>
      <anchor>a6ce558f6f5555ff169f4b6d7f55aa3c5</anchor>
      <arglist>(int ptId) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DeselectPoint</name>
      <anchorfile>classmirtk_1_1SurfaceBoundary.html</anchorfile>
      <anchor>a2ca9d4a9fa53109213c33fa9543d3272</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Find</name>
      <anchorfile>classmirtk_1_1SurfaceBoundary.html</anchorfile>
      <anchor>a278a0dde4c1701aefdb0847b5f1eafba</anchor>
      <arglist>(int ptId) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>FindLargestSegment</name>
      <anchorfile>classmirtk_1_1SurfaceBoundary.html</anchorfile>
      <anchor>a295d21bd4187868f6dd05f3f79e8cfa3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>FindLongestSegment</name>
      <anchorfile>classmirtk_1_1SurfaceBoundary.html</anchorfile>
      <anchor>a98c2a0e160fee6ed8ade1c98c908e599</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>FindSegment</name>
      <anchorfile>classmirtk_1_1SurfaceBoundary.html</anchorfile>
      <anchor>a44f02a8dbe92204a9d198e9512fa7a4d</anchor>
      <arglist>(int ptId, int *i=nullptr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetPoint</name>
      <anchorfile>classmirtk_1_1SurfaceBoundary.html</anchorfile>
      <anchor>a2ff71d3621407980d8f7e5771ad22d0d</anchor>
      <arglist>(int i, double p[3]) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitializeIndex</name>
      <anchorfile>classmirtk_1_1SurfaceBoundary.html</anchorfile>
      <anchor>af532f8c0b56869dc3f55bc3af3c7cf1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitializeLengths</name>
      <anchorfile>classmirtk_1_1SurfaceBoundary.html</anchorfile>
      <anchor>a76d80d7684d63b23be53c5b1776c9487</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BoundarySegment &amp;</type>
      <name>LargestSegment</name>
      <anchorfile>classmirtk_1_1SurfaceBoundary.html</anchorfile>
      <anchor>a98b2cfc80ebc9f5e3d1636432caad666</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const BoundarySegment &amp;</type>
      <name>LongestSegment</name>
      <anchorfile>classmirtk_1_1SurfaceBoundary.html</anchorfile>
      <anchor>a9fb2c29d66fdbe1f21261047d1cf696a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfPoints</name>
      <anchorfile>classmirtk_1_1SurfaceBoundary.html</anchorfile>
      <anchor>ad26a41ab8bcca947122aa6369fb91d94</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfPoints</name>
      <anchorfile>classmirtk_1_1SurfaceBoundary.html</anchorfile>
      <anchor>a5ee4cbe0560b0efc9dc5304a7dc2e6ff</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfSegments</name>
      <anchorfile>classmirtk_1_1SurfaceBoundary.html</anchorfile>
      <anchor>a08b787fa4f676623e44abd84889139b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SurfaceBoundary &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1SurfaceBoundary.html</anchorfile>
      <anchor>aeab6e48abb1175a1ff32bf138807acd7</anchor>
      <arglist>(const SurfaceBoundary &amp;)</arglist>
    </member>
    <member kind="function">
      <type>class Point</type>
      <name>Point</name>
      <anchorfile>classmirtk_1_1SurfaceBoundary.html</anchorfile>
      <anchor>ad7b4e86bf73c3f60a62a60824185b1d3</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>PointId</name>
      <anchorfile>classmirtk_1_1SurfaceBoundary.html</anchorfile>
      <anchor>a1b2e22f06ad6afb637f8c8243ccb434c</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>PointId</name>
      <anchorfile>classmirtk_1_1SurfaceBoundary.html</anchorfile>
      <anchor>a9fda64ef06726f2892424bc5ee369cfd</anchor>
      <arglist>(int n, int i) const</arglist>
    </member>
    <member kind="function">
      <type>const Array&lt; int &gt; &amp;</type>
      <name>PointIds</name>
      <anchorfile>classmirtk_1_1SurfaceBoundary.html</anchorfile>
      <anchor>a76f793cb08728fc0e62f959c993feb32</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>PointIndex</name>
      <anchorfile>classmirtk_1_1SurfaceBoundary.html</anchorfile>
      <anchor>a041b590ad3388578a18373cd28a76255</anchor>
      <arglist>(int n, int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PointIndices</name>
      <anchorfile>classmirtk_1_1SurfaceBoundary.html</anchorfile>
      <anchor>a9d5cc3947940fd8f7bfc6607e9d90ef9</anchor>
      <arglist>(int n, Array&lt; int &gt; &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>PointIndices</name>
      <anchorfile>classmirtk_1_1SurfaceBoundary.html</anchorfile>
      <anchor>abe048d94481455571771befafb66ef0f</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function">
      <type>BoundarySegment &amp;</type>
      <name>Segment</name>
      <anchorfile>classmirtk_1_1SurfaceBoundary.html</anchorfile>
      <anchor>a422a059942a2b46baafd9e2728ea60fe</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>const BoundarySegment &amp;</type>
      <name>Segment</name>
      <anchorfile>classmirtk_1_1SurfaceBoundary.html</anchorfile>
      <anchor>a9ee1c810a63e0ef874b88918807479c8</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SelectPoint</name>
      <anchorfile>classmirtk_1_1SurfaceBoundary.html</anchorfile>
      <anchor>a24e8d0c387f9a9673ab750978455b3b4</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SurfaceBoundary</name>
      <anchorfile>classmirtk_1_1SurfaceBoundary.html</anchorfile>
      <anchor>a380b9c921d6e73082393759aa4ac4f37</anchor>
      <arglist>(vtkPolyData *, EdgeTablePointer=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SurfaceBoundary</name>
      <anchorfile>classmirtk_1_1SurfaceBoundary.html</anchorfile>
      <anchor>adc670155f655a990a73fa1739af47469</anchor>
      <arglist>(const SurfaceBoundary &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1SurfaceBoundary.html</anchorfile>
      <anchor>a01701d6b8c38b3043fc9e5cc66ff42b7</anchor>
      <arglist>(const char *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SurfaceBoundary</name>
      <anchorfile>classmirtk_1_1SurfaceBoundary.html</anchorfile>
      <anchor>ae597f3451da72a3209f3f87852c0bbcc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::SurfaceCollisions</name>
    <filename>classmirtk_1_1SurfaceCollisions.html</filename>
    <base>mirtk::SurfaceFilter</base>
    <class kind="struct">mirtk::SurfaceCollisions::CollisionInfo</class>
    <class kind="struct">mirtk::SurfaceCollisions::IntersectionInfo</class>
    <member kind="enumvalue">
      <name>AdjacentIntersection</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a4fed86a64222a6738f8f0e7911eee58aab24f4c35f1b449e2789bd6dca44947ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Ambiguous</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a4fed86a64222a6738f8f0e7911eee58aa7a6b20f43504b9b6ace4b437cd1f397b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BackfaceCollision</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a4fed86a64222a6738f8f0e7911eee58aad76d3ae8b3cfcbcd9c178ee081f94f6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Collision</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a4fed86a64222a6738f8f0e7911eee58aa6ffe5f86c612e131c29a1a7a25e0814d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CollisionType</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a4fed86a64222a6738f8f0e7911eee58a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoCollision</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a4fed86a64222a6738f8f0e7911eee58aa660d304a4d75aef6dce2141c48c8c52f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Collision</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a4fed86a64222a6738f8f0e7911eee58aa6ffe5f86c612e131c29a1a7a25e0814d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FrontfaceCollision</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a4fed86a64222a6738f8f0e7911eee58aad9d388b394f210108feef478a1898405</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BackfaceCollision</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a4fed86a64222a6738f8f0e7911eee58aad76d3ae8b3cfcbcd9c178ee081f94f6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Intersection</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a4fed86a64222a6738f8f0e7911eee58aa68347e4df745dc9fb212398f00252eb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SelfIntersection</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a4fed86a64222a6738f8f0e7911eee58aa37935f63fe3759d1e9cdf3bcc12ed40d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AdjacentIntersection</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a4fed86a64222a6738f8f0e7911eee58aab24f4c35f1b449e2789bd6dca44947ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Ambiguous</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a4fed86a64222a6738f8f0e7911eee58aa7a6b20f43504b9b6ace4b437cd1f397b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FrontfaceCollision</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a4fed86a64222a6738f8f0e7911eee58aad9d388b394f210108feef478a1898405</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Intersection</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a4fed86a64222a6738f8f0e7911eee58aa68347e4df745dc9fb212398f00252eb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoCollision</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a4fed86a64222a6738f8f0e7911eee58aa660d304a4d75aef6dce2141c48c8c52f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SelfIntersection</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a4fed86a64222a6738f8f0e7911eee58aa37935f63fe3759d1e9cdf3bcc12ed40d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const CollisionsSet &amp;</type>
      <name>Collisions</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a67d52e052fafb28e85c1571a9336a40e</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FoundCollisions</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a91e0bf4bc1aaf30beb5162902317d566</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FoundIntersections</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a40c91cedbe17fc45429b0bdc77ab2b35</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>vtkDataArray *</type>
      <name>GetCenterArray</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a4f82835e823907549f1ae96c4b209098</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CollisionType</type>
      <name>GetCollisionType</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>ad556f100f244a710d91627ae8a1ee29c</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>CollisionType</type>
      <name>GetCollisionType</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a62fd315ed58925fa79342e344f59a7b3</anchor>
      <arglist>(vtkIdType) const</arglist>
    </member>
    <member kind="function">
      <type>vtkDataArray *</type>
      <name>GetCollisionTypeArray</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a5391d20aefdc2c6023c2529447eb0bee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>vtkDataArray *</type>
      <name>GetRadiusArray</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a8463a5d99f97f6029f23561abd63d745</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IntersectionsSet &amp;</type>
      <name>Intersections</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a5435fc26c70c1fbc2297c109e4285b47</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkOnOffMacro</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>add6648b3f83be54807c28d9a08ef44e6</anchor>
      <arglist>(AdjacentIntersectionTest)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkOnOffMacro</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a130fcfaaa597701175974715cde8e264</anchor>
      <arglist>(NonAdjacentIntersectionTest)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkOnOffMacro</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a6848cd8cc29fc2219c832a2284807529</anchor>
      <arglist>(FrontfaceCollisionTest)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkOnOffMacro</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a7f67428b70eb13741fdef3b03a5235e7</anchor>
      <arglist>(BackfaceCollisionTest)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkOnOffMacro</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>af71d9ba990ffe84d0b8dec8ddd79b120</anchor>
      <arglist>(FastCollisionTest)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkOnOffMacro</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a19e503c81495252ef185cebee83be260</anchor>
      <arglist>(StoreIntersectionDetails)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkOnOffMacro</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>acdead8d8e055c4d2a0b6b80a8d88b504</anchor>
      <arglist>(StoreCollisionDetails)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkOnOffMacro</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a2aa240861fd2c7317f9dfd9a3717df4c</anchor>
      <arglist>(ResetCollisionType)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfCollisions</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>adae62ad08ad1387074ef9f8628296d50</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfIntersections</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>abf3485b12b8851b51abfc86e36dc3b28</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>SurfaceCollisions &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a1d4d1fd715fe75f55380fba0fdb0dd93</anchor>
      <arglist>(const SurfaceCollisions &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SurfaceCollisions</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>ae7f71fe969538ed21b5a3a5b82820c93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SurfaceCollisions</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>aca15b1716d5a8925759fbb8f55e8b5a9</anchor>
      <arglist>(const SurfaceCollisions &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SurfaceCollisions</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a9412bbd5e3ce053e2fd564feca0dd3bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>IsCollision</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a856e867eedde42941ad1e220e2eee305</anchor>
      <arglist>(CollisionType)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>IsIntersection</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a60bd8090f778dc83489f87df536a3175</anchor>
      <arglist>(CollisionType)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Execute</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a3dfe14ebe50e128b09d59c1dec420667</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>ab4d571af3eb0981c8bbe7f31f29e3e30</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::SurfaceConstraint</name>
    <filename>classmirtk_1_1SurfaceConstraint.html</filename>
    <base>mirtk::InternalForce</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SurfaceConstraint</name>
      <anchorfile>classmirtk_1_1SurfaceConstraint.html</anchorfile>
      <anchor>ae41b8e28b9c991ea494dfeee319df544</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SurfaceConstraint &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1SurfaceConstraint.html</anchorfile>
      <anchor>a9e3564522f7c2b032adb0653120e3238</anchor>
      <arglist>(const SurfaceConstraint &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SurfaceConstraint</name>
      <anchorfile>classmirtk_1_1SurfaceConstraint.html</anchorfile>
      <anchor>a79b55e29b1ae7883a7fd22c4f3016aaa</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SurfaceConstraint</name>
      <anchorfile>classmirtk_1_1SurfaceConstraint.html</anchorfile>
      <anchor>afb150505f28953c16f42c4d2c0a8bd08</anchor>
      <arglist>(const SurfaceConstraint &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::SurfaceCurvature</name>
    <filename>classmirtk_1_1SurfaceCurvature.html</filename>
    <base>mirtk::SurfaceFilter</base>
    <member kind="enumvalue">
      <name>Curvedness</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>ac38c353a18906f3b18dd3f2d69245cd7a1f5e0a2e36a9a90635bc1d0a470181c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Gauss</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>ac38c353a18906f3b18dd3f2d69245cd7a4f7361efea575da6c47fe636638c3a2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InverseTensor</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>ac38c353a18906f3b18dd3f2d69245cd7ac28cd4c1429a1d4a2f7e8c2e0fe56e23</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Maximum</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>ac38c353a18906f3b18dd3f2d69245cd7a75005da10dd8c533fd0d71bac5c6418f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MaximumDirection</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>ac38c353a18906f3b18dd3f2d69245cd7afc61436c9f2fb9229fd2e0d1260640fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mean</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>ac38c353a18906f3b18dd3f2d69245cd7a67453c5f6279b13aee14fb708fa671e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Minimum</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>ac38c353a18906f3b18dd3f2d69245cd7a529e81c0d80837ddf2915e533386d207</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MinimumDirection</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>ac38c353a18906f3b18dd3f2d69245cd7afc3b8ddc4b8c2234c13f039adf9b3b00</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Normal</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>ac38c353a18906f3b18dd3f2d69245cd7a994d1c9dd032d4fc18e66bfc9f451f8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Principal</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>ac38c353a18906f3b18dd3f2d69245cd7a691001630bb25af4d8a9af41de5fa647</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Tensor</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>ac38c353a18906f3b18dd3f2d69245cd7a547b15a367be44a9913bb20b19f04d46</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TensorIndex</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>ae18060c79c14e1e32d91063de4513c86</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>ac38c353a18906f3b18dd3f2d69245cd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Minimum</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>ac38c353a18906f3b18dd3f2d69245cd7a529e81c0d80837ddf2915e533386d207</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Maximum</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>ac38c353a18906f3b18dd3f2d69245cd7a75005da10dd8c533fd0d71bac5c6418f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Principal</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>ac38c353a18906f3b18dd3f2d69245cd7a691001630bb25af4d8a9af41de5fa647</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mean</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>ac38c353a18906f3b18dd3f2d69245cd7a67453c5f6279b13aee14fb708fa671e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Gauss</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>ac38c353a18906f3b18dd3f2d69245cd7a4f7361efea575da6c47fe636638c3a2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Curvedness</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>ac38c353a18906f3b18dd3f2d69245cd7a1f5e0a2e36a9a90635bc1d0a470181c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Normal</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>ac38c353a18906f3b18dd3f2d69245cd7a994d1c9dd032d4fc18e66bfc9f451f8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MinimumDirection</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>ac38c353a18906f3b18dd3f2d69245cd7afc3b8ddc4b8c2234c13f039adf9b3b00</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MaximumDirection</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>ac38c353a18906f3b18dd3f2d69245cd7afc61436c9f2fb9229fd2e0d1260640fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Tensor</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>ac38c353a18906f3b18dd3f2d69245cd7a547b15a367be44a9913bb20b19f04d46</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InverseTensor</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>ac38c353a18906f3b18dd3f2d69245cd7ac28cd4c1429a1d4a2f7e8c2e0fe56e23</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>vtkDataArray *</type>
      <name>GetCurvedness</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>abe12f23632ec51478a847321c36876cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>vtkDataArray *</type>
      <name>GetGaussCurvature</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>a2f1238b8014531f201d378e9bb6add9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>vtkDataArray *</type>
      <name>GetMaximumCurvature</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>a99db4e79e4ad12ff047ee2bafeab1076</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>vtkDataArray *</type>
      <name>GetMeanCurvature</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>a0898f3d2fdb8bbe85b793c63be43fb49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>vtkDataArray *</type>
      <name>GetMinimumCurvature</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>a5b8d64acb74c6a5482de4ed1574516a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>vtkDataArray *</type>
      <name>GetPrincipalCurvatures</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>a4b6789c1c2d1137814564c6f3b256565</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>a967484d3cd73a131175a0cb6e1d6f149</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkGetMacro</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>ad8858e280416358480e9ecdd91331fa5</anchor>
      <arglist>(CurvatureType, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkGetMacro</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>a33f1cf86d6efb0a71bc26849f0a0fcd0</anchor>
      <arglist>(TensorAveraging, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkOnOffMacro</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>a321fa8290371d0b82d93de8458cda9e9</anchor>
      <arglist>(VtkCurvatures)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkOnOffMacro</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>acb9e31baf5a927db5ad8aca96d354b77</anchor>
      <arglist>(Normalize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkSetMacro</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>a2fba5da1e8a81ffd05e0c8598f296a27</anchor>
      <arglist>(CurvatureType, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkSetMacro</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>a64c23d6eb89a912ae6fdbb8339814b20</anchor>
      <arglist>(TensorAveraging, int)</arglist>
    </member>
    <member kind="function">
      <type>SurfaceCurvature &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>a7410f7e6cd7d2ca50eda55065c4a01c9</anchor>
      <arglist>(const SurfaceCurvature &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SurfaceCurvature</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>a89b7532944cccb1129f81a35b4e29293</anchor>
      <arglist>(int type=Scalars)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SurfaceCurvature</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>a69a244a4ad399aee51f5c27a2ec289da</anchor>
      <arglist>(const SurfaceCurvature &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SurfaceCurvature</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>a6845798335f658625664e5caaa0727db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MIRTK_PointSet_EXPORT const char *const</type>
      <name>CURVEDNESS</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>a822f0f75500c7b02c1b5d3fb81277d49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MIRTK_PointSet_EXPORT const char *const</type>
      <name>GAUSS</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>a7cff0959194780e7fa09c28033bd7f25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MIRTK_PointSet_EXPORT const char *const</type>
      <name>INVERSE_TENSOR</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>acb7311f3858b59cd541876fc64a2ce0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MIRTK_PointSet_EXPORT const char *const</type>
      <name>MAXIMUM</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>aed1476f4ac9d76be3b5ef0b023c5bb98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MIRTK_PointSet_EXPORT const char *const</type>
      <name>MAXIMUM_DIRECTION</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>a7c46dccb43e1dd3c84214f68af688ee1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MIRTK_PointSet_EXPORT const char *const</type>
      <name>MEAN</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>ae3af401f454dae5da9c1f105e150e879</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MIRTK_PointSet_EXPORT const char *const</type>
      <name>MINIMUM</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>a4ac429a0813a7169ecfdd6c8930ab6c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MIRTK_PointSet_EXPORT const char *const</type>
      <name>MINIMUM_DIRECTION</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>af544a06309ae43cd744f722d2e97596b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MIRTK_PointSet_EXPORT const char *const</type>
      <name>NORMALS</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>abe0e965c32beb8ccdda0a3a078231c45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MIRTK_PointSet_EXPORT const char *const</type>
      <name>PRINCIPAL</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>ac21243b9239be80ab4069a7c7d24e1c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MIRTK_PointSet_EXPORT const char *const</type>
      <name>TENSOR</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>af1a258996f9a4749d6eb4501448f8a7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ComputeCurvedness</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>a4d12634c63f17fdcf6f3873e3898a3af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ComputeGaussCurvature</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>a3914dba34c0548650b97606b87b5f790</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ComputeMeanCurvature</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>aa2fa395fe2c3096c939ce33ab42eceed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ComputeMinMaxCurvature</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>a15b58bfc0c6f5f06fa8a5e65ab6fcfcc</anchor>
      <arglist>(bool, bool)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ComputePrincipalCurvatures</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>abbfa66499c7063948b23e8ed7c8af1fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ComputeTensorField</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>a0723e85730da45e540d5f8f68d3cb9ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CopyAttributes</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>a904597d328204a915c474a653702da49</anchor>
      <arglist>(const SurfaceCurvature &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DecomposeTensorField</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>a7291d64ca42143adbecb88e6ee1f8c84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Execute</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>ad57ac8ee8cfa4c407323720984e4957c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>ac75faa63070390eded4591fc12c902f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>ac7b867b638260bc5de0d1eea8dc5de3e</anchor>
      <arglist>(int, CurvatureType)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>a3df0fa2c3055d4cea67a8251574db68c</anchor>
      <arglist>(bool, VtkCurvatures)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>aeba2ea60b47fa376a199e616b1787648</anchor>
      <arglist>(int, TensorAveraging)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>a42b269c823bf6eadbf047b60b8d0c248</anchor>
      <arglist>(bool, Normalize)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>a034284ca11b7185b533b5ba865d6170e</anchor>
      <arglist>(double, Volume)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1SurfaceCurvature.html</anchorfile>
      <anchor>a6d9ec1adc7e480f0580777a88366c4b5</anchor>
      <arglist>(double, Radius)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::SurfaceDistance</name>
    <filename>classmirtk_1_1SurfaceDistance.html</filename>
    <base>mirtk::PointSetDistance</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1SurfaceDistance.html</anchorfile>
      <anchor>af5184ac35b6d1d66fe3e680e2397f9b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Reinitialize</name>
      <anchorfile>classmirtk_1_1SurfaceDistance.html</anchorfile>
      <anchor>a230bb3eedc621824b875238407ff493a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteDataSets</name>
      <anchorfile>classmirtk_1_1SurfaceDistance.html</anchorfile>
      <anchor>a17ce87819e21064dbe6b9a07a5284bee</anchor>
      <arglist>(const char *, const char *, bool=true) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SurfaceDistance</name>
      <anchorfile>classmirtk_1_1SurfaceDistance.html</anchorfile>
      <anchor>a5e3880a8dae95371254ff787839645ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CopyAttributes</name>
      <anchorfile>classmirtk_1_1SurfaceDistance.html</anchorfile>
      <anchor>ad01939a3010f2009aafe00620ab2e00f</anchor>
      <arglist>(const SurfaceDistance &amp;, int=-1, int=-1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SurfaceDistance &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1SurfaceDistance.html</anchorfile>
      <anchor>a4c39d8aa09ff98e15cf8cfa35df23214</anchor>
      <arglist>(const SurfaceDistance &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1SurfaceDistance.html</anchorfile>
      <anchor>a5eaa396f5d3ea961b561229e06063d68</anchor>
      <arglist>(const RegisteredPointSet *target, const GradientType *np_gradient, double *gradient, double weight)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SurfaceDistance</name>
      <anchorfile>classmirtk_1_1SurfaceDistance.html</anchorfile>
      <anchor>a26b601f55b2ce742a2c0eb380fd039ef</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SurfaceDistance</name>
      <anchorfile>classmirtk_1_1SurfaceDistance.html</anchorfile>
      <anchor>a6710c0088ce80965da3da7e5e19c1bf4</anchor>
      <arglist>(const SurfaceDistance &amp;, int=-1, int=-1)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteGradient</name>
      <anchorfile>classmirtk_1_1SurfaceDistance.html</anchorfile>
      <anchor>a5711daf7f3a16e502446aaa843be0b4d</anchor>
      <arglist>(const char *, const RegisteredPointSet *, const GradientType *, const Array&lt; int &gt; *=NULL) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::SurfaceFilter</name>
    <filename>classmirtk_1_1SurfaceFilter.html</filename>
    <base>mirtk::MeshFilter</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1SurfaceFilter.html</anchorfile>
      <anchor>adfdb860d5cb16da4e786f413743a48b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SurfaceFilter &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1SurfaceFilter.html</anchorfile>
      <anchor>a519a481e24031374b3a97f95c4ea6b4b</anchor>
      <arglist>(const SurfaceFilter &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SurfaceFilter</name>
      <anchorfile>classmirtk_1_1SurfaceFilter.html</anchorfile>
      <anchor>a127034f04ded30426c31a73ac159be91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SurfaceFilter</name>
      <anchorfile>classmirtk_1_1SurfaceFilter.html</anchorfile>
      <anchor>aeb8cd1245140dc11af467fd8b96d19de</anchor>
      <arglist>(const SurfaceFilter &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SurfaceFilter</name>
      <anchorfile>classmirtk_1_1SurfaceFilter.html</anchorfile>
      <anchor>ae4d5ab46a1edb0655da6f6d1b7e32b6d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::SurfaceForce</name>
    <filename>classmirtk_1_1SurfaceForce.html</filename>
    <base>mirtk::ExternalForce</base>
    <member kind="function">
      <type>double</type>
      <name>IntersectWithRay</name>
      <anchorfile>classmirtk_1_1SurfaceForce.html</anchorfile>
      <anchor>a6fff905d7003fd834fec970fd6e9a323</anchor>
      <arglist>(const double p[3], const double e[3], double l=.0) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SelfDistance</name>
      <anchorfile>classmirtk_1_1SurfaceForce.html</anchorfile>
      <anchor>a86b4e84435efdf2f4e104eafaf005aa7</anchor>
      <arglist>(const double p[3], const double n[3], double maxd=.0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SurfaceForce</name>
      <anchorfile>classmirtk_1_1SurfaceForce.html</anchorfile>
      <anchor>ac15c933a865a100b5409d0bf19d4bb4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CopyAttributes</name>
      <anchorfile>classmirtk_1_1SurfaceForce.html</anchorfile>
      <anchor>a7a47bbc132a7b22c591822c6362a6589</anchor>
      <arglist>(const SurfaceForce &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SurfaceForce &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1SurfaceForce.html</anchorfile>
      <anchor>a9fb9fc7c5d8119a73fa7fc6727578660</anchor>
      <arglist>(const SurfaceForce &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SurfaceForce</name>
      <anchorfile>classmirtk_1_1SurfaceForce.html</anchorfile>
      <anchor>aaec4c3a70b0879f6a3204a3ad92b91e8</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SurfaceForce</name>
      <anchorfile>classmirtk_1_1SurfaceForce.html</anchorfile>
      <anchor>a6110328b80348f3b7fdf9b31ed38a523</anchor>
      <arglist>(const SurfaceForce &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::SurfaceMapper</name>
    <filename>classmirtk_1_1SurfaceMapper.html</filename>
    <base>mirtk::Object</base>
    <member kind="function">
      <type>void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1SurfaceMapper.html</anchorfile>
      <anchor>af7f63720a373c0d12709f1f545a09b22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SurfaceMapper</name>
      <anchorfile>classmirtk_1_1SurfaceMapper.html</anchorfile>
      <anchor>ad090214fc9c1d9d86b7b531249dbfae6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>ComputeMap</name>
      <anchorfile>classmirtk_1_1SurfaceMapper.html</anchorfile>
      <anchor>aa0db54cdd907526b9ee1f5be833940dc</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1SurfaceMapper.html</anchorfile>
      <anchor>ab31f8b5417f58785c4a8762c31a9f5b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>GetEdgeNeighborPoints</name>
      <anchorfile>classmirtk_1_1SurfaceMapper.html</anchorfile>
      <anchor>ab25afc59f00b7e5081cd8689c537b680</anchor>
      <arglist>(int i, int j, int &amp;k, int &amp;l) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>GetPoint</name>
      <anchorfile>classmirtk_1_1SurfaceMapper.html</anchorfile>
      <anchor>a71f3ed2e0ffcfb463546debaa1962135</anchor>
      <arglist>(int ptId, double p[3]) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1SurfaceMapper.html</anchorfile>
      <anchor>a261e2102cef31ee9fcf43dd4f53840a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>NumberOfInteriorPoints</name>
      <anchorfile>classmirtk_1_1SurfaceMapper.html</anchorfile>
      <anchor>a888c66ca05030e0459e57e3463824d6f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>NumberOfPoints</name>
      <anchorfile>classmirtk_1_1SurfaceMapper.html</anchorfile>
      <anchor>a2e336bad412fd157e7b4fee8a6ff13e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SurfaceMapper &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1SurfaceMapper.html</anchorfile>
      <anchor>ab1029f47f075ed449714cf8ed0ed523b</anchor>
      <arglist>(const SurfaceMapper &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>class Point</type>
      <name>Point</name>
      <anchorfile>classmirtk_1_1SurfaceMapper.html</anchorfile>
      <anchor>ac618872c7cae88d599bafec9a4578937</anchor>
      <arglist>(int ptId) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SurfaceMapper</name>
      <anchorfile>classmirtk_1_1SurfaceMapper.html</anchorfile>
      <anchor>a2fdc2caf948709c0ff0294188e9590b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SurfaceMapper</name>
      <anchorfile>classmirtk_1_1SurfaceMapper.html</anchorfile>
      <anchor>a786521df85690a7a176d44ee6021ca6c</anchor>
      <arglist>(const SurfaceMapper &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::SurfacePatches</name>
    <filename>classmirtk_1_1SurfacePatches.html</filename>
    <base>mirtk::SurfaceFilter</base>
    <member kind="enumvalue">
      <name>LargestFirst</name>
      <anchorfile>classmirtk_1_1SurfacePatches.html</anchorfile>
      <anchor>aa3c548050caeb9e93b1f30d364f20b49a6e699fc3d886f5917a3f888a17add9a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoOrdering</name>
      <anchorfile>classmirtk_1_1SurfacePatches.html</anchorfile>
      <anchor>aa3c548050caeb9e93b1f30d364f20b49a92a4f9ad063a5d256059618c054bd37c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Ordering</name>
      <anchorfile>classmirtk_1_1SurfacePatches.html</anchorfile>
      <anchor>aa3c548050caeb9e93b1f30d364f20b49</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoOrdering</name>
      <anchorfile>classmirtk_1_1SurfacePatches.html</anchorfile>
      <anchor>aa3c548050caeb9e93b1f30d364f20b49a92a4f9ad063a5d256059618c054bd37c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LargestFirst</name>
      <anchorfile>classmirtk_1_1SurfacePatches.html</anchorfile>
      <anchor>aa3c548050caeb9e93b1f30d364f20b49a6e699fc3d886f5917a3f888a17add9a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SmallestFirst</name>
      <anchorfile>classmirtk_1_1SurfacePatches.html</anchorfile>
      <anchor>aa3c548050caeb9e93b1f30d364f20b49a433f6b68f98793a748b77664a6301eb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SmallestFirst</name>
      <anchorfile>classmirtk_1_1SurfacePatches.html</anchorfile>
      <anchor>aa3c548050caeb9e93b1f30d364f20b49a433f6b68f98793a748b77664a6301eb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>vtkDataArray *</type>
      <name>GetLabelsArray</name>
      <anchorfile>classmirtk_1_1SurfacePatches.html</anchorfile>
      <anchor>a88b3356b8e0a1fbec0840971a4c49a9a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SurfacePatches &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1SurfacePatches.html</anchorfile>
      <anchor>a59f24a88ca1698a9f592e43fff7d466e</anchor>
      <arglist>(const SurfacePatches &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SurfacePatches</name>
      <anchorfile>classmirtk_1_1SurfacePatches.html</anchorfile>
      <anchor>a2b05ee6d486bbc44aa9dd951943848bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SurfacePatches</name>
      <anchorfile>classmirtk_1_1SurfacePatches.html</anchorfile>
      <anchor>a3d6bdd768383eb43bda9d656b13e462a</anchor>
      <arglist>(const SurfacePatches &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SurfacePatches</name>
      <anchorfile>classmirtk_1_1SurfacePatches.html</anchorfile>
      <anchor>a6b0abe864f6939f8e2f5ac80f1770499</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Execute</name>
      <anchorfile>classmirtk_1_1SurfacePatches.html</anchorfile>
      <anchor>a8d584a049c122d0ac01479bf07c2b3e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1SurfacePatches.html</anchorfile>
      <anchor>aa1f5e313a1788c44d038a2d7496cff83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1SurfacePatches.html</anchorfile>
      <anchor>a0dc21a57bbba3c41633b80ffa67b38b5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::SurfaceRemeshing</name>
    <filename>classmirtk_1_1SurfaceRemeshing.html</filename>
    <base>mirtk::SurfaceFilter</base>
    <member kind="enumvalue">
      <name>AREA</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>af86d5796ce708ae6bc98ba96bc19820fa4c691fa11c98c2a5bbfd0ba48a6dd533</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INDEX</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>af86d5796ce708ae6bc98ba96bc19820fa2256a911373a5a64338366d2f5b62363</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Order</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>af86d5796ce708ae6bc98ba96bc19820f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INDEX</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>af86d5796ce708ae6bc98ba96bc19820fa2256a911373a5a64338366d2f5b62363</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AREA</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>af86d5796ce708ae6bc98ba96bc19820fa4c691fa11c98c2a5bbfd0ba48a6dd533</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SHORTEST_EDGE</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>af86d5796ce708ae6bc98ba96bc19820fa0ff8ca9419e92d5b517f4a23fa211c9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SHORTEST_EDGE</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>af86d5796ce708ae6bc98ba96bc19820fa0ff8ca9419e92d5b517f4a23fa211c9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkOnOffMacro</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>a726d581296a88ad81db21deb5a18276a</anchor>
      <arglist>(MeltNodes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkOnOffMacro</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>a22eecfc33e0c0338b59094957d14326b</anchor>
      <arglist>(MeltTriangles)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkOnOffMacro</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>a8dd7d0c0c5d7fc2d94811f02fc78b38a</anchor>
      <arglist>(InvertTrianglesSharingOneLongEdge)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkOnOffMacro</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>a471cffddcaa4d01755f99f03616dad22</anchor>
      <arglist>(InvertTrianglesToIncreaseMinHeight)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkOnOffMacro</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>a6b5f862521131b20816fccccd38a6e17</anchor>
      <arglist>(BisectBoundaryEdges)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfChanges</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>a87d565c7c2a861b01fb30c6e233f1ef7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfMeltings</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>a971b4c3dcc63c3a8fe53e03f51a7f0e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfSubdivisions</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>aa60de56677e62ed0f2b9960a3994c548</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SurfaceRemeshing &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>a98e0cc5b5994bbe904da2842ed6fd99c</anchor>
      <arglist>(const SurfaceRemeshing &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SurfaceRemeshing</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>af06eb95f4ece27d641f762842cbbdc3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SurfaceRemeshing</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>a02e33d4d5c1d6ffb93f093a968ee5ad9</anchor>
      <arglist>(const SurfaceRemeshing &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SurfaceRemeshing</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>a07a63fd75cf3010625fcaac90f4a1906</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MIRTK_PointSet_EXPORT const char *const</type>
      <name>MAX_EDGE_LENGTH</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>a900fdf40e4deeb7fe31431bcde666a8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MIRTK_PointSet_EXPORT const char *const</type>
      <name>MIN_EDGE_LENGTH</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>a9eba406a1be50e86c591ac58da6eaeb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Bisect</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>ad280d6331988468042cc418a2a1be106</anchor>
      <arglist>(vtkIdType, vtkIdType, vtkIdType, vtkIdType, vtkPolyData *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CopyAttributes</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>ae59b57d8e50ca56dfefa182c04352a95</anchor>
      <arglist>(const SurfaceRemeshing &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Execute</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>a2361899b943af8ef132677f72a966eba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>ab3d8588e9bf75a3b48b56afb2f38f016</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>aed444c232804e84092fdcdab566fbf6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>InitializeEdgeLengthRange</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>a791e6993b7b8586d6d5605ebdc617ecc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>InitializeMask</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>a8b7e297cfe47cdfbcd2ad639345c989e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Inversion</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>aa5c27aa2bfcbdcdd47967e6aa6eb5ae3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>InversionOfTrianglesSharingOneLongEdge</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>a530a6885f16d2cf063c15c836026202a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>InversionOfTrianglesToIncreaseMinHeight</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>a74365e7f0589f3b856fb686e81775af9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MeltEdge</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>a6f6072d5287908f10453ba098c405a8b</anchor>
      <arglist>(vtkIdType, vtkIdType, vtkIdType, vtkIdList *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Melting</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>a74d2e6c42775b7ac1ff6931333af6213</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>MeltingOfCells</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>a10921edcc5bdb00ae46dc1dc5b0a812a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>MeltingOfNodes</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>a333c6828ed805184e2096690e8c98911</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MeltTriangle</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>ad86630e46e8c32caedca148882edecae</anchor>
      <arglist>(vtkIdType, vtkIdList *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>a95c5b48da73c7b47d221e41b9ab313fd</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPolyData &gt;, Surface)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>ac65c83694bf6ea76c2e88033392082bf</anchor>
      <arglist>(vtkSmartPointer&lt; vtkDataArray &gt;, Mask)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>a3eb1714d766a222759e56b242251d42f</anchor>
      <arglist>(OrderedSet&lt; int &gt;, CategoricalPointDataIndices)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>a0d88382da2cf3e91c3f884199c6256c3</anchor>
      <arglist>(vtkSmartPointer&lt; vtkDataArray &gt;, MinEdgeLengthArray)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>adbb997d47fed418ad3d37b04ae2a9292</anchor>
      <arglist>(vtkSmartPointer&lt; vtkDataArray &gt;, MaxEdgeLengthArray)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>a857ff6534fa11ace2bffd837bed3e0d5</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPriorityQueue &gt;, MeltingQueue)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>afbde502774a1af1e69458483d366cf2f</anchor>
      <arglist>(const class Transformation, Transformation)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>a2ba55cf187fe22ab89f83c0854187f85</anchor>
      <arglist>(vtkSmartPointer&lt; vtkDataArray &gt;, PointMask)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>a59111cf361dfbee41684ee42cbe4bcfb</anchor>
      <arglist>(vtkSmartPointer&lt; vtkDataArray &gt;, CellMask)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>a17c515021d9cadbba71bb9571e549d3d</anchor>
      <arglist>(double, MinFeatureAngle)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>a54ad7b356d7c4d231b22f2ea882d365d</anchor>
      <arglist>(double, MaxFeatureAngle)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>a9502c40b76bf4345aa95e1dbc78afbb5</anchor>
      <arglist>(double, MinEdgeLength)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>a59f724733517be7edb0ea5f1dc56f93a</anchor>
      <arglist>(double, MaxEdgeLength)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>a3df14cfe4aebb518ef3d7e62aebad999</anchor>
      <arglist>(vtkSmartPointer&lt; vtkDataArray &gt;, AdaptiveEdgeLengthArray)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>a00754c29197aee90e0359cbd76016cea</anchor>
      <arglist>(vtkSmartPointer&lt; vtkDataArray &gt;, MinCellEdgeLengthArray)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>a6051db09e006f6af65fae8dd6e59720f</anchor>
      <arglist>(vtkSmartPointer&lt; vtkDataArray &gt;, MaxCellEdgeLengthArray)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>a1f7fca56e6e25cf279e811281d0b66ac</anchor>
      <arglist>(Order, MeltingOrder)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>afd9baa93ca69c40e01c4761813c2bf45</anchor>
      <arglist>(bool, MeltNodes)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>a9a72d1e9a5818e4f48ab7b16247115be</anchor>
      <arglist>(bool, MeltTriangles)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>a06ac6625777ea5bf8ba51da4a8657680</anchor>
      <arglist>(bool, InvertTrianglesSharingOneLongEdge)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>a019b01fe2b1c279527f5ea6a3dbd83ed</anchor>
      <arglist>(bool, InvertTrianglesToIncreaseMinHeight)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>a94d97b3dc065487e0cd4cff797faf8ca</anchor>
      <arglist>(bool, BisectBoundaryEdges)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>ac7924f51130eb2e3f789e918ec51be88</anchor>
      <arglist>(int, NumberOfMeltedNodes)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>a4a074ad035f9d24650aa354eb6fb06e3</anchor>
      <arglist>(int, NumberOfMeltedEdges)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>ae03fab932a2ca444bf1e8c7c2a9a649d</anchor>
      <arglist>(int, NumberOfMeltedCells)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>aecc0ac4142219dc98ff65c6dedb8ba5b</anchor>
      <arglist>(int, NumberOfInversions)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>a064146bee3ca5dfb0d320043eea9760b</anchor>
      <arglist>(int, NumberOfBisections)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>a59d45fc516f5f6c11ad0c431f15113a1</anchor>
      <arglist>(int, NumberOfTrisections)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>a82155035da22c119cb7b46bded5e7231</anchor>
      <arglist>(int, NumberOfQuadsections)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Quadsect</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>a32433384a68482330b65d7be86a40288</anchor>
      <arglist>(vtkIdType, vtkIdType, vtkIdType, vtkIdType, vtkPolyData *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Subdivision</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>a27afc4d924a8017248c7b39611cbbdf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Trisect</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>a1d1cc38f30e7e58b96768976386cfb45</anchor>
      <arglist>(vtkIdType, vtkIdType, vtkIdType, vtkIdType, vtkPolyData *)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_MaxFeatureAngleCos</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>a3921b550704715d4cf98adc467557ad3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_MinFeatureAngleCos</name>
      <anchorfile>classmirtk_1_1SurfaceRemeshing.html</anchorfile>
      <anchor>ab015a2582d60626c9beeda58ab9b566f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::SymmetricWeightsSurfaceMapper</name>
    <filename>classmirtk_1_1SymmetricWeightsSurfaceMapper.html</filename>
    <base>mirtk::LinearFixedBoundarySurfaceMapper</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ComputeMap</name>
      <anchorfile>classmirtk_1_1SymmetricWeightsSurfaceMapper.html</anchorfile>
      <anchor>a31996dc44d17a8e55f6d1c8935718e04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SymmetricWeightsSurfaceMapper</name>
      <anchorfile>classmirtk_1_1SymmetricWeightsSurfaceMapper.html</anchorfile>
      <anchor>a9e93e51868d6cc3516c9cd7ce9020332</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SymmetricWeightsSurfaceMapper &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1SymmetricWeightsSurfaceMapper.html</anchorfile>
      <anchor>acfc8ddd67934e70998196fba32f3b7f6</anchor>
      <arglist>(const SymmetricWeightsSurfaceMapper &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SymmetricWeightsSurfaceMapper</name>
      <anchorfile>classmirtk_1_1SymmetricWeightsSurfaceMapper.html</anchorfile>
      <anchor>af53d71a0d392fcdc8c2f08a51869a339</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SymmetricWeightsSurfaceMapper</name>
      <anchorfile>classmirtk_1_1SymmetricWeightsSurfaceMapper.html</anchorfile>
      <anchor>aff4e87024c2f838ee91973e0dcbfcaae</anchor>
      <arglist>(const SymmetricWeightsSurfaceMapper &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual double</type>
      <name>Weight</name>
      <anchorfile>classmirtk_1_1SymmetricWeightsSurfaceMapper.html</anchorfile>
      <anchor>a13ddd1f790a5653891aa72c926bfef2a</anchor>
      <arglist>(int i, int j) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::task_scheduler_init</name>
    <filename>classmirtk_1_1task__scheduler__init.html</filename>
  </compound>
  <compound kind="struct">
    <name>mirtk::TernaryForEachVoxelBody</name>
    <filename>structmirtk_1_1TernaryForEachVoxelBody.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody.html</anchorfile>
      <anchor>ac7d9d829736d61d3262cef540dfaaf68</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody.html</anchorfile>
      <anchor>a851b7b7f91a49952b33297b95bac8d0e</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody.html</anchorfile>
      <anchor>a6aa12ffcec04ab5bc0fcb5adc81ebe23</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody.html</anchorfile>
      <anchor>abe98da416bafddb5a649e6c10e06d54b</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TernaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody.html</anchorfile>
      <anchor>ae08fcc3d7d76fe3fec7aca40b7a5c738</anchor>
      <arglist>(GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TernaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody.html</anchorfile>
      <anchor>af6f5e41e193f8887dbb75442417d447f</anchor>
      <arglist>(const TernaryForEachVoxelBody &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TernaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody.html</anchorfile>
      <anchor>abcfb314e1e16fda1f3638bd5c690d6d7</anchor>
      <arglist>(TernaryForEachVoxelBody &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::TernaryForEachVoxelBody_1Const</name>
    <filename>structmirtk_1_1TernaryForEachVoxelBody__1Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a013614453e19a8a80af9fb2bda48d464</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a5ad69e88ddb46853279c791e9d157a60</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>aa6ce6bb4ff352874d8fc6d7579abeade</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a71fe8e506808ef6d2ee473252df8ac16</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TernaryForEachVoxelBody_1Const</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a609710b43e2fb474176703c08fbadc92</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TernaryForEachVoxelBody_1Const</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a3248e065f69d405f1fda58934e8a5b97</anchor>
      <arglist>(const TernaryForEachVoxelBody_1Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TernaryForEachVoxelBody_1Const</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>ae2db3cf659d6ec484395f27633755a55</anchor>
      <arglist>(TernaryForEachVoxelBody_1Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::TernaryForEachVoxelBody_2Const</name>
    <filename>structmirtk_1_1TernaryForEachVoxelBody__2Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a1d7ecf2e35fe9f63295b5564de275db3</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a5ca4bbc89d9f8eed58c9ba30e38ad7ba</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a2ebd624c78eea6de20ae3d95d2cc03f0</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a8df0a8ad7b12738af651dc31f8b25260</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TernaryForEachVoxelBody_2Const</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>ab240ffc3e4246ffb6e98f654d0a10b65</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TernaryForEachVoxelBody_2Const</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a1418aa5d129f4cc690b36a3d88d60c3f</anchor>
      <arglist>(const TernaryForEachVoxelBody_2Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TernaryForEachVoxelBody_2Const</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a1ef90604956ce9c0a2a90ce6c0e8a623</anchor>
      <arglist>(TernaryForEachVoxelBody_2Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::TernaryForEachVoxelBody_Const</name>
    <filename>structmirtk_1_1TernaryForEachVoxelBody__Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a321ae3181e7caecbc5f84b248ab05249</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a05098db57c2f69051717543fc3996be1</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a37319e0703dadc3332a5fb24fc668c7e</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a0a5379a5d58474c5535da797c48f2c0f</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TernaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>afd9a366077cf019b9614bde09a379623</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TernaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>af70cd9b580799b7fae6625fd8496248e</anchor>
      <arglist>(const TernaryForEachVoxelBody_Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TernaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>aa5491ad98c7c86911376a0313edcaed8</anchor>
      <arglist>(TernaryForEachVoxelBody_Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::TernaryForEachVoxelIfBody</name>
    <filename>structmirtk_1_1TernaryForEachVoxelIfBody.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody.html</anchorfile>
      <anchor>aee9f469ce186e4b16327003526ae73ce</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody.html</anchorfile>
      <anchor>adfa3caeb7d01a7b02f07618654fe9054</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a60e48d8bb763e36a81fe34c7e30d2b41</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody.html</anchorfile>
      <anchor>ae7b884e7d8ddad0e0143adce2014c2c3</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TernaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody.html</anchorfile>
      <anchor>abd365a1cd71f9af344fd41317cfb6772</anchor>
      <arglist>(GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TernaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody.html</anchorfile>
      <anchor>adbabd3fe0c531cc5865bfa73ac0338b1</anchor>
      <arglist>(const TernaryForEachVoxelIfBody &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TernaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a1928f1ea11f6baaf728822fbba7bd6b9</anchor>
      <arglist>(TernaryForEachVoxelIfBody &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::TernaryForEachVoxelIfBody_1Const</name>
    <filename>structmirtk_1_1TernaryForEachVoxelIfBody__1Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a2c077354451bb73cdea72ec744e8501a</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a5e4c10ecf8a72ad5f01ccbf2228516ad</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a5c14fba7ff332812ba29de15af0e8e61</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>acb73185e5e1f05085d427a25d16008a4</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TernaryForEachVoxelIfBody_1Const</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>ac02e00f99630ff9b62b2b0f97af97671</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TernaryForEachVoxelIfBody_1Const</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a285af8ae95fa519af56f5ad5a7daeded</anchor>
      <arglist>(const TernaryForEachVoxelIfBody_1Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TernaryForEachVoxelIfBody_1Const</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>ac897007319cfa42ff13ff38b7d37b513</anchor>
      <arglist>(TernaryForEachVoxelIfBody_1Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::TernaryForEachVoxelIfBody_2Const</name>
    <filename>structmirtk_1_1TernaryForEachVoxelIfBody__2Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>aabee0cd4c8c2a7d8967bb5c2349afb75</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>aa5f98880a4ac118f0abbb5ef56199c4b</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a3a8a0a40a138939959b91d7e0ffdd227</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>aee2463633e56de556e8b02c491abbf22</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TernaryForEachVoxelIfBody_2Const</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>abf783e14aa55104190d693183f565e86</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TernaryForEachVoxelIfBody_2Const</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a971a38183ff3a045cf403a7e2e17ea90</anchor>
      <arglist>(const TernaryForEachVoxelIfBody_2Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TernaryForEachVoxelIfBody_2Const</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a2dae6dc2d147cee1638e8acf828a12e5</anchor>
      <arglist>(TernaryForEachVoxelIfBody_2Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::TernaryForEachVoxelIfBody_Const</name>
    <filename>structmirtk_1_1TernaryForEachVoxelIfBody__Const.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a294ff59270d40a629f3505389027b09a</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>acd2053585c1898c8c59410967fb188d8</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>adf109246c01cd6b658a3af4c26918929</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a3b46985b9b8897065d5864fae33e30ff</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TernaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a981fa62d035e38be04f19bda005ac797</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TernaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>aa03d092a5318eb315bda4156cc4b46d6</anchor>
      <arglist>(const TernaryForEachVoxelIfBody_Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TernaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a5ec55a6478e0edad5fda75893c290332</anchor>
      <arglist>(TernaryForEachVoxelIfBody_Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::TetrahedralMeshMapper</name>
    <filename>classmirtk_1_1TetrahedralMeshMapper.html</filename>
    <base>mirtk::VolumeMapper</base>
    <member kind="function">
      <type>bool</type>
      <name>IsBoundaryPoint</name>
      <anchorfile>classmirtk_1_1TetrahedralMeshMapper.html</anchorfile>
      <anchor>a09a26c1182cd652465a4fa3c417756cc</anchor>
      <arglist>(vtkIdType) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TetrahedralMeshMapper</name>
      <anchorfile>classmirtk_1_1TetrahedralMeshMapper.html</anchorfile>
      <anchor>a2d31789867c7c680e962b3dd05927b6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CopyAttributes</name>
      <anchorfile>classmirtk_1_1TetrahedralMeshMapper.html</anchorfile>
      <anchor>ae32cd524426549ea9ae68e6e95fb47f5</anchor>
      <arglist>(const TetrahedralMeshMapper &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1TetrahedralMeshMapper.html</anchorfile>
      <anchor>a0b53dba1618af4cc9f4add5c32fe3f85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1TetrahedralMeshMapper.html</anchorfile>
      <anchor>a00cd526d22f7b2d411ef8610505f9f34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1TetrahedralMeshMapper.html</anchorfile>
      <anchor>a57b7a22175cf2259bddc959c280deb0e</anchor>
      <arglist>(vtkSmartPointer&lt; vtkDataArray &gt;, InputMask)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1TetrahedralMeshMapper.html</anchorfile>
      <anchor>a3b0cf5ac278eac39a4a8dc73023c8a70</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPointSet &gt;, Volume)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1TetrahedralMeshMapper.html</anchorfile>
      <anchor>a65cca2956418624d5cc023d684bc91cb</anchor>
      <arglist>(vtkSmartPointer&lt; vtkDataArray &gt;, Coords)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1TetrahedralMeshMapper.html</anchorfile>
      <anchor>ab10e069017cf0f06a6bbb093c64361e3</anchor>
      <arglist>(vtkSmartPointer&lt; vtkDataArray &gt;, BoundaryMask)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1TetrahedralMeshMapper.html</anchorfile>
      <anchor>ac0372480b3f3ac9045fd63e9563a7ac8</anchor>
      <arglist>(int, NumberOfPoints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1TetrahedralMeshMapper.html</anchorfile>
      <anchor>a6ead3c613f85110e908cda3af4725829</anchor>
      <arglist>(int, NumberOfBoundaryPoints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1TetrahedralMeshMapper.html</anchorfile>
      <anchor>a462612a31480d1e02be8245f7ffa08fa</anchor>
      <arglist>(int, NumberOfInteriorPoints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TetrahedralMeshMapper &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1TetrahedralMeshMapper.html</anchorfile>
      <anchor>a7f9c7fdea8f9d6f3467de0c8d8c0e097</anchor>
      <arglist>(const TetrahedralMeshMapper &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TetrahedralMeshMapper</name>
      <anchorfile>classmirtk_1_1TetrahedralMeshMapper.html</anchorfile>
      <anchor>acfa536c92e7af928708f4953c1f8dd38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TetrahedralMeshMapper</name>
      <anchorfile>classmirtk_1_1TetrahedralMeshMapper.html</anchorfile>
      <anchor>a2889020ad7268211963ea6f560b6b34e</anchor>
      <arglist>(const TetrahedralMeshMapper &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::TopologyPreservationConstraint</name>
    <filename>classmirtk_1_1TopologyPreservationConstraint.html</filename>
    <base>mirtk::NegJacobianConstraint</base>
    <member kind="function">
      <type></type>
      <name>TopologyPreservationConstraint</name>
      <anchorfile>classmirtk_1_1TopologyPreservationConstraint.html</anchorfile>
      <anchor>abf5e7605aeb7bb1a8f150b9d3948b314</anchor>
      <arglist>(const char *=&quot;&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TopologyPreservationConstraint</name>
      <anchorfile>classmirtk_1_1TopologyPreservationConstraint.html</anchorfile>
      <anchor>a0ec869cb7e96ce3720263b8404e061ce</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::Transformation</name>
    <filename>classmirtk_1_1Transformation.html</filename>
    <base>mirtk::Observable</base>
    <member kind="typedef">
      <type>Status</type>
      <name>DOFStatus</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a47b34697b2111553e06c1dc8193b5e3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>DOFValue</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>ac013ee44550e1fb59f12976f33b295c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Add</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>aa9f3e90863799cc88cd31d15edc9a5d3</anchor>
      <arglist>(const DOFValue *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Approximate</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a32cfe2fe3cab5e66c6f7af80c5a3a248</anchor>
      <arglist>(const ImageAttributes &amp;, const Transformation *, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Approximate</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>ae3bf095b0501a1bfb03a7013c0207086</anchor>
      <arglist>(GenericImage&lt; double &gt; &amp;, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Approximate</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>ac70c9601928872b9095d914cbeeebe59</anchor>
      <arglist>(const ImageAttributes &amp;, double *, double *, double *, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Approximate</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>aaf8ee02555c540a38dc3e4586172669b</anchor>
      <arglist>(const double *, const double *, const double *, double *, double *, double *, int, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Approximate</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>afad6e52d0029d1d6ea02bfb0f922e1b7</anchor>
      <arglist>(const double *, const double *, const double *, const double *, double *, double *, double *, int, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApproximateAsNew</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a748d094f8143bf042b39922fc26ac353</anchor>
      <arglist>(const ImageAttributes &amp;, const Transformation *, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApproximateAsNew</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a5d4d13c3544401a3a743b25b134f7324</anchor>
      <arglist>(GenericImage&lt; double &gt; &amp;, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApproximateAsNew</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a524495923be0d72ab139c0bd6b742c06</anchor>
      <arglist>(const ImageAttributes &amp;, double *, double *, double *, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApproximateAsNew</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>ae0d96dc689de34814cd2ca3072099232</anchor>
      <arglist>(const double *, const double *, const double *, double *, double *, double *, int, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApproximateAsNew</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a5d2ace4ec97286e76ec0b310d8486ae5</anchor>
      <arglist>(const double *, const double *, const double *, const double *, double *, double *, double *, int, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFs</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a00af3941fbf064422048f2f81cab8e78</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFsGradient</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a4b49f92976d55f0d1a74c5a56dfb98e7</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int, double *, double=1.0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateGradient</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a8d05e3538c82b2a242e9371dfb60fa11</anchor>
      <arglist>(const ImageAttributes &amp;, const double *, const double *, const double *, double *, double=1.0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateGradient</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>afe3ae3512c003d7130fb679deb29ddd1</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, int, double *, double=1.0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateGradient</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>ae3f3cbd2d80c2339adb5a24c3b05752f</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int, double *, double=1.0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CanModifyDisplacement</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>ad33a5b6454fbd3801ce97ebaadc34fd5</anchor>
      <arglist>(int=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CanRead</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a148a0d50eedfafc962d1d851c26e401d</anchor>
      <arglist>(TransformationType) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a1e338f6b6aebd93225f04bb3ceb44cc7</anchor>
      <arglist>(const Transformation *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DeriveJacobianWrtDOF</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>aa40fd47b9861e26a091d12a682f5dee2</anchor>
      <arglist>(Matrix &amp;, int, double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>ae8e35ecb4ed0ec4614b856d2e8c0cd69</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a6bfafc861a3d663293a9dfc99e500a0a</anchor>
      <arglist>(const ImageAttributes &amp;, double *, double *, double *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a632fbaefdd3df6936053b109411ecf6f</anchor>
      <arglist>(GenericImage&lt; double &gt; &amp;, double=NaN, const WorldCoordsImage *=NULL) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a7490383d299ba5ec114da28905e0c514</anchor>
      <arglist>(GenericImage&lt; float &gt; &amp;, double=NaN, const WorldCoordsImage *=NULL) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a7a3c5d34590c041a6139c3c185ffe700</anchor>
      <arglist>(GenericImage&lt; double &gt; &amp;, double, double, const WorldCoordsImage *=NULL) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>aa5b19f9fb92e535314090a52d8917559</anchor>
      <arglist>(GenericImage&lt; float &gt; &amp;, double, double, const WorldCoordsImage *=NULL) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DisplacementAfterDOFChange</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a390004527d4e46b5fb66ba9ec1b53263</anchor>
      <arglist>(int dof, double dv, GenericImage&lt; double &gt; &amp;dx, double t, double t0=NaN, const WorldCoordsImage *i2w=NULL) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>DOFBoundingBox</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>ab4deea298e173d5fb300444c56153eeb</anchor>
      <arglist>(const Image *, int, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, double=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>DOFGradientNorm</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a56180486590fd5ce7a0d5fafc15933e1</anchor>
      <arglist>(const double *) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>EvaluateRMSError</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a1bf89d26c5b9603c2535db321abcf238</anchor>
      <arglist>(const ImageAttributes &amp;, const Transformation *) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>EvaluateRMSError</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a7af9620f172fc663807879c8c45e8e63</anchor>
      <arglist>(const ImageAttributes &amp;, double *, double *) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>EvaluateRMSError</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a3a48f2904d3c6348a9349eede6b1280f</anchor>
      <arglist>(const ImageAttributes &amp;, double *, double *, double *) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>EvaluateRMSError</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a711bbb38cc6b3b3155ba055479366def</anchor>
      <arglist>(const double *, const double *, const double *, double, double *, double *, double *, int no) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>EvaluateRMSError</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>ac1d1bca8ffe6769408ddbe828c8ab2c4</anchor>
      <arglist>(const double *, const double *, const double *, const double *, double *, double *, double *, int no) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a261de3ddc19eba1385f609c144706502</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>af46fe538a543338a7d215b608063fb51</anchor>
      <arglist>(DOFValue *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DOFStatus</type>
      <name>GetStatus</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a395b381062527e328c17ff7325c82d1e</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GlobalDisplacement</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>aefd98cd3eb47bc361e68aa3c189e94aa</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GlobalHessian</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a7811d05ad14d88252548a9c3002a9a10</anchor>
      <arglist>(Matrix [3], double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GlobalInverse</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a17e763904bee8e0b1df9db021623f85a</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GlobalInverseDisplacement</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a8868ba8f30d1d2291bca74ceaef515be</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GlobalJacobian</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a39af278aca39bb2358567a84783aed80</anchor>
      <arglist>(Matrix &amp;, double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GlobalJacobian</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a0452288b41e9f3df6819e58c3820b221</anchor>
      <arglist>(double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>GlobalTransform</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>ade15687850d9fbfeef8c51b99a4c6bfa</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=NaN) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasSameDOFsAs</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a4b5eb48929c44256428fa09d983c8755</anchor>
      <arglist>(const Transformation *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Hessian</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>adcf6938d1f18ed35b5c9e21f4b0f72f7</anchor>
      <arglist>(Matrix [3], double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Inverse</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>abbdb1b672b44cc0fbfd1530841af7ff7</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Inverse</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>ae8c2f7b51f1e875a245a06e185970600</anchor>
      <arglist>(Point &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Inverse</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>abd7786cece4045af9967a30f4f966d3b</anchor>
      <arglist>(PointSet &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>InverseDisplacement</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a0da30fe864c2aab1ada138667dbe2ee3</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InverseDisplacement</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a928c606c0deba44f008baf1687151814</anchor>
      <arglist>(const ImageAttributes &amp;, double *, double *, double *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InverseDisplacement</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a6b2fde819caa6b1c28a6651f4d6121d5</anchor>
      <arglist>(GenericImage&lt; double &gt; &amp;, double=NaN, const WorldCoordsImage *=NULL) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InverseDisplacement</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>ad74b5fe50292a3e41a21919d6e98bffb</anchor>
      <arglist>(GenericImage&lt; float &gt; &amp;, double=NaN, const WorldCoordsImage *=NULL) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InverseDisplacement</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>aed0df4cab1ccee26355d2cb036d1d687</anchor>
      <arglist>(GenericImage&lt; double &gt; &amp;, double, double, const WorldCoordsImage *=NULL) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InverseDisplacement</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a50ec172a99a667af32d60f620af37fe0</anchor>
      <arglist>(GenericImage&lt; float &gt; &amp;, double, double, const WorldCoordsImage *=NULL) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIdentity</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a2c27dcf6400d61cdd77fe51c8e9a693d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Jacobian</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a490611e081fa9af43a88af1e89a344a4</anchor>
      <arglist>(Matrix &amp;, double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Jacobian</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>ab3f0a07b73e3dfb8f9f03ed1cb0619bd</anchor>
      <arglist>(double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>aa1aa2dd4397c1cf28b846cf01e3f0d01</anchor>
      <arglist>(double [3], int, double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalDisplacement</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>ab05db383ce18953e150a677076e41d11</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalHessian</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a531234e0f36738db9e480a1cc1de79fe</anchor>
      <arglist>(Matrix [3], double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LocalInverse</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a9c67e5e0ba2a2c68e49abda70c261015</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LocalInverseDisplacement</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a0abf0a6764817cdc13c13f8f0da8243e</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalJacobian</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a74786fb08a07ca5e37c7aba098d4a370</anchor>
      <arglist>(Matrix &amp;, double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>LocalJacobian</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>aaceb68e76d3fbc2b374f191f74169070</anchor>
      <arglist>(double, double, double, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>LocalTransform</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>ab72af0e2937257eb97d28f61dc546de7</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=NaN) const =0</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfActiveDOFs</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>aa709a6ad1b08d98b81575311b16aac52</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumberOfDOFs</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a043a38552cfbb2741ac936e6f27e32f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfPassiveDOFs</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>abca95c7a7f2d97181a96dd94b880e470</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a8697adbfec1300c73aeae49f82c1b780</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a1fc1f119f2a75cf1309b91a7cb4bd8e4</anchor>
      <arglist>(const GenericImage&lt; double &gt; *, double *, const WorldCoordsImage *, const WorldCoordsImage *, double=NaN, double=1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a80a722ac006927cca566a945a9afbda6</anchor>
      <arglist>(const GenericImage&lt; double &gt; *, double *, const WorldCoordsImage *, double=NaN, double=1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a90aa735d59e063512fe32e53b370e359</anchor>
      <arglist>(const GenericImage&lt; double &gt; *, double *, double=NaN, double=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>af155c3a8c7cb5a357f511ad9161599df</anchor>
      <arglist>(const GenericImage&lt; double &gt; **, int, double *, const WorldCoordsImage *, const WorldCoordsImage *, const double *=NULL, double=1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a32f8fa903b21bb72ecfb03018823d068</anchor>
      <arglist>(const GenericImage&lt; double &gt; **, int, double *, const WorldCoordsImage *, const double *=NULL, double=1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a3b54e17ca40061d37c214eb14434af64</anchor>
      <arglist>(const GenericImage&lt; double &gt; **, int, double *, const double *=NULL, double=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>aa93f9155c50ff775d65a2b2abdaac205</anchor>
      <arglist>(const PointSet &amp;, const Vector3D&lt; double &gt; *, double *, double=0, double=NaN, double=1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a41733ec212e793f273691405b64222ed</anchor>
      <arglist>(Indent=0) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>aa4fac71f2259a767df3a86d29ccbbfc8</anchor>
      <arglist>(ostream &amp;os, Indent=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a365a3782121517d3b74e5723350c0a7d</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a6dc0248ee400b68501a9c1f8a8acd9e5</anchor>
      <arglist>(const DOFValue *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutStatus</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a99c708201069b3251ffd33802caf76ec</anchor>
      <arglist>(int, DOFStatus)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a40ccadce7c5147fa91878906f400995b</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cifstream &amp;</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a9524b76a9134adefe3c12060fc142e30</anchor>
      <arglist>(Cifstream &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>RequiresCachingOfDisplacements</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a3c35ac6b136039962ac17d34bf90c58a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Reset</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>ae24d2407237da26b9c01b342e61924b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a72e42d0566ce4baa3aebc50bdd3ed80a</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Transform</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>aa6ee08cc4b25d8a9982f4e5980623027</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=NaN) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Transform</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a09dacbe07f1e3477d49e182cdcf536e1</anchor>
      <arglist>(Point &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Transform</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>af164a16ccf72642dcf96cf87fec26aaf</anchor>
      <arglist>(PointSet &amp;, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Transform</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a023afdb7446ef58969545a44df13de57</anchor>
      <arglist>(int, double *, double *, double *, double=0, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Transform</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>aad5b0f72a476881c3a190973baeb04b0</anchor>
      <arglist>(int, double *, double *, double *, const double *, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Transform</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a68050289ec3c5ae0e8fa2cfa341bba0d</anchor>
      <arglist>(WorldCoordsImage &amp;, double=NaN) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TransformationType</type>
      <name>TypeOfClass</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a749398fcc5dbefc18170967c1aaa861e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a0ee4ab8f5ac2c023f3abf5b5fef2657a</anchor>
      <arglist>(const DOFValue *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Verify</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>ab848dc8eb022ca017f6f00be72130ca2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a981eb99b6a93f1da4a006b085a6cb552</anchor>
      <arglist>(const char *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cofstream &amp;</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a176a2286dd03977decf18f7f8f9c80a6</anchor>
      <arglist>(Cofstream &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Transformation</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>adfb228cbf80e3a1d304f9557b0dcdfb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>CheckHeader</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a49631f722a8d47c418345877a6e620d7</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Transformation *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a4a9d61fbe47d8e3dca141d0242c8382f</anchor>
      <arglist>(TransformationType)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Transformation *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a57d775ff90b6249aa889c114bd38a6bb</anchor>
      <arglist>(const Transformation *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Transformation *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a66557e038b8144187bb5d2462ec8b10e</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TransformationType</type>
      <name>TypeOfClass</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>acee77ec67fd400d43256f5b4d983dfd5</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>InitializeDOFs</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a00af8451da830e36710cd71cb6975dc5</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>InitializeDOFs</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>ad26c830d5756d231b14bf571a102f02d</anchor>
      <arglist>(const Transformation &amp;, int=-1)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Cifstream &amp;</type>
      <name>ReadDOFs</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a8ad39d2dffdd4608f49c596ee45fb1b8</anchor>
      <arglist>(Cifstream &amp;, TransformationType)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Transformation</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a85bc36d2807590eb6e8d6df4364ef6ec</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Transformation</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>aefb8fe32cce5a688f6705343f5fdc17c</anchor>
      <arglist>(const Transformation &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Transformation</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a1aa19eb9eeabdfb85c01d49085b1fc29</anchor>
      <arglist>(const Transformation &amp;, int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Cofstream &amp;</type>
      <name>WriteDOFs</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a922ab43b4355c5a89c4804a68ce07913</anchor>
      <arglist>(Cofstream &amp;) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_NumberOfDOFs</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>afe0ee825bc04171aae7d76d9a6bc295a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DOFValue *</type>
      <name>_Param</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a354dc0ce8d9f5ccbf11b349fedd46d63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DOFStatus *</type>
      <name>_Status</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a9d752d0c5c2c7cc5362f426dcd3ad750</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::TransformationApproximationError</name>
    <filename>classmirtk_1_1TransformationApproximationError.html</filename>
    <base>mirtk::ObjectiveFunction</base>
    <member kind="function">
      <type>void</type>
      <name>CenterPoints</name>
      <anchorfile>classmirtk_1_1TransformationApproximationError.html</anchorfile>
      <anchor>af698b4c166ebfd2efc3b05aa1412eb99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1TransformationApproximationError.html</anchorfile>
      <anchor>a41e593b540c3ce48313b1600f93dcc66</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1TransformationApproximationError.html</anchorfile>
      <anchor>a5d106e3fae0eaf8d5ce7aceb6333c971</anchor>
      <arglist>(double *x) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Gradient</name>
      <anchorfile>classmirtk_1_1TransformationApproximationError.html</anchorfile>
      <anchor>a7c27f5a7e0d5d852287fefaa6aa2408d</anchor>
      <arglist>(double *dx, double step=.0, bool *sgn_chg=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GradientNorm</name>
      <anchorfile>classmirtk_1_1TransformationApproximationError.html</anchorfile>
      <anchor>afacdd57eca17c600e1737e4e4d5d6913</anchor>
      <arglist>(const double *dx) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumberOfDOFs</name>
      <anchorfile>classmirtk_1_1TransformationApproximationError.html</anchorfile>
      <anchor>aadd201c95ed922068a80efec6eb305ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1TransformationApproximationError.html</anchorfile>
      <anchor>ada73494e911555ca229fcbdfa0ef22f9</anchor>
      <arglist>(const double *x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Step</name>
      <anchorfile>classmirtk_1_1TransformationApproximationError.html</anchorfile>
      <anchor>a75a490d52e1d9f70db9aec7a9afa33a3</anchor>
      <arglist>(double *dx)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TransformationApproximationError</name>
      <anchorfile>classmirtk_1_1TransformationApproximationError.html</anchorfile>
      <anchor>aae5116a6e39916c820eb0e6b60766840</anchor>
      <arglist>(class Transformation *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1TransformationApproximationError.html</anchorfile>
      <anchor>aa113cbe5465e50c29d2a72dcb4d757e5</anchor>
      <arglist>(bool gradient=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Value</name>
      <anchorfile>classmirtk_1_1TransformationApproximationError.html</anchorfile>
      <anchor>a232eb8a778ba64ab7e031a6fa9fb9751</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TransformationApproximationError</name>
      <anchorfile>classmirtk_1_1TransformationApproximationError.html</anchorfile>
      <anchor>a823ee46740a470d73ccc8248e18f91c3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::TransformationConstraint</name>
    <filename>classmirtk_1_1TransformationConstraint.html</filename>
    <base>mirtk::EnergyTerm</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1TransformationConstraint.html</anchorfile>
      <anchor>a9a7a25168120c5aee1ff408f93bebf27</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TransformationConstraint</name>
      <anchorfile>classmirtk_1_1TransformationConstraint.html</anchorfile>
      <anchor>a0f1912bea6e622e0d66273e5955c3c77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TransformationConstraint *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1TransformationConstraint.html</anchorfile>
      <anchor>abfb1d18ebff339ea507e83d06c4edb58</anchor>
      <arglist>(ConstraintMeasure, const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const FreeFormTransformation *</type>
      <name>FFD</name>
      <anchorfile>classmirtk_1_1TransformationConstraint.html</anchorfile>
      <anchor>a1ec95dc66f48b828e66f64e36856ac2c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const MultiLevelTransformation *</type>
      <name>MFFD</name>
      <anchorfile>classmirtk_1_1TransformationConstraint.html</anchorfile>
      <anchor>a7c7a284c39f0a2d061d3380e44fb6a01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TransformationConstraint &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1TransformationConstraint.html</anchorfile>
      <anchor>ae9580b70435cd8d4ef1db28603002269</anchor>
      <arglist>(const TransformationConstraint &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithoutPrefix</name>
      <anchorfile>classmirtk_1_1TransformationConstraint.html</anchorfile>
      <anchor>ab44d2e792a957ebb62e3e499ce179fa6</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithPrefix</name>
      <anchorfile>classmirtk_1_1TransformationConstraint.html</anchorfile>
      <anchor>acfa3d0959731f4fb3f336f2cfe34d7ae</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const TransformationType *</type>
      <name>TransformationAs</name>
      <anchorfile>classmirtk_1_1TransformationConstraint.html</anchorfile>
      <anchor>a373044d8a72b080f629e81eb38e153ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TransformationConstraint</name>
      <anchorfile>classmirtk_1_1TransformationConstraint.html</anchorfile>
      <anchor>ae621959babccc17c7b1dc1257cbafe48</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TransformationConstraint</name>
      <anchorfile>classmirtk_1_1TransformationConstraint.html</anchorfile>
      <anchor>ae3f9d468ba68a50296f0587564c7c5ca</anchor>
      <arglist>(const TransformationConstraint &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>WriteFFDGradient</name>
      <anchorfile>classmirtk_1_1TransformationConstraint.html</anchorfile>
      <anchor>aeb5445ea04e2447e28cc59944cee8c76</anchor>
      <arglist>(const char *, const FreeFormTransformation *, const double *) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::GenericRegistrationFilter::TransformationInfo</name>
    <filename>structmirtk_1_1GenericRegistrationFilter_1_1TransformationInfo.html</filename>
  </compound>
  <compound kind="class">
    <name>mirtk::TransformationJacobian</name>
    <filename>classmirtk_1_1TransformationJacobian.html</filename>
    <base>mirtk::Object</base>
    <member kind="function">
      <type>TransformationJacobian &amp;</type>
      <name>add</name>
      <anchorfile>classmirtk_1_1TransformationJacobian.html</anchorfile>
      <anchor>aa029581fd37637e248f4aecb1232fea8</anchor>
      <arglist>(const TransformationJacobian &amp;, double)</arglist>
    </member>
    <member kind="function">
      <type>ColumnIterator</type>
      <name>Begin</name>
      <anchorfile>classmirtk_1_1TransformationJacobian.html</anchorfile>
      <anchor>a97429541d217b1314ae4f8c8c015bbe6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstColumnIterator</type>
      <name>Begin</name>
      <anchorfile>classmirtk_1_1TransformationJacobian.html</anchorfile>
      <anchor>acc49d77faa18405cb118282b914641cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1TransformationJacobian.html</anchorfile>
      <anchor>a3a6323c7f2a015a6ad6c86b6cea9c41e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ColumnType &amp;</type>
      <name>Column</name>
      <anchorfile>classmirtk_1_1TransformationJacobian.html</anchorfile>
      <anchor>aa2bbfbebd4e2261a582167d53cd9d8a9</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ColumnIndex</name>
      <anchorfile>classmirtk_1_1TransformationJacobian.html</anchorfile>
      <anchor>af47dbf5abfb1f363b792190d2b4e4188</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>ColumnType &amp;</type>
      <name>ColumnVector</name>
      <anchorfile>classmirtk_1_1TransformationJacobian.html</anchorfile>
      <anchor>a9568d35ff59fa4dfe31e9f136a23b9dd</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const ColumnType &amp;</type>
      <name>ColumnVector</name>
      <anchorfile>classmirtk_1_1TransformationJacobian.html</anchorfile>
      <anchor>a853e3359d6d2177ace8e584070f425c3</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>ColumnIterator</type>
      <name>End</name>
      <anchorfile>classmirtk_1_1TransformationJacobian.html</anchorfile>
      <anchor>ac1e7165f9a9ec557c578d71a066c2c1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstColumnIterator</type>
      <name>End</name>
      <anchorfile>classmirtk_1_1TransformationJacobian.html</anchorfile>
      <anchor>a45f921b4a2aa3c44af71edce67520df3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ColumnIterator</type>
      <name>Find</name>
      <anchorfile>classmirtk_1_1TransformationJacobian.html</anchorfile>
      <anchor>a1c6ce43fc91f2cef7b9b11cb94777620</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>ConstColumnIterator</type>
      <name>Find</name>
      <anchorfile>classmirtk_1_1TransformationJacobian.html</anchorfile>
      <anchor>a56504bf7a4839a368e6f347f2e91de38</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>ColumnIterator</type>
      <name>GetNonZeroColumn</name>
      <anchorfile>classmirtk_1_1TransformationJacobian.html</anchorfile>
      <anchor>ab356eddfcf8d20d4ca761b718804a05e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>ConstColumnIterator</type>
      <name>GetNonZeroColumn</name>
      <anchorfile>classmirtk_1_1TransformationJacobian.html</anchorfile>
      <anchor>a1ba62613e914522501c9f104f63c7be0</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfNonZeroColumns</name>
      <anchorfile>classmirtk_1_1TransformationJacobian.html</anchorfile>
      <anchor>a5c2938f0c0b26c3b8f7f2c500eedeb5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ColumnType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1TransformationJacobian.html</anchorfile>
      <anchor>a437dc61e1233480d8a78c38e20f66f3f</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>TransformationJacobian &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1TransformationJacobian.html</anchorfile>
      <anchor>a876abce32c5ca8367d2bb1782ca6109e</anchor>
      <arglist>(const double)</arglist>
    </member>
    <member kind="function">
      <type>TransformationJacobian &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1TransformationJacobian.html</anchorfile>
      <anchor>a57bb64686116b726c8ec8d9b3a351ec2</anchor>
      <arglist>(const Matrix &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TransformationJacobian &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1TransformationJacobian.html</anchorfile>
      <anchor>ac4254927f065ca51c42bb5f89cee21f9</anchor>
      <arglist>(const TransformationJacobian &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ColumnType &amp;</type>
      <name>operator[]</name>
      <anchorfile>classmirtk_1_1TransformationJacobian.html</anchorfile>
      <anchor>ac84fd94aa0f4cbbb29daf71e0fdf938a</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const ColumnType &amp;</type>
      <name>operator[]</name>
      <anchorfile>classmirtk_1_1TransformationJacobian.html</anchorfile>
      <anchor>adc2295b9d7425132325ce8853abfb261</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TransformationJacobian</name>
      <anchorfile>classmirtk_1_1TransformationJacobian.html</anchorfile>
      <anchor>a4f51bb0d1e74f6e2a59df44346e2d39b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TransformationJacobian</name>
      <anchorfile>classmirtk_1_1TransformationJacobian.html</anchorfile>
      <anchor>abf26071cb2a8d8f9ff288fc16fdd698d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseMatrixType</type>
      <name>_Columns</name>
      <anchorfile>classmirtk_1_1TransformationJacobian.html</anchorfile>
      <anchor>ac9fe57cc88dc26a127cb9a30460deb8c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::MultipleVoxelTransformation::TransformData</name>
    <filename>structmirtk_1_1MultipleVoxelTransformation_1_1TransformData.html</filename>
    <member kind="function">
      <type></type>
      <name>TransformData</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1TransformData.html</anchorfile>
      <anchor>affd212d46f687a5ec74c2fda721deb83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Begin</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1TransformData.html</anchorfile>
      <anchor>a0a7b70699efdefea65bfc5ef66d4fe4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_End</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1TransformData.html</anchorfile>
      <anchor>a7e2c834cfd20d9859580788e27e48f85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BaseImage *</type>
      <name>_Input</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1TransformData.html</anchorfile>
      <anchor>aecbc233648a4934ff4e9a091138c8c4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BaseImage **</type>
      <name>_Inputs</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1TransformData.html</anchorfile>
      <anchor>a3124cf2287420b5f40449c13311189f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>InterpolateImageFunction *</type>
      <name>_Interpolator</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1TransformData.html</anchorfile>
      <anchor>a15485308981bb7db22084da187f0bd97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>InterpolateImageFunction **</type>
      <name>_Interpolators</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1TransformData.html</anchorfile>
      <anchor>a18aaba58aa922cf1e9d189f5c269cd89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>_Invert</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1TransformData.html</anchorfile>
      <anchor>a4f9ad8c00c84ef4a80907b36df74fab2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BinaryImage *</type>
      <name>_Mask</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1TransformData.html</anchorfile>
      <anchor>af5392347dc169d604b224eeeb18b4be6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_MaxNumberOfComponents</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1TransformData.html</anchorfile>
      <anchor>ab5568ea4c541fabff747b1bbd1d1e50e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_NumberOfImages</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1TransformData.html</anchorfile>
      <anchor>a74cb81a75263b404b8dfd05324456ac5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_Offset</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1TransformData.html</anchorfile>
      <anchor>a6491eba437286a252a4e70d4000b79f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Image *</type>
      <name>_Output</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1TransformData.html</anchorfile>
      <anchor>a9a2ca01d3b472c31824d335dd1f5966f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Image **</type>
      <name>_Outputs</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1TransformData.html</anchorfile>
      <anchor>ab2d356a2d2b09356acc4891ee4272736</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_PaddingValue</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1TransformData.html</anchorfile>
      <anchor>a259dd0e22ac1d9a231b57db0e6c00388</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>_PaddingValues</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1TransformData.html</anchorfile>
      <anchor>a674fdaa946d539f48dc3ad0f10402e18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_ScaleFactor</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1TransformData.html</anchorfile>
      <anchor>aeec7f2766fab5ea669a932bcb86d0487</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Transformation *</type>
      <name>_Transformation1</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1TransformData.html</anchorfile>
      <anchor>ac207884a5648cefd54b90d48ee86459b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Transformation *</type>
      <name>_Transformation2</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1TransformData.html</anchorfile>
      <anchor>a98a508f35a09fad73a44c50a4895b4d6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::TransformationUtils::TransformPoints</name>
    <filename>classmirtk_1_1TransformationUtils_1_1TransformPoints.html</filename>
  </compound>
  <compound kind="class">
    <name>mirtk::TransformationUtils::TransformWorldCoords</name>
    <filename>classmirtk_1_1TransformationUtils_1_1TransformWorldCoords.html</filename>
  </compound>
  <compound kind="class">
    <name>mirtk::Triangle</name>
    <filename>classmirtk_1_1Triangle.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Angles</name>
      <anchorfile>classmirtk_1_1Triangle.html</anchorfile>
      <anchor>a81e76f7ef132b58888dab8587ecc20a4</anchor>
      <arglist>(const double a[3], const double b[3], const double c[3], double angle[3])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>Area</name>
      <anchorfile>classmirtk_1_1Triangle.html</anchorfile>
      <anchor>a0d2e2f03819d2a026c1d0e4677a220e5</anchor>
      <arglist>(const double a[3], const double b[3], const double c[3])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>Area2D</name>
      <anchorfile>classmirtk_1_1Triangle.html</anchorfile>
      <anchor>a7d7d999a4330da25a953a74ece4ea6c5</anchor>
      <arglist>(const double a[2], const double b[2], const double c[2])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector3</type>
      <name>AreaGradient</name>
      <anchorfile>classmirtk_1_1Triangle.html</anchorfile>
      <anchor>adf8a09037257ba5baa3f885805dd7ace</anchor>
      <arglist>(const double a[3], const double b[3], const double c[3])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>BoundingSphereRadius</name>
      <anchorfile>classmirtk_1_1Triangle.html</anchorfile>
      <anchor>a40c211be5ed0b12706d351292d8d7d2d</anchor>
      <arglist>(const double a[3], const double b[3], const double c[3], double *center=nullptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Center</name>
      <anchorfile>classmirtk_1_1Triangle.html</anchorfile>
      <anchor>a39dd97a36ecd1ba06de04d4a7e7266fb</anchor>
      <arglist>(const double a[3], const double b[3], const double c[3], double center[3])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>Cotangent</name>
      <anchorfile>classmirtk_1_1Triangle.html</anchorfile>
      <anchor>a453a376fa48c1eea98d9743db6159097</anchor>
      <arglist>(double a[3], double b[3], double c[3])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>DistanceBetweenCenters</name>
      <anchorfile>classmirtk_1_1Triangle.html</anchorfile>
      <anchor>a65bcdc1197c8d3f802de99efa53d7600</anchor>
      <arglist>(const double a1[3], const double b1[3], const double c1[3], const double a2[3], const double b2[3], const double c2[3], double *p1, double *p2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>DistanceBetweenCorners</name>
      <anchorfile>classmirtk_1_1Triangle.html</anchorfile>
      <anchor>acf624585bf00833cf9a5709001d10150</anchor>
      <arglist>(const double a1[3], const double b1[3], const double c1[3], const double a2[3], const double b2[3], const double c2[3], double *p1, double *p2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>DistanceBetweenTriangles</name>
      <anchorfile>classmirtk_1_1Triangle.html</anchorfile>
      <anchor>a26bc92a99564e4db20335c8b43109b92</anchor>
      <arglist>(const double a1[3], const double b1[3], const double c1[3], const double n1[3], const double a2[3], const double b2[3], const double c2[3], const double n2[3], double *p1, double *p2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>DistanceBetweenTriangles</name>
      <anchorfile>classmirtk_1_1Triangle.html</anchorfile>
      <anchor>a329fe0c45d3e2e8d8e797510c7c0891b</anchor>
      <arglist>(const double a1[3], const double b1[3], const double c1[3], const double a2[3], const double b2[3], const double c2[3], double *p1, double *p2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>DoubleArea</name>
      <anchorfile>classmirtk_1_1Triangle.html</anchorfile>
      <anchor>ad1f91aeb6d530999f009ec0e99c58660</anchor>
      <arglist>(const double a[3], const double b[3], const double c[3])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>DoubleArea2D</name>
      <anchorfile>classmirtk_1_1Triangle.html</anchorfile>
      <anchor>ac3dc9a724d5d53172c8ba5c97a4d0c47</anchor>
      <arglist>(const double a[2], const double b[2], const double c[2])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector3</type>
      <name>DoubleAreaGradient</name>
      <anchorfile>classmirtk_1_1Triangle.html</anchorfile>
      <anchor>a102eb4296782f765b9f5987b26be278f</anchor>
      <arglist>(const double a[3], const double b[3], const double c[3])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>DoubleSignedArea2D</name>
      <anchorfile>classmirtk_1_1Triangle.html</anchorfile>
      <anchor>a241c9cbd221b2af64ce3459bf03abdb3</anchor>
      <arglist>(const double a[2], const double b[2], const double c[2])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>MaxAngle</name>
      <anchorfile>classmirtk_1_1Triangle.html</anchorfile>
      <anchor>afe2a629c512abdd596c4c47901461a07</anchor>
      <arglist>(const double a[3], const double b[3], const double c[3])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>MinAngle</name>
      <anchorfile>classmirtk_1_1Triangle.html</anchorfile>
      <anchor>a7c425a7e98c0d02a3f208c3d3da3329d</anchor>
      <arglist>(const double a[3], const double b[3], const double c[3])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Normal</name>
      <anchorfile>classmirtk_1_1Triangle.html</anchorfile>
      <anchor>a81907d5dd368252684c317ac110ddbe9</anchor>
      <arglist>(const double a[3], const double b[3], const double c[3], double n[3])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>NormalDirection</name>
      <anchorfile>classmirtk_1_1Triangle.html</anchorfile>
      <anchor>a7520ba4f397f1c300e6c793ff574da07</anchor>
      <arglist>(const double a[3], const double b[3], const double c[3], double n[3])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix3x3</type>
      <name>NormalDirectionJacobian</name>
      <anchorfile>classmirtk_1_1Triangle.html</anchorfile>
      <anchor>a90a231243011eb4df586a512a3f46c24</anchor>
      <arglist>(const double a[3], const double b[3], const double c[3])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix3x3</type>
      <name>NormalJacobian</name>
      <anchorfile>classmirtk_1_1Triangle.html</anchorfile>
      <anchor>a7779d06d696162ac9f2e5523f28d24ca</anchor>
      <arglist>(const double a[3], const double b[3], const double c[3])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix3x3</type>
      <name>NormalJacobian</name>
      <anchorfile>classmirtk_1_1Triangle.html</anchorfile>
      <anchor>a9c140d35aa52528776fbd1de5c8c5e7d</anchor>
      <arglist>(const double a[3], const double b[3], const double c[3], const Matrix3x3 &amp;dn)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix3x3</type>
      <name>NormalJacobian</name>
      <anchorfile>classmirtk_1_1Triangle.html</anchorfile>
      <anchor>a51877af2e74f37785e9ea872d7e88eeb</anchor>
      <arglist>(const double n[3], const Matrix3x3 &amp;dn)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix3x3</type>
      <name>NormalJacobian</name>
      <anchorfile>classmirtk_1_1Triangle.html</anchorfile>
      <anchor>a990f9ab3448ece6ba65b44ac3887e426</anchor>
      <arglist>(const Vector3 &amp;n, const Matrix3x3 &amp;dn)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>SignedArea2D</name>
      <anchorfile>classmirtk_1_1Triangle.html</anchorfile>
      <anchor>ad60d7b5e47952a4ec67bec4bd807f61e</anchor>
      <arglist>(const double a[2], const double b[2], const double c[2])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>TriangleTriangleIntersection</name>
      <anchorfile>classmirtk_1_1Triangle.html</anchorfile>
      <anchor>ad8812b57cbccdb7142f82e823c1d710c</anchor>
      <arglist>(const double a1[3], const double b1[3], const double c1[3], const double a2[3], const double b2[3], const double c2[3])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>TriangleTriangleIntersection</name>
      <anchorfile>classmirtk_1_1Triangle.html</anchorfile>
      <anchor>ae96385fe0408b9a07e55773e35659597</anchor>
      <arglist>(const double a1[3], const double b1[3], const double c1[3], const double a2[3], const double b2[3], const double c2[3], int &amp;coplanar, double *p1, double *p2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ConvolutionFunction::TruncatedForegroundConvolution1D</name>
    <filename>classmirtk_1_1ConvolutionFunction_1_1TruncatedForegroundConvolution1D.html</filename>
    <templarg>TKernel</templarg>
    <base>mirtk::VoxelFunction</base>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>ConvolveCenterVoxel</name>
      <anchorfile>classmirtk_1_1ConvolutionFunction_1_1TruncatedForegroundConvolution1D.html</anchorfile>
      <anchor>ab6360facac6d69db16f505266f663d1d</anchor>
      <arglist>(const T *in, double &amp;acc, double &amp;sum) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ConvolveLeftNeighbors</name>
      <anchorfile>classmirtk_1_1ConvolutionFunction_1_1TruncatedForegroundConvolution1D.html</anchorfile>
      <anchor>a8d7021c9f84b98e4d66111f0814e2fee</anchor>
      <arglist>(int i, int n, const T *in, int s, double &amp;acc, double &amp;sum) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ConvolveRightNeighbors</name>
      <anchorfile>classmirtk_1_1ConvolutionFunction_1_1TruncatedForegroundConvolution1D.html</anchorfile>
      <anchor>ac60d56a032c48c6cd42cc3a4aab972be</anchor>
      <arglist>(int i, int n, const T *in, int s, double &amp;acc, double &amp;sum) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TruncatedForegroundConvolution1D</name>
      <anchorfile>classmirtk_1_1ConvolutionFunction_1_1TruncatedForegroundConvolution1D.html</anchorfile>
      <anchor>ab9350390dffa655c236faa4c5c9588ce</anchor>
      <arglist>(const BaseImage *image, const TKernel *kernel, int size, bool norm=true)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_Background</name>
      <anchorfile>classmirtk_1_1ConvolutionFunction_1_1TruncatedForegroundConvolution1D.html</anchorfile>
      <anchor>a8c7d82d391c3d274cc870c06c6496ccc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const TKernel *</type>
      <name>_Kernel</name>
      <anchorfile>classmirtk_1_1ConvolutionFunction_1_1TruncatedForegroundConvolution1D.html</anchorfile>
      <anchor>ac44e9514411f3acfa4a4828a66a10777</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_Normalize</name>
      <anchorfile>classmirtk_1_1ConvolutionFunction_1_1TruncatedForegroundConvolution1D.html</anchorfile>
      <anchor>a957e02e4978e06025d23b0f00b5aacd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_Radius</name>
      <anchorfile>classmirtk_1_1ConvolutionFunction_1_1TruncatedForegroundConvolution1D.html</anchorfile>
      <anchor>af77d73127230e35e6dbf38a1877db27e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_Size</name>
      <anchorfile>classmirtk_1_1ConvolutionFunction_1_1TruncatedForegroundConvolution1D.html</anchorfile>
      <anchor>ad72225c1bd51c62c79a4ab9023369238</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::UnaryForEachVoxelBody</name>
    <filename>structmirtk_1_1UnaryForEachVoxelBody.html</filename>
    <templarg>T1</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelBody.html</anchorfile>
      <anchor>af50ff9d3b695cfebee745fe9142d03f5</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelBody.html</anchorfile>
      <anchor>af4b2c481aaf5cf0048cdea99393887a4</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelBody.html</anchorfile>
      <anchor>afc6050ae368446c817d4720674641f34</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelBody.html</anchorfile>
      <anchor>afe3700a4e0af3e3200a2440351009320</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelBody.html</anchorfile>
      <anchor>af6fcd9fd5a0f726232ad1f59ea81e3c1</anchor>
      <arglist>(GenericImage&lt; T1 &gt; &amp;im1, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelBody.html</anchorfile>
      <anchor>ac81739762f262e57ad498008fa431c24</anchor>
      <arglist>(const UnaryForEachVoxelBody &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelBody.html</anchorfile>
      <anchor>a9888dc9d5f4279b8d7622d002535ef70</anchor>
      <arglist>(UnaryForEachVoxelBody &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::UnaryForEachVoxelBody_Const</name>
    <filename>structmirtk_1_1UnaryForEachVoxelBody__Const.html</filename>
    <templarg>T1</templarg>
    <templarg>VoxelFunc</templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>ab809baf0a9c89be5e135d5d81db96720</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a2579c919549137f75e08299f5392e46d</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a0133a28bf60ded9af11d671cd9b0ddc4</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a1a11f8570b79155bcf6cbc2c948807ed</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>ac3c3549e79647fb86b5a9288cdcfa874</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a58696611b9e2d70b6d576190eff2648b</anchor>
      <arglist>(const UnaryForEachVoxelBody_Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a7af7e04f2be78599571fc633c1111247</anchor>
      <arglist>(UnaryForEachVoxelBody_Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::UnaryForEachVoxelIfBody</name>
    <filename>structmirtk_1_1UnaryForEachVoxelIfBody.html</filename>
    <templarg>T1</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a82e64155b53a4645caf9a36e7227f7fd</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a15c7f0b53a04878ed8ded86a2b985ffc</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelIfBody.html</anchorfile>
      <anchor>ad5c6abac6cf452451126102f87df36dc</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelIfBody.html</anchorfile>
      <anchor>abf9cb50d55539d3e9fd0956a559bc9ce</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a73c6066d9038c86a1ff318733cbb84c9</anchor>
      <arglist>(GenericImage&lt; T1 &gt; &amp;im1, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a05ad948a340370e05eecc55e0ed04a62</anchor>
      <arglist>(const UnaryForEachVoxelIfBody &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a206d1c4920b4f38849294bd3881e41bf</anchor>
      <arglist>(UnaryForEachVoxelIfBody &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::UnaryForEachVoxelIfBody_Const</name>
    <filename>structmirtk_1_1UnaryForEachVoxelIfBody__Const.html</filename>
    <templarg>T1</templarg>
    <templarg>VoxelFunc</templarg>
    <templarg>OutsideFunc</templarg>
    <templarg>Domain</templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a61e765eb77902e13b5064b3be7447a02</anchor>
      <arglist>(const ImageAttributes &amp;attr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>ab84392c11e302b7630f95e86d6780dc1</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a78efa874e8fc7d9b43a91cfbd6a35a9f</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>af4a95922e1bc87d7afcc2a8a91121309</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a712ce2e8449dcdb4c0742690a09485cf</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a2eb60ad7672b52b18c2d9405d144d812</anchor>
      <arglist>(const UnaryForEachVoxelIfBody_Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a9e6f528a851a3b31aa0dfaa5184dcb6a</anchor>
      <arglist>(UnaryForEachVoxelIfBody_Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::UniformBoundarySegmentParameterizer</name>
    <filename>classmirtk_1_1UniformBoundarySegmentParameterizer.html</filename>
    <base>mirtk::BoundarySegmentParameterizer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual BoundarySegmentParameterizer *</type>
      <name>NewCopy</name>
      <anchorfile>classmirtk_1_1UniformBoundarySegmentParameterizer.html</anchorfile>
      <anchor>a0cfdc79e87e05c09c8ed38dcf65ac285</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>UniformBoundarySegmentParameterizer &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1UniformBoundarySegmentParameterizer.html</anchorfile>
      <anchor>ac32d052711fd98726b1e810ea9822937</anchor>
      <arglist>(const UniformBoundarySegmentParameterizer &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UniformBoundarySegmentParameterizer</name>
      <anchorfile>classmirtk_1_1UniformBoundarySegmentParameterizer.html</anchorfile>
      <anchor>a620f30c4f6d2502f1900b52e48ba2832</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UniformBoundarySegmentParameterizer</name>
      <anchorfile>classmirtk_1_1UniformBoundarySegmentParameterizer.html</anchorfile>
      <anchor>a6174ebb886ca00a57ea5c2c14cbd6518</anchor>
      <arglist>(const UniformBoundarySegmentParameterizer &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UniformBoundarySegmentParameterizer</name>
      <anchorfile>classmirtk_1_1UniformBoundarySegmentParameterizer.html</anchorfile>
      <anchor>a0e917c04bd47d428214cfcff7b393b29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Parameterize</name>
      <anchorfile>classmirtk_1_1UniformBoundarySegmentParameterizer.html</anchorfile>
      <anchor>a95866712e3512a574634629ef0ec08cf</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::UniformSurfaceMapper</name>
    <filename>classmirtk_1_1UniformSurfaceMapper.html</filename>
    <base>mirtk::SymmetricWeightsSurfaceMapper</base>
    <member kind="function">
      <type>UniformSurfaceMapper &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1UniformSurfaceMapper.html</anchorfile>
      <anchor>ad7f99b1fbec10953dcfc24b0012dd075</anchor>
      <arglist>(const UniformSurfaceMapper &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UniformSurfaceMapper</name>
      <anchorfile>classmirtk_1_1UniformSurfaceMapper.html</anchorfile>
      <anchor>a7b6570cf9afe00b49a5a0ff58eb2fe3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UniformSurfaceMapper</name>
      <anchorfile>classmirtk_1_1UniformSurfaceMapper.html</anchorfile>
      <anchor>a34c8f12dd6506ced3244bf998b308bfd</anchor>
      <arglist>(const UniformSurfaceMapper &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UniformSurfaceMapper</name>
      <anchorfile>classmirtk_1_1UniformSurfaceMapper.html</anchorfile>
      <anchor>a69db33ace1a775df7de80ef5ea6552bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Weight</name>
      <anchorfile>classmirtk_1_1UniformSurfaceMapper.html</anchorfile>
      <anchor>a44f5c59e7f5e106ffb95503fab7110ae</anchor>
      <arglist>(int i, int j) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::statistic::UpperPercentileMean</name>
    <filename>classmirtk_1_1data_1_1statistic_1_1UpperPercentileMean.html</filename>
    <base>mirtk::data::statistic::Percentile</base>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1data_1_1statistic_1_1UpperPercentileMean.html</anchorfile>
      <anchor>a576b8d4b2f482734d04336b919573932</anchor>
      <arglist>(Array&lt; double &gt; &amp;values, int n, const double *data, const bool *mask=nullptr) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::UnaryVoxelFunction::UpperThreshold</name>
    <filename>structmirtk_1_1UnaryVoxelFunction_1_1UpperThreshold.html</filename>
    <templarg></templarg>
    <base>mirtk::VoxelFunction</base>
    <member kind="variable">
      <type>T</type>
      <name>_UpperThreshold</name>
      <anchorfile>structmirtk_1_1UnaryVoxelFunction_1_1UpperThreshold.html</anchorfile>
      <anchor>a10e821d65c69b528680eb60c4fce3f39</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::UpperThreshold</name>
    <filename>classmirtk_1_1data_1_1op_1_1UpperThreshold.html</filename>
    <base>mirtk::data::op::ElementWiseUnaryOp</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Op</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1UpperThreshold.html</anchorfile>
      <anchor>ab635b7c7f3989d235fbdacbf98cac6d6</anchor>
      <arglist>(double value, bool &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1UpperThreshold.html</anchorfile>
      <anchor>ae1aae892767054b3c9bc20d1749b49bd</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UpperThreshold</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1UpperThreshold.html</anchorfile>
      <anchor>a0a9d4a97286a88e661037e87bc1f9816</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UpperThreshold</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1UpperThreshold.html</anchorfile>
      <anchor>a02dbd94543c8703a21d620e4900efdad</anchor>
      <arglist>(const double *value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::statistic::Var</name>
    <filename>classmirtk_1_1data_1_1statistic_1_1Var.html</filename>
    <base>mirtk::data::statistic::MeanVar</base>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1data_1_1statistic_1_1Var.html</anchorfile>
      <anchor>afb03deb381f083ebae4f26c67728e6d4</anchor>
      <arglist>(Array&lt; double &gt; &amp;values, int n, const double *data, const bool *mask=nullptr) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::Vector</name>
    <filename>classmirtk_1_1Vector.html</filename>
    <base>mirtk::Object</base>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a7b64a76026480e8a977c96d98d76cd21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>CrossProduct</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>ac786db7a63f99e60fd60dd8c46ccf91b</anchor>
      <arglist>(const Vector &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>DotProduct</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>aecf54aa3f9e09f41c797d7ca0548d741</anchor>
      <arglist>(const Vector &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a813d03918dace440321157701865e146</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a73f48fee37c5d445ec219909e37a94de</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a0cafc6faaf0d84294ec134e335fad347</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a262090af37155824acd8a50cb426c082</anchor>
      <arglist>(int, double *)</arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>Inverse</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a8e9ee5b7cba97593ff525e2798246456</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Mean</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>af9d7ca59f85080912f266f77fa4e537a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Norm</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a2de5c8ea7186dd78d22637487097d69d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>Normalize</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a7acbf3584b2264021fe2b44d097e20f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>ad4270d0ae4f627c852f9c45c04bf824c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>adb68c2005a4df4fcf1b9e3dcbc4943c4</anchor>
      <arglist>(const Vector &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a00439ae849e76b1aae47886eb98cb39c</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a2dfb541600841f193e8ad590f83841c3</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>aa7ca7ecc3848d4a1ff5cd87b9778efe0</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a5aed592746ac70735d373a0da72315d3</anchor>
      <arglist>(const Vector &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a7a487e4f63e5b59e3c7331a68723d051</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>afca1b87fc20f9fc041670ab8dc06ca7a</anchor>
      <arglist>(const Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a3a8ce0fa1d15bd2b235c160f6c37dbb8</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a7d719504efb8dfc8c26a4188cbe2603d</anchor>
      <arglist>(const Vector &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a0031ec2451fdffc57ab99946ed1f8778</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a5d6ea342201073971993a04f0d4f7ada</anchor>
      <arglist>(const Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>afdae88e554f9295b29a53b7f319c8161</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a0ffc43cbc4b591d31c9405054009140f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>afe77a097995aa1285661bc5e6915f9d0</anchor>
      <arglist>(const Vector &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a924eda4b66246ed5478a6f76813aa592</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a646970f68d0996a2af9e41da5c0efc72</anchor>
      <arglist>(const Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a4666b12cbe608ff718c25ffded347e39</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a9c23997bce8e2bde7538f6d3be5b210c</anchor>
      <arglist>(const Vector &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a9787ac6056031fd7ddd68d68acb61ab7</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a4396692388cbbde2fcab9ea9a579b943</anchor>
      <arglist>(const Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a32972a27815a3c762cdc4cc264b63faf</anchor>
      <arglist>(const Vector &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>aafc84cdb7f46423250eb8f64f382dd29</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>ad770af6ed1286aad05ef46d9180a6814</anchor>
      <arglist>(const Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a75a08d6351c18a92fd7a0829926fe985</anchor>
      <arglist>(const Vector &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Permute</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a90023cd9494830d87296cbffbc0019f0</anchor>
      <arglist>(const Array&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PermuteRows</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a559594ad5994ecc3168b12ce046b6dd9</anchor>
      <arglist>(Array&lt; int &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a2d918d1bfe8330f1e36f0fc4eb522430</anchor>
      <arglist>(Indent=0) const</arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>abd0527b31f1b39f71cc69a6245ea3f58</anchor>
      <arglist>(const Vector3D&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>ae563046f0202568abc24eb9bdca4164f</anchor>
      <arglist>(const Vector4D&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a34fe9b54168082e203f45181763f6e6a</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>RawPointer</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a7f11d08f1123e77223fcdec4ca34efe3</anchor>
      <arglist>(int r=0)</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>RawPointer</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>abd4919765b5bea26764ac79d34b9e76f</anchor>
      <arglist>(int r=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>abfc5cb53c638dc9025d795f8251b2cc9</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Resize</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>ad0dbc92428ca56bb5729f2bed539559b</anchor>
      <arglist>(int, double=.0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Rows</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a7b93ba21057d65081a3a4776b6951ceb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ScalarProduct</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a6fbab22fb2e442f69439348e1d6110e1</anchor>
      <arglist>(const Vector &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Sum</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>af6cd39ce69e66e238d91da95eb738fe9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a9780b27c351ae051d803f374b9a3cb75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a9fdb1f239c9ae954090237f552b5a147</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a3e197933a62e48ddccbe587cec897d2a</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a39fa2d5c445af6808d26ca4be388cc71</anchor>
      <arglist>(int, double *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a49d39649ebb2d23cade103b307239751</anchor>
      <arglist>(const Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a058420d1d6cfec2dc56027350c1b0177</anchor>
      <arglist>(const Vector3D&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a96af007e6d6e63cfeac7458fc98a5b23</anchor>
      <arglist>(const Vector4D&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a2380218b1b53f8da98c4dee00f3d19d6</anchor>
      <arglist>(const char *) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteMAT</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a24860dcf56965011a61db2cd6ca6721b</anchor>
      <arglist>(const char *, const char *=&quot;A&quot;) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Vector</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a12c94b0f55bd8d79ef4b04cc90964373</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_rows</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a88f1245e27ebb6e92889d2d9285f9938</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>_vector</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>adee60dea6f11855fad16d7b686576d15</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a0edd5c61d73c078c2a97dc644d6d882f</anchor>
      <arglist>(ostream &amp;, const Vector &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend Cofstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a01aa0dfae58a0e105ca0db66fab890d9</anchor>
      <arglist>(Cofstream &amp;, const Vector &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a2f3bba64d9d7479a0ef7f2db7b774cd1</anchor>
      <arglist>(istream &amp;, Vector &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend Cifstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a4b8b3c5ca113ff2582c9efe48e0c09b3</anchor>
      <arglist>(Cifstream &amp;, Vector &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::Vector3</name>
    <filename>classmirtk_1_1Vector3.html</filename>
    <member kind="function">
      <type>double</type>
      <name>Unitize</name>
      <anchorfile>classmirtk_1_1Vector3.html</anchorfile>
      <anchor>af981ab6fa19ecec93fe25bd43f57c9d8</anchor>
      <arglist>(double fTolerance=1e-06)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::Vector3D</name>
    <filename>structmirtk_1_1Vector3D.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type>Vector3D</type>
      <name>CrossProduct</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a2aba05bc7ca572e1f4a561ece3b46d3a</anchor>
      <arglist>(const Vector3D &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>DotProduct</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a4c47d7fc62e7ec8a201b84333ec0b0ce</anchor>
      <arglist>(const Vector3D &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Length</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>af178196d0a787f0b367b15636d22ce98</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Normalize</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a1c409fcc631a62f029fb156ae63a3ebe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const T *</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>afd01c7a55d9dd9c290bd489e36c4ce37</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T*</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>af83c376adc390644c7dd657faf04d890</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>ae415faed488b56514ddbf7e2ca66c947</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>ada799495b4c1f3a4312aac11a3bebdce</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>aed997fb9e0e1edb7c0c6ad431d6f6eb9</anchor>
      <arglist>(const Vector3D&lt; T2 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a322624774edf96aaff5a64e934a9703b</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>aedf727b592ca70fddab90b3f66579e3a</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator*</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a9edcf24193eeac5acd3ca8b238c11283</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator*</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a6dcedc79f6ce38e7d892bc4100109479</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator*</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>ad550f89e4448cace0e245768360a2bee</anchor>
      <arglist>(const Vector3D&lt; T2 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator*=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a6e2f848c913dbed986aaa36776fa22a1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator*=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a2f7a935deb21348919ba4ac49067dbec</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator*=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a305d968e61c350a86a72ee956a18c7f2</anchor>
      <arglist>(const Vector3D&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator+</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>ab1f37c66575ad4bdfe654ee6afe279ff</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator+</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a75d1bc39a45837e9c535c1c94e87d522</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator+</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>ad701eee664381e6b77fe833f5cef16a6</anchor>
      <arglist>(const Vector3D&lt; T2 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator+=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a50d7b0a144f47db552935804049be7cb</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator+=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a0e8bc0dc35bfef64101588c35b4251e0</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator+=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>ac24da72d6005aa446bb3825f246c4a26</anchor>
      <arglist>(const Vector3D&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator-</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>aaad44bf773a88bc182bcf8595e3c4e8d</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator-</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a5ec8ae401f4e004edb70d31bb8717ab9</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator-</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>aa6c264267f4ada97dda952b911fd80c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator-</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a944646c0964c6221feaacb395f167ed8</anchor>
      <arglist>(const Vector3D&lt; T2 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator-=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a9b7c42177197e0b495bc00ca1ef19aab</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator-=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a194a05cbca7207d0969b604838864104</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator-=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a0fcb19e18939c8a7801710640ef66598</anchor>
      <arglist>(const Vector3D&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator/</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a6f72fbb3f9c88870047023c24f7dc71f</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator/</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a1f49ecf64e3a94260497520d89414ec9</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator/</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>aa3d91fb52aec748c296d237388c9f4be</anchor>
      <arglist>(const Vector3D&lt; T2 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator/=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>aa68defc3e8a6de5156f4f7189d1ecd34</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator/=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a6dad592b82f289306ed59361da206537</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator/=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a629441e86d4061ecb5a2026989c93993</anchor>
      <arglist>(const Vector3D&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a06224b569e40af20eded058d798d5c3a</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a1016e738d219200cb19b4676637b5ccf</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>aeaf6d4da74241fe5bb8a314aa76f704a</anchor>
      <arglist>(const Vector3D&lt; T2 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a627d96db1ff6ae75f767fabce6088cc2</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>ac8cd78467ada896b2ad2eef433a2edfe</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>acbdae7445b07b55f7a9b0b4650c2e1f0</anchor>
      <arglist>(const Vector3D&lt; T2 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a192141fa87c6067e5623b0aa9543ff96</anchor>
      <arglist>(const Vector3D &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a78b78c06ed1f78f06c50249d4e5c695d</anchor>
      <arglist>(const Point &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>ae964bb88747d3e92705f5a026f3bc389</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a2a83b106582921f7f06b1170388f413d</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a44a088940b98eb06dda505ba8f3d15a2</anchor>
      <arglist>(const Vector3D&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>af76cdd41d689e930059ec16d8ac8983c</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a3333cbeda3559f1ff8d40d1475cba683</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a103dd3e429927b955fddb038e64875a8</anchor>
      <arglist>(const Vector3D&lt; T2 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a0c5685e34f2bd69db668122ff6a98a2b</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a13819fe15b1753948bb77e54e6eb78b3</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a756d5eb13b2af3ed97c2361ffae20fb3</anchor>
      <arglist>(const Vector3D&lt; T2 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>adbb57d54a6ee4c4c43ad4429616e1a75</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a906ca732dfc4ade63d0a0ac65662dfba</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>afad4b8137fdaedad961ac0b46ce54bb1</anchor>
      <arglist>(const Vector3D&lt; T2 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SquaredLength</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a5bfcc5a381a63e57cfd7780a9cc7417d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector3D</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a55c3c0031b78fe3d8f9c99449df50589</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector3D</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a32560aa4bcb55a9c8d82c84e455fb675</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector3D</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>af5272b93e4a26179be6959dc1f24b921</anchor>
      <arglist>(T, T, T)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector3D</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a3303d84360f06338618547fa8297441b</anchor>
      <arglist>(const T [3])</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector3D</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a1d6ff69e6fe23b3e74cbc551bc44e733</anchor>
      <arglist>(const Vector3 &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector3D</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>af183afa44ddcd410614b2ff519cf982d</anchor>
      <arglist>(const Point &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector3D</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a92575ace55965e1d7c38bd57f931c5aa</anchor>
      <arglist>(const Vector3D&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector3D</type>
      <name>CrossProduct</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>acfdf6520fae5ed7ca2ef91bbfb4b3794</anchor>
      <arglist>(const Vector3D &amp;, const Vector3D &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>DotProduct</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a9b52d40eaa79a82c9faabb67d38658ae</anchor>
      <arglist>(const Vector3D &amp;, const Vector3D &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>Rows</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>aedded55db69128ed10cf47c05833e7f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>_x</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>ad71c6b691b830fa2b51d739eefcaf080</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>_y</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a6d38e46af4229f6e5af7c4fc1da3ba2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>_z</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>aac59f571106db9c9642e2db5673b4040</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Vector3D&lt; double &gt;</name>
    <filename>structmirtk_1_1Vector3D.html</filename>
    <member kind="function">
      <type>Vector3D</type>
      <name>CrossProduct</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a2aba05bc7ca572e1f4a561ece3b46d3a</anchor>
      <arglist>(const Vector3D &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>DotProduct</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a4c47d7fc62e7ec8a201b84333ec0b0ce</anchor>
      <arglist>(const Vector3D &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Length</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>af178196d0a787f0b367b15636d22ce98</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Normalize</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a1c409fcc631a62f029fb156ae63a3ebe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const double *</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>afd01c7a55d9dd9c290bd489e36c4ce37</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator double *</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>af83c376adc390644c7dd657faf04d890</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>ae415faed488b56514ddbf7e2ca66c947</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>ada799495b4c1f3a4312aac11a3bebdce</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>aed997fb9e0e1edb7c0c6ad431d6f6eb9</anchor>
      <arglist>(const Vector3D&lt; T2 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a322624774edf96aaff5a64e934a9703b</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>aedf727b592ca70fddab90b3f66579e3a</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator*</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a9edcf24193eeac5acd3ca8b238c11283</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator*</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a6dcedc79f6ce38e7d892bc4100109479</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator*</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>ad550f89e4448cace0e245768360a2bee</anchor>
      <arglist>(const Vector3D&lt; T2 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator*=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a6e2f848c913dbed986aaa36776fa22a1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator*=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a2f7a935deb21348919ba4ac49067dbec</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator*=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a305d968e61c350a86a72ee956a18c7f2</anchor>
      <arglist>(const Vector3D&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator+</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>ab1f37c66575ad4bdfe654ee6afe279ff</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator+</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a75d1bc39a45837e9c535c1c94e87d522</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator+</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>ad701eee664381e6b77fe833f5cef16a6</anchor>
      <arglist>(const Vector3D&lt; T2 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator+=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a50d7b0a144f47db552935804049be7cb</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator+=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a0e8bc0dc35bfef64101588c35b4251e0</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator+=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>ac24da72d6005aa446bb3825f246c4a26</anchor>
      <arglist>(const Vector3D&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator-</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>aaad44bf773a88bc182bcf8595e3c4e8d</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator-</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a5ec8ae401f4e004edb70d31bb8717ab9</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator-</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>aa6c264267f4ada97dda952b911fd80c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator-</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a944646c0964c6221feaacb395f167ed8</anchor>
      <arglist>(const Vector3D&lt; T2 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator-=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a9b7c42177197e0b495bc00ca1ef19aab</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator-=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a194a05cbca7207d0969b604838864104</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator-=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a0fcb19e18939c8a7801710640ef66598</anchor>
      <arglist>(const Vector3D&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator/</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a6f72fbb3f9c88870047023c24f7dc71f</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator/</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a1f49ecf64e3a94260497520d89414ec9</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator/</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>aa3d91fb52aec748c296d237388c9f4be</anchor>
      <arglist>(const Vector3D&lt; T2 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator/=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>aa68defc3e8a6de5156f4f7189d1ecd34</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator/=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a6dad592b82f289306ed59361da206537</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator/=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a629441e86d4061ecb5a2026989c93993</anchor>
      <arglist>(const Vector3D&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a06224b569e40af20eded058d798d5c3a</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a1016e738d219200cb19b4676637b5ccf</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>aeaf6d4da74241fe5bb8a314aa76f704a</anchor>
      <arglist>(const Vector3D&lt; T2 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a627d96db1ff6ae75f767fabce6088cc2</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>ac8cd78467ada896b2ad2eef433a2edfe</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>acbdae7445b07b55f7a9b0b4650c2e1f0</anchor>
      <arglist>(const Vector3D&lt; T2 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a192141fa87c6067e5623b0aa9543ff96</anchor>
      <arglist>(const Vector3D &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a78b78c06ed1f78f06c50249d4e5c695d</anchor>
      <arglist>(const Point &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>ae964bb88747d3e92705f5a026f3bc389</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a2a83b106582921f7f06b1170388f413d</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a44a088940b98eb06dda505ba8f3d15a2</anchor>
      <arglist>(const Vector3D&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>af76cdd41d689e930059ec16d8ac8983c</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a3333cbeda3559f1ff8d40d1475cba683</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a103dd3e429927b955fddb038e64875a8</anchor>
      <arglist>(const Vector3D&lt; T2 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a0c5685e34f2bd69db668122ff6a98a2b</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a13819fe15b1753948bb77e54e6eb78b3</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a756d5eb13b2af3ed97c2361ffae20fb3</anchor>
      <arglist>(const Vector3D&lt; T2 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>adbb57d54a6ee4c4c43ad4429616e1a75</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a906ca732dfc4ade63d0a0ac65662dfba</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>afad4b8137fdaedad961ac0b46ce54bb1</anchor>
      <arglist>(const Vector3D&lt; T2 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SquaredLength</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a5bfcc5a381a63e57cfd7780a9cc7417d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector3D</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a55c3c0031b78fe3d8f9c99449df50589</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector3D</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a32560aa4bcb55a9c8d82c84e455fb675</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector3D</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>af5272b93e4a26179be6959dc1f24b921</anchor>
      <arglist>(double, double, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector3D</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a3303d84360f06338618547fa8297441b</anchor>
      <arglist>(const double [3])</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector3D</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a1d6ff69e6fe23b3e74cbc551bc44e733</anchor>
      <arglist>(const Vector3 &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector3D</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>af183afa44ddcd410614b2ff519cf982d</anchor>
      <arglist>(const Point &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector3D</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a92575ace55965e1d7c38bd57f931c5aa</anchor>
      <arglist>(const Vector3D&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector3D</type>
      <name>CrossProduct</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>acfdf6520fae5ed7ca2ef91bbfb4b3794</anchor>
      <arglist>(const Vector3D &amp;, const Vector3D &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>DotProduct</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a9b52d40eaa79a82c9faabb67d38658ae</anchor>
      <arglist>(const Vector3D &amp;, const Vector3D &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>Rows</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>aedded55db69128ed10cf47c05833e7f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_x</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>ad71c6b691b830fa2b51d739eefcaf080</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_y</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a6d38e46af4229f6e5af7c4fc1da3ba2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_z</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>aac59f571106db9c9642e2db5673b4040</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::Vector4D</name>
    <filename>structmirtk_1_1Vector4D.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type>double</type>
      <name>Length</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a9c7a01739ddea43bd898c18a275a0ec1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Normalize</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a9e519cd9eea754a1acc672a1a15880b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a23f66eec7bd60cee960cd4c04bc42747</anchor>
      <arglist>(const Vector4D &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>Vector4D</type>
      <name>operator*</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>aa4e4e4775f23089067c9b6de8d7aae44</anchor>
      <arglist>(S s) const</arglist>
    </member>
    <member kind="function">
      <type>Vector4D &amp;</type>
      <name>operator*=</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>ac1d323b54a6399f598d2e03b90edb4b5</anchor>
      <arglist>(S s)</arglist>
    </member>
    <member kind="function">
      <type>Vector4D &amp;</type>
      <name>operator*=</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a51b14776c159830bd11cdb12d9b1f0bf</anchor>
      <arglist>(const Vector4D &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector4D</type>
      <name>operator+</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a28052bc7400dca9c71f5963575047a99</anchor>
      <arglist>(S s) const</arglist>
    </member>
    <member kind="function">
      <type>Vector4D</type>
      <name>operator+</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>ab61c82aeb327ade8b2ed7bb6d8db2def</anchor>
      <arglist>(const Vector4D &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>Vector4D &amp;</type>
      <name>operator+=</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a53abb880049fe456341be9fa099f3e8c</anchor>
      <arglist>(S s)</arglist>
    </member>
    <member kind="function">
      <type>Vector4D &amp;</type>
      <name>operator+=</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>afbea5576128c21cbd94ae3e65e081ed5</anchor>
      <arglist>(const Vector4D &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector4D</type>
      <name>operator-</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>aca7317407572242eea8f68b2ca3c2085</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector4D</type>
      <name>operator-</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>abe0c54f5860c1a9058e3c9eb6f784766</anchor>
      <arglist>(S s) const</arglist>
    </member>
    <member kind="function">
      <type>Vector4D</type>
      <name>operator-</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a288172e6d73971b6f2e67e9a0b30630c</anchor>
      <arglist>(const Vector4D &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>Vector4D &amp;</type>
      <name>operator-=</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a94878a053b718b08769e98a63e13faf9</anchor>
      <arglist>(S s)</arglist>
    </member>
    <member kind="function">
      <type>Vector4D &amp;</type>
      <name>operator-=</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>ae6c1ce9af65a1ec07d75d6029cf4a5ee</anchor>
      <arglist>(const Vector4D &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector4D</type>
      <name>operator/</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a427d144544296ffba41fd11601e2a319</anchor>
      <arglist>(const Vector4D &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>Vector4D</type>
      <name>operator/</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a1bea4d1a45fe6eb6e93d4cf877996593</anchor>
      <arglist>(S s) const</arglist>
    </member>
    <member kind="function">
      <type>Vector4D &amp;</type>
      <name>operator/=</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a85674e3648aa62b5469141e65ff39e74</anchor>
      <arglist>(const Vector4D &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector4D &amp;</type>
      <name>operator/=</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a75fa101561918f8844bb0b83b5690191</anchor>
      <arglist>(S s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>abe3096a0ef3637f6af08cd02f1702731</anchor>
      <arglist>(const Vector4D &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>adb688e30a6a39aede868387a0bf61603</anchor>
      <arglist>(const Vector4D &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>Vector4D &amp;</type>
      <name>operator=</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>afbc865ae5233999a7e89dc4de075f4b8</anchor>
      <arglist>(T s)</arglist>
    </member>
    <member kind="function">
      <type>Vector4D &amp;</type>
      <name>operator=</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a29d264e35f994c79e8b1a5c0173605a9</anchor>
      <arglist>(const Vector4D &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>ab5d8f228ab2a717878470b37745e1dcd</anchor>
      <arglist>(const Vector4D &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a31745cfb76a45b2fa69f4fc65fd5ab08</anchor>
      <arglist>(const Vector4D &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a96a52c9834b056fd329e05d463dd0a4d</anchor>
      <arglist>(const Vector4D &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector4D</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a6f8fed7a4345657cf71359150147184a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector4D</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a329f3b1de67d296ade5a827ba7649308</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector4D</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a94b2a8d9d939faff642fd974d55bddfd</anchor>
      <arglist>(T x, T y, T z, T t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector4D</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>ad4b80fefdd95b839277e3c9bea52d7b0</anchor>
      <arglist>(const Vector4D &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>DotProduct</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>ab9c6a079e9c06a0019bb84183891d369</anchor>
      <arglist>(const Vector4D &amp;v1, const Vector4D &amp;v2)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>_t</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a34fbc4663200b93e8118c279e703e94d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>_x</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a73e89ed0c1350fbc289a5afaf3e803da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>_y</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a0e949bc751ff49daaa7b6397a20c09b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>_z</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>ad5c63ce5bac22b6f056edcc0562c4215</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Vector4D&lt; double &gt;</name>
    <filename>structmirtk_1_1Vector4D.html</filename>
    <member kind="function">
      <type>double</type>
      <name>Length</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a9c7a01739ddea43bd898c18a275a0ec1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Normalize</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a9e519cd9eea754a1acc672a1a15880b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a23f66eec7bd60cee960cd4c04bc42747</anchor>
      <arglist>(const Vector4D &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>Vector4D</type>
      <name>operator*</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>aa4e4e4775f23089067c9b6de8d7aae44</anchor>
      <arglist>(S s) const</arglist>
    </member>
    <member kind="function">
      <type>Vector4D &amp;</type>
      <name>operator*=</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>ac1d323b54a6399f598d2e03b90edb4b5</anchor>
      <arglist>(S s)</arglist>
    </member>
    <member kind="function">
      <type>Vector4D &amp;</type>
      <name>operator*=</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a51b14776c159830bd11cdb12d9b1f0bf</anchor>
      <arglist>(const Vector4D &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector4D</type>
      <name>operator+</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a28052bc7400dca9c71f5963575047a99</anchor>
      <arglist>(S s) const</arglist>
    </member>
    <member kind="function">
      <type>Vector4D</type>
      <name>operator+</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>ab61c82aeb327ade8b2ed7bb6d8db2def</anchor>
      <arglist>(const Vector4D &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>Vector4D &amp;</type>
      <name>operator+=</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a53abb880049fe456341be9fa099f3e8c</anchor>
      <arglist>(S s)</arglist>
    </member>
    <member kind="function">
      <type>Vector4D &amp;</type>
      <name>operator+=</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>afbea5576128c21cbd94ae3e65e081ed5</anchor>
      <arglist>(const Vector4D &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector4D</type>
      <name>operator-</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>aca7317407572242eea8f68b2ca3c2085</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector4D</type>
      <name>operator-</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>abe0c54f5860c1a9058e3c9eb6f784766</anchor>
      <arglist>(S s) const</arglist>
    </member>
    <member kind="function">
      <type>Vector4D</type>
      <name>operator-</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a288172e6d73971b6f2e67e9a0b30630c</anchor>
      <arglist>(const Vector4D &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>Vector4D &amp;</type>
      <name>operator-=</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a94878a053b718b08769e98a63e13faf9</anchor>
      <arglist>(S s)</arglist>
    </member>
    <member kind="function">
      <type>Vector4D &amp;</type>
      <name>operator-=</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>ae6c1ce9af65a1ec07d75d6029cf4a5ee</anchor>
      <arglist>(const Vector4D &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector4D</type>
      <name>operator/</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a427d144544296ffba41fd11601e2a319</anchor>
      <arglist>(const Vector4D &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>Vector4D</type>
      <name>operator/</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a1bea4d1a45fe6eb6e93d4cf877996593</anchor>
      <arglist>(S s) const</arglist>
    </member>
    <member kind="function">
      <type>Vector4D &amp;</type>
      <name>operator/=</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a85674e3648aa62b5469141e65ff39e74</anchor>
      <arglist>(const Vector4D &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector4D &amp;</type>
      <name>operator/=</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a75fa101561918f8844bb0b83b5690191</anchor>
      <arglist>(S s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>abe3096a0ef3637f6af08cd02f1702731</anchor>
      <arglist>(const Vector4D &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>adb688e30a6a39aede868387a0bf61603</anchor>
      <arglist>(const Vector4D &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>Vector4D &amp;</type>
      <name>operator=</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>afbc865ae5233999a7e89dc4de075f4b8</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <type>Vector4D &amp;</type>
      <name>operator=</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a29d264e35f994c79e8b1a5c0173605a9</anchor>
      <arglist>(const Vector4D &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>ab5d8f228ab2a717878470b37745e1dcd</anchor>
      <arglist>(const Vector4D &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a31745cfb76a45b2fa69f4fc65fd5ab08</anchor>
      <arglist>(const Vector4D &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a96a52c9834b056fd329e05d463dd0a4d</anchor>
      <arglist>(const Vector4D &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector4D</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a6f8fed7a4345657cf71359150147184a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector4D</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a329f3b1de67d296ade5a827ba7649308</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector4D</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a94b2a8d9d939faff642fd974d55bddfd</anchor>
      <arglist>(double x, double y, double z, double t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector4D</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>ad4b80fefdd95b839277e3c9bea52d7b0</anchor>
      <arglist>(const Vector4D &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>DotProduct</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>ab9c6a079e9c06a0019bb84183891d369</anchor>
      <arglist>(const Vector4D &amp;v1, const Vector4D &amp;v2)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_t</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a34fbc4663200b93e8118c279e703e94d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_x</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a73e89ed0c1350fbc289a5afaf3e803da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_y</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a0e949bc751ff49daaa7b6397a20c09b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_z</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>ad5c63ce5bac22b6f056edcc0562c4215</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Vector4D&lt; int &gt;</name>
    <filename>structmirtk_1_1Vector4D.html</filename>
    <member kind="function">
      <type>double</type>
      <name>Length</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a9c7a01739ddea43bd898c18a275a0ec1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Normalize</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a9e519cd9eea754a1acc672a1a15880b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a23f66eec7bd60cee960cd4c04bc42747</anchor>
      <arglist>(const Vector4D &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>Vector4D</type>
      <name>operator*</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>aa4e4e4775f23089067c9b6de8d7aae44</anchor>
      <arglist>(S s) const</arglist>
    </member>
    <member kind="function">
      <type>Vector4D &amp;</type>
      <name>operator*=</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>ac1d323b54a6399f598d2e03b90edb4b5</anchor>
      <arglist>(S s)</arglist>
    </member>
    <member kind="function">
      <type>Vector4D &amp;</type>
      <name>operator*=</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a51b14776c159830bd11cdb12d9b1f0bf</anchor>
      <arglist>(const Vector4D &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector4D</type>
      <name>operator+</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a28052bc7400dca9c71f5963575047a99</anchor>
      <arglist>(S s) const</arglist>
    </member>
    <member kind="function">
      <type>Vector4D</type>
      <name>operator+</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>ab61c82aeb327ade8b2ed7bb6d8db2def</anchor>
      <arglist>(const Vector4D &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>Vector4D &amp;</type>
      <name>operator+=</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a53abb880049fe456341be9fa099f3e8c</anchor>
      <arglist>(S s)</arglist>
    </member>
    <member kind="function">
      <type>Vector4D &amp;</type>
      <name>operator+=</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>afbea5576128c21cbd94ae3e65e081ed5</anchor>
      <arglist>(const Vector4D &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector4D</type>
      <name>operator-</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>aca7317407572242eea8f68b2ca3c2085</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector4D</type>
      <name>operator-</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>abe0c54f5860c1a9058e3c9eb6f784766</anchor>
      <arglist>(S s) const</arglist>
    </member>
    <member kind="function">
      <type>Vector4D</type>
      <name>operator-</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a288172e6d73971b6f2e67e9a0b30630c</anchor>
      <arglist>(const Vector4D &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>Vector4D &amp;</type>
      <name>operator-=</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a94878a053b718b08769e98a63e13faf9</anchor>
      <arglist>(S s)</arglist>
    </member>
    <member kind="function">
      <type>Vector4D &amp;</type>
      <name>operator-=</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>ae6c1ce9af65a1ec07d75d6029cf4a5ee</anchor>
      <arglist>(const Vector4D &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector4D</type>
      <name>operator/</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a427d144544296ffba41fd11601e2a319</anchor>
      <arglist>(const Vector4D &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>Vector4D</type>
      <name>operator/</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a1bea4d1a45fe6eb6e93d4cf877996593</anchor>
      <arglist>(S s) const</arglist>
    </member>
    <member kind="function">
      <type>Vector4D &amp;</type>
      <name>operator/=</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a85674e3648aa62b5469141e65ff39e74</anchor>
      <arglist>(const Vector4D &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector4D &amp;</type>
      <name>operator/=</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a75fa101561918f8844bb0b83b5690191</anchor>
      <arglist>(S s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>abe3096a0ef3637f6af08cd02f1702731</anchor>
      <arglist>(const Vector4D &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>adb688e30a6a39aede868387a0bf61603</anchor>
      <arglist>(const Vector4D &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>Vector4D &amp;</type>
      <name>operator=</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>afbc865ae5233999a7e89dc4de075f4b8</anchor>
      <arglist>(int s)</arglist>
    </member>
    <member kind="function">
      <type>Vector4D &amp;</type>
      <name>operator=</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a29d264e35f994c79e8b1a5c0173605a9</anchor>
      <arglist>(const Vector4D &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>ab5d8f228ab2a717878470b37745e1dcd</anchor>
      <arglist>(const Vector4D &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a31745cfb76a45b2fa69f4fc65fd5ab08</anchor>
      <arglist>(const Vector4D &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a96a52c9834b056fd329e05d463dd0a4d</anchor>
      <arglist>(const Vector4D &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector4D</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a6f8fed7a4345657cf71359150147184a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector4D</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a329f3b1de67d296ade5a827ba7649308</anchor>
      <arglist>(int x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector4D</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a94b2a8d9d939faff642fd974d55bddfd</anchor>
      <arglist>(int x, int y, int z, int t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector4D</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>ad4b80fefdd95b839277e3c9bea52d7b0</anchor>
      <arglist>(const Vector4D &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>DotProduct</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>ab9c6a079e9c06a0019bb84183891d369</anchor>
      <arglist>(const Vector4D &amp;v1, const Vector4D &amp;v2)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_t</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a34fbc4663200b93e8118c279e703e94d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_x</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a73e89ed0c1350fbc289a5afaf3e803da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_y</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a0e949bc751ff49daaa7b6397a20c09b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_z</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>ad5c63ce5bac22b6f056edcc0562c4215</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::VectorND</name>
    <filename>structmirtk_1_1VectorND.html</filename>
    <templarg>N</templarg>
    <templarg>T</templarg>
    <member kind="function">
      <type>double</type>
      <name>DotProduct</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>ad0ae889b687ee3f27c73c310dde562e7</anchor>
      <arglist>(const VectorND &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Length</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>a683acd0b3b3bc4335434019612ee0165</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Normalize</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>a213688576d7a806602d2bfbfce61c418</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const T *</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>a63b911a0e80c9516cffab42da16b239a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T*</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>ad1039a9d3a7163644f5b948410c550e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>a06418434eec7c5e7cd0aef024cac68f4</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>aba1334819a2b6474f332c59bc0140311</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>ab3dd718579da096f46c22468aebc0409</anchor>
      <arglist>(const VectorND&lt; N, T2 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>ad971965b48af84f9028303a9f7b79dc7</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>ad41fb1596796f93960615d2e4ed73b8e</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>VectorND</type>
      <name>operator*</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>a54bfa64200ff0b05e8c1f75f5532d8b3</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>VectorND</type>
      <name>operator*</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>a8f2e364b48668202006065f1d29c6afa</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>VectorND</type>
      <name>operator*</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>a7895d727952248cd9a52cd693344d56d</anchor>
      <arglist>(const VectorND&lt; N, T2 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>VectorND &amp;</type>
      <name>operator*=</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>af948beae15e5ba5deb27b46d46e5de88</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>VectorND &amp;</type>
      <name>operator*=</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>aa118d72eee21142b0d006419856a89d8</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>VectorND &amp;</type>
      <name>operator*=</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>af2b250fec94e3a8ecd3509fb46ce53ad</anchor>
      <arglist>(const VectorND&lt; N, T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>VectorND</type>
      <name>operator+</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>ada7ca0157c42785e166baf8f31d50719</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>VectorND</type>
      <name>operator+</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>a191752506396a3db1e894c35e74df760</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>VectorND</type>
      <name>operator+</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>a1f4e24be6ffa3479c82d5d0ac26b07b0</anchor>
      <arglist>(const VectorND&lt; N, T2 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>VectorND &amp;</type>
      <name>operator+=</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>aefeed13f921c0d3773d56185965ff609</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>VectorND &amp;</type>
      <name>operator+=</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>af8b9b0aec903a9c15e93683039614f8b</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>VectorND &amp;</type>
      <name>operator+=</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>a62120da89a7e29690f2c47d6644fc56f</anchor>
      <arglist>(const VectorND&lt; N, T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>VectorND</type>
      <name>operator-</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>a486832ce520f01712df0eb44f3957e2a</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>VectorND</type>
      <name>operator-</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>a3b5a7623da0a66eb1bb49a5c7c1f7e34</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>VectorND</type>
      <name>operator-</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>a197f87250283857b960d399efbf0e089</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorND</type>
      <name>operator-</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>aab3c7c6768c46448ec793d01c080d8f0</anchor>
      <arglist>(const VectorND&lt; N, T2 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>VectorND &amp;</type>
      <name>operator-=</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>af714fa79cd13dc79bf1161be9ab384ba</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>VectorND &amp;</type>
      <name>operator-=</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>abe56ad451ce7c0419c158848e469e764</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>VectorND &amp;</type>
      <name>operator-=</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>a8a1dc5d36c2a892e13b68c4ef3783225</anchor>
      <arglist>(const VectorND&lt; N, T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>VectorND</type>
      <name>operator/</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>aba7cbed159e5740ca33d42d8dc042ab4</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>VectorND</type>
      <name>operator/</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>af2f3d4c810f65df3b1935eb4eb98efa5</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>VectorND</type>
      <name>operator/</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>ab96917caa730eb99c57afe71848258b7</anchor>
      <arglist>(const VectorND&lt; N, T2 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>VectorND &amp;</type>
      <name>operator/=</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>a932809545470d3476267864a213a1acf</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>VectorND &amp;</type>
      <name>operator/=</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>abdb0993b261be118c0a5f8501377ed6c</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>VectorND &amp;</type>
      <name>operator/=</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>a995bff7b65cdf9b5a5f47fe73498795a</anchor>
      <arglist>(const VectorND&lt; N, T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>ab8761547b619be529daabaa84e7e0c6e</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>a1c5e1b675b91f7177c0d2c9b09d735ac</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>a3b79cbd0cd68fbaa3e07c48b1db8f4bc</anchor>
      <arglist>(const VectorND&lt; N, T2 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>a0cb673d9d2db785fc885639e171d1cfa</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>a312b49df99f2b9cc7b4a625d5c83907c</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>ab214fc3984f0b55fe2d8ec4d69b131f0</anchor>
      <arglist>(const VectorND&lt; N, T2 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>VectorND &amp;</type>
      <name>operator=</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>a197134a16315209fdcd07cd820a4124e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>VectorND &amp;</type>
      <name>operator=</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>a932a862799eabe004d1a25f1a579eef4</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>VectorND &amp;</type>
      <name>operator=</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>aae2bb5edd09b9b174c2ffba09ac7035a</anchor>
      <arglist>(const VectorND&lt; N, T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>a05c1084a98824a08f84bbbc487c1cffa</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>ad96951e60048f95f6cbbbb93aec25dab</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>a15392178e1fd5779318174425a5d8074</anchor>
      <arglist>(const VectorND&lt; N, T2 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>a804681717b0739fdb1f5ae559d660b2c</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>a8989b02340427772d9bc9666aaefd937</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>a171bf2f9883a9f667c75b8be8f449c79</anchor>
      <arglist>(const VectorND&lt; N, T2 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>a182b546d8ac023f026bf620ea19a305a</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>aae3eb22dafbee63faa22ea5efbed7f24</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>ac9e16303fe6abd03767b51e7d3292d96</anchor>
      <arglist>(const VectorND&lt; N, T2 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SquaredLength</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>ab5ee0a34d62315bf80791e74acb427f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorND</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>a4b836fb8a8142ac9c78964df03089f98</anchor>
      <arglist>(T=T(0))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorND</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>a7f1b6b8152ea0b409af1613c3aaf814e</anchor>
      <arglist>(const T[N])</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorND</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>a6ea41e877e99016d3352eac63974be9e</anchor>
      <arglist>(const Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorND</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>a66b96a4033341014847e6308633bcf59</anchor>
      <arglist>(const VectorND&lt; N, T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>Rows</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>acab0da0e6ad2a0c1d7a173271d52f56f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>_v</name>
      <anchorfile>structmirtk_1_1VectorND.html</anchorfile>
      <anchor>a71bdb45f97188054252c44b9919ebc90</anchor>
      <arglist>[N]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::VelocityToDisplacementField</name>
    <filename>classmirtk_1_1VelocityToDisplacementField.html</filename>
    <templarg></templarg>
    <base>mirtk::ImageToImage</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1VelocityToDisplacementField.html</anchorfile>
      <anchor>afa0568e3c82ae1a08c28dc7e3035f6d8</anchor>
      <arglist>(int, const ImageType *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ImageType *</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1VelocityToDisplacementField.html</anchorfile>
      <anchor>a3efb87a104266d9e06405308c804f7e1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VelocityToDisplacementField</name>
      <anchorfile>classmirtk_1_1VelocityToDisplacementField.html</anchorfile>
      <anchor>a03c1a7202ccf1b6d47c726a47f40e6d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1VelocityToDisplacementField.html</anchorfile>
      <anchor>abb33f1573ab69afc3c12af31175cc0d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1VelocityToDisplacementField.html</anchorfile>
      <anchor>ae07e3ed548871410747bcbedcdb04f8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>VelocityToDisplacementField</name>
      <anchorfile>classmirtk_1_1VelocityToDisplacementField.html</anchorfile>
      <anchor>ad5f1241e87d96756709002632a4d768b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ImageType *</type>
      <name>_InputDisplacementField</name>
      <anchorfile>classmirtk_1_1VelocityToDisplacementField.html</anchorfile>
      <anchor>a4030e54979ecc32a8395cb14b9458784</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::VelocityToDisplacementFieldEuler</name>
    <filename>classmirtk_1_1VelocityToDisplacementFieldEuler.html</filename>
    <templarg></templarg>
    <base>mirtk::VelocityToDisplacementField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1VelocityToDisplacementFieldEuler.html</anchorfile>
      <anchor>ad596ff689f226b813e4ca5d6d2593239</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VelocityToDisplacementFieldEuler</name>
      <anchorfile>classmirtk_1_1VelocityToDisplacementFieldEuler.html</anchorfile>
      <anchor>af51a95a1ef8f0debfadeb5e9cc7a6985</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VelocityToDisplacementFieldEuler</name>
      <anchorfile>classmirtk_1_1VelocityToDisplacementFieldEuler.html</anchorfile>
      <anchor>a4b507f1374ae3aeb5d7e6e82757d6b4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1VelocityToDisplacementFieldEuler.html</anchorfile>
      <anchor>a6ebcbf5fa40d78aa6dc1c5905d575758</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>InterpolateImageFunction *</type>
      <name>_VelocityInterpolator</name>
      <anchorfile>classmirtk_1_1VelocityToDisplacementFieldEuler.html</anchorfile>
      <anchor>a3af92d3d4b648b0b1759606bc7cd79cb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::VelocityToDisplacementFieldSS</name>
    <filename>classmirtk_1_1VelocityToDisplacementFieldSS.html</filename>
    <templarg>TVoxel</templarg>
    <base>mirtk::VelocityToDisplacementField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1VelocityToDisplacementFieldSS.html</anchorfile>
      <anchor>aebf2703708b0f9ff16fd637710502127</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VelocityToDisplacementFieldSS</name>
      <anchorfile>classmirtk_1_1VelocityToDisplacementFieldSS.html</anchorfile>
      <anchor>a722ca27eca8a986024cd4096bbced310</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VelocityToDisplacementFieldSS</name>
      <anchorfile>classmirtk_1_1VelocityToDisplacementFieldSS.html</anchorfile>
      <anchor>a8f6fdbc2288fdbb605b719512ba35838</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1VelocityToDisplacementFieldSS.html</anchorfile>
      <anchor>a11eb61a95b17ea73c102b771fe7074e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1VelocityToDisplacementFieldSS.html</anchorfile>
      <anchor>a67b1d3a505a898c7dfe540050f020a5f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::Version</name>
    <filename>classmirtk_1_1Version.html</filename>
    <base>mirtk::Object</base>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classmirtk_1_1Version.html</anchorfile>
      <anchor>ae3f15cdc02ba7e8d7cc7544d6c7ad23d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classmirtk_1_1Version.html</anchorfile>
      <anchor>a04ed9f246bb0cf84f693fef7cf216e8c</anchor>
      <arglist>(const Version &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classmirtk_1_1Version.html</anchorfile>
      <anchor>a62bd04ece1250d6699d4e0ca5c63e19d</anchor>
      <arglist>(const Version &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classmirtk_1_1Version.html</anchorfile>
      <anchor>a3056acf27511b1dbc8b46de488dfc443</anchor>
      <arglist>(const Version &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Version &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1Version.html</anchorfile>
      <anchor>af6cf15926ee9d596a4ba37a47daccf63</anchor>
      <arglist>(const Version &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmirtk_1_1Version.html</anchorfile>
      <anchor>af886fdde5de3baf740713b5d1b046b07</anchor>
      <arglist>(const Version &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classmirtk_1_1Version.html</anchorfile>
      <anchor>af8e1ce01bf0237a7f8555fa18f0d7267</anchor>
      <arglist>(const Version &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classmirtk_1_1Version.html</anchorfile>
      <anchor>a7fa4c83cc197efeda4c8df163d4a0373</anchor>
      <arglist>(const Version &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>ToString</name>
      <anchorfile>classmirtk_1_1Version.html</anchorfile>
      <anchor>a5bc769d16d4681744f2dbe99d86f48a1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Version</name>
      <anchorfile>classmirtk_1_1Version.html</anchorfile>
      <anchor>a5d82b6da925b02adb5cc8d3df96c7fba</anchor>
      <arglist>(unsigned int major=0u, unsigned int minor=0u, unsigned int patch=0u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Version</name>
      <anchorfile>classmirtk_1_1Version.html</anchorfile>
      <anchor>a928757bbda7d0697dd44d3b1837b609e</anchor>
      <arglist>(int major, int minor=0, int patch=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Version</name>
      <anchorfile>classmirtk_1_1Version.html</anchorfile>
      <anchor>a0179ebf30bcc07360ae3db6750d27cdc</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Version</name>
      <anchorfile>classmirtk_1_1Version.html</anchorfile>
      <anchor>af509c3c10f3c0caaa02e7a9c33982058</anchor>
      <arglist>(const Version &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::VolumeMapper</name>
    <filename>classmirtk_1_1VolumeMapper.html</filename>
    <base>mirtk::Object</base>
    <member kind="function">
      <type>int</type>
      <name>NumberOfComponents</name>
      <anchorfile>classmirtk_1_1VolumeMapper.html</anchorfile>
      <anchor>a86838756652c57f2b175a38c20039cb1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1VolumeMapper.html</anchorfile>
      <anchor>a498fab19ea2eb2c354ef7cf98febb324</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VolumeMapper</name>
      <anchorfile>classmirtk_1_1VolumeMapper.html</anchorfile>
      <anchor>a7a889ab8a47eea4d01448a0b0834ce8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1VolumeMapper.html</anchorfile>
      <anchor>adf1e8230f2bed164980f2e94132c887a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1VolumeMapper.html</anchorfile>
      <anchor>ab300201242f2e0b4971e56f64b1c502f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>InitializeBoundary</name>
      <anchorfile>classmirtk_1_1VolumeMapper.html</anchorfile>
      <anchor>a03df7dbc8e8d89ca4f2f2b8fb44b4a30</anchor>
      <arglist>(vtkPointSet *, vtkDataArray *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>VolumeMapper &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1VolumeMapper.html</anchorfile>
      <anchor>a4b5a10bf279e22d860c0965bc6c60f92</anchor>
      <arglist>(const VolumeMapper &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>Solve</name>
      <anchorfile>classmirtk_1_1VolumeMapper.html</anchorfile>
      <anchor>ad7f05d22cb5838c7559bd9dae9c4ba77</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>VolumeMapper</name>
      <anchorfile>classmirtk_1_1VolumeMapper.html</anchorfile>
      <anchor>ab61b8c934a5962a77c1702878e065f17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>VolumeMapper</name>
      <anchorfile>classmirtk_1_1VolumeMapper.html</anchorfile>
      <anchor>a5a7d20ac5810c0b0c846d7ed429aab03</anchor>
      <arglist>(const VolumeMapper &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::VolumePreservationConstraint</name>
    <filename>classmirtk_1_1VolumePreservationConstraint.html</filename>
    <base>mirtk::LogJacobianConstraint</base>
    <member kind="function">
      <type></type>
      <name>VolumePreservationConstraint</name>
      <anchorfile>classmirtk_1_1VolumePreservationConstraint.html</anchorfile>
      <anchor>ae68df095fe5d9e6e438a448c4981e6f9</anchor>
      <arglist>(const char *=&quot;&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VolumePreservationConstraint</name>
      <anchorfile>classmirtk_1_1VolumePreservationConstraint.html</anchorfile>
      <anchor>a0ed111bf205eb47339ffaec26c635039</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::VoxelCaster</name>
    <filename>structmirtk_1_1VoxelCaster.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static TOut</type>
      <name>Convert</name>
      <anchorfile>structmirtk_1_1VoxelCaster.html</anchorfile>
      <anchor>abdd8cf3bedf6d65f74a44b717e939584</anchor>
      <arglist>(const TIn &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::VoxelFunction</name>
    <filename>structmirtk_1_1VoxelFunction.html</filename>
    <member kind="function">
      <type>void</type>
      <name>join</name>
      <anchorfile>structmirtk_1_1VoxelFunction.html</anchorfile>
      <anchor>a977c267da6e57dcb2b271a74bed93278</anchor>
      <arglist>(VoxelFunction &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>split</name>
      <anchorfile>structmirtk_1_1VoxelFunction.html</anchorfile>
      <anchor>aa402d9eb666311f0d531be085606ecfe</anchor>
      <arglist>(VoxelFunction &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VoxelFunction</name>
      <anchorfile>structmirtk_1_1VoxelFunction.html</anchorfile>
      <anchor>a8505c7898ac7c99fd53ded108a072468</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>IsReduction</name>
      <anchorfile>structmirtk_1_1VoxelFunction.html</anchorfile>
      <anchor>a60101f3167d08c225e097ddc3aa823b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>const ImageAttributes *</type>
      <name>_Domain</name>
      <anchorfile>structmirtk_1_1VoxelFunction.html</anchorfile>
      <anchor>a7fda94a64076f4de071a22a2d1f8adfb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::VoxelReduction</name>
    <filename>structmirtk_1_1VoxelReduction.html</filename>
    <base>mirtk::VoxelFunction</base>
    <member kind="function">
      <type>void</type>
      <name>join</name>
      <anchorfile>structmirtk_1_1VoxelReduction.html</anchorfile>
      <anchor>ad6b6eaabaa8f3cf4d2dd6689d64db75c</anchor>
      <arglist>(VoxelFunction &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>split</name>
      <anchorfile>structmirtk_1_1VoxelReduction.html</anchorfile>
      <anchor>a321994f6f54e131772f1fab215cf4ff4</anchor>
      <arglist>(VoxelFunction &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>IsReduction</name>
      <anchorfile>structmirtk_1_1VoxelReduction.html</anchorfile>
      <anchor>a91737a664b29b5dfe74fa3927ed4109e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::NaryVoxelFunction::VoxelWiseWeightedSum</name>
    <filename>structmirtk_1_1NaryVoxelFunction_1_1VoxelWiseWeightedSum.html</filename>
    <base>mirtk::VoxelFunction</base>
  </compound>
  <compound kind="struct">
    <name>mirtk::ImplicitSurfaceUtils::WidthExtrema</name>
    <filename>structmirtk_1_1ImplicitSurfaceUtils_1_1WidthExtrema.html</filename>
    <base>mirtk::ImplicitSurfaceUtils::DistanceMeasurement</base>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>structmirtk_1_1ImplicitSurfaceUtils_1_1WidthExtrema.html</anchorfile>
      <anchor>afbf44a7c62fec8db200e96b33e521f95</anchor>
      <arglist>(const double p[3], const PointSamples &amp;dirs, double mind, double minh, double maxw, const DistanceFunction &amp;distance, double offset=.0, double tol=1e-3)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::Write</name>
    <filename>classmirtk_1_1data_1_1Write.html</filename>
    <base>mirtk::data::Op</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1Write.html</anchorfile>
      <anchor>a0a24106192396d4c4141a5ce15079f21</anchor>
      <arglist>(int n, double *data, bool *=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1data_1_1Write.html</anchorfile>
      <anchor>a255a6d4515e8340db05796e4213537bb</anchor>
      <arglist>(const char *fname, int dtype=MIRTK_VOXEL_DOUBLE, ImageAttributes attr=ImageAttributes())</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mirtk</name>
    <filename>namespacemirtk.html</filename>
    <namespace>mirtk::ConvolutionFunction</namespace>
    <namespace>mirtk::ForEachVoxelDomain</namespace>
    <namespace>mirtk::InterpolationDomain</namespace>
    <namespace>mirtk::MultipleVoxelTransformation</namespace>
    <namespace>mirtk::NaryVoxelFunction</namespace>
    <namespace>mirtk::TernaryVoxelFunction</namespace>
    <namespace>mirtk::UnaryVoxelFunction</namespace>
    <class kind="class">mirtk::AdaptiveLineSearch</class>
    <class kind="class">mirtk::AddBSplineSVFFD</class>
    <class kind="class">mirtk::AddBSplineSVFFD3D</class>
    <class kind="class">mirtk::AddDOFsOfBSplineSVFFD</class>
    <class kind="class">mirtk::AffineTransformation</class>
    <class kind="class">mirtk::AsConformalAsPossibleMapper</class>
    <class kind="class">mirtk::AuthalicSurfaceMapper</class>
    <class kind="class">mirtk::BalloonForce</class>
    <class kind="class">mirtk::BaseImage</class>
    <class kind="struct">mirtk::BinaryForEachVoxelBody</class>
    <class kind="struct">mirtk::BinaryForEachVoxelBody_1Const</class>
    <class kind="struct">mirtk::BinaryForEachVoxelBody_Const</class>
    <class kind="struct">mirtk::BinaryForEachVoxelIfBody</class>
    <class kind="struct">mirtk::BinaryForEachVoxelIfBody_1Const</class>
    <class kind="struct">mirtk::BinaryForEachVoxelIfBody_Const</class>
    <class kind="class">mirtk::blocked_range</class>
    <class kind="class">mirtk::blocked_range2d</class>
    <class kind="class">mirtk::blocked_range3d</class>
    <class kind="class">mirtk::BoundaryMapper</class>
    <class kind="class">mirtk::BoundarySegment</class>
    <class kind="class">mirtk::BoundarySegmentMapper</class>
    <class kind="class">mirtk::BoundarySegmentParameterizer</class>
    <class kind="class">mirtk::BoundaryToDiskMapper</class>
    <class kind="class">mirtk::BoundaryToPolygonMapper</class>
    <class kind="class">mirtk::BoundaryToSquareMapper</class>
    <class kind="class">mirtk::BrentLineSearch</class>
    <class kind="class">mirtk::BSpline</class>
    <class kind="class">mirtk::BSplineFreeFormTransformation3D</class>
    <class kind="class">mirtk::BSplineFreeFormTransformation4D</class>
    <class kind="class">mirtk::BSplineFreeFormTransformationStatistical</class>
    <class kind="class">mirtk::BSplineFreeFormTransformationSV</class>
    <class kind="class">mirtk::BSplineFreeFormTransformationTD</class>
    <class kind="class">mirtk::BSplineInterpolateImageFunction</class>
    <class kind="class">mirtk::BSplineInterpolateImageFunction2D</class>
    <class kind="class">mirtk::BSplineInterpolateImageFunction3D</class>
    <class kind="class">mirtk::BSplineInterpolateImageFunction4D</class>
    <class kind="class">mirtk::CellDataFilter</class>
    <class kind="class">mirtk::CharbonnierErrorFunction</class>
    <class kind="class">mirtk::ChordLengthBoundarySegmentParameterizer</class>
    <class kind="class">mirtk::ChordLengthSurfaceMapper</class>
    <class kind="class">mirtk::Cifstream</class>
    <class kind="class">mirtk::CityBlockDistanceTransform</class>
    <class kind="class">mirtk::CloseCellData</class>
    <class kind="class">mirtk::ClosePointData</class>
    <class kind="class">mirtk::ClosestCell</class>
    <class kind="class">mirtk::ClosestPoint</class>
    <class kind="class">mirtk::ClosestPointLabel</class>
    <class kind="class">mirtk::Closing</class>
    <class kind="class">mirtk::Cofstream</class>
    <class kind="class">mirtk::CompareIndicesOfArrayByDecreasingValue</class>
    <class kind="class">mirtk::CompareIndicesOfArrayByIncreasingValue</class>
    <class kind="class">mirtk::Configurable</class>
    <class kind="class">mirtk::ConformalSurfaceFlattening</class>
    <class kind="class">mirtk::ConjugateGradientDescent</class>
    <class kind="class">mirtk::ConnectedComponents</class>
    <class kind="class">mirtk::ConstExtrapolateImageFunction</class>
    <class kind="class">mirtk::ConstExtrapolateImageFunctionWithPeriodicTime</class>
    <class kind="class">mirtk::ConstGenericImageIterator</class>
    <class kind="class">mirtk::ConstImageIterator</class>
    <class kind="class">mirtk::CosineOfNormalizedGradientField</class>
    <class kind="class">mirtk::CSplineInterpolateImageFunction</class>
    <class kind="class">mirtk::CSplineInterpolateImageFunction2D</class>
    <class kind="class">mirtk::CSplineInterpolateImageFunction3D</class>
    <class kind="class">mirtk::CSplineInterpolateImageFunction4D</class>
    <class kind="class">mirtk::CubicBSplineConvolution</class>
    <class kind="class">mirtk::CubicBSplineInterpolateImageFunction</class>
    <class kind="class">mirtk::CubicBSplineInterpolateImageFunction2D</class>
    <class kind="class">mirtk::CubicBSplineInterpolateImageFunction3D</class>
    <class kind="class">mirtk::CubicBSplineInterpolateImageFunction4D</class>
    <class kind="class">mirtk::CurrentsDistance</class>
    <class kind="class">mirtk::CurvatureConstraint</class>
    <class kind="class">mirtk::DataFidelity</class>
    <class kind="class">mirtk::DeformableSurfaceDebugger</class>
    <class kind="class">mirtk::DeformableSurfaceLogger</class>
    <class kind="class">mirtk::DeformableSurfaceModel</class>
    <class kind="class">mirtk::DifferenceOfCompositionLieBracketImageFilter3D</class>
    <class kind="class">mirtk::DilateCellData</class>
    <class kind="class">mirtk::DilatePointData</class>
    <class kind="class">mirtk::Dilation</class>
    <class kind="class">mirtk::DisplacementToVelocityField</class>
    <class kind="class">mirtk::DisplacementToVelocityFieldBCH</class>
    <class kind="class">mirtk::DistanceErrorFunction</class>
    <class kind="struct">mirtk::double2x2</class>
    <class kind="struct">mirtk::double3x3</class>
    <class kind="struct">mirtk::double3x4</class>
    <class kind="struct">mirtk::double4x4</class>
    <class kind="class">mirtk::Downsampling</class>
    <class kind="class">mirtk::EdgeConnectivity</class>
    <class kind="class">mirtk::EdgeIterator</class>
    <class kind="class">mirtk::EdgeTable</class>
    <class kind="class">mirtk::EnergyTerm</class>
    <class kind="class">mirtk::EnergyThreshold</class>
    <class kind="class">mirtk::ErodeCellData</class>
    <class kind="class">mirtk::ErodePointData</class>
    <class kind="class">mirtk::Erosion</class>
    <class kind="class">mirtk::EulerMethod</class>
    <class kind="class">mirtk::EulerMethodWithDamping</class>
    <class kind="class">mirtk::EulerMethodWithMomentum</class>
    <class kind="class">mirtk::EvaluateBSplineSVFFD</class>
    <class kind="class">mirtk::EvaluateBSplineSVFFD3D</class>
    <class kind="class">mirtk::EvaluateGlobalSVFFD</class>
    <class kind="class">mirtk::EvaluateGlobalSVFFD3D</class>
    <class kind="class">mirtk::EventDelegate</class>
    <class kind="class">mirtk::ExternalForce</class>
    <class kind="class">mirtk::ExtrapolateImageFunction</class>
    <class kind="class">mirtk::FastCubicBSplineInterpolateImageFunction</class>
    <class kind="class">mirtk::FastCubicBSplineInterpolateImageFunction2D</class>
    <class kind="class">mirtk::FastCubicBSplineInterpolateImageFunction3D</class>
    <class kind="class">mirtk::FastCubicBSplineInterpolateImageFunction4D</class>
    <class kind="class">mirtk::FastLinearImageGradientFunction</class>
    <class kind="class">mirtk::FastLinearImageGradientFunction2D</class>
    <class kind="class">mirtk::FastLinearImageGradientFunction3D</class>
    <class kind="class">mirtk::FiducialMatch</class>
    <class kind="class">mirtk::FiducialRegistrationError</class>
    <class kind="class">mirtk::FixedBoundarySurfaceMapper</class>
    <class kind="struct">mirtk::float2x2</class>
    <class kind="struct">mirtk::float3x3</class>
    <class kind="struct">mirtk::float3x4</class>
    <class kind="struct">mirtk::float4x4</class>
    <class kind="class">mirtk::FluidFreeFormTransformation</class>
    <class kind="struct">mirtk::ForEachVoxelBody</class>
    <class kind="struct">mirtk::ForEachVoxelIfBody</class>
    <class kind="class">mirtk::FreeBoundarySurfaceMapper</class>
    <class kind="class">mirtk::FreeFormTransformation</class>
    <class kind="class">mirtk::FreeFormTransformation3D</class>
    <class kind="class">mirtk::FreeFormTransformation4D</class>
    <class kind="class">mirtk::FreeFormTransformationEmbeddedRungeKutta</class>
    <class kind="class">mirtk::FreeFormTransformationExplicitRungeKutta</class>
    <class kind="class">mirtk::FreeFormTransformationIntegrationRK4</class>
    <class kind="class">mirtk::FreeFormTransformationIntegrationRKBS23</class>
    <class kind="class">mirtk::FreeFormTransformationIntegrationRKCK45</class>
    <class kind="class">mirtk::FreeFormTransformationIntegrationRKDP45</class>
    <class kind="class">mirtk::FreeFormTransformationIntegrationRKE1</class>
    <class kind="class">mirtk::FreeFormTransformationIntegrationRKE2</class>
    <class kind="class">mirtk::FreeFormTransformationIntegrationRKEH12</class>
    <class kind="class">mirtk::FreeFormTransformationIntegrationRKF45</class>
    <class kind="class">mirtk::FreeFormTransformationIntegrationRKH2</class>
    <class kind="class">mirtk::FreeFormTransformationRungeKutta</class>
    <class kind="class">mirtk::FuzzyCorrespondence</class>
    <class kind="class">mirtk::GaussCurvatureConstraint</class>
    <class kind="class">mirtk::GaussianBlurring</class>
    <class kind="class">mirtk::GaussianBlurring2D</class>
    <class kind="class">mirtk::GaussianBlurring4D</class>
    <class kind="class">mirtk::GaussianBlurringWithPadding</class>
    <class kind="class">mirtk::GaussianBlurringWithPadding2D</class>
    <class kind="class">mirtk::GaussianErrorFunction</class>
    <class kind="class">mirtk::GaussianInterpolateImageFunction</class>
    <class kind="class">mirtk::GaussianInterpolateImageFunction2D</class>
    <class kind="class">mirtk::GaussianInterpolateImageFunction3D</class>
    <class kind="class">mirtk::GaussianInterpolateImageFunction4D</class>
    <class kind="class">mirtk::GaussianPyramidFilter</class>
    <class kind="class">mirtk::GenericBSplineInterpolateImageFunction</class>
    <class kind="class">mirtk::GenericBSplineInterpolateImageFunction2D</class>
    <class kind="class">mirtk::GenericBSplineInterpolateImageFunction3D</class>
    <class kind="class">mirtk::GenericBSplineInterpolateImageFunction4D</class>
    <class kind="class">mirtk::GenericConstExtrapolateImageFunction</class>
    <class kind="class">mirtk::GenericConstExtrapolateImageFunctionWithPeriodicTime</class>
    <class kind="class">mirtk::GenericCSplineInterpolateImageFunction</class>
    <class kind="class">mirtk::GenericCSplineInterpolateImageFunction2D</class>
    <class kind="class">mirtk::GenericCSplineInterpolateImageFunction3D</class>
    <class kind="class">mirtk::GenericCSplineInterpolateImageFunction4D</class>
    <class kind="class">mirtk::GenericCubicBSplineInterpolateImageFunction</class>
    <class kind="class">mirtk::GenericCubicBSplineInterpolateImageFunction2D</class>
    <class kind="class">mirtk::GenericCubicBSplineInterpolateImageFunction3D</class>
    <class kind="class">mirtk::GenericCubicBSplineInterpolateImageFunction4D</class>
    <class kind="class">mirtk::GenericExtrapolateImageFunction</class>
    <class kind="class">mirtk::GenericFastCubicBSplineInterpolateImageFunction</class>
    <class kind="class">mirtk::GenericFastCubicBSplineInterpolateImageFunction2D</class>
    <class kind="class">mirtk::GenericFastCubicBSplineInterpolateImageFunction3D</class>
    <class kind="class">mirtk::GenericFastCubicBSplineInterpolateImageFunction4D</class>
    <class kind="class">mirtk::GenericFastLinearImageGradientFunction</class>
    <class kind="class">mirtk::GenericFastLinearImageGradientFunction2D</class>
    <class kind="class">mirtk::GenericFastLinearImageGradientFunction3D</class>
    <class kind="class">mirtk::GenericGaussianInterpolateImageFunction</class>
    <class kind="class">mirtk::GenericGaussianInterpolateImageFunction2D</class>
    <class kind="class">mirtk::GenericGaussianInterpolateImageFunction3D</class>
    <class kind="class">mirtk::GenericGaussianInterpolateImageFunction4D</class>
    <class kind="class">mirtk::GenericImage</class>
    <class kind="class">mirtk::GenericImageGradientFunction</class>
    <class kind="class">mirtk::GenericImageIterator</class>
    <class kind="class">mirtk::GenericInterpolateImageFunction</class>
    <class kind="class">mirtk::GenericLinearImageGradientFunction</class>
    <class kind="class">mirtk::GenericLinearImageGradientFunction2D</class>
    <class kind="class">mirtk::GenericLinearImageGradientFunction3D</class>
    <class kind="class">mirtk::GenericLinearInterpolateImageFunction</class>
    <class kind="class">mirtk::GenericLinearInterpolateImageFunction2D</class>
    <class kind="class">mirtk::GenericLinearInterpolateImageFunction3D</class>
    <class kind="class">mirtk::GenericLinearInterpolateImageFunction4D</class>
    <class kind="class">mirtk::GenericMirrorExtrapolateImageFunction</class>
    <class kind="class">mirtk::GenericNearestNeighborExtrapolateImageFunction</class>
    <class kind="class">mirtk::GenericNearestNeighborInterpolateImageFunction</class>
    <class kind="class">mirtk::GenericRegistrationDebugger</class>
    <class kind="class">mirtk::GenericRegistrationFilter</class>
    <class kind="class">mirtk::GenericRegistrationLogger</class>
    <class kind="class">mirtk::GenericRepeatExtrapolateImageFunction</class>
    <class kind="class">mirtk::GenericSincInterpolateImageFunction</class>
    <class kind="class">mirtk::GenericSincInterpolateImageFunction2D</class>
    <class kind="class">mirtk::GenericSincInterpolateImageFunction3D</class>
    <class kind="class">mirtk::GenericSincInterpolateImageFunction4D</class>
    <class kind="class">mirtk::GenericSparseMatrix</class>
    <class kind="class">mirtk::GIPLImageReader</class>
    <class kind="class">mirtk::GIPLImageWriter</class>
    <class kind="class">mirtk::GradientDescent</class>
    <class kind="class">mirtk::GradientFieldSimilarity</class>
    <class kind="class">mirtk::GradientImageFilter</class>
    <class kind="class">mirtk::HarmonicSurfaceMapper</class>
    <class kind="class">mirtk::HarmonicTetrahedralMeshMapper</class>
    <class kind="class">mirtk::HashImage</class>
    <class kind="class">mirtk::HessianImageFilter</class>
    <class kind="class">mirtk::Histogram1D</class>
    <class kind="class">mirtk::Histogram2D</class>
    <class kind="class">mirtk::HistogramImageSimilarity</class>
    <class kind="class">mirtk::HistogramMatching</class>
    <class kind="class">mirtk::HomogeneousTransformation</class>
    <class kind="class">mirtk::HomogeneousTransformationIterator</class>
    <class kind="struct">mirtk::ImageAttributes</class>
    <class kind="class">mirtk::ImageChannel</class>
    <class kind="class">mirtk::ImageCovariance</class>
    <class kind="class">mirtk::ImageEdgeDistance</class>
    <class kind="class">mirtk::ImageEdgeForce</class>
    <class kind="class">mirtk::ImageFrame</class>
    <class kind="class">mirtk::ImageFunction</class>
    <class kind="class">mirtk::ImageGradientFunction</class>
    <class kind="class">mirtk::ImageIterator</class>
    <class kind="class">mirtk::ImageReader</class>
    <class kind="class">mirtk::ImageReaderFactory</class>
    <class kind="class">mirtk::ImageRegion</class>
    <class kind="class">mirtk::ImageSequence</class>
    <class kind="class">mirtk::ImageSimilarity</class>
    <class kind="class">mirtk::ImageSurfaceStatistics</class>
    <class kind="class">mirtk::ImageToImage</class>
    <class kind="class">mirtk::ImageTransformation</class>
    <class kind="class">mirtk::ImageTransformationCache</class>
    <class kind="class">mirtk::ImageWriter</class>
    <class kind="class">mirtk::ImageWriterFactory</class>
    <class kind="class">mirtk::ImplicitSurfaceDistance</class>
    <class kind="class">mirtk::ImplicitSurfaceForce</class>
    <class kind="class">mirtk::Indent</class>
    <class kind="class">mirtk::IndexExtrapolateImageFunction</class>
    <class kind="class">mirtk::InexactLineSearch</class>
    <class kind="class">mirtk::InflationForce</class>
    <class kind="class">mirtk::InflationStoppingCriterion</class>
    <class kind="class">mirtk::IntensityCorrelationRatioXY</class>
    <class kind="class">mirtk::IntensityCorrelationRatioYX</class>
    <class kind="class">mirtk::IntensityCrossCorrelation</class>
    <class kind="class">mirtk::InternalForce</class>
    <class kind="class">mirtk::InterpolateImageFunction</class>
    <class kind="class">mirtk::IntrinsicLeastAreaDistortionSurfaceMapper</class>
    <class kind="class">mirtk::IntrinsicLeastEdgeLengthDistortionSurfaceMapper</class>
    <class kind="class">mirtk::IntrinsicSurfaceMapper</class>
    <class kind="class">mirtk::InverseAffineTransformation</class>
    <class kind="struct">mirtk::Iteration</class>
    <class kind="class">mirtk::JacobianConstraint</class>
    <class kind="class">mirtk::JointImageEntropy</class>
    <class kind="class">mirtk::LabelConsistency</class>
    <class kind="class">mirtk::LeastSquaresConformalSurfaceMapper</class>
    <class kind="class">mirtk::LieBracketImageFilter</class>
    <class kind="class">mirtk::LieBracketImageFilter2D</class>
    <class kind="class">mirtk::LieBracketImageFilter3D</class>
    <class kind="class">mirtk::LimitedMemoryBFGSDescent</class>
    <class kind="class">mirtk::LinearElasticityConstraint</class>
    <class kind="class">mirtk::LinearFixedBoundarySurfaceMapper</class>
    <class kind="class">mirtk::LinearFreeFormTransformation3D</class>
    <class kind="class">mirtk::LinearFreeFormTransformation4D</class>
    <class kind="class">mirtk::LinearFreeFormTransformationTD</class>
    <class kind="class">mirtk::LinearImageGradientFunction</class>
    <class kind="class">mirtk::LinearImageGradientFunction2D</class>
    <class kind="class">mirtk::LinearImageGradientFunction3D</class>
    <class kind="class">mirtk::LinearInterpolateImageFunction</class>
    <class kind="class">mirtk::LinearInterpolateImageFunction2D</class>
    <class kind="class">mirtk::LinearInterpolateImageFunction3D</class>
    <class kind="class">mirtk::LinearInterpolateImageFunction4D</class>
    <class kind="class">mirtk::LinearTetrahedralMeshMapper</class>
    <class kind="class">mirtk::LineSearch</class>
    <class kind="struct">mirtk::LineSearchStep</class>
    <class kind="class">mirtk::LocalOptimizer</class>
    <class kind="class">mirtk::LogJacobianConstraint</class>
    <class kind="class">mirtk::Mapping</class>
    <class kind="class">mirtk::Matlab</class>
    <class kind="class">mirtk::Matrix</class>
    <class kind="class">mirtk::MaximumCurvatureConstraint</class>
    <class kind="class">mirtk::MaxStepLineSearch</class>
    <class kind="class">mirtk::MeanCurvatureConstraint</class>
    <class kind="class">mirtk::MeanSquaredDisplacementError</class>
    <class kind="class">mirtk::MeanValueSurfaceMapper</class>
    <class kind="class">mirtk::MedianPointData</class>
    <class kind="class">mirtk::MeshFilter</class>
    <class kind="class">mirtk::MeshlessBiharmonicMap</class>
    <class kind="class">mirtk::MeshlessHarmonicMap</class>
    <class kind="class">mirtk::MeshlessHarmonicVolumeMapper</class>
    <class kind="class">mirtk::MeshlessMap</class>
    <class kind="class">mirtk::MeshlessVolumeMapper</class>
    <class kind="class">mirtk::MeshSmoothing</class>
    <class kind="class">mirtk::MetricDistortion</class>
    <class kind="class">mirtk::MinActiveStoppingCriterion</class>
    <class kind="class">mirtk::MirrorExtrapolateImageFunction</class>
    <class kind="class">mirtk::Module</class>
    <class kind="class">mirtk::MultiLevelFreeFormTransformation</class>
    <class kind="class">mirtk::MultiLevelStationaryVelocityTransformation</class>
    <class kind="class">mirtk::MultiLevelTransformation</class>
    <class kind="class">mirtk::MutualImageInformation</class>
    <class kind="class">mirtk::NearestNeighborExtrapolateImageFunction</class>
    <class kind="class">mirtk::NearestNeighborInterpolateImageFunction</class>
    <class kind="class">mirtk::NearOptimalIntrinsicSurfaceMapper</class>
    <class kind="class">mirtk::NegJacobianConstraint</class>
    <class kind="class">mirtk::NeighborhoodOffsets</class>
    <class kind="class">mirtk::NiftiImage</class>
    <class kind="struct">mirtk::NiftiImageInfo</class>
    <class kind="class">mirtk::NiftiImageReader</class>
    <class kind="class">mirtk::NiftiImageWriter</class>
    <class kind="struct">mirtk::NonaryForEachVoxelBody</class>
    <class kind="struct">mirtk::NonaryForEachVoxelBody_1Const</class>
    <class kind="struct">mirtk::NonaryForEachVoxelBody_2Const</class>
    <class kind="struct">mirtk::NonaryForEachVoxelBody_3Const</class>
    <class kind="struct">mirtk::NonaryForEachVoxelBody_4Const</class>
    <class kind="struct">mirtk::NonaryForEachVoxelBody_5Const</class>
    <class kind="struct">mirtk::NonaryForEachVoxelBody_6Const</class>
    <class kind="struct">mirtk::NonaryForEachVoxelBody_7Const</class>
    <class kind="struct">mirtk::NonaryForEachVoxelBody_8Const</class>
    <class kind="struct">mirtk::NonaryForEachVoxelBody_Const</class>
    <class kind="struct">mirtk::NonaryForEachVoxelIfBody</class>
    <class kind="struct">mirtk::NonaryForEachVoxelIfBody_1Const</class>
    <class kind="struct">mirtk::NonaryForEachVoxelIfBody_2Const</class>
    <class kind="struct">mirtk::NonaryForEachVoxelIfBody_3Const</class>
    <class kind="struct">mirtk::NonaryForEachVoxelIfBody_4Const</class>
    <class kind="struct">mirtk::NonaryForEachVoxelIfBody_5Const</class>
    <class kind="struct">mirtk::NonaryForEachVoxelIfBody_6Const</class>
    <class kind="struct">mirtk::NonaryForEachVoxelIfBody_7Const</class>
    <class kind="struct">mirtk::NonaryForEachVoxelIfBody_8Const</class>
    <class kind="struct">mirtk::NonaryForEachVoxelIfBody_Const</class>
    <class kind="class">mirtk::NonSelfIntersectionConstraint</class>
    <class kind="class">mirtk::NonSymmetricWeightsSurfaceMapper</class>
    <class kind="class">mirtk::NormalForce</class>
    <class kind="class">mirtk::NormalizedGradientFieldSimilarity</class>
    <class kind="class">mirtk::NormalizedIntensityCrossCorrelation</class>
    <class kind="class">mirtk::NormalizedMutualImageInformation</class>
    <class kind="class">mirtk::Object</class>
    <class kind="class">mirtk::ObjectFactory</class>
    <class kind="class">mirtk::ObjectiveFunction</class>
    <class kind="class">mirtk::Observable</class>
    <class kind="class">mirtk::Observer</class>
    <class kind="struct">mirtk::OctaryForEachVoxelBody</class>
    <class kind="struct">mirtk::OctaryForEachVoxelBody_1Const</class>
    <class kind="struct">mirtk::OctaryForEachVoxelBody_2Const</class>
    <class kind="struct">mirtk::OctaryForEachVoxelBody_3Const</class>
    <class kind="struct">mirtk::OctaryForEachVoxelBody_4Const</class>
    <class kind="struct">mirtk::OctaryForEachVoxelBody_5Const</class>
    <class kind="struct">mirtk::OctaryForEachVoxelBody_6Const</class>
    <class kind="struct">mirtk::OctaryForEachVoxelBody_7Const</class>
    <class kind="struct">mirtk::OctaryForEachVoxelBody_Const</class>
    <class kind="struct">mirtk::OctaryForEachVoxelIfBody</class>
    <class kind="struct">mirtk::OctaryForEachVoxelIfBody_1Const</class>
    <class kind="struct">mirtk::OctaryForEachVoxelIfBody_2Const</class>
    <class kind="struct">mirtk::OctaryForEachVoxelIfBody_3Const</class>
    <class kind="struct">mirtk::OctaryForEachVoxelIfBody_4Const</class>
    <class kind="struct">mirtk::OctaryForEachVoxelIfBody_5Const</class>
    <class kind="struct">mirtk::OctaryForEachVoxelIfBody_6Const</class>
    <class kind="struct">mirtk::OctaryForEachVoxelIfBody_7Const</class>
    <class kind="struct">mirtk::OctaryForEachVoxelIfBody_Const</class>
    <class kind="class">mirtk::OpenCellData</class>
    <class kind="class">mirtk::OpenPointData</class>
    <class kind="class">mirtk::PartialAffineTransformation</class>
    <class kind="class">mirtk::PartialBSplineFreeFormTransformationSV</class>
    <class kind="class">mirtk::PartialMultiLevelStationaryVelocityTransformation</class>
    <class kind="class">mirtk::PeakSignalToNoiseRatio</class>
    <class kind="class">mirtk::PeronaMalikErrorFunction</class>
    <class kind="class">mirtk::PGMImageReader</class>
    <class kind="class">mirtk::PGMImageWriter</class>
    <class kind="class">mirtk::PiecewiseLinearMap</class>
    <class kind="class">mirtk::Plane</class>
    <class kind="class">mirtk::PNGImageWriter</class>
    <class kind="class">mirtk::Point</class>
    <class kind="class">mirtk::PointCorrespondence</class>
    <class kind="class">mirtk::PointCorrespondenceDistance</class>
    <class kind="class">mirtk::PointDataFilter</class>
    <class kind="class">mirtk::PointLocator</class>
    <class kind="class">mirtk::PointSamples</class>
    <class kind="class">mirtk::PointSet</class>
    <class kind="class">mirtk::PointSetDistance</class>
    <class kind="class">mirtk::PointSetForce</class>
    <class kind="class">mirtk::Polyhedron</class>
    <class kind="class">mirtk::Polynomial</class>
    <class kind="class">mirtk::QuadraticCurvatureConstraint</class>
    <class kind="struct">mirtk::QuaternaryForEachVoxelBody</class>
    <class kind="struct">mirtk::QuaternaryForEachVoxelBody_1Const</class>
    <class kind="struct">mirtk::QuaternaryForEachVoxelBody_2Const</class>
    <class kind="struct">mirtk::QuaternaryForEachVoxelBody_3Const</class>
    <class kind="struct">mirtk::QuaternaryForEachVoxelBody_Const</class>
    <class kind="struct">mirtk::QuaternaryForEachVoxelIfBody</class>
    <class kind="struct">mirtk::QuaternaryForEachVoxelIfBody_1Const</class>
    <class kind="struct">mirtk::QuaternaryForEachVoxelIfBody_2Const</class>
    <class kind="struct">mirtk::QuaternaryForEachVoxelIfBody_3Const</class>
    <class kind="struct">mirtk::QuaternaryForEachVoxelIfBody_Const</class>
    <class kind="struct">mirtk::QuinaryForEachVoxelBody</class>
    <class kind="struct">mirtk::QuinaryForEachVoxelBody_1Const</class>
    <class kind="struct">mirtk::QuinaryForEachVoxelBody_2Const</class>
    <class kind="struct">mirtk::QuinaryForEachVoxelBody_3Const</class>
    <class kind="struct">mirtk::QuinaryForEachVoxelBody_4Const</class>
    <class kind="struct">mirtk::QuinaryForEachVoxelBody_Const</class>
    <class kind="struct">mirtk::QuinaryForEachVoxelIfBody</class>
    <class kind="struct">mirtk::QuinaryForEachVoxelIfBody_1Const</class>
    <class kind="struct">mirtk::QuinaryForEachVoxelIfBody_2Const</class>
    <class kind="struct">mirtk::QuinaryForEachVoxelIfBody_3Const</class>
    <class kind="struct">mirtk::QuinaryForEachVoxelIfBody_4Const</class>
    <class kind="struct">mirtk::QuinaryForEachVoxelIfBody_Const</class>
    <class kind="class">mirtk::RadialErrorFunction</class>
    <class kind="class">mirtk::RegisteredImage</class>
    <class kind="class">mirtk::RegisteredPointSet</class>
    <class kind="class">mirtk::RegisteredSurface</class>
    <class kind="class">mirtk::RegistrationEnergy</class>
    <class kind="class">mirtk::RegistrationEnergyParser</class>
    <class kind="class">mirtk::RegistrationFilter</class>
    <class kind="class">mirtk::RepeatExtrapolateImageFunction</class>
    <class kind="class">mirtk::RepulsiveForce</class>
    <class kind="class">mirtk::Resampling</class>
    <class kind="class">mirtk::ResamplingWithPadding</class>
    <class kind="class">mirtk::RigidTransformation</class>
    <class kind="class">mirtk::RobustClosestPoint</class>
    <class kind="class">mirtk::RobustPointMatch</class>
    <class kind="class">mirtk::ScalarFunction</class>
    <class kind="class">mirtk::ScalarFunctionToImage</class>
    <class kind="class">mirtk::ScalarGaussian</class>
    <class kind="class">mirtk::ScalingAndSquaring</class>
    <class kind="struct">mirtk::SenaryForEachVoxelBody</class>
    <class kind="struct">mirtk::SenaryForEachVoxelBody_1Const</class>
    <class kind="struct">mirtk::SenaryForEachVoxelBody_2Const</class>
    <class kind="struct">mirtk::SenaryForEachVoxelBody_3Const</class>
    <class kind="struct">mirtk::SenaryForEachVoxelBody_4Const</class>
    <class kind="struct">mirtk::SenaryForEachVoxelBody_5Const</class>
    <class kind="struct">mirtk::SenaryForEachVoxelBody_Const</class>
    <class kind="struct">mirtk::SenaryForEachVoxelIfBody</class>
    <class kind="struct">mirtk::SenaryForEachVoxelIfBody_1Const</class>
    <class kind="struct">mirtk::SenaryForEachVoxelIfBody_2Const</class>
    <class kind="struct">mirtk::SenaryForEachVoxelIfBody_3Const</class>
    <class kind="struct">mirtk::SenaryForEachVoxelIfBody_4Const</class>
    <class kind="struct">mirtk::SenaryForEachVoxelIfBody_5Const</class>
    <class kind="struct">mirtk::SenaryForEachVoxelIfBody_Const</class>
    <class kind="class">mirtk::SeparableConvolution</class>
    <class kind="struct">mirtk::SeptenaryForEachVoxelBody</class>
    <class kind="struct">mirtk::SeptenaryForEachVoxelBody_1Const</class>
    <class kind="struct">mirtk::SeptenaryForEachVoxelBody_2Const</class>
    <class kind="struct">mirtk::SeptenaryForEachVoxelBody_3Const</class>
    <class kind="struct">mirtk::SeptenaryForEachVoxelBody_4Const</class>
    <class kind="struct">mirtk::SeptenaryForEachVoxelBody_5Const</class>
    <class kind="struct">mirtk::SeptenaryForEachVoxelBody_6Const</class>
    <class kind="struct">mirtk::SeptenaryForEachVoxelBody_Const</class>
    <class kind="struct">mirtk::SeptenaryForEachVoxelIfBody</class>
    <class kind="struct">mirtk::SeptenaryForEachVoxelIfBody_1Const</class>
    <class kind="struct">mirtk::SeptenaryForEachVoxelIfBody_2Const</class>
    <class kind="struct">mirtk::SeptenaryForEachVoxelIfBody_3Const</class>
    <class kind="struct">mirtk::SeptenaryForEachVoxelIfBody_4Const</class>
    <class kind="struct">mirtk::SeptenaryForEachVoxelIfBody_5Const</class>
    <class kind="struct">mirtk::SeptenaryForEachVoxelIfBody_6Const</class>
    <class kind="struct">mirtk::SeptenaryForEachVoxelIfBody_Const</class>
    <class kind="class">mirtk::ShapeBasedInterpolateImageFunction</class>
    <class kind="class">mirtk::ShapePreservingSurfaceMapper</class>
    <class kind="class">mirtk::SimilarityTransformation</class>
    <class kind="class">mirtk::Sinc</class>
    <class kind="class">mirtk::SincInterpolateImageFunction</class>
    <class kind="class">mirtk::SincInterpolateImageFunction2D</class>
    <class kind="class">mirtk::SincInterpolateImageFunction3D</class>
    <class kind="class">mirtk::SincInterpolateImageFunction4D</class>
    <class kind="class">mirtk::SmoothnessConstraint</class>
    <class kind="class">mirtk::SparsityConstraint</class>
    <class kind="class">mirtk::SpectralConformalSurfaceMapper</class>
    <class kind="class">mirtk::SpectralMatch</class>
    <class kind="class">mirtk::SphericalSurfaceMapper</class>
    <class kind="struct">mirtk::split</class>
    <class kind="class">mirtk::SpringForce</class>
    <class kind="class">mirtk::SquaredErrorFunction</class>
    <class kind="class">mirtk::StoppingCriterion</class>
    <class kind="class">mirtk::StretchingForce</class>
    <class kind="class">mirtk::Stripper</class>
    <class kind="class">mirtk::SubdividedBoundarySegmentParameterizer</class>
    <class kind="class">mirtk::SumOfSquaredIntensityDifferences</class>
    <class kind="class">mirtk::SurfaceBoundary</class>
    <class kind="class">mirtk::SurfaceCollisions</class>
    <class kind="class">mirtk::SurfaceConstraint</class>
    <class kind="class">mirtk::SurfaceCurvature</class>
    <class kind="class">mirtk::SurfaceDistance</class>
    <class kind="class">mirtk::SurfaceFilter</class>
    <class kind="class">mirtk::SurfaceForce</class>
    <class kind="class">mirtk::SurfaceMapper</class>
    <class kind="class">mirtk::SurfacePatches</class>
    <class kind="class">mirtk::SurfaceRemeshing</class>
    <class kind="class">mirtk::SymmetricWeightsSurfaceMapper</class>
    <class kind="class">mirtk::task_scheduler_init</class>
    <class kind="struct">mirtk::TernaryForEachVoxelBody</class>
    <class kind="struct">mirtk::TernaryForEachVoxelBody_1Const</class>
    <class kind="struct">mirtk::TernaryForEachVoxelBody_2Const</class>
    <class kind="struct">mirtk::TernaryForEachVoxelBody_Const</class>
    <class kind="struct">mirtk::TernaryForEachVoxelIfBody</class>
    <class kind="struct">mirtk::TernaryForEachVoxelIfBody_1Const</class>
    <class kind="struct">mirtk::TernaryForEachVoxelIfBody_2Const</class>
    <class kind="struct">mirtk::TernaryForEachVoxelIfBody_Const</class>
    <class kind="class">mirtk::TetrahedralMeshMapper</class>
    <class kind="class">mirtk::TopologyPreservationConstraint</class>
    <class kind="class">mirtk::Transformation</class>
    <class kind="class">mirtk::TransformationApproximationError</class>
    <class kind="class">mirtk::TransformationConstraint</class>
    <class kind="class">mirtk::TransformationJacobian</class>
    <class kind="class">mirtk::Triangle</class>
    <class kind="struct">mirtk::UnaryForEachVoxelBody</class>
    <class kind="struct">mirtk::UnaryForEachVoxelBody_Const</class>
    <class kind="struct">mirtk::UnaryForEachVoxelIfBody</class>
    <class kind="struct">mirtk::UnaryForEachVoxelIfBody_Const</class>
    <class kind="class">mirtk::UniformBoundarySegmentParameterizer</class>
    <class kind="class">mirtk::UniformSurfaceMapper</class>
    <class kind="class">mirtk::Vector</class>
    <class kind="class">mirtk::Vector3</class>
    <class kind="struct">mirtk::Vector3D</class>
    <class kind="struct">mirtk::Vector4D</class>
    <class kind="struct">mirtk::VectorND</class>
    <class kind="class">mirtk::VelocityToDisplacementField</class>
    <class kind="class">mirtk::VelocityToDisplacementFieldEuler</class>
    <class kind="class">mirtk::VelocityToDisplacementFieldSS</class>
    <class kind="class">mirtk::Version</class>
    <class kind="class">mirtk::VolumeMapper</class>
    <class kind="class">mirtk::VolumePreservationConstraint</class>
    <class kind="struct">mirtk::VoxelCaster</class>
    <class kind="struct">mirtk::VoxelFunction</class>
    <class kind="struct">mirtk::VoxelReduction</class>
    <member kind="typedef">
      <type>GenericImage&lt; BinaryPixel &gt;</type>
      <name>BinaryImage</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa836e931b727773686e0dd5b09638c76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>List&lt; Pair&lt; int, int &gt; &gt;</type>
      <name>EdgeList</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a3be745af6f4a6f1a1cf9dbd09f526dcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BaseImage</type>
      <name>Image</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>acb3e01a589bce21ee672665c17828e37</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Array&lt; Pair&lt; string, string &gt; &gt;</type>
      <name>ParameterList</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a848997e3f86ef7bba3c6710a54443bc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericSparseMatrix&lt; float &gt;</type>
      <name>SparseFloatMatrix</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>afac9f28d70d56d6268c7805e65b732bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SparseDoubleMatrix</type>
      <name>SparseMatrix</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2d986cc22bb65aaf119b91a8abbc42d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericImage&lt; double &gt;</type>
      <name>WorldCoordsImage</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a93ad56a0441dd1800c5e8f031f5d9a82</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ByteOrder</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a5b39ad8d7c0e81873fd6404f810bfc8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ConnectedComponentsOrdering</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4293d50ea61bb4c2334d9f1b01b1cc3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CC_NoOrdering</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4293d50ea61bb4c2334d9f1b01b1cc3ca238c8e2cfa639946ea8152914e198148</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CC_LargestFirst</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4293d50ea61bb4c2334d9f1b01b1cc3ca625bd539ab5c79e1168bc9d8d0b74068</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CC_SmallestFirst</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4293d50ea61bb4c2334d9f1b01b1cc3ca52e399975a1fb07923fc33a619a7bb7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ConnectivityType</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a3fc6a19e803926d919274359271a0024</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ConstraintMeasure</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a7c4d982e02878dd19acd4ddf782c5b6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CM_Unknown</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a7c4d982e02878dd19acd4ddf782c5b6bae1e4c0214278d1be2acf08d70ef24c54</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CM_VolumePreservation</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a7c4d982e02878dd19acd4ddf782c5b6baaaadaf8a79f84aa47e581d5be9094a41</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CM_TopologyPreservation</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a7c4d982e02878dd19acd4ddf782c5b6bab37a0961aed5912093eb5d670fe328b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CM_Sparsity</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a7c4d982e02878dd19acd4ddf782c5b6ba984cf962aad2ee8917be4d1f95862827</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CM_BendingEnergy</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a7c4d982e02878dd19acd4ddf782c5b6ba2f087f8c20ec331c27f2cb09e7e13c57</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CM_LinearElasticity</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a7c4d982e02878dd19acd4ddf782c5b6ba212b6a3190b5fd535c37096d56221aa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CM_L0Norm</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a7c4d982e02878dd19acd4ddf782c5b6ba3409675d1cf7b6f2d2b7d78c4dc48ee5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CM_L1Norm</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a7c4d982e02878dd19acd4ddf782c5b6ba2508ef4bef9aab6f0cbef8232ba10b81</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CM_L2Norm</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a7c4d982e02878dd19acd4ddf782c5b6ba26b3bfb0226f338962474f52be6f62fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CM_SqLogDetJac</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a7c4d982e02878dd19acd4ddf782c5b6bae23a6c82a5d7f6ba81cd71db28c7177e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CM_NegDetJac</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a7c4d982e02878dd19acd4ddf782c5b6ba53cd8958f0dbb6560f77b6636362f452</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EnergyMeasure</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_Unknown</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956ad8c2e85b8031ebec503d622c29c3cad0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_JE</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a5b37c7b76c6f1fe00f27c760051b6cd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_CC</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a7fab3a70fe207f5de2dfc269eed2387e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_MI</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a6826d419cddb776f5d5bc6560f25f9d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_NMI</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a69e219374a8b901d816117caf8d26dc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_SSD</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a25ae839b581e5831022fc4a1d3041843</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_CR_XY</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956ac032ce5eec4a005c338437a56ab49c12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_CR_YX</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a22e7e504a2eabf5481954d4cb8c66142</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_LC</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956acaf8c638f7a11a2c5b211409907cdb25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_K</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a0c5ce666f2070d4e51820714999454b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_ML</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a04d539547505ab78def0ba71dfbd7901</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_NGF_COS</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956ab535eaa39d11004c5b8eff1d3782128a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_NCC</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a0bee37af82a07dd1f5dfecdaa417366c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_LNCC</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a8a62b9d15ac5290abeb4f7e8d4b45189</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_CoVar</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956aac29d9660ad1a9036404cb784009e9b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_PSNR</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a396494ead7e202875d22acf4cf12fb89</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_FRE</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a23b53a467e96a56483dc59e7931f6f1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_CorrespondenceDistance</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a58343a85e40a0f26087a4c42b47a9b68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_CurrentsDistance</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956aec013289af28c155e624e8e5b2df421e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_VarifoldDistance</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a3560a13866eefc591496bb9ea2cd9ea3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_BalloonForce</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a059e8f2ce0f4a443d5e095f982276425</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_ImageEdgeForce</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a771c95d9f8d3c81f893d8a65d27bcb04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_ImageEdgeDistance</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a44a91243463c756b547390919afad373</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_ImplicitSurfaceDistance</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956ac62fd9dca1ddd7c055951c1f48289140</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_MetricDistortion</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956aa41c9db937693b3ad98f7915757770a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_Stretching</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a208b2902e2c267992240b435cbb33114</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_Curvature</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a610d57585a3e09294292d69397491812</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_QuadraticCurvature</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a7f7530902f4d1893b5b337c5f5596735</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_GaussCurvature</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a5f5c31849114f4bd53ffdf43385e5d48</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_MeanCurvature</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a43c9d6b1a121a3509fd7f3e9172233d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_MaximumCurvature</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956ad112d48b7d9641724e08e9f5e0f565c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_NonSelfIntersection</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a64de3a9dde383eeff2dd17f46b9158b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_RepulsiveForce</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956aa92bb6047d8d909b153f73db37db6a1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_InflationForce</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956ad3cb6189c82f5ca877867c4065f15847</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_SpringForce</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956afd0f75012767d4c51e1060ea0fc2aff3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_NormalForce</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956ad49e8a963254d101b9da9bf8e9f07257</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_VolumePreservation</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956afd19f45028f5900d14c3e101dff406e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_TopologyPreservation</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a9f8ada9c78dab202100b6e40f1b38f3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_Sparsity</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956af633e501ea3fff4431a7974b776f99e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_BendingEnergy</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a960edd62811e521aa2573ab9dc0e43bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_LinearElasticity</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956ac804bc5ec502c01f43c4ad44ccd3bf22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_L0Norm</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a95fbb4223c543b4ed7570d8250d0d649</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_L1Norm</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a95cee12ba3871920511c7280831b259f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_L2Norm</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956ac1c54cecd35399b9e2fc481e989dbb5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_SqLogDetJac</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a648c42f00aae941fecde66dbacaf3d3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_NegDetJac</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956ab2469886cedb87b809abac7778acc793</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_MeanSquaredDisplacementError</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a70da30e250e20ff14550f34381f11ded</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_Last</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956ae511fb8b6093c860c4a3d2bb76d7bbe8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ErrorType</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a9373b137b12a741358bb8d1b8e3aac1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Event</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a713bab184e30352ae34d9d6b0605744d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AnyEvent</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a713bab184e30352ae34d9d6b0605744dae30169c76fd34e8df87b41c4e088bc87</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ModifiedEvent</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a713bab184e30352ae34d9d6b0605744da31bcffb52ea20576f01b7cc4192688ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>StatusEvent</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a713bab184e30352ae34d9d6b0605744da47876da7a63c4f80b254f1bd4d7e299b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LogEvent</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a713bab184e30352ae34d9d6b0605744da48bee63449e1b99d246e1c63f05939e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InitEvent</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a713bab184e30352ae34d9d6b0605744da4251e3f156cc4fd25e03e2c2d340e1c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>StartEvent</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a713bab184e30352ae34d9d6b0605744dabe6d89095930a04bc023eea0155b4118</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RestartEvent</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a713bab184e30352ae34d9d6b0605744dabed529d52634a6f44aeb8338e2a9ab03</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EndEvent</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a713bab184e30352ae34d9d6b0605744da0374c98bf7f6add85913f8767b5c1ca1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FinishEvent</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a713bab184e30352ae34d9d6b0605744da97c9555fe64e302e952d4c160adcd25b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IterationEvent</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a713bab184e30352ae34d9d6b0605744da6c1ec58ad41cfe94c6befa5c34250321</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IterationStartEvent</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a713bab184e30352ae34d9d6b0605744da20e8b4d32469aaba8173cedceef90488</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IterationEndEvent</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a713bab184e30352ae34d9d6b0605744da8f294ed0fbe1d95cb89e930650daa183</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegisteredEvent</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a713bab184e30352ae34d9d6b0605744da52c880aa59ea5069a8507aedbcd9ccae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnregisteredEvent</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a713bab184e30352ae34d9d6b0605744dabdc566b5956dbadc3308b036f7118fdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LineSearchStartEvent</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a713bab184e30352ae34d9d6b0605744da12c38836553620c4853706af9bfb640a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LineSearchIterationStartEvent</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a713bab184e30352ae34d9d6b0605744da17f476f00fa4924f1058caa36877ef96</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LineSearchIterationEndEvent</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a713bab184e30352ae34d9d6b0605744daa3c5b98229069435ef836ed60dfbe790</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LineSearchEndEvent</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a713bab184e30352ae34d9d6b0605744da6473aff5301a69fcfb6be97a71bf4b3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AcceptedStepEvent</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a713bab184e30352ae34d9d6b0605744da1e1fe37b0175aaab3896209a318429bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RejectedStepEvent</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a713bab184e30352ae34d9d6b0605744dac85b7eb9574f72abbd68bb61f7be024d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ExtensionMode</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2704664f6231b7a59b70d394be8a8793</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXT_Default</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2704664f6231b7a59b70d394be8a8793a17656072676b79166b9260cf978bd052</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXT_None</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2704664f6231b7a59b70d394be8a8793a6cb63c7f745772c8ea2c10f9c6e3744b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXT_Last</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2704664f6231b7a59b70d394be8a8793a48f19d9bc3d70205f9d3e0c5419a820c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXT_LastWithGz</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2704664f6231b7a59b70d394be8a8793adaa28a34886334e179319e6e829bcd59</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXT_LastWithoutGz</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2704664f6231b7a59b70d394be8a8793aa70c15e7031d9853498d6a51e4dfb2a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXT_All</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2704664f6231b7a59b70d394be8a8793ae55071ca432cfd52c0abd8b77d7c4b15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ExternalForceTerm</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a60301de4a6d4132b8ae7b75f1fe598d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ExtrapolationMode</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a70f62923b58ec4f0cf97fd1e73d0f559</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FFDIntegrationMethod</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a6a20dd72b648fc59ae96318eb035c807</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FileOption</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abe1e3b809cc152ce732823d35fb03229</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FO_Default</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abe1e3b809cc152ce732823d35fb03229aa5e9f8959c75a861be88d200ca17fb3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FO_ASCII</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abe1e3b809cc152ce732823d35fb03229af8f65dbbd2f572fa6062a84e00d2c62a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FO_Binary</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abe1e3b809cc152ce732823d35fb03229a31dbacf74e64a0a858a8d9da470bd242</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FO_NoCompress</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abe1e3b809cc152ce732823d35fb03229a7e23f6b2fea95a31ca9b288f4c8cd4a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ImageDataType</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a1ab37eede52625f9221fbb79718e4f9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>InterpolationMode</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a63e1e9bae6e2b2f880144c9f79298688</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>LineSearchStrategy</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>adc597c45dc4cd5cb52b4df315e5febfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LS_None</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>adc597c45dc4cd5cb52b4df315e5febfba3153f6d20ffabaa60a7497fd294a1173</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LS_Adaptive</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>adc597c45dc4cd5cb52b4df315e5febfba08006e745f8241a31232e2133ccdbe87</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LS_Brent</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>adc597c45dc4cd5cb52b4df315e5febfbaa2f284b0390883fac185d5b5c521454b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LS_LinMin</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>adc597c45dc4cd5cb52b4df315e5febfba20b3b0b0490830090a9aa46759d54da6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MFFDMode</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abf0e33abb6d74b96a650b4097484b1c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MFFD_Default</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abf0e33abb6d74b96a650b4097484b1c3affdb53d021957d9098561eed568c882c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MFFD_None</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abf0e33abb6d74b96a650b4097484b1c3a605657e56612de6532d9922cb2f28f52</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MFFD_Sum</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abf0e33abb6d74b96a650b4097484b1c3a04ace853cd7676e8a7a7b378ab42fd7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MFFD_Fluid</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abf0e33abb6d74b96a650b4097484b1c3a427cf25687e9ee561df5f8948be51efc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MFFD_LogSum</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abf0e33abb6d74b96a650b4097484b1c3a71fe3b8a34ac19345b56104dd1bb1d78</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>NiftiDataType</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a188687d2edf551735f5b55cd7aad05a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>NiftiIntent</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4fbc382de23730ab4287f71a78d219cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>NiftiUnits</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8c5e9d64f9b5557cd73de6393bc36780</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NIFTI_UNITS_UNKNOWN</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8c5e9d64f9b5557cd73de6393bc36780a22482900cf184014c11e96d38a294bd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NIFTI_UNITS_METER</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8c5e9d64f9b5557cd73de6393bc36780aec196df60a7273559737ceb9a33a5a6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NIFTI_UNITS_MM</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8c5e9d64f9b5557cd73de6393bc36780a16353a367d048caa6e4c5782464e3d8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NIFTI_UNITS_MICRON</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8c5e9d64f9b5557cd73de6393bc36780ab4c7463fa2e9b691138ee9ab31bae66a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NIFTI_UNITS_SEC</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8c5e9d64f9b5557cd73de6393bc36780a6e484f125f9bde8c62bdf0a19cb89946</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NIFTI_UNITS_MSEC</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8c5e9d64f9b5557cd73de6393bc36780a451e983711253505119fc222e94950f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NIFTI_UNITS_USEC</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8c5e9d64f9b5557cd73de6393bc36780a8abd74730c7dc3b74ab23fc6139892c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NIFTI_UNITS_HZ</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8c5e9d64f9b5557cd73de6393bc36780a76edb4f885813de857fbbb2918bcf167</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NIFTI_UNITS_PPM</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8c5e9d64f9b5557cd73de6393bc36780a68fb24f3948d1fa9c7e7fc156bc1ae1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NIFTI_UNITS_RADS</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8c5e9d64f9b5557cd73de6393bc36780a36dcfb375893a6bd4f292de5444bbd02</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>NiftiXForm</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a879095e0a9b483f59b131e0763a4fb6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NIFTI_XFORM_UNKNOWN</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a879095e0a9b483f59b131e0763a4fb6baa3a38011b9223aa0949da95b4f5f7992</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NIFTI_XFORM_SCANNER_ANAT</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a879095e0a9b483f59b131e0763a4fb6baf552ade5e042f9526b2fa4ae3afb830e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NIFTI_XFORM_ALIGNED_ANAT</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a879095e0a9b483f59b131e0763a4fb6ba3271060de712f87a856706081858f776</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NIFTI_XFORM_TALAIRACH</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a879095e0a9b483f59b131e0763a4fb6ba92573af157ffc92793dd01e93ccae18b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NIFTI_XFORM_MNI_152</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a879095e0a9b483f59b131e0763a4fb6ba308e4d5320a4ebb36fd465e6b97d1364</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>OptimizationMethod</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad7cfacc210f05c4919d86f26070cbe55</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OM_EulerMethod</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad7cfacc210f05c4919d86f26070cbe55a7d9179cea99b1edf59bd33f33b7aded1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OM_EulerMethodWithDamping</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad7cfacc210f05c4919d86f26070cbe55a6b9daa1060b3c0fd204d22f9a4fe258f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OM_EulerMethodWithMomentum</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad7cfacc210f05c4919d86f26070cbe55a2272e71291e0df29e7df2ea3f662c9d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>PointSetDistanceMeasure</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a11a85e3e94bf7593e22953b6e280dc6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SimilarityMeasure</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8a3fdd3fa82e85389d822fffd7294d5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIM_Unknown</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8a3fdd3fa82e85389d822fffd7294d5baac0a8609ca085ee88c5dabef367011b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIM_JE</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8a3fdd3fa82e85389d822fffd7294d5ba24f96dc61ba1a69f5e235e1c9e14996b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIM_CC</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8a3fdd3fa82e85389d822fffd7294d5badcc266d58fc5c857cb91c0a76276f298</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIM_MI</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8a3fdd3fa82e85389d822fffd7294d5babf17be98e3a496074e4365d38619b65e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIM_NMI</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8a3fdd3fa82e85389d822fffd7294d5ba0426fc5835f1dfb44e2976c868c7ae17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIM_SSD</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8a3fdd3fa82e85389d822fffd7294d5bafa5d1dd790e51cdafe421a2d6590b46f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIM_CR_XY</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8a3fdd3fa82e85389d822fffd7294d5baa2e200ad52e2b99c70a8c4522d83762b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIM_CR_YX</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8a3fdd3fa82e85389d822fffd7294d5ba51551cf7b7dc4f19be8b3e6bfe0cbc3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIM_LC</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8a3fdd3fa82e85389d822fffd7294d5babca4aa77a3bc527449a792312035b695</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIM_K</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8a3fdd3fa82e85389d822fffd7294d5ba3939356ceea7aa2e5254b92f85158e87</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIM_ML</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8a3fdd3fa82e85389d822fffd7294d5ba63ac9469bb68f898694e69437996eb16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIM_NGF_COS</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8a3fdd3fa82e85389d822fffd7294d5bacea25a05a11e585376a14851b64137e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIM_NCC</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8a3fdd3fa82e85389d822fffd7294d5ba3d41222907544918c09367f1e99a89fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIM_LNCC</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8a3fdd3fa82e85389d822fffd7294d5ba841246096d8c3b78b5977edaaa470a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIM_CoVar</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8a3fdd3fa82e85389d822fffd7294d5ba3f967b65e2df0aafdc2d9fd3248e2745</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIM_PSNR</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8a3fdd3fa82e85389d822fffd7294d5ba5aa808bb129603fb243c5a0b70748d29</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Status</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa10389572afbd3b5c5a04cbe3ca4e28a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TimeFormat</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad6bac4ec92fb51234709cb9e244b6567</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TIME_FORMAT_UNITS</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad6bac4ec92fb51234709cb9e244b6567a1a9370d479686a28ff4ceebbc399cbb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TIME_FORMAT_HHMMSS</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad6bac4ec92fb51234709cb9e244b6567a9dccc88eeaa7de99fa76e15ca4c6fe22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TIME_FORMAT_H_MIN_SEC</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad6bac4ec92fb51234709cb9e244b6567a6a2e522e81b31604a861432fb0816247</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TIME_FORMAT_MIN_SEC</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad6bac4ec92fb51234709cb9e244b6567a5d6d3451b3b4509b5b978bc5595f9393</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TransformationModel</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abefe155b619f5a5d01f683184eff1da8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TM_Unknown</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abefe155b619f5a5d01f683184eff1da8a919accd88ff004c782b743f65ea72a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TM_Rigid</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abefe155b619f5a5d01f683184eff1da8aa6cc168cc81966d81f55cc0aea7f8039</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TM_Similarity</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abefe155b619f5a5d01f683184eff1da8a1b34251171d95b2da11c3e82c59c29f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TM_Affine</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abefe155b619f5a5d01f683184eff1da8a4448b6b6999fc9e32dff3fd794ab9ee6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TM_LinearFFD</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abefe155b619f5a5d01f683184eff1da8a388c37aaf665cebae32d4348e5079db3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TM_BSplineFFD</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abefe155b619f5a5d01f683184eff1da8a1302b3ad20d4870b385aa2b8db462a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TM_BSplineStatFFD</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abefe155b619f5a5d01f683184eff1da8acb33b430e4ea17f1d5fc583394055ef4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TM_BSplineSVFFD</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abefe155b619f5a5d01f683184eff1da8af5cffd8f751490509add120600b825d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TM_BSplineTDFFD</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abefe155b619f5a5d01f683184eff1da8af5f018710349f739c75bd15bfe398526</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TM_Last</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abefe155b619f5a5d01f683184eff1da8ad1e4066b1a5fea804eeadf738438d551</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TransformationType</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad3d9459232796db3239cf948a14fc5be</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddPoints</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a057583995035808ded19ec1a0081d822</anchor>
      <arglist>(PointSet &amp;oset, vtkPointSet *iset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AffineParametersToMatrix</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a61a7c43a6dc4fc039e74acf946a42cde</anchor>
      <arglist>(double tx, double ty, double tz, double rx, double ry, double rz, double sx, double sy, double sz, double sxy, double sxz, double syz, Matrix &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>AffineParametersToMatrix</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a527c3ea068cd0f8d36022be1e4126b99</anchor>
      <arglist>(double tx, double ty, double tz, double rx, double ry, double rz, double sx, double sy, double sz, double sxy, double sxz, double syz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AffineParametersToMatrix</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ab4910fe3b0dd5b1f1ce2f9716506c531</anchor>
      <arglist>(double tx, double ty, double tz, double rx, double ry, double rz, double sx, double sy, double sz, Matrix &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>AffineParametersToMatrix</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ac894c51556e796fc8757316fd5a1f8fd</anchor>
      <arglist>(double tx, double ty, double tz, double rx, double ry, double rz, double sx, double sy, double sz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Allocate</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a444fe36930fce1e7aa3d5209491fde5d</anchor>
      <arglist>(Type *&amp;matrix, int n)</arglist>
    </member>
    <member kind="function">
      <type>Type *</type>
      <name>Allocate</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a5db0f794e8ab2e55cf064f7411f20074</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Allocate</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aaaa7105850630a7f1297234e24241629</anchor>
      <arglist>(Type **&amp;matrix, int x, int y, Type *data=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>Type **</type>
      <name>Allocate</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4a9a9cdffa619e9e5e2e1906b0e3eebc</anchor>
      <arglist>(int x, int y, Type *data=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Allocate</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2533cbc701cc33f0ca12e204a9f6f262</anchor>
      <arglist>(Type ***&amp;matrix, int x, int y, int z, Type *data=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>Type ***</type>
      <name>Allocate</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abbefffd00abe94a4beb9fa3cc7f67669</anchor>
      <arglist>(int x, int y, int z, Type *data=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Allocate</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a020b361a983bde8ae7094567e39426b9</anchor>
      <arglist>(Type ****&amp;matrix, int x, int y, int z, int t, Type *data=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>Type ****</type>
      <name>Allocate</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a9a69430929b02cca6cb08a7b4feb9550</anchor>
      <arglist>(int x, int y, int z, int t, Type *data=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>ApproximateAffineMatrix</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a69f18abb0d0bcd06823a0f8365436011</anchor>
      <arglist>(const PointSet &amp;target, const PointSet &amp;source, const Vector &amp;weight)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>ApproximateAffineMatrix</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa9ae33eb2698e35b66d5f3004d550a6a</anchor>
      <arglist>(const PointSet &amp;target, const PointSet &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Area</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8fefc6d2c455da80ff71748d502ddda3</anchor>
      <arglist>(vtkPolyData *, bool per_cell=false)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Area</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a7da84bd80c03ce1c6dc574a10e15a116</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPolyData &gt; surface, bool per_cell=false)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Area</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8d418f6685b6f38dc768d804e5628883</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPointSet &gt;)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>AreEqual</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ac9b516e4146ac5e9d7421d893e91821c</anchor>
      <arglist>(double a, double b, double tol=1e-12)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>AreEqualOrNaN</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a342e8851d2db2afde16a9541795c60a2</anchor>
      <arglist>(double a, double b, double tol=1e-12)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>AverageEdgeLength</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a3becf52bfe74dc5d01624c7202523e35</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPoints &gt;, const EdgeTable &amp;)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>AverageEdgeLength</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aba24ad92b5036a22886eedf209b46e14</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPointSet &gt;)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>AverageInterval</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a3889bb394a84e5b6e34b0818617204eb</anchor>
      <arglist>(const OrderedSet&lt; double &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>BaseName</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a5dce5535e53bf9720ab2d2730b8dd5af</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>BaseName</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a552a887fbf70e5940cacea90a3c34eda</anchor>
      <arglist>(const string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>BiInvariantMean</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a866e6872555e3c1c30aeb642405e0b78</anchor>
      <arglist>(int n, const Matrix *matrices, const double *weights=NULL, int niter=20, double tol=1e-12, const Matrix *mu0=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; T &gt;::iterator</type>
      <name>BinarySearch</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ab63c5642f59bee6073c5531b79457483</anchor>
      <arglist>(Array&lt; T &gt; &amp;values, const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; T &gt;::const_iterator</type>
      <name>BinarySearch</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a48e9aa745c1aff916d97d541bf5b1824</anchor>
      <arglist>(const Array&lt; T &gt; &amp;values, const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; T &gt;::iterator</type>
      <name>BinarySearch</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a9e1621160d2e3320fd13e74a46c10b57</anchor>
      <arglist>(Array&lt; T &gt; &amp;values, const T &amp;value, Compare comp)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; T &gt;::const_iterator</type>
      <name>BinarySearch</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a07d79828771f78e829cdce5df25f8505</anchor>
      <arglist>(const Array&lt; T &gt; &amp;values, const T &amp;value, Compare comp)</arglist>
    </member>
    <member kind="function">
      <type>EdgeList</type>
      <name>BoundaryEdges</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a9d35bc75dd8271640fc1eeac8d49abc9</anchor>
      <arglist>(vtkDataSet *)</arglist>
    </member>
    <member kind="function">
      <type>EdgeList</type>
      <name>BoundaryEdges</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a9e942c586acec5edcb3c824b7f030574</anchor>
      <arglist>(vtkDataSet *, const EdgeTable &amp;)</arglist>
    </member>
    <member kind="function">
      <type>UnorderedSet&lt; int &gt;</type>
      <name>BoundaryPoints</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a7caeb334a0d51853d04538f7aefaf5dd</anchor>
      <arglist>(vtkDataSet *, const EdgeTable *=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; Array&lt; int &gt; &gt;</type>
      <name>BoundarySegments</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a5dfb12e74446a22ae90cd3b29fe12fe4</anchor>
      <arglist>(vtkDataSet *, const EdgeTable *=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CAllocate</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ab16f1bfb30ccabca27c542ccfeba33e4</anchor>
      <arglist>(Type *&amp;matrix, int n, const Type &amp;init=Type())</arglist>
    </member>
    <member kind="function">
      <type>Type *</type>
      <name>CAllocate</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ac6535186b28da713fe2b0cffc253d933</anchor>
      <arglist>(int n, const Type *init=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CAllocate</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a0887d06cceadbd5d1e94973a1d5cac0b</anchor>
      <arglist>(Type **&amp;matrix, int x, int y, const Type &amp;init=Type())</arglist>
    </member>
    <member kind="function">
      <type>Type **</type>
      <name>CAllocate</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ab7e62ab12811205aa98dcf28d314d193</anchor>
      <arglist>(int x, int y, const Type *init=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CAllocate</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a38bc3c787775bba49bf06f2d809a73c4</anchor>
      <arglist>(Type ***&amp;matrix, int x, int y, int z, const Type &amp;init=Type())</arglist>
    </member>
    <member kind="function">
      <type>Type ***</type>
      <name>CAllocate</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>af64055b71a9ceb380ebade81cefff61c</anchor>
      <arglist>(int x, int y, int z, const Type *init=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CAllocate</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a44a8fc468e3fbb246367b250215eded0</anchor>
      <arglist>(Type ****&amp;matrix, int x, int y, int z, int t, const Type &amp;init=Type())</arglist>
    </member>
    <member kind="function">
      <type>Type ****</type>
      <name>CAllocate</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a0114583d7482ca698b43d6add30928e8</anchor>
      <arglist>(int x, int y, int z, int t, const Type *init=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>CamelCaseToPrettyParameterName</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a1e2b46f3e2573dd1bcf2e690abeace37</anchor>
      <arglist>(const string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Center</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ab23a03fda3c0c64d1315fb78a57f39b5</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPointSet &gt; pointset)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double</type>
      <name>clamp</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a5af098996a18c9e51328150e40e82c06</anchor>
      <arglist>(double f, double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ComputeArea</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a26ccf79c114481db1614c3164e2e6574</anchor>
      <arglist>(vtkCell *cell)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ComputeBSplineIndicesAndWeights</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa02e4349caa31a9f5f300c93f7029597</anchor>
      <arglist>(double x, double y, int spline_degree, int xIndex [6], int yIndex [6], TReal xWeight[6], TReal yWeight[6])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ComputeBSplineIndicesAndWeights</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8abd91ff0f3681c661a86b3a81ba2819</anchor>
      <arglist>(double x, double y, double z, int spline_degree, int xIndex [6], int yIndex [6], int zIndex [6], TReal xWeight[6], TReal yWeight[6], TReal zWeight[6])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ComputeBSplineIndicesAndWeights</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2b3ce5e1c738d8e478d3c73591d21e6b</anchor>
      <arglist>(double x, double y, double z, double t, int spline_degree, int xIndex [6], int yIndex [6], int zIndex [6], int tIndex[6], TReal xWeight[6], TReal yWeight[6], TReal zWeight[6], TReal tWeight[6])</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ComputeTangents</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>af1b99475278aee1d9af1ee098b4a08b1</anchor>
      <arglist>(const double n[3], double e1[3], double e2[3])</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ComputeTangents</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a23f6b1ad2ab81f1eae033433a1bb02ac</anchor>
      <arglist>(const double n[3], double e1[3], double e2[3], double e3[3], double e4[3])</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ComputeVolume</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a944f4d489be4f4704fdbf889d0d3a0ee</anchor>
      <arglist>(vtkCell *cell)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Contains</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>af4ebcca0911aecd89d7e073660aba9bf</anchor>
      <arglist>(const ParameterList &amp;params, string name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ConvertToCubicBSplineCoefficients</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad3d488d89f9e5f5cdedc2a9e906a76f6</anchor>
      <arglist>(GenericImage&lt; TData &gt; &amp;image, int l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ConvertToCubicBSplineCoefficients</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a41138bb88a5642feed9c5418bfdc6822</anchor>
      <arglist>(GenericImage&lt; TData &gt; &amp;image)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ConvertToSplineCoefficients</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a3d07d0d49f8905f5df86c9646e0a1869</anchor>
      <arglist>(int degree, GenericImage&lt; TData &gt; &amp;image, int k, int l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ConvertToSplineCoefficients</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4b721dbee2da950dadf38e5e361c69ee</anchor>
      <arglist>(int degree, GenericImage&lt; TData &gt; &amp;image, int l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ConvertToSplineCoefficients</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a25b83f336cbefd9e9c193cb4edb5fec3</anchor>
      <arglist>(int degree, GenericImage&lt; TData &gt; &amp;image)</arglist>
    </member>
    <member kind="function">
      <type>vtkSmartPointer&lt; vtkPolyData &gt;</type>
      <name>ConvexHull</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aeef1f9aab3adf744fb2c96d9647825d3</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPointSet &gt; pointset, int levels=3)</arglist>
    </member>
    <member kind="function">
      <type>const Version</type>
      <name>current_version</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a5e7ed177956eb71b312ab9655b740315</anchor>
      <arglist>(MIRTK_VERSION_MAJOR, MIRTK_VERSION_MINOR, MIRTK_VERSION_PATCH)</arglist>
    </member>
    <member kind="function">
      <type>vtkSmartPointer&lt; vtkPolyData &gt;</type>
      <name>DataSetSurface</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a1221e53ad67436a37250655d248ac377</anchor>
      <arglist>(vtkSmartPointer&lt; vtkDataSet &gt; dataset, bool passPtIds=false, bool passCellIds=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deallocate</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a340f01b80944efd3c7bf1560dc6bce53</anchor>
      <arglist>(Type *&amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deallocate</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad384fd8eba5b1aff5daab55295a50c52</anchor>
      <arglist>(Type **&amp;matrix, void *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deallocate</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ace7b6ac0810c3e458e8d1f1829dbaf44</anchor>
      <arglist>(Type ***&amp;matrix, void *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deallocate</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ae348749d45886c0e67e12ae0aa66e287</anchor>
      <arglist>(Type ****&amp;matrix, void *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>DecreasingOrder</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa3f1acf0d5011a206c775268e0fc71b2</anchor>
      <arglist>(const Array&lt; T &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>DeepCopyArrayUsingCaseInsensitiveName</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a56a09ad1bee1b34ede4de9c466656cc3</anchor>
      <arglist>(vtkDataSetAttributes *dst, vtkDataSetAttributes *src, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>DefaultExtension</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad029b83544de9ea1731e47618be74f2d</anchor>
      <arglist>(vtkDataSet *)</arglist>
    </member>
    <member kind="function">
      <type>InterpolationMode</type>
      <name>DefaultInterpolationMode</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a907441f24353f64363f95a43c6d41a4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Delete</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ab8ae4f7ebf28fc02b4c9c679f5f1046b</anchor>
      <arglist>(Type *&amp;p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Dimension</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a0907ff1becb9d1ac5242b9128baec9f3</anchor>
      <arglist>(vtkDataSet *)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>Directory</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>afde828b6bae62d7d96fa64a0c9384f85</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>Directory</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a10ddd69b44f9ebd42138fa9098c66539</anchor>
      <arglist>(const string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EdgeLengthNormalDistribution</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>af6f345794b1c1e193413256ae73910c0</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPoints &gt; points, const EdgeTable &amp;edgeTable, double &amp;mean, double &amp;sigma)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EdgeLengthNormalDistribution</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a816298eb5136922ce007a31304fbae3b</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPointSet &gt; pointset, double &amp;mean, double &amp;sigma)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>EdgeLengths</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a0c31629291fee46641cf6033eac39e3c</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPoints &gt;, const EdgeTable &amp;)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>EdgeLengthToTriangleArea</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a226ea2b74f7a24252020086cdb004052</anchor>
      <arglist>(double l)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>ElapsedTimeToString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a7c786b50d7c3bbe8a1750c0bea7c6c1c</anchor>
      <arglist>(double t, TimeUnit units=TIME_IN_SECONDS, TimeFormat fmt=TIME_FORMAT_HHMMSS, int w=0, char c=&apos; &apos;, bool left=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>EulerCharacteristic</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a3c5e9bd63bacffb87de90cd40240d6f5</anchor>
      <arglist>(vtkDataSet *dataset, const EdgeTable &amp;, int *npoints=nullptr, int *nedges=nullptr, int *nfaces=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>EulerCharacteristic</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a788d4f6e28dc43a5c9011c25e0903fb1</anchor>
      <arglist>(vtkDataSet *dataset, int *npoints=nullptr, int *nedges=nullptr, int *nfaces=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Exp</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ac80869fbeb8e2266abdf0ff1e0c9a17f</anchor>
      <arglist>(GenericImage&lt; VoxelType &gt; *v)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>Extension</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a54eb41b68dd9051dd04382caaf7a3b23</anchor>
      <arglist>(const char *, ExtensionMode=EXT_Default)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>Extension</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa634658817d960d03765334f0fef9899</anchor>
      <arglist>(const string &amp;, ExtensionMode=EXT_Default)</arglist>
    </member>
    <member kind="function">
      <type>ExtrapolationMode</type>
      <name>ExtrapolationWithoutPeriodicTime</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aad3002f9c5475f40284f0399b8425dc3</anchor>
      <arglist>(ExtrapolationMode m)</arglist>
    </member>
    <member kind="function">
      <type>ExtrapolationMode</type>
      <name>ExtrapolationWithPeriodicTime</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aab27ddf6f9357132e656071153a7c5a8</anchor>
      <arglist>(ExtrapolationMode m)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double</type>
      <name>fdec</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a0affe2ea3027921dfb48716a0ba85385</anchor>
      <arglist>(double f)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double</type>
      <name>fdec</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8ae314aa7c045d252d41367dc6285871</anchor>
      <arglist>(double f, double df)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>fequal</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a9aa05542de33467bfcb4b70b915f35c2</anchor>
      <arglist>(double a, double b, double tol=1e-12)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>FileName</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>acad6eb16a95cb36de69d3693c07530f1</anchor>
      <arglist>(const char *, ExtensionMode=EXT_Default)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>FileName</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a754123fcc35602fc3eb4d185d0f5a782</anchor>
      <arglist>(const string &amp;, ExtensionMode=EXT_Default)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>FilePrefix</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a0c5ab6840bb400edc1dec572dd2fc1cb</anchor>
      <arglist>(const char *, ExtensionMode=EXT_Default)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>FilePrefix</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a9e2642643ab30baac83d0be907f4af28</anchor>
      <arglist>(const string &amp;, ExtensionMode=EXT_Default)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FillBackgroundBeforeConversionToSplineCoefficients</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ae1d90493c9c56598c9624e997a98fa95</anchor>
      <arglist>(GenericImage&lt; TData &gt; &amp;image)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double</type>
      <name>finc</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a602f66e1da642f1133ea048f58f8d65d</anchor>
      <arglist>(double f)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double</type>
      <name>finc</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a5a5acd44484f22247dd531917ea97a39</anchor>
      <arglist>(double f, double df)</arglist>
    </member>
    <member kind="function">
      <type>ParameterConstIterator</type>
      <name>Find</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a88929117c1d2059cb24912aeedb6180c</anchor>
      <arglist>(const ParameterList &amp;params, string name)</arglist>
    </member>
    <member kind="function">
      <type>ParameterIterator</type>
      <name>Find</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8378f78686f59e0ec447839ab1c061e0</anchor>
      <arglist>(ParameterList &amp;params, string name)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; T &gt;::iterator</type>
      <name>Find</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a73adf73cfca324e636a2e8b69d5b68ff</anchor>
      <arglist>(Array&lt; T &gt; &amp;values, const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; T &gt;::const_iterator</type>
      <name>Find</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aada1788356c8c12fa9a7fc82f2dcda8f</anchor>
      <arglist>(const Array&lt; T &gt; &amp;values, const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>FindIndex</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aee9fe0f0b3221e32e24663fd8d2a7e1d</anchor>
      <arglist>(const Array&lt; T &gt; &amp;values, const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>FrechetMean</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a935e9621a096aca5f3218851bb4d1f39</anchor>
      <arglist>(const Matrix *matrices, const double *weights, int n, int niter=20, double tol=1e-12, const Matrix *mu0=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>FrechetMean</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa586deb3e2dc7882e301c6d2e1bb14f0</anchor>
      <arglist>(const Matrix *matrices, int n, int niter=20, double tol=1e-12, const Matrix *mu0=NULL)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FromString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>af102159dd00c4cb19fcbee422a489317</anchor>
      <arglist>(const char *str, FFDIM &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FromString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa70463d0b4c54c1b022da9290a3cf5ab</anchor>
      <arglist>(const char *str, vtkDataSetAttributes::AttributeTypes &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FromString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>afc6a5cbee19b29433109c4fa2206253a</anchor>
      <arglist>(const char *str, NiftiIntent &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FromString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa0def16073f0cd7d327a162d5d58902d</anchor>
      <arglist>(const char *str, T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FromString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ac71973ebbfdc89b88066390481a127e2</anchor>
      <arglist>(const string &amp;s, T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FromString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a261feb95431d7c42f78e0abe7e2196b2</anchor>
      <arglist>(const char *, ImageDataType &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FromString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ae6f68f2687b58f1b3512dde80a3b26a7</anchor>
      <arglist>(const char *str, bool &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FromString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a50b3edfa62de23d7885fe956838a74c5</anchor>
      <arglist>(const char *str, ConnectivityType &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FromString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a1f71d548a567b069f18a699ee30d7772</anchor>
      <arglist>(const char *str, ConnectedComponentsOrdering &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FromString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a94592e0b64baf47d46245862a6ec4109</anchor>
      <arglist>(const char *, NiftiUnits &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FromString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8ae60142c8e21261ea7a5815d9534f50</anchor>
      <arglist>(const char *str, float &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FromString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abb54455bd80ba87112f2f687b7103d3e</anchor>
      <arglist>(const char *str, double &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FromString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8fdce1dd5b7e2b3bc83f16c076b7d911</anchor>
      <arglist>(const char *str, enum ImplicitSurfaceForce::DistanceMeasureType &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FromString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a9c5f4eee79e149dce86ba7e1428365ad</anchor>
      <arglist>(const char *str, EnergyMeasure &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Genus</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a082788ab367b9b96bc174400a3804ab1</anchor>
      <arglist>(vtkDataSet *dataset, const EdgeTable &amp;, int *npoints=nullptr, int *nedges=nullptr, int *nfaces=nullptr, int *nbounds=nullptr, int *ncomps=nullptr, int *euler=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Genus</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ae1a01162c190beedbb02c0909a0c5117</anchor>
      <arglist>(vtkDataSet *dataset, int *npoints=nullptr, int *nedges=nullptr, int *nfaces=nullptr, int *nbounds=nullptr, int *ncomps=nullptr, int *euler=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>Get</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aef1a8531ca4d4ea90f491dd76173eecd</anchor>
      <arglist>(const ParameterList &amp;params, string name)</arglist>
    </member>
    <member kind="function">
      <type>vtkDataArray *</type>
      <name>GetArrayByCaseInsensitiveName</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a203239f619f484ac6089de4332b724a0</anchor>
      <arglist>(vtkDataSetAttributes *data, const char *name, int *loc=NULL)</arglist>
    </member>
    <member kind="function">
      <type>ByteOrder</type>
      <name>GetByteOrder</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aec020b56f4f93279e56465995307d82c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>GetCurrentRSS</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a3f2535432c3f960a89486e2083cb3f35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>GetDate</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad540b2ff8a92672844919e5d0e03dd20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>GetDateTime</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a0a12e3cd69ddee952cd22868ce0736ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMaxEdgeLength</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa96a24c6ac21614248fccb34fe6f523d</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPoints &gt; points, const EdgeTable &amp;edgeTable, double &amp;min, double &amp;max)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMaxEdgeLength</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ac8afc25c68c16bbdecf3db0b93f66e35</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPointSet &gt; pointset, double &amp;min, double &amp;max)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>GetPeakRSS</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a7a764c7fb6f2cddea6ea494e43c31e36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EdgeList</type>
      <name>GetPointEdges</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a11a1e0b21c0d2b6f5b7386936deb0129</anchor>
      <arglist>(const EdgeList &amp;edges, int ptId)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>GetTime</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa065e14698799a8c4d2feccdcd2065c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>GetUser</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a67088fa867fe1f2592a77d3727b79839</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API int</type>
      <name>iceil</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>adc98949c8f20db3375234f40254ffb61</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>iequal</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ac7e25215938e6a4927486e760bdc856a</anchor>
      <arglist>(char const *a, char const *b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>iequal</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abb98a7cf4dd8722b76ce002d30077a9e</anchor>
      <arglist>(const string &amp;a, char const *b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>iequal</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>acbed7cee8effb47d1f09c1fd504bee93</anchor>
      <arglist>(const char *a, const string &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>iequal</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>add58e1c2a836f33955b80bf6c06918db</anchor>
      <arglist>(const string &amp;a, const string &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API int</type>
      <name>ifloor</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a7134a61ee2e262f157ec53f38652867c</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function">
      <type>vtkSmartPointer&lt; vtkImageStencilData &gt;</type>
      <name>ImageStencil</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a857e04d270e0899b3c417785a42e145c</anchor>
      <arglist>(vtkSmartPointer&lt; vtkImageData &gt; image, vtkSmartPointer&lt; vtkPointSet &gt; pointset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ImageStencilToMask</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a444dae7aa6545c28cc3d36d993e41f63</anchor>
      <arglist>(vtkSmartPointer&lt; vtkImageStencilData &gt; stencil, vtkSmartPointer&lt; vtkImageData &gt; image)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>IncreasingOrder</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ae54f10dc2330b885000b4bf1973cc59a</anchor>
      <arglist>(const Array&lt; T &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitializeDeformableLibrary</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a40b87479224005c06a98d432da6a5256</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitializeIOLibrary</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2b30b8b61d194780b2da7749f8372dfe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitializeNumericsLibrary</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ae1b75165ab2a96a24fda838a7ce79d28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitializeRegistrationLibrary</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a861e6d0d0ee567716d130cd3b841c31d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitializeTransformationLibrary</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abff7cfcf541c1610aa0ee9c17b268dec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ParameterList &amp;</type>
      <name>Insert</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a0497f61235ef3e8891d939f3f4077a59</anchor>
      <arglist>(ParameterList &amp;params, string name, T value)</arglist>
    </member>
    <member kind="function">
      <type>ParameterList &amp;</type>
      <name>Insert</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a0326ea338b571ad83619529ca8fb6a11</anchor>
      <arglist>(ParameterList &amp;params, string name, const char *value)</arglist>
    </member>
    <member kind="function">
      <type>ParameterList &amp;</type>
      <name>Insert</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2e7228e43b39868f3b7f034debed5ee2</anchor>
      <arglist>(ParameterList &amp;params, string name, string value)</arglist>
    </member>
    <member kind="function">
      <type>ParameterList &amp;</type>
      <name>Insert</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a7abd6b19db81763d91e80812559b8e40</anchor>
      <arglist>(ParameterList &amp;params, const ParameterList &amp;other, const char *prefix=NULL)</arglist>
    </member>
    <member kind="function">
      <type>InterpolationMode</type>
      <name>InterpolationWithoutPadding</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a928fb9b6524235aa218d049ea902d03f</anchor>
      <arglist>(InterpolationMode m)</arglist>
    </member>
    <member kind="function">
      <type>InterpolationMode</type>
      <name>InterpolationWithPadding</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a172f734b34bdeaf8fcf8400501f41739</anchor>
      <arglist>(InterpolationMode m)</arglist>
    </member>
    <member kind="function">
      <type>UnorderedSet&lt; T &gt;</type>
      <name>Intersection</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8e4adc933df50cd0a6701965033c5157</anchor>
      <arglist>(const UnorderedSet&lt; T &gt; &amp;a, const UnorderedSet&lt; T &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API int</type>
      <name>iround</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ac6a1c5e34a7257f9dafbfb9522c17196</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsCategoricalArrayName</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a302d237b6436e32a24b34ce2fa3d505e</anchor>
      <arglist>(const string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsDiffeo</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>af3ed9a369f20c9e47cf30497f277b156</anchor>
      <arglist>(TransformationModel model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsDiffeo</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a6c0675b2f69426e1e9b8c9bda752c0c5</anchor>
      <arglist>(const Array&lt; TransformationModel &gt; &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>IsInf</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a1299870a7500158959c18adff438e65a</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInteger</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a9c4aa688b4a12d4542131359b2664e75</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInterpolationWithoutPadding</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a433218b4f35f4d4058153aac113fd8fa</anchor>
      <arglist>(InterpolationMode m)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInterpolationWithPadding</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a7a4684899fdbcf69ea7eddd6d921e998</anchor>
      <arglist>(InterpolationMode m)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLinear</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a969a597b7a1778acd3fbdb7a98cc161a</anchor>
      <arglist>(TransformationModel model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLinear</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2f526694bcef909e76fc6286f61a1ca7</anchor>
      <arglist>(const Array&lt; TransformationModel &gt; &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLinearFFD</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a3c4aaa2e927f035a7f2c558fa1064b55</anchor>
      <arglist>(TransformationModel model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLinearFFD</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a3f2cc10d1f6decb5cb59dc4e73172d5a</anchor>
      <arglist>(const Array&lt; TransformationModel &gt; &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>IsNaN</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a477e030d5bf8e31d87b9c32954c5ecbd</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNonLinear</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a9407a19558a5b3edfccb8980085ee1ef</anchor>
      <arglist>(const Array&lt; TransformationModel &gt; &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNumber</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a418308cf5f6e05e21955e1954462953b</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsParallelOption</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a83127aa16ba67b3a33194ca7e2d43946</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsProfilingOption</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa66aebc91a558e5e1a2aee2db859934a</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSpatioTemporal</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a39cac29b4fb36848a9241f950ddf5247</anchor>
      <arglist>(TransformationModel model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSpatioTemporal</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a7cf8173e84eab1b34ba8f85023d7890f</anchor>
      <arglist>(const Array&lt; TransformationModel &gt; &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsStandardOption</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a258483b75343d1abc125dccf9d9ea6cc</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSurfaceMesh</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a37b415c502dcb96a41fc2f1ebd606e97</anchor>
      <arglist>(vtkDataSet *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsTerminalOption</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a468fcd55e9348f0afb93285dad21f2ce</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsTetrahedralMesh</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a562a77628d7278aa8242b4fe8f899b0c</anchor>
      <arglist>(vtkDataSet *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsTransformation</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad627eb27a81f80c82c6aacf49bc3df54</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsTriangularMesh</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a1192d4b988a3dfb9125b83bd9df02957</anchor>
      <arglist>(vtkDataSet *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsValueOfType</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aeb545f40990d5ff861447cb58a7b15a7</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>IsZero</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aaa9658ee4d6add5d2d2309e0f47d904b</anchor>
      <arglist>(double a, double tol=1e-12)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Log</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>afde7af03b0c48677a614eb8b0754fb89</anchor>
      <arglist>(GenericImage&lt; VoxelType &gt; *d)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>LogEuclideanMean</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abf853d479fd73c6c3c715dd55fc9240e</anchor>
      <arglist>(int n, const Matrix *matrices, const double *weights=NULL)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double1</type>
      <name>make_double1</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a23249c963df23e594db3f7eb20fd2d00</anchor>
      <arglist>(float1 f)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2</type>
      <name>make_double2</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>acfc7a291f3dbca431511f8785344c72b</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2</type>
      <name>make_double2</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa8d68df361f99a7e978de47ed6936f9f</anchor>
      <arglist>(float2 f)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2</type>
      <name>make_double2</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a14e036b6ae589b84d8ebe55ddedc385f</anchor>
      <arglist>(int2 i)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2</type>
      <name>make_double2</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a0388247c4fbfa4097811b4dc7aa9e43a</anchor>
      <arglist>(uint2 i)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3</type>
      <name>make_double3</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ab84ac556246bf7bde353691fe94fe681</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3</type>
      <name>make_double3</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a07326d5e3fb2576252df7d9d0904de02</anchor>
      <arglist>(int3 i)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3</type>
      <name>make_double3</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>afb6238387b493c081cf2dbfd3b81c19f</anchor>
      <arglist>(uint3 i)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3</type>
      <name>make_double3</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a72150af447857b935cdb1a8146075c43</anchor>
      <arglist>(float3 f)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double4</type>
      <name>make_double4</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a720ab0491a80d53f7b65cdeadc7814cd</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double4</type>
      <name>make_double4</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a5e87d32a378b22495987cb55124e1d29</anchor>
      <arglist>(int4 i)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double4</type>
      <name>make_double4</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a0ce01ecbb5e8a453789f906e00774314</anchor>
      <arglist>(float4 f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MatrixToAffineParameters</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a0c39b4a3d7dcb0498c1ec9db5ee8133d</anchor>
      <arglist>(const Matrix &amp;m, double &amp;tx, double &amp;ty, double &amp;tz, double &amp;rx, double &amp;ry, double &amp;rz, double &amp;sx, double &amp;sy, double &amp;sz, double &amp;sxy, double &amp;sxz, double &amp;syz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MatrixToEulerAngles</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>afd28a39e6002e114736165169b92aa08</anchor>
      <arglist>(const Matrix &amp;m, double &amp;rx, double &amp;ry, double &amp;rz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MatrixToRigidParameters</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ab040cc830a9deeb34a49250bf5658c9d</anchor>
      <arglist>(const Matrix &amp;m, double &amp;tx, double &amp;ty, double &amp;tz, double &amp;rx, double &amp;ry, double &amp;rz)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>MaxEdgeLength</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ab56c59595ac365979b439daec1a6a58f</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPoints &gt; points, const EdgeTable &amp;edgeTable)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>MaxEdgeLength</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a380e9de83b15802f91e82a50c1cfed1a</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPointSet &gt; pointset)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>MaxElement</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ae5699277bfd7c579a2cf87241aec36eb</anchor>
      <arglist>(const Array&lt; T &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>MedianEdgeLength</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a7143946a7dd62f04dc3a665cdf5ee63e</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPoints &gt;, const EdgeTable &amp;)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>MedianEdgeLength</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aae5b152ed6b6a97f5a8be93adf3f93da</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPointSet &gt;)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>MedianValue</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a12d4bf0fd7fcf80d6832b9465daf180d</anchor>
      <arglist>(const Array&lt; T &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>MinEdgeLength</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2e49d9a17950178b90496c486e976e69</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPoints &gt; points, const EdgeTable &amp;edgeTable)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>MinEdgeLength</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a628471f966b1a6f11677beed3630c604</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPointSet &gt; pointset)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>MinElement</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>af0a202e0494b1922705cf7497cfc0bbf</anchor>
      <arglist>(const Array&lt; T &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>Pair&lt; T, T &gt;</type>
      <name>MinMaxElement</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a677f6cee2e2bec77791e41e27067687c</anchor>
      <arglist>(const Array&lt; T &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>BaseType *</type>
      <name>New</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ae4811d863d871e4e90ea63aaea76ebd6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>vtkSmartPointer&lt; vtkDataArray &gt;</type>
      <name>NewVtkDataArray</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ab1d52ecc2f70643ff35b1123f0dd9337</anchor>
      <arglist>(int type=VTK_VOID, int tuples=0, int comps=1, const char *name=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>vtkSmartPointer&lt; vtkDataArray &gt;</type>
      <name>NewVTKDataArray</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2526905025fe15c063ca91056902922d</anchor>
      <arglist>(int type=VTK_VOID)</arglist>
    </member>
    <member kind="function">
      <type>vtkSmartPointer&lt; vtkImageData &gt;</type>
      <name>NewVtkMask</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abb7887ee5e3a80ea25bc5ea7b1a12b63</anchor>
      <arglist>(int nx, int ny, int nz)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>NthElement</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a70c5fd6d8756cc394c3bd3a033d7f6d3</anchor>
      <arglist>(Array&lt; T &gt; &amp;values, int n)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>NthElement</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a47b1509af53777335f6047defa13ec76</anchor>
      <arglist>(Array&lt; T &gt; &amp;values, int n, Compare comp)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfBoundarySegments</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aec449ad2bfe6aa985f4d135381780387</anchor>
      <arglist>(vtkDataSet *, const EdgeTable *=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfConnectedComponents</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aad5a1a799d08b0adc42686cef132fe85</anchor>
      <arglist>(vtkDataSet *)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfEdges</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a3f5e191837542f17ee9942a00d5d4d57</anchor>
      <arglist>(vtkDataSet *, const EdgeTable *=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfEmptyCells</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>adccd8c2afa663c03e5fee6791bfabd67</anchor>
      <arglist>(vtkDataSet *)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfFaces</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ae89039ec4650ad18941c76437f591ee3</anchor>
      <arglist>(vtkDataSet *)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfPoints</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>addf551eebefb63a433e21920b58a7d74</anchor>
      <arglist>(vtkDataSet *)</arglist>
    </member>
    <member kind="function">
      <type>TransformationJacobian</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ae5720b8032c25a39e9cbbd27ffb0e7ce</anchor>
      <arglist>(TransformationJacobian &amp;a, double s)</arglist>
    </member>
    <member kind="function">
      <type>TransformationJacobian</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>af6d4cdbfd8b486671323e109ee0ef8bf</anchor>
      <arglist>(double s, TransformationJacobian &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>TransformationJacobian</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>acdbe0b251c7225d41ff880953f6cdf87</anchor>
      <arglist>(Matrix &amp;a, TransformationJacobian &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API uint3</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad9a51ee71d79cd30cd4aabffb444d405</anchor>
      <arglist>(uint3 idx, dim3 dim)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API uint3</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>af4da357c15addbcbfae91f8bcfdf65ba</anchor>
      <arglist>(dim3 dim, uint3 idx)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float1</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a5586b0b9799336709f28b4a84620a3aa</anchor>
      <arglist>(float1 v, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float2x2</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a91ec02f88a7e467cb7dd561cc2aa1a77</anchor>
      <arglist>(float2x2 m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float2x2</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a89187ce7f29a31ea041c34d825e23739</anchor>
      <arglist>(float s, float2x2 m)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float2</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>adc51af767b15ea3fe662ec8df465912a</anchor>
      <arglist>(float2x2 m, float2 p)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float2</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ac9659033e0d02514385177a1427e70a8</anchor>
      <arglist>(float2 p, float2x2 m)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float3x3</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a5d24db84af091e9e370975ec7f9f6453</anchor>
      <arglist>(float3x3 m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float3x3</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2aeecda4751920df05e468e9ffe3419a</anchor>
      <arglist>(float s, float3x3 m)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float3</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a582709c32f2d7143d94e7a772596563b</anchor>
      <arglist>(float3x3 m, float3 p)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float3</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>add27665fdade1d7cd674180ae8c72978</anchor>
      <arglist>(float3 p, float3x3 m)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float3x4</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8c6908241d957fa61b37f4ac8b1bf83d</anchor>
      <arglist>(float3x4 m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float3x4</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a82bca1c43e1d7d7dbb579698ead1955f</anchor>
      <arglist>(float s, float3x4 m)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float2</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a5b9cd578c553c18dde4253a8bf7db1fe</anchor>
      <arglist>(float3x4 m, float2 p)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float2</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a440bdaa5506dc1fb4ae4811c54a97871</anchor>
      <arglist>(float3x4 m, int2 p)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float2</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a966d19038fc21c202b3e5c07e53438a0</anchor>
      <arglist>(float3x4 m, uint2 p)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float3</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a338727c8819022e2eb8af8638f93bbb4</anchor>
      <arglist>(float3x4 m, float3 p)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float3</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ae690177f445c575099e60c8592a2f786</anchor>
      <arglist>(float3x4 m, int3 p)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float3</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a89d19b2a78103fc4288e72f431e443b9</anchor>
      <arglist>(float3x4 m, uint3 p)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float4x4</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa91cda2f0c74f7ede810dc1e348069bb</anchor>
      <arglist>(float4x4 m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float4x4</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>adc3ba0dd2f53c43dec3d08db3d98890c</anchor>
      <arglist>(float s, float4x4 m)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float2x2</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a11a4aed4b62def66f67545b062ffe08d</anchor>
      <arglist>(float2x2 m, float2x2 n)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float3x3</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2ec4060ef51c88103aba278c92652408</anchor>
      <arglist>(float3x3 m, float3x3 n)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double1</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2dac224a89e9d28ca5d1f3a894db4315</anchor>
      <arglist>(double1 v, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double1</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a5c36443254f44db994001ac69255f839</anchor>
      <arglist>(double s, double1 a)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4c3a6cd0fec6e9f81a2be0b1035a3769</anchor>
      <arglist>(double2 v, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>adc8ba7f6a5c5247a3ff218a7ebfd1cbe</anchor>
      <arglist>(double s, double2 a)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a92e0c5d31d687796f3de168bfa408171</anchor>
      <arglist>(double3 v, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a05fb2bbbdacc4244c7609e8ba03f3588</anchor>
      <arglist>(double s, double3 a)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double4</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a9d6c48ab9703018ddac71e481ed6ef3d</anchor>
      <arglist>(double4 v, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double4</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abe92405f6bfbfbc1a51256c49c0d2c5b</anchor>
      <arglist>(double s, double4 a)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double1</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a069949d1d8f2fc87573b726ed2f8f27d</anchor>
      <arglist>(double1 a, double1 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a56ae95337f69c9b2b2921b8ca6b1e078</anchor>
      <arglist>(double2 a, double2 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a699519795f6149c060cfad150b06942e</anchor>
      <arglist>(double3 a, double3 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double4</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a589827e8c7c81fa5c55c2c2abb10ba5b</anchor>
      <arglist>(double4 a, double4 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2x2</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4c5bcd70af93491b19425d7dc7041361</anchor>
      <arglist>(double2x2 m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2x2</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a6a8c994f67a27d55b3b83588b4affbbe</anchor>
      <arglist>(double s, double2x2 m)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa40b083e9dc996256f9a23e5666077a6</anchor>
      <arglist>(double2x2 m, double2 p)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>af67c0ef64f03af87966aca3d74776692</anchor>
      <arglist>(double2 p, double2x2 m)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3x3</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ab786ea1d3546b04c9947646064ad768b</anchor>
      <arglist>(double3x3 m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3x3</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aaf701e9d95c3173094a7be1c4ce8c623</anchor>
      <arglist>(double s, double3x3 m)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>af6a78f985c79ecdeb448f041c12a5835</anchor>
      <arglist>(double3x3 m, double3 p)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4adfd0d4ce9cca58dd1a136b19a45bd9</anchor>
      <arglist>(double3 p, double3x3 m)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3x4</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a04808cc5e9d507cabcfaab212c949830</anchor>
      <arglist>(double3x4 m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3x4</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a53acf66968a6d336ad052533925834b6</anchor>
      <arglist>(double s, double3x4 m)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double4x4</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ac72ab04d1495c681da32ffe0d1eba20b</anchor>
      <arglist>(double4x4 m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double4x4</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a37029870ce165f264614f2a1d82ccc86</anchor>
      <arglist>(double s, double4x4 m)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad31f20aac9bc416fa5ca5e80c3ee61f5</anchor>
      <arglist>(double3x4 m, double2 p)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a53bd875edd2162330f4d7f56eb353683</anchor>
      <arglist>(double3x4 m, int2 p)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a5605a242f3d9ee1cb6760317074e60be</anchor>
      <arglist>(double3x4 m, uint2 p)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a6fcfbd072ead53062960082225580e15</anchor>
      <arglist>(double3x4 m, double3 p)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a04f8c68904cf8460c8d0b3fe3342a7af</anchor>
      <arglist>(double3x4 m, int3 p)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa68c57a8631cb3950f78fddb2f7ad352</anchor>
      <arglist>(double3x4 m, uint3 p)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2x2</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ac0b296d274544e12c4fb0f5a898766a9</anchor>
      <arglist>(double2x2 m, double2x2 n)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3x3</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aede4450b345751e931db5e3b38474543</anchor>
      <arglist>(double3x3 m, double3x3 n)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator*=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abfa470d919472ad5e9a6bba9f157d5dc</anchor>
      <arglist>(float2x2 &amp;m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator*=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a1bbda64507091c82eb6542d4c2c5c823</anchor>
      <arglist>(float3x3 &amp;m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator*=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abd49ce208c4e4baa5c8746ccbb577841</anchor>
      <arglist>(float3x4 &amp;m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator*=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a0146634b96ce51e3537662d15cf9a059</anchor>
      <arglist>(float4x4 &amp;m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator*=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a063ee5af8b6600886d20e8f7b0da49fa</anchor>
      <arglist>(float2x2 &amp;m, float2x2 n)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator*=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a9b7a37b503f270e981d4978504b64c99</anchor>
      <arglist>(float3x3 &amp;m, float3x3 n)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator*=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ab7ae973964e2a59e558c3bc87fe46b6b</anchor>
      <arglist>(double1 &amp;a, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator*=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>af997f916b684bbd111514f5405df4110</anchor>
      <arglist>(double2 &amp;a, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator*=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4ed1a88a2767bbb854e11d76e34c3410</anchor>
      <arglist>(double3 &amp;a, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator*=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ab5b6179615d410bbd7f15873e889d7bd</anchor>
      <arglist>(double4 &amp;a, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator*=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a1e361399c0a241419e6bfeed405b9abb</anchor>
      <arglist>(double1 &amp;a, double1 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator*=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ada5d873bf0636094cf347777bd186dcc</anchor>
      <arglist>(double2 &amp;a, double2 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator*=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a3315cbfed784065f058a3354dca95221</anchor>
      <arglist>(double3 &amp;a, double3 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator*=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ae39c129e04038c77a10f1af11cba597b</anchor>
      <arglist>(double4 &amp;a, double4 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator*=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ab0dd9ee73b51c87d6fddefb55036e9a8</anchor>
      <arglist>(double2x2 &amp;m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator*=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a1f3c218d9651bc11cc35dff4445b3136</anchor>
      <arglist>(double3x3 &amp;m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator*=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a50fc67228572257eb216109ca220ff54</anchor>
      <arglist>(double3x4 &amp;m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator*=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a33a647e97692de91620cd3443daa648b</anchor>
      <arglist>(double4x4 &amp;m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator*=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa89edcfbbf593fa87eb871a8140acb1b</anchor>
      <arglist>(double2x2 &amp;m, double2x2 n)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator*=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a016b3424fbab4f82e70726f05f14475f</anchor>
      <arglist>(double3x3 &amp;m, double3x3 n)</arglist>
    </member>
    <member kind="function">
      <type>TransformationJacobian</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad59358c6058a76ef82693d6070fb7f85</anchor>
      <arglist>(TransformationJacobian &amp;a, TransformationJacobian &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float1</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa84cb99cc7780f6d7c97b8bc68a5dac3</anchor>
      <arglist>(float1 a, float1 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float2x2</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a9125533cc3982ce8ba81eaf299b559e0</anchor>
      <arglist>(float2x2 m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float3x3</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2c950457cff737e323d454c1d92f5a81</anchor>
      <arglist>(float3x3 m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float3x4</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa3471b73ca7e3c31a7f790896496c9f6</anchor>
      <arglist>(float3x4 m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float4x4</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ac2a883c66ff11447a5431251b0d9ee82</anchor>
      <arglist>(float4x4 m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float2x2</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ac14d35d145c3aeb87c195811bc6e5a61</anchor>
      <arglist>(float2x2 a, float2x2 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float3x3</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad974de4de06eb54bdebf117f111f0211</anchor>
      <arglist>(float3x3 a, float3x3 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float3x4</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>acbd20c2804ab5a2eeee178bf3e87e52a</anchor>
      <arglist>(float3x4 a, float3x4 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float4x4</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a3ea1bfd4c9361b89dc26b630d965d070</anchor>
      <arglist>(float4x4 a, float4x4 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double1</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a1e4999cfe9db0bd877fd4be6bf762764</anchor>
      <arglist>(double1 a, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double1</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a3cecb11ab568de6888181f028f06033d</anchor>
      <arglist>(double s, double1 a)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a9417655b6761e02c61b10f930e644464</anchor>
      <arglist>(double2 a, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ac66977f04eac123e6649d405b8276aad</anchor>
      <arglist>(double s, double2 a)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ae70aa461928723e516cb3ae8f5869a25</anchor>
      <arglist>(double3 a, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa3af360ede4ca49a4d2ac649c1f70f49</anchor>
      <arglist>(double s, double3 a)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double4</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8235c829da4bb96f60353bc410c8b303</anchor>
      <arglist>(double4 a, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double4</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ab8c5b28b25869452800c49a301002edf</anchor>
      <arglist>(double s, double4 a)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2x2</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8cde1621ad409204530e04e6757866a5</anchor>
      <arglist>(double2x2 m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3x3</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>af7ff3a29580bb94fd2297f2b33dd7364</anchor>
      <arglist>(double3x3 m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3x4</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a10e5737e519fe322da23d766b0cfe986</anchor>
      <arglist>(double3x4 m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double4x4</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad927f1acc21c68973b68ad1b2ba581e5</anchor>
      <arglist>(double4x4 m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double1</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a273cf5ef578dcf814714e1d08173a537</anchor>
      <arglist>(double1 a, double1 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a69440c2d219640d990de96b19adb8f24</anchor>
      <arglist>(double2 a, double2 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2b08f4f7b8d12d1d94b0d0fb0f4a1f64</anchor>
      <arglist>(double3 a, double3 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double4</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a0ec1272813a9a72931202b2f89a8ae01</anchor>
      <arglist>(double4 a, double4 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2x2</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a123b327311e6d34a11c5e978f60271ee</anchor>
      <arglist>(double2x2 a, double2x2 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3x3</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ac4a29b1e45a30a1a22fd301702780c21</anchor>
      <arglist>(double3x3 a, double3x3 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3x4</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abf46a78ba364f4591db95263fc54a4ae</anchor>
      <arglist>(double3x4 a, double3x4 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double4x4</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a1812ff7e2d1fe59f10e2555b99d95be4</anchor>
      <arglist>(double4x4 a, double4x4 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator+=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>acfd6b63a5a767ee178d22a951ee407c4</anchor>
      <arglist>(float1 &amp;a, float1 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator+=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a53a07e601ba73a5083966e39ab0c4861</anchor>
      <arglist>(float2x2 &amp;m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator+=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2985ff497d77ef2930260d7fbb23342c</anchor>
      <arglist>(float3x3 &amp;m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator+=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a65468bc9169ee9119dcf27999fad4cff</anchor>
      <arglist>(float3x4 &amp;m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator+=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a1d102b7e02011316eff699c9e359cd82</anchor>
      <arglist>(float4x4 &amp;m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator+=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad7380675f3b97ec92810f2f68d910a5c</anchor>
      <arglist>(float2x2 &amp;a, float2x2 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator+=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ac976a5e3e2c5f3c5000a48e1900a54f8</anchor>
      <arglist>(float3x3 &amp;a, float3x3 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator+=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ab0f02c12275244784289a989010a182e</anchor>
      <arglist>(float3x4 &amp;a, float3x4 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator+=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a7c17f7a67bd9cf9c34664a7daeb464f2</anchor>
      <arglist>(float4x4 &amp;a, float4x4 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator+=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a0d993fc08537674ea43bc412bca0425a</anchor>
      <arglist>(double1 &amp;a, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator+=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad20f96011e2a50700a40bd50d062c130</anchor>
      <arglist>(double2 &amp;a, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator+=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a427787f861155526f1b9dc2646b9c032</anchor>
      <arglist>(double3 &amp;a, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator+=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a6703c3e6226ecaa9cf8f7f782d9e4910</anchor>
      <arglist>(double4 &amp;a, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator+=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a948909a18453709014296f5d93045ebc</anchor>
      <arglist>(double2x2 &amp;m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator+=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a1262192fcc61b71d144511696909e038</anchor>
      <arglist>(double3x3 &amp;m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator+=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a464be621d912058ced3e28514495bf81</anchor>
      <arglist>(double3x4 &amp;m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator+=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a26586592a9b76a61b6220af0e42ce8f5</anchor>
      <arglist>(double4x4 &amp;m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator+=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a45aa4684544799db408ea362a71ca091</anchor>
      <arglist>(double1 &amp;a, double1 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator+=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a14657dac936a129c2e062f886a5afda7</anchor>
      <arglist>(double2 &amp;a, double2 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator+=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a84f5ab6ea963b3b697e45b83783b4896</anchor>
      <arglist>(double3 &amp;a, double3 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator+=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ae594f458a2b6b6bbf8719bfbb80c5831</anchor>
      <arglist>(double4 &amp;a, double4 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator+=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2a8cda3ae383613857283df0824276fe</anchor>
      <arglist>(double2x2 &amp;a, double2x2 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator+=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa5a80f2f729f7003647b9e572ba72b3b</anchor>
      <arglist>(double3x3 &amp;a, double3x3 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator+=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a20716c6699a28e9eafc56fcd236ed6b3</anchor>
      <arglist>(double3x4 &amp;a, double3x4 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator+=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8891afdf74ee182e0df4ac63fe3cb8c2</anchor>
      <arglist>(double4x4 &amp;a, double4x4 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float1</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a031e5190b53d5adbb6e1949833bf8716</anchor>
      <arglist>(float1 a, float1 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float2x2</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a853a56ac09f44bb6a49645bbbcbd835b</anchor>
      <arglist>(float2x2 m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float3x3</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8e029ad44f4947410690e43933ff50ce</anchor>
      <arglist>(float3x3 m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float3x4</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a6f86de7aee2e72ceb42f20ee2128eaf0</anchor>
      <arglist>(float3x4 m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float4x4</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a968c073268207ce9baa6d268f94d628f</anchor>
      <arglist>(float4x4 m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float2x2</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aec026fd9e0a2303856608b05b89d4a13</anchor>
      <arglist>(float2x2 a, float2x2 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float3x3</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a5fe140f67599998133d0d838961fdade</anchor>
      <arglist>(float3x3 a, float3x3 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float3x4</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a1b951020531aa8dcbd5f0d2e53ae43ca</anchor>
      <arglist>(float3x4 a, float3x4 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float4x4</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8bc9d80f8cb33351fd67c51c5067b572</anchor>
      <arglist>(float4x4 a, float4x4 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double1</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>afcfed6435f53249896a6a3bfc52ef2d3</anchor>
      <arglist>(double1 a, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double1</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa5479b7826c3f67fe921144ab0d5f7bf</anchor>
      <arglist>(double s, double1 a)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a228ebdc05ff0a6253195072b56b274d4</anchor>
      <arglist>(double2 a, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8a4d750a6251681a4a4769298a148e2b</anchor>
      <arglist>(double s, double2 a)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>af22b794fded42481f0d91ac4c2b8c3d4</anchor>
      <arglist>(double3 a, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aec83e945ba5a45a4824bab5791bec0d2</anchor>
      <arglist>(double s, double3 a)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double4</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a15e35bad9086b99752f11e540095e697</anchor>
      <arglist>(double4 a, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double4</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a522ff0dc1c23ce08185485e1cda8bd65</anchor>
      <arglist>(double s, double4 a)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2x2</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a3ad4298cb5df4509365b937198c39856</anchor>
      <arglist>(double2x2 m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3x3</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4c33c6f0036c475d66c8adbdd2372106</anchor>
      <arglist>(double3x3 m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3x4</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a90369f7f487d0347ff7989d2bb397a09</anchor>
      <arglist>(double3x4 m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double4x4</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ab4fe5a0f19ae1065741969cab4d5b582</anchor>
      <arglist>(double4x4 m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double1</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a664e2f52b3c4c1d8e36c6445e1f0a431</anchor>
      <arglist>(double1 a, double1 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aab8a1625470a143d143255b0c35ed0bc</anchor>
      <arglist>(double2 a, double2 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a6cc2a2d9948a488a9dabec7994388cc7</anchor>
      <arglist>(double3 a, double3 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double4</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a3371f788291ff183cc0c4613e1eb3476</anchor>
      <arglist>(double4 a, double4 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2x2</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a6dccd3fb1973c3f37704afe389d21b8c</anchor>
      <arglist>(double2x2 a, double2x2 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3x3</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa3abb20835e999616ce591c0ca066304</anchor>
      <arglist>(double3x3 a, double3x3 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3x4</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a0e15d6609576b139091fb7688a14453b</anchor>
      <arglist>(double3x4 a, double3x4 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double4x4</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a38b03a0d3cff27ee3e9825c217acff8c</anchor>
      <arglist>(double4x4 a, double4x4 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator-=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a7354273b05c47f57a5e6cbf4aa0e2633</anchor>
      <arglist>(float1 &amp;a, float1 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator-=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8dc39dd6905d9d288d5063fc90b257e5</anchor>
      <arglist>(float2x2 &amp;m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator-=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ae8142998b6da63f31d23f1a8c233b5c4</anchor>
      <arglist>(float3x3 &amp;m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator-=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a69c11cda8da05bd768b7ae289af3ba6b</anchor>
      <arglist>(float3x4 &amp;m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator-=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>acca4feb722ecff182448b2f37d845613</anchor>
      <arglist>(float4x4 &amp;m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator-=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a54652f105b1c8f3a6ce7cc3237b54e7e</anchor>
      <arglist>(float2x2 &amp;a, float2x2 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator-=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a9ead9469c8cd4cf7a5a7f9034d69cbbc</anchor>
      <arglist>(float3x3 &amp;a, float3x3 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator-=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>af6c03baca6a2dd11e6725c27a9c820a4</anchor>
      <arglist>(float3x4 &amp;a, float3x4 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator-=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa849c3a64bc996c9bdfaa7a1dda73c39</anchor>
      <arglist>(float4x4 &amp;a, float4x4 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator-=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a126ea0f70b92e63ba06ce1ded7f9f587</anchor>
      <arglist>(double1 &amp;a, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator-=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a5ce1ce1abca99264b852ec9388f00dd7</anchor>
      <arglist>(double2 &amp;a, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator-=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a60e08723c2e447050c7feb294105a7fa</anchor>
      <arglist>(double3 &amp;a, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator-=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a17b09301d83728817d5b6750a27b3f53</anchor>
      <arglist>(double4 &amp;a, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator-=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ab3bcc5fec56d1667f155cd8d01c0d43e</anchor>
      <arglist>(double2x2 &amp;m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator-=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a131c5bd73be5205f91b771cea74c4ef1</anchor>
      <arglist>(double3x3 &amp;m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator-=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ac3129b0c29f83a91f30b781b425412c2</anchor>
      <arglist>(double3x4 &amp;m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator-=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ac89d2d304ce5a5fb948b39105bc4e884</anchor>
      <arglist>(double4x4 &amp;m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator-=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a1cf0df89a5980c9e6af1029d4b055dc1</anchor>
      <arglist>(double1 &amp;a, double1 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator-=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a5e77952c1d4d8b8d2f080d8899ed0485</anchor>
      <arglist>(double2 &amp;a, double2 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator-=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ae98a43023c76af5464e193a9cb9e316a</anchor>
      <arglist>(double3 &amp;a, double3 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator-=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a6eaac4324860141761b4462c1c8ce6c1</anchor>
      <arglist>(double4 &amp;a, double4 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator-=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad1cfab0b16b7d56768f5065e9c73ebe4</anchor>
      <arglist>(double2x2 &amp;a, double2x2 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator-=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e54d0c1ac0d6ce64438471c1ab091b9</anchor>
      <arglist>(double3x3 &amp;a, double3x3 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator-=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a7395d1318c435dc509c46f7b1876b2ae</anchor>
      <arglist>(double3x4 &amp;a, double3x4 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator-=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a06571be6399e95464fc570a87beed884</anchor>
      <arglist>(double4x4 &amp;a, double4x4 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float2x2</type>
      <name>operator/</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a572947dee4b451ad79b2a756fec25493</anchor>
      <arglist>(float2x2 m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float3x3</type>
      <name>operator/</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>afd378a544bccae60eddc288de2a6a005</anchor>
      <arglist>(float3x3 m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float3x4</type>
      <name>operator/</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a434868ea7a5d8a96bdf599b95adfbc80</anchor>
      <arglist>(float3x4 m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float4x4</type>
      <name>operator/</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>acaba091aca32174476abbb2d2e72ecb0</anchor>
      <arglist>(float4x4 m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double1</type>
      <name>operator/</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a12df71e6f67f94d648d25c30e5a2699a</anchor>
      <arglist>(double1 v, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2</type>
      <name>operator/</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ac6ca1b3c4f53d7370cf0a57e02227868</anchor>
      <arglist>(double2 v, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3</type>
      <name>operator/</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a494309dea8ebf0a32741c4b013d78797</anchor>
      <arglist>(double3 v, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double4</type>
      <name>operator/</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aee50b0725516c36f7c68acc6a38b0f4d</anchor>
      <arglist>(double4 v, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2x2</type>
      <name>operator/</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aebbab2e67e29fefd3ad2187ddfb7c91d</anchor>
      <arglist>(double2x2 m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3x3</type>
      <name>operator/</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ac10591c8a4153b1c07690999124b28fd</anchor>
      <arglist>(double3x3 m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3x4</type>
      <name>operator/</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ae0a4bb4864ef46caf59c108a8ad2d66b</anchor>
      <arglist>(double3x4 m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double4x4</type>
      <name>operator/</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ac71ca0a6b5469ab0e7e3d1800a7959af</anchor>
      <arglist>(double4x4 m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double1</type>
      <name>operator/</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ab5f70fd8d4020ea251eea53d950163d3</anchor>
      <arglist>(double1 a, double1 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2</type>
      <name>operator/</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a82ffde76e1fb8178830abbbda9ca8b4d</anchor>
      <arglist>(double2 a, double2 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3</type>
      <name>operator/</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a50f6955e652b521f2cebe389d3928605</anchor>
      <arglist>(double3 a, double3 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double4</type>
      <name>operator/</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a495096d5ee4779aea396dafa21527627</anchor>
      <arglist>(double4 a, double4 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator/=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2f25249e9c110bad9ae641bf209869c9</anchor>
      <arglist>(float2x2 &amp;m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator/=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ade01dfb237de6bbe4c4fcfb4a7bbf66a</anchor>
      <arglist>(float3x3 &amp;m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator/=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ac7f977f59e1e7c8cd3443869764bca5a</anchor>
      <arglist>(float3x4 &amp;m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator/=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aaf25b45d16bbc5c6bd98d3c72081166e</anchor>
      <arglist>(float4x4 &amp;m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator/=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a672308dae7c40839657f2bad691fa827</anchor>
      <arglist>(double1 &amp;a, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator/=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a5a2ce34e8904a292ff666521cdc611d5</anchor>
      <arglist>(double2 &amp;a, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator/=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad3501722e8554a5c6659d5c0bf6800b0</anchor>
      <arglist>(double3 &amp;a, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator/=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>addb0032734deb7aaccef4b96a663ca90</anchor>
      <arglist>(double4 &amp;a, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator/=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ac61d58872907f791c099e2ea58bf11fe</anchor>
      <arglist>(double2x2 &amp;m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator/=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a653b6ec9a892eeffbde26a18c42709ee</anchor>
      <arglist>(double3x3 &amp;m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator/=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a40666be4f2e174236809b4435dd793ab</anchor>
      <arglist>(double3x4 &amp;m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator/=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a5bc6bab86bc7a3206d2aa35e770aa559</anchor>
      <arglist>(double4x4 &amp;m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator/=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4acae4c1317986fb907eef074d5aea8d</anchor>
      <arglist>(double1 &amp;a, double1 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator/=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a116d33f65c83e2ffcef40da33f8afbca</anchor>
      <arglist>(double2 &amp;a, double2 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator/=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a48d00a69240f05f8cf96ad3824132ebc</anchor>
      <arglist>(double3 &amp;a, double3 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator/=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad8f68ffd869281ee228d44c30ce3d0f9</anchor>
      <arglist>(double4 &amp;a, double4 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a47fee83b6d3cbd8de5f0ac4988304175</anchor>
      <arglist>(const float1 &amp;a, const float1 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ae696f26e661e90948159befd3d7e1b2b</anchor>
      <arglist>(const float2 &amp;a, const float2 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad2b3e6d3abae6665c8963adb5964c580</anchor>
      <arglist>(const float3 &amp;a, const float3 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a847bce079c61b834bace560d6658d19b</anchor>
      <arglist>(const float4 &amp;a, const float4 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a812945fd0a7a1d2a6afd7ebbd18c18ea</anchor>
      <arglist>(const double1 &amp;a, const double1 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a5df92bd3d91267d052d19f15db99cf91</anchor>
      <arglist>(const double2 &amp;a, const double2 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a5236e092e773cfa267d7a64cd97c0599</anchor>
      <arglist>(const double3 &amp;a, const double3 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abd3400f8576c5fc2b161a2d820fb143a</anchor>
      <arglist>(const double4 &amp;a, const double4 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4f8207a2a409cfe53d86457093c93127</anchor>
      <arglist>(uint3 p, uint3 dim)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a0487ac14ad05bc7ce5cd804b62889818</anchor>
      <arglist>(ostream &amp;os, const Version &amp;version)</arglist>
    </member>
    <member kind="function">
      <type>Cofstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a0f410fe5359eaf1536d1abccd30adeaf</anchor>
      <arglist>(Cofstream &amp;, const PointSet &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a5d97d8f47035c17ab3c1632267a74982</anchor>
      <arglist>(ostream &amp;, const PointSet &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a06fffd5410c3393089d10bc6fae415af</anchor>
      <arglist>(ostream &amp;, const Point &amp;)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>operator==</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a962a07ea52047c30967aa4c82c3b6d69</anchor>
      <arglist>(const float1 &amp;a, const float1 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>operator==</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a63f495e8aaada4d131e8d12eff995197</anchor>
      <arglist>(const float2 &amp;a, const float2 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>operator==</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a023912c6888eb9f19dcd0b38e2a49f96</anchor>
      <arglist>(const float3 &amp;a, const float3 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>operator==</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad76924acae8f814858841fd7bcf70d0a</anchor>
      <arglist>(const float4 &amp;a, const float4 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>operator==</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a0b729d84df2fe9e5e3c14fda56abb689</anchor>
      <arglist>(const float3x3 &amp;a, const float3x3 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>operator==</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a47459965f628487cc9c67f3f8f7a005a</anchor>
      <arglist>(const float3x4 &amp;a, const float3x4 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>operator==</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a916ee2e16821f70420f413b7751ff170</anchor>
      <arglist>(const float4x4 &amp;a, const float4x4 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>operator==</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4969b7f675a0999fd82a0a9c75d884e0</anchor>
      <arglist>(const double1 &amp;a, const double1 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>operator==</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a71fc754155e94d85c7c3bdca6939b160</anchor>
      <arglist>(const double2 &amp;a, const double2 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>operator==</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a550051ceb9682838f0d5f5fb422d2552</anchor>
      <arglist>(const double3 &amp;a, const double3 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>operator==</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a6adfe2ccfcab8f891222194cb937ec99</anchor>
      <arglist>(const double4 &amp;a, const double4 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>operator==</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>af63c7200f3b648de722ecb194078815c</anchor>
      <arglist>(const double3x3 &amp;a, const double3x3 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>operator==</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a910e2b84b891f963a756a674b6c3f8c7</anchor>
      <arglist>(const double3x4 &amp;a, const double3x4 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>operator==</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aadb1b64174734de00b402dcefda19e61</anchor>
      <arglist>(const double4x4 &amp;a, const double4x4 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>operator==</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8d18b4fb80c6b2988beef363a29e63c0</anchor>
      <arglist>(uint3 p, unsigned int s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a75f09416fece2f8999a99003575b8306</anchor>
      <arglist>(uint3 p, uint3 dim)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8043e4ba7490435bc46fc13f47809af3</anchor>
      <arglist>(uint3 p, uint3 dim)</arglist>
    </member>
    <member kind="function">
      <type>istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ae1ef7db01952900c47c099bf158438fa</anchor>
      <arglist>(istream &amp;is, Version &amp;version)</arglist>
    </member>
    <member kind="function">
      <type>Cifstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa7bcc203a5c964229f6703c193928898</anchor>
      <arglist>(Cifstream &amp;, PointSet &amp;)</arglist>
    </member>
    <member kind="function">
      <type>istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>af51505d0c6dfeccec9c44951f9002c0e</anchor>
      <arglist>(istream &amp;, PointSet &amp;)</arglist>
    </member>
    <member kind="function">
      <type>istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a65474ca2e38fc9e7bac3bd39c821b4e3</anchor>
      <arglist>(istream &amp;, Point &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ImageAttributes</type>
      <name>OrthogonalFieldOfView</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e4d011dc08555557bf0535fec68aac7</anchor>
      <arglist>(const ImageAttributes &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>OrthoNormalize3x3</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a89dc9c312aee179a2d3cb9cab1b0bde6</anchor>
      <arglist>(Matrix &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ImageAttributes</type>
      <name>OverallFieldOfView</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad63b2d03abcabeddfc4c8ab012014f21</anchor>
      <arglist>(const Array&lt; ImageAttributes &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PAllocate</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ae76d4774007602e1c1bb0d83fca8c43b</anchor>
      <arglist>(Type **&amp;matrix, int n)</arglist>
    </member>
    <member kind="function">
      <type>Type **</type>
      <name>PAllocate</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a21a9d9f2bfde87510d0ccbfa001fe3fc</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parallel_for</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a5ffa80fbf46f62998a59bd831f7382c0</anchor>
      <arglist>(const Range &amp;range, const Body &amp;body)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parallel_reduce</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a53834c5ddaa25856ea0d4a178081b805</anchor>
      <arglist>(const Range &amp;range, Body &amp;body)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>ParameterUnits</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a30bc600402e900361291177d7ce8d468</anchor>
      <arglist>(const string &amp;str, string *name=nullptr, const char *dflt=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ParseParallelOption</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a76edbbaa2c6fa7f7b0716a446a2572e0</anchor>
      <arglist>(int &amp;, int &amp;, char *[])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ParseProfilingOption</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a7875d134721c650543a5bfc4c0ff0676</anchor>
      <arglist>(int &amp;, int &amp;, char *[])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ParseStandardOption</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a21ba414a9fc465c5bd7ec2bd36dbd6f7</anchor>
      <arglist>(int &amp;, int &amp;, char *[])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ParseTerminalOption</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ab5b711ad1b9a83ec9501bc78f51d83e1</anchor>
      <arglist>(int &amp;, int &amp;, char *[])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PartialSort</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>adc085a1d59c399f5dd352447c50bdad4</anchor>
      <arglist>(Array&lt; T &gt; &amp;values, int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PartialSort</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a03b2e9a44150cda7dd3334a92c2d7b3f</anchor>
      <arglist>(Array&lt; T &gt; &amp;values, int n, Compare comp)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; T &gt;</type>
      <name>Permutation</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aeaf0ef6537b3f69c5bae95908e8d23c2</anchor>
      <arglist>(const Array&lt; int &gt; &amp;order, const Array&lt; T &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>ImageAttributes</type>
      <name>PointSetDomain</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a37af8004808794a459f309f860610dca</anchor>
      <arglist>(vtkPointSet *data, double dx=-1, double dy=-1, double dz=-1)</arglist>
    </member>
    <member kind="function">
      <type>ImageAttributes</type>
      <name>PointSetDomain</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a10aa76747878010b6605e4ddd869d47d</anchor>
      <arglist>(vtkPointSet *data, const Vector3D&lt; double &gt; &amp;ds)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>PolyDataAttributeType</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad14868e8fc00ab49efc7b1207aa2ac2a</anchor>
      <arglist>(const char *type)</arglist>
    </member>
    <member kind="function">
      <type>ImageAttributes</type>
      <name>PolyDataDomain</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aef3529cb8c9a09fd2a03bcbf170f8963</anchor>
      <arglist>(vtkPolyData *data, double dx=-1, double dy=-1, double dz=-1)</arglist>
    </member>
    <member kind="function">
      <type>ImageAttributes</type>
      <name>PolyDataDomain</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad81776acd700b3a6f53ce57419a13fb5</anchor>
      <arglist>(vtkPolyData *data, const Vector3D&lt; double &gt; &amp;ds)</arglist>
    </member>
    <member kind="function">
      <type>EdgeList</type>
      <name>PopPointEdges</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ae97413cc855b1adb5ec06231b74e80ae</anchor>
      <arglist>(EdgeList &amp;edges, int ptId)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>Print</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a66395af8732c54e96b68b21ea0298e3f</anchor>
      <arglist>(std::ostream &amp;os, T value)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>Print</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>af59ddd6d0071801c20d75f551f32a6f6</anchor>
      <arglist>(std::ostream &amp;os, T value, Args... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintElapsedTime</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a196596aa3c6898153ee8901559f6919b</anchor>
      <arglist>(const char *, double, TimeUnit=TIME_IN_SECONDS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintParallelOptions</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a0a6c06dea6739a7f344afb2beff9a13c</anchor>
      <arglist>(ostream &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintParameter</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a5188a73a101337fd037500040b200d02</anchor>
      <arglist>(std::ostream &amp;os, const char *name, const char *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintParameter</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a94114bb20b678bc2b885eb235872a55d</anchor>
      <arglist>(std::ostream &amp;os, const char *name, const string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintParameter</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a82e93939089e379a8176ef60c78efc11</anchor>
      <arglist>(std::ostream &amp;os, const string &amp;name, const string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintParameter</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ae9ee90828d3912b0763a1fe81a81fff1</anchor>
      <arglist>(std::ostream &amp;os, const char *name, const TValue &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintParameter</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ab54428e352ae3175dc409102e7ade520</anchor>
      <arglist>(std::ostream &amp;os, const string &amp;name, const TValue &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintProfilingOptions</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a1aff63964a6c029f0c81aa0d207f0974</anchor>
      <arglist>(ostream &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintRevision</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4f7eab7e4f493279935933575d24193f</anchor>
      <arglist>(ostream &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintTerminalOptions</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2663db2e4b4b8fc1c428c67dc054cfd2</anchor>
      <arglist>(ostream &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintVersion</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a6d787adaa5310c536b1e8c9fab78f2fd</anchor>
      <arglist>(ostream &amp;, const char *=NULL)</arglist>
    </member>
    <member kind="function">
      <type>vtkSmartPointer&lt; vtkPolyData &gt;</type>
      <name>ReadDFS</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a34529e300bb715aea91708f8395cd86f</anchor>
      <arglist>(const char *fname)</arglist>
    </member>
    <member kind="function">
      <type>MIRTK_Common_DEPRECATED float</type>
      <name>ReadFloat</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2146911048c3f3a3a4557c207aaf7c1c</anchor>
      <arglist>(std::ifstream &amp;)</arglist>
    </member>
    <member kind="function">
      <type>MIRTK_Common_DEPRECATED int</type>
      <name>ReadInt</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a920b7101f39575c3ff2847653a5e8a02</anchor>
      <arglist>(std::ifstream &amp;)</arglist>
    </member>
    <member kind="function">
      <type>vtkSmartPointer&lt; vtkPolyData &gt;</type>
      <name>ReadOFF</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aebd7c2b6e983a7b917a10a155cb7e6d1</anchor>
      <arglist>(const char *fname)</arglist>
    </member>
    <member kind="function">
      <type>vtkSmartPointer&lt; vtkPointSet &gt;</type>
      <name>ReadPointSet</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>acc9ea89c7f27b884bc0d3cae7f81e446</anchor>
      <arglist>(const char *fname, bool exit_on_failure=true)</arglist>
    </member>
    <member kind="function">
      <type>vtkSmartPointer&lt; vtkPointSet &gt;</type>
      <name>ReadPointSet</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a287ab0b41c92baabc2a0c952017fcbfe</anchor>
      <arglist>(const char *fname, FileOption &amp;fopt, bool exit_on_failure=true)</arglist>
    </member>
    <member kind="function">
      <type>vtkSmartPointer&lt; vtkPointSet &gt;</type>
      <name>ReadPointSetTable</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a94540b9ad4295709395e004d9338d05a</anchor>
      <arglist>(const char *fname, char sep=&apos;,&apos;, vtkPointSet *pointset=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>vtkSmartPointer&lt; vtkPolyData &gt;</type>
      <name>ReadPolyData</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a5c139637ea5e634c33108e853a0041f3</anchor>
      <arglist>(const char *fname, bool exit_on_failure=true)</arglist>
    </member>
    <member kind="function">
      <type>vtkSmartPointer&lt; vtkPolyData &gt;</type>
      <name>ReadPolyData</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a0afceeb00d8add42b363864ae2f6dbbe</anchor>
      <arglist>(const char *fname, FileOption &amp;fopt, bool exit_on_failure=true)</arglist>
    </member>
    <member kind="function">
      <type>MIRTK_Common_DEPRECATED char *</type>
      <name>ReadString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2759a684a1a61bf3b01fcfa9f9246f4a</anchor>
      <arglist>(std::ifstream &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ParameterList &amp;</type>
      <name>Remove</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a6af6d95d362f929571bdce367328a202</anchor>
      <arglist>(ParameterList &amp;params, string name)</arglist>
    </member>
    <member kind="function">
      <type>Type **</type>
      <name>Reshape</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ac0d7493995fa0f75404ff0d3b1d42b3c</anchor>
      <arglist>(Type **matrix, int x, int y)</arglist>
    </member>
    <member kind="function">
      <type>Type ***</type>
      <name>Reshape</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa2531dc6fe0dcb21f9b2018d778839d5</anchor>
      <arglist>(Type ***matrix, int x, int y, int z)</arglist>
    </member>
    <member kind="function">
      <type>Type ****</type>
      <name>Reshape</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad26a55368d0754b77ddad8787e0d605d</anchor>
      <arglist>(Type ****matrix, int x, int y, int z, int t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RigidParametersToMatrix</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ab9a06b144c3a4ff5a49f7f316795ac2f</anchor>
      <arglist>(double tx, double ty, double tz, double cosrx, double cosry, double cosrz, double sinrx, double sinry, double sinrz, Matrix &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RigidParametersToMatrix</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a434f6bafc3c5148758499b34eac4ddc3</anchor>
      <arglist>(double tx, double ty, double tz, double rx, double ry, double rz, Matrix &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>RigidParametersToMatrix</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ae393ccdbd536654eb1fc7eb4b4e4aa7f</anchor>
      <arglist>(double tx, double ty, double tz, double rx, double ry, double rz)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RobustAverageEdgeLength</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a487c38856a974b9a1e983a299dd5a76a</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPoints &gt;, const EdgeTable &amp;)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RobustAverageEdgeLength</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a309f77901b9625dc8bab5d308a47f1f8</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPointSet &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Scale</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a1248afdc2b9f73ce63743e260b468ca3</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPointSet &gt; pointset, double)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API int</type>
      <name>sgn</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a977b136b77025de104c9be43a892f11c</anchor>
      <arglist>(T val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Sort</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ae91d0db32a3724f13de23742e6495b99</anchor>
      <arglist>(Array&lt; T &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Sort</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a90375bd14868572daaab70f64d01571f</anchor>
      <arglist>(Array&lt; T &gt; &amp;values, Compare comp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SplinePoles</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a1b7736592749c8006bcf8c3559ea16c1</anchor>
      <arglist>(int degree, TReal pole[2], int &amp;npoles)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; string &gt;</type>
      <name>Split</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a72a29f1be83ef4c39aa4f6c1d0282ed9</anchor>
      <arglist>(string s, const char *d, int n=0, bool e=false, bool q=false)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; string &gt;</type>
      <name>Split</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ab6ef768b0b697d393e89ec9bb24d922e</anchor>
      <arglist>(string s, char d, int n=0, bool e=false, bool q=false)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>SquaredEdgeLengths</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>afaed25f41fb1fa65b6574cebaed5d8a6</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPoints &gt;, const EdgeTable &amp;)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SShapedMembershipFunction</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ae477fe1d3bc6b936e3c7e8b05f5610dc</anchor>
      <arglist>(double x, double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>StableSort</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a0265ba93deafc11a2670b813d09e2442</anchor>
      <arglist>(Array&lt; T &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>StableSort</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4c06bbab909a7a477f8558446396ff35</anchor>
      <arglist>(Array&lt; T &gt; &amp;values, Compare comp)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>StandardUnits</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a1c1bbe8a71f363d9e0ebcbf7730f02a0</anchor>
      <arglist>(const string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap16</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a18f98fc38b69c5b9ed9104b5ef0962c6</anchor>
      <arglist>(char *, char *, long)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap32</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a84e633cac25a39c260171da9e0917529</anchor>
      <arglist>(char *, char *, long)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap64</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa0fb63ae45d231c65f33517cad3ca431</anchor>
      <arglist>(char *, char *, long)</arglist>
    </member>
    <member kind="function">
      <type>vtkSmartPointer&lt; vtkPointSet &gt;</type>
      <name>Tetrahedralize</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa4f16d48790ab6bd74760e10525750e3</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPointSet &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Throw</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a241c1c16b9c29a4d3918ae0a004a2122</anchor>
      <arglist>(ErrorType err, const char *func, Args... args)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_HOST_API float *</type>
      <name>to_float</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a60cb4735856211dcd1e037fafdf87c8d</anchor>
      <arglist>(const VoxelType *in, unsigned int N)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>ToLower</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a87f61f1c7635c3dffa9cad4dac044afd</anchor>
      <arglist>(const string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>ToPrettyString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abcc3c7200f40bbeac5d85a41ee3f1ecf</anchor>
      <arglist>(const EnergyMeasure &amp;value, int w=0, char c=&apos; &apos;, bool left=true)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>ToString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a5191ba246fb66467b44165f0db976a1b</anchor>
      <arglist>(const ErrorType &amp;value, int w, char c, bool left)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>ToString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a93c6d528094b7074c374be054e70453a</anchor>
      <arglist>(const FFDIM &amp;m, int w, char c, bool left)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>ToString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>af0477d5a19826730faf22175f0433936</anchor>
      <arglist>(const NiftiIntent &amp;value, int w, char c, bool left)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>ToString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a45ffbd60bf9a07915617e698a4f58f18</anchor>
      <arglist>(const ImageDataType &amp;, int, char, bool)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>ToString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aba768bbdd245a56077af92a44f4001df</anchor>
      <arglist>(const ConnectivityType &amp;value, int w, char c, bool left)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>ToString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a50246560c94808274cccf88b021f54af</anchor>
      <arglist>(const vtkDataSetAttributes::AttributeTypes &amp;type, int w, char c, bool left)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>ToString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4d97cad298f92459f261c0c7274008ee</anchor>
      <arglist>(const ConnectedComponentsOrdering &amp;value, int w, char c, bool left)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>ToString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4dca134e706fd4ab94b486a50ff8028b</anchor>
      <arglist>(const EnergyMeasure &amp;value, int w, char c, bool left)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>ToString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ae5a9a9dfe82491cde86c63084ee881a1</anchor>
      <arglist>(const T &amp;value, int w=0, char c=&apos; &apos;, bool left=false)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>ToString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2247f1a33b381e651ec3baae85135332</anchor>
      <arglist>(const enum ImplicitSurfaceForce::DistanceMeasureType &amp;value, int w, char c, bool left)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>ToString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ade5fbff8a0e40d4606e8a775701158e2</anchor>
      <arglist>(const bool &amp;value, int w, char c, bool left)</arglist>
    </member>
    <member kind="function">
      <type>TransformationType</type>
      <name>ToTransformationType</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a92d819781ad357edc21d0d7f748be07f</anchor>
      <arglist>(TransformationModel model, const ImageAttributes &amp;domain)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>ToUpper</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a54c4f2f7893b13d502402ac882de24bf</anchor>
      <arglist>(const string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Transform</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a6881a8268497d16dc4587acfa03269da</anchor>
      <arglist>(Array&lt; T &gt; &amp;values, UnaryOperation op)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Transform</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aec89e82828071c6a7688eae046c26f38</anchor>
      <arglist>(const Matrix &amp;m, double x, double y, double z, double &amp;mx, double &amp;my, double &amp;mz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Transform</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a1d1a1e2531a290acd91959eedbd67019</anchor>
      <arglist>(const Matrix &amp;m, double &amp;x, double &amp;y, double &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>Transform</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>adb35a8a351e4d3ce95ab394e385fd2f7</anchor>
      <arglist>(const Matrix &amp;m, const Point &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TransformVector</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8500fae428c0ec13204bd706fc0f80a1</anchor>
      <arglist>(const Matrix &amp;m, double x, double y, double z, double &amp;mx, double &amp;my, double &amp;mz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TransformVector</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a24952a85179b5cdffe472f74a037eac3</anchor>
      <arglist>(const Matrix &amp;m, double &amp;x, double &amp;y, double &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TransformVector</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ac2064f4f21e7f8f5d52c1136d3673d34</anchor>
      <arglist>(const Matrix &amp;m, Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>TransformVector</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a120c0837cb6da2171bc79de455333f14</anchor>
      <arglist>(const Matrix &amp;m, const Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float2x2</type>
      <name>transpose</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a14455b6da338affbababf8230fa1d4b1</anchor>
      <arglist>(float2x2 m)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float3x3</type>
      <name>transpose</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a707a8774f1cba6dbd7ec37c22d9d44c9</anchor>
      <arglist>(float3x3 m)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2x2</type>
      <name>transpose</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>afd9ebb9f5b36cb61706ded4470db2f3c</anchor>
      <arglist>(double2x2 m)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3x3</type>
      <name>transpose</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a6cb34ecce58567bacc7ef545491d7946</anchor>
      <arglist>(double3x3 m)</arglist>
    </member>
    <member kind="function">
      <type>vtkSmartPointer&lt; vtkPolyData &gt;</type>
      <name>Triangulate</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad626caa9a36f667ce1d5f483cbe0dc85</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPolyData &gt;)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>Trim</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a70e1235d11016312ba6f3bc300604cbe</anchor>
      <arglist>(const string &amp;str, const string &amp;what=&quot; \\)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>TrimAll</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4d85a700216736fd8edd17d34032009d</anchor>
      <arglist>(const string &amp;str, const string &amp;what=&quot; \\)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>umfpack_status_message</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a285456e1bfe2f727c80d6911a245d4f2</anchor>
      <arglist>(int status)</arglist>
    </member>
    <member kind="function">
      <type>UnorderedSet&lt; T &gt;</type>
      <name>Union</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4ff96839f9cb978bc0b14539cf33d871</anchor>
      <arglist>(const UnorderedSet&lt; T &gt; &amp;a, const UnorderedSet&lt; T &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>ValueUnits</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a23b9cd90368114825ae1185816fd4f3a</anchor>
      <arglist>(const string &amp;str, string *value=nullptr, const char *dflt=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Volume</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a331c63091af7e4287105a9538a19ea84</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPolyData &gt;)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>VtkAttributeTypeString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aed657649ee57ecb0b5fd64427289664c</anchor>
      <arglist>(int type)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>VtkDataTypeString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a461fad62fd8362b89c56f9071060664b</anchor>
      <arglist>(int type)</arglist>
    </member>
    <member kind="function">
      <type>vtkSmartPointer&lt; vtkPointSet &gt;</type>
      <name>WorldToImage</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a666593bc5949656392f643cc771564a5</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPointSet &gt; pointset, const BaseImage *image)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteDFS</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a39ba202b1b1ce50f71f19d3ade362f9d</anchor>
      <arglist>(const char *fname, vtkPolyData *polydata)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteOFF</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a3d82e37006c85569ae49d189fa3555ef</anchor>
      <arglist>(const char *fname, vtkPolyData *polydata)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WritePointSet</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a94e2515af3ca0577e2160a68e4d04f40</anchor>
      <arglist>(const char *fname, vtkPointSet *pointset, FileOption fopt=FO_Default)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WritePointSetTable</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a6601de64f6bd63cc6f2fa9ff07158fb1</anchor>
      <arglist>(const char *fname, vtkPointSet *pointset, char sep=&apos;,&apos;, bool ids=true, bool coords=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WritePolyData</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a474199e45642bb1c2283ab56401ac75f</anchor>
      <arglist>(const char *fname, vtkPolyData *polydata, FileOption fopt=FO_Default)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteTetGenNode</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a98456534dae116faf8a1503f7721ef4a</anchor>
      <arglist>(const char *fname, vtkPointSet *pointset)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteTetGenPoly</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ac5f6658a9d17e086f31fb28d7d0125f6</anchor>
      <arglist>(const char *fname, vtkPolyData *polydata, const PointSet *holes=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteTetGenSMesh</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ab2bf11a6c1b810c56ceec13e78d4b272</anchor>
      <arglist>(const char *fname, vtkPolyData *polydata, const PointSet *holes=nullptr)</arglist>
    </member>
    <member kind="variable">
      <type>MIRTK_Common_EXPORT int</type>
      <name>debug</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a1771fe552e4a895a4d85a42c97441721</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MIRTK_Common_EXPORT int</type>
      <name>debug_gpu</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a17842c5f8741ad3a2ffdbdcea572e554</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MIRTK_Common_EXPORT int</type>
      <name>debug_time</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ada549b8fe6a788dfc8ad983246de9717</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MIRTK_Common_EXPORT TimeUnit</type>
      <name>debug_time_unit</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aae901e83985f63654ce7b0c90e3d5074</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MIRTK_Common_EXPORT const double</type>
      <name>deg_per_rad</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a0829a4d38308a6383a71dae277b5c5e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MIRTK_Common_EXPORT const double</type>
      <name>inf</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a5e39e49c5de2355f7b0afef20108c856</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MIRTK_Common_EXPORT const double</type>
      <name>nan</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad67aa108f819714fc2d48b86868b9be4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MIRTK_Common_EXPORT const char</type>
      <name>PATHSEP</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>af68b83d106ed73ac3022db9c8c9835da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MIRTK_Common_EXPORT const double</type>
      <name>pi</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa4b3ed6d6ebf9d722ae8cbee5e979fc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MIRTK_Common_EXPORT const double</type>
      <name>pi_half</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a94a9fed98a0ec41983b63504e18e8355</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MIRTK_Common_EXPORT const double</type>
      <name>rad_per_deg</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>af3ef3c4b524daba6546cd2ea099e9e90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MIRTK_Common_EXPORT bool</type>
      <name>stdout_color</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a5a5219e54621b7738dce7b6a49c83277</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MIRTK_Common_EXPORT int</type>
      <name>tbb_debug</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a1ef7f100d2ad3be2b601ded8fa411da3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MIRTK_Common_EXPORT const double</type>
      <name>two_pi</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2a91896395a4854c16cc4709a1aaf53e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MIRTK_Common_EXPORT bool</type>
      <name>use_gpu</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a881a670c75ba926f2c24bc5c8ccda087</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MIRTK_Common_EXPORT int</type>
      <name>verbose</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a9d9ce87e30803a287566da1ef2d7fced</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MIRTK_Common_EXPORT Version</type>
      <name>version</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad7a64a7d807a64b27549aa3080412ee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MIRTK_Common_EXPORT const char *</type>
      <name>xreset</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a1e5f80bec25ca41262db48d5c1207c15</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mirtk::ConvolutionFunction</name>
    <filename>namespacemirtk_1_1ConvolutionFunction.html</filename>
    <class kind="struct">mirtk::ConvolutionFunction::ConvolveExtendedForegroundInT</class>
    <class kind="struct">mirtk::ConvolutionFunction::ConvolveExtendedForegroundInX</class>
    <class kind="struct">mirtk::ConvolutionFunction::ConvolveExtendedForegroundInY</class>
    <class kind="struct">mirtk::ConvolutionFunction::ConvolveExtendedForegroundInZ</class>
    <class kind="struct">mirtk::ConvolutionFunction::ConvolveForegroundInT</class>
    <class kind="struct">mirtk::ConvolutionFunction::ConvolveForegroundInX</class>
    <class kind="struct">mirtk::ConvolutionFunction::ConvolveForegroundInY</class>
    <class kind="struct">mirtk::ConvolutionFunction::ConvolveForegroundInZ</class>
    <class kind="struct">mirtk::ConvolutionFunction::ConvolveInT</class>
    <class kind="struct">mirtk::ConvolutionFunction::ConvolveInX</class>
    <class kind="struct">mirtk::ConvolutionFunction::ConvolveInY</class>
    <class kind="struct">mirtk::ConvolutionFunction::ConvolveInZ</class>
    <class kind="struct">mirtk::ConvolutionFunction::ConvolveMirroredForegroundInT</class>
    <class kind="struct">mirtk::ConvolutionFunction::ConvolveMirroredForegroundInX</class>
    <class kind="struct">mirtk::ConvolutionFunction::ConvolveMirroredForegroundInY</class>
    <class kind="struct">mirtk::ConvolutionFunction::ConvolveMirroredForegroundInZ</class>
    <class kind="struct">mirtk::ConvolutionFunction::ConvolveTruncatedForegroundInT</class>
    <class kind="struct">mirtk::ConvolutionFunction::ConvolveTruncatedForegroundInX</class>
    <class kind="struct">mirtk::ConvolutionFunction::ConvolveTruncatedForegroundInY</class>
    <class kind="struct">mirtk::ConvolutionFunction::ConvolveTruncatedForegroundInZ</class>
    <class kind="struct">mirtk::ConvolutionFunction::ConvolveWeightedImageInT</class>
    <class kind="struct">mirtk::ConvolutionFunction::ConvolveWeightedImageInX</class>
    <class kind="struct">mirtk::ConvolutionFunction::ConvolveWeightedImageInY</class>
    <class kind="struct">mirtk::ConvolutionFunction::ConvolveWeightedImageInZ</class>
    <class kind="struct">mirtk::ConvolutionFunction::DownsampleConvolvedExtendedForegroundInX</class>
    <class kind="struct">mirtk::ConvolutionFunction::DownsampleConvolvedExtendedForegroundInY</class>
    <class kind="struct">mirtk::ConvolutionFunction::DownsampleConvolvedExtendedForegroundInZ</class>
    <class kind="struct">mirtk::ConvolutionFunction::DownsampleConvolvedMirroredForegroundInX</class>
    <class kind="struct">mirtk::ConvolutionFunction::DownsampleConvolvedMirroredForegroundInY</class>
    <class kind="struct">mirtk::ConvolutionFunction::DownsampleConvolvedMirroredForegroundInZ</class>
    <class kind="class">mirtk::ConvolutionFunction::ExtendedForegroundConvolution1D</class>
    <class kind="struct">mirtk::ConvolutionFunction::MirrorBoundaryCondition</class>
    <class kind="class">mirtk::ConvolutionFunction::MirroredForegroundConvolution1D</class>
    <class kind="class">mirtk::ConvolutionFunction::TruncatedForegroundConvolution1D</class>
    <member kind="function">
      <type>double</type>
      <name>Epsilon</name>
      <anchorfile>namespacemirtk_1_1ConvolutionFunction.html</anchorfile>
      <anchor>a0fe319eee96788bd39e028c3cef8ece7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mirtk::ForEachVoxelDomain</name>
    <filename>namespacemirtk_1_1ForEachVoxelDomain.html</filename>
    <class kind="struct">mirtk::ForEachVoxelDomain::AboveBackgroundLevel</class>
    <class kind="struct">mirtk::ForEachVoxelDomain::Background</class>
    <class kind="struct">mirtk::ForEachVoxelDomain::BackgroundValue</class>
    <class kind="struct">mirtk::ForEachVoxelDomain::Foreground</class>
    <class kind="struct">mirtk::ForEachVoxelDomain::InMask</class>
    <class kind="struct">mirtk::ForEachVoxelDomain::InSpatialMask</class>
    <class kind="struct">mirtk::ForEachVoxelDomain::NotBackgroundValue</class>
  </compound>
  <compound kind="namespace">
    <name>mirtk::InterpolationDomain</name>
    <filename>namespacemirtk_1_1InterpolationDomain.html</filename>
    <class kind="struct">mirtk::InterpolationDomain::Foreground</class>
    <class kind="struct">mirtk::InterpolationDomain::Inside</class>
  </compound>
  <compound kind="namespace">
    <name>mirtk::MultipleVoxelTransformation</name>
    <filename>namespacemirtk_1_1MultipleVoxelTransformation.html</filename>
    <class kind="class">mirtk::MultipleVoxelTransformation::Base</class>
    <class kind="struct">mirtk::MultipleVoxelTransformation::BaseTransform</class>
    <class kind="struct">mirtk::MultipleVoxelTransformation::Interpolate</class>
    <class kind="struct">mirtk::MultipleVoxelTransformation::InterpolateRescale</class>
    <class kind="struct">mirtk::MultipleVoxelTransformation::InterpolateRescaleAsDouble</class>
    <class kind="struct">mirtk::MultipleVoxelTransformation::TransformData</class>
  </compound>
  <compound kind="namespace">
    <name>mirtk::NaryVoxelFunction</name>
    <filename>namespacemirtk_1_1NaryVoxelFunction.html</filename>
    <class kind="struct">mirtk::NaryVoxelFunction::EvaluateBCHFormula</class>
    <class kind="struct">mirtk::NaryVoxelFunction::EvaluateBCHUpdate</class>
    <class kind="struct">mirtk::NaryVoxelFunction::ExpVelocityFieldEuler2D</class>
    <class kind="struct">mirtk::NaryVoxelFunction::ExpVelocityFieldEuler3D</class>
    <class kind="struct">mirtk::NaryVoxelFunction::NOP</class>
    <class kind="struct">mirtk::NaryVoxelFunction::VoxelWiseWeightedSum</class>
  </compound>
  <compound kind="namespace">
    <name>mirtk::TernaryVoxelFunction</name>
    <filename>namespacemirtk_1_1TernaryVoxelFunction.html</filename>
    <class kind="struct">mirtk::TernaryVoxelFunction::Diff</class>
    <class kind="struct">mirtk::TernaryVoxelFunction::Div</class>
    <class kind="struct">mirtk::TernaryVoxelFunction::Mul</class>
    <class kind="struct">mirtk::TernaryVoxelFunction::Sum</class>
    <member kind="typedef">
      <type>Mul</type>
      <name>Prod</name>
      <anchorfile>namespacemirtk_1_1TernaryVoxelFunction.html</anchorfile>
      <anchor>a134e93e3f07bbb6a8cc6f11938a3f2ec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mirtk::UnaryVoxelFunction</name>
    <filename>namespacemirtk_1_1UnaryVoxelFunction.html</filename>
    <class kind="struct">mirtk::UnaryVoxelFunction::CastToGreyValue</class>
    <class kind="struct">mirtk::UnaryVoxelFunction::Clamp</class>
    <class kind="struct">mirtk::UnaryVoxelFunction::GetMax</class>
    <class kind="struct">mirtk::UnaryVoxelFunction::GetMin</class>
    <class kind="struct">mirtk::UnaryVoxelFunction::GetMinMax</class>
    <class kind="struct">mirtk::UnaryVoxelFunction::InterpolateImage</class>
    <class kind="struct">mirtk::UnaryVoxelFunction::InterpolateMultiChannelImage</class>
    <class kind="struct">mirtk::UnaryVoxelFunction::InterpolateScalarImage</class>
    <class kind="struct">mirtk::UnaryVoxelFunction::LowerThreshold</class>
    <class kind="struct">mirtk::UnaryVoxelFunction::Sqrt</class>
    <class kind="struct">mirtk::UnaryVoxelFunction::UpperThreshold</class>
  </compound>
</tagfile>
